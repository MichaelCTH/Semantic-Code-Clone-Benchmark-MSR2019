$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22281661_48606020_5_33
22281661_51916013_2_17
Title: What is the fastest way to find the GCD of two numbers? 
----------------------------------------

int main () {
    int N1;
    int N2;
    cin << N1;
    cin << N2;
    int small = N1;
    int big = N2;
    if (N1 > N2) {
        N1 = small;
        N2 = big;
    }
    int P = 1;
    int i = 1;
    while (i <= N1) {
        if (N1 % i == 0 && N2 % i == 0) {
            N1 = N1 / i;
            N2 = N2 / i;
            P = P * i;
            i = 1;
        }
        i = i + 1;
    }
    cout << "GCD= " << P;
    return 0;
}
----------------------------------------

int main () {
    int a, b, a1, b1;
    printf ("Enter two numbers:");
    scanf ("%d%d", & a, & b);
    a1 = a;
    b1 = b;
    while (a != b) {
        if (a > b)
            a = a - b;
        else
            b = b - a;
    }
    printf ("GCD of %d and %d is %d\n", a1, b1, a);
    printf ("LCM of %d and %d is %d", a1, b1, (a1 * b1 / a));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22285742_22286059_13_35
22285742_22286095_11_28
Title: Average of # Sequence 
----------------------------------------

int average (void) {
    double n, sum = 0;
    int count = 0;
    printf ("Enter sequence: ");
    while (scanf ("%lf", &n) == 1) {
        sum += n;
        count++;
    }
    int c;
    while ((c = getchar ()) != EOF && c != '\n')
        ;
    if (sum > 0) {
        printf ("average is %.2f\n", sum / count);
        return 1;
    }
    else
        return 0;
}
----------------------------------------

double average () {
    double n, sum = 0;
    int count = 0;
    printf ("Enter sequence: ");
    getchar ();
    while (scanf ("%lf", &n)) {
        sum += n;
        count++;
    }
    if (n > 0) {
        printf ("    average: %.2f\n", sum / (double) count);
        return 1;
    }
    else
        return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22290174_22290239_1_11
22290174_22290258_1_14
Title: Connect four game board in C 
----------------------------------------

void display_board (int board [] [BOARD_SIZE_VERT]) {
    int i, j;
    for (i = 0; i < BOARD_SIZE_HORIZ - 1; i++) {
        printf ("+---+---+---+---+---+---+---+");
        printf ("\n");
        for (j = 0; j < BOARD_SIZE_VERT + 2; j++)
            printf ("|   ");
        printf ("\n");
    }
    printf ("+---+---+---+---+---+---+---+\n");
}
----------------------------------------

void display_board (int board [] [BOARD_SIZE_HORIZ]) {
    int row, col;
    for (row = 0; row < BOARD_SIZE_VERT; row++) {
        printf ("+---+---+---+---+---+---+---+");
        printf ("\n");
        for (col = 0; col < BOARD_SIZE_HORIZ; col++) {
            printf ("|   ");
        }
        printf ("|\n");
    }
    printf ("+---+---+---+---+---+---+---+");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22290174_22290239_1_11
22290174_22290293_1_19
Title: Connect four game board in C 
----------------------------------------

void display_board (int board [] [BOARD_SIZE_VERT]) {
    int i, j;
    for (i = 0; i < BOARD_SIZE_HORIZ - 1; i++) {
        printf ("+---+---+---+---+---+---+---+");
        printf ("\n");
        for (j = 0; j < BOARD_SIZE_VERT + 2; j++)
            printf ("|   ");
        printf ("\n");
    }
    printf ("+---+---+---+---+---+---+---+\n");
}
----------------------------------------

void display_board (int board [] [BOARD_SIZE_VERT]) {
    int i, j;
    for (i = 0; i < BOARD_SIZE_VERT; i++) {
        printf ("+");
        for (j = 0; j < BOARD_SIZE_HORIZ; j++)
            printf ("---+");
        printf ("\n");
        printf ("|");
        for (j = 0; j < BOARD_SIZE_HORIZ; j++)
            printf ("   |");
        printf ("\n");
    }
    printf ("+");
    for (j = 0; j < BOARD_SIZE_HORIZ; j++)
        printf ("---+");
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22290174_22290258_1_14
22290174_22290293_1_19
Title: Connect four game board in C 
----------------------------------------

void display_board (int board [] [BOARD_SIZE_HORIZ]) {
    int row, col;
    for (row = 0; row < BOARD_SIZE_VERT; row++) {
        printf ("+---+---+---+---+---+---+---+");
        printf ("\n");
        for (col = 0; col < BOARD_SIZE_HORIZ; col++) {
            printf ("|   ");
        }
        printf ("|\n");
    }
    printf ("+---+---+---+---+---+---+---+");
}
----------------------------------------

void display_board (int board [] [BOARD_SIZE_VERT]) {
    int i, j;
    for (i = 0; i < BOARD_SIZE_VERT; i++) {
        printf ("+");
        for (j = 0; j < BOARD_SIZE_HORIZ; j++)
            printf ("---+");
        printf ("\n");
        printf ("|");
        for (j = 0; j < BOARD_SIZE_HORIZ; j++)
            printf ("   |");
        printf ("\n");
    }
    printf ("+");
    for (j = 0; j < BOARD_SIZE_HORIZ; j++)
        printf ("---+");
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22291688_22292981_5_21
22291688_22293590_2_73
Title: 3-digit integer number program won't execute 
----------------------------------------

int main () {
    int n, a, b, c, abc, bca, cab, x, y, z, p, q, r;
    scanf ("%d", & n);
    c = n % 10;
    b = (n / 10) % 10;
    a = n / 100;
    abc = a * 100 + b * 10 + c;
    bca = b * 100 + c * 10 + a;
    cab = c * 100 + a * 10 + b;
    x = abc % 11;
    y = bca % 11;
    z = cab % 11;
    p = x + y;
    q = y + z;
    r = z + x;
    return 0;
}
----------------------------------------

int main () {
    int OrigNumber;
    int a, b, c;
    int abc, bca, cab;
    int x, y, z;
    int xplusy, yplusz, xplusz;
    printf (" A program to read ONLY one integer number.\n Input must be one 3 digit number from 100 to 999 : ");
    scanf ("%d", & OrigNumber);
    if (OrigNumber > 999 || OrigNumber < 100) {
        printf ("Invalid number. Quiting program. This is error handling. Important while learning programming.");
        return 0;
    }
    c = OrigNumber % 10;
    b = ((OrigNumber) % 100) / 10;
    a = (OrigNumber) / 100;
    printf ("\n Three numbers say A,B, C : %d, %d , %d ", a, b, c);
    abc = a * 100 + 10 * b + c;
    bca = 100 * b + 10 * c + a;
    cab = c * 100 + a * 10 + b;
    printf ("\n Three numbers say ABC, BCA, CAB : %d, %d , %d ", abc, bca, cab);
    x = abc % 11;
    y = bca % 11;
    z = cab % 11;
    printf ("\n Three numbers say X, Y, Z : %d, %d , %d ", x, y, z);
    xplusy = x + y;
    yplusz = y + z;
    xplusz = x + z;
    printf ("\n Three numbers  X+Y, Y+Z, X+Z : %d, %d , %d ", xplusy, yplusz, xplusz);
    if ((xplusy % 2) == 1) {
        if (xplusy + 11 < 20)
            xplusy += 11;
        else
            xplusy -= 11;
    }
    if ((yplusz % 2) == 1) {
        if (yplusz + 11 < 20)
            yplusz += 11;
        else
            yplusz -= 11;
    }
    if ((xplusz % 2) == 1) {
        if (xplusz + 11 < 20)
            xplusz += 11;
        else
            xplusz -= 11;
    }
    xplusy /= 2;
    yplusz /= 2;
    xplusz /= 2;
    printf ("\n Now print out all the resulting digits :  %d, %d , %d \n", xplusy, yplusz, xplusz);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22303571_22304399_23_57
22303571_37476382_5_41
Title: Reading/Parsing Command-Line Arguments in C; binary and decimal conversions 
----------------------------------------

int main (int argc, char *argv []) {
    char *OPTION;
    char *SIZE;
    char *NUMBER;
    unsigned long long number = 0;
    if (argc < 4) {
        printf ("Missing input arguments\n");
        return -1;
    }
    OPTION = argv[1];
    SIZE = argv[2];
    NUMBER = argv[3];
    if (strcmp (OPTION, "-b") == 0) {
        number = str_to_ull (NUMBER, 2);
        print_ull (number, 10);
        return 0;
    }
    if (strcmp (OPTION, "-d") == 0) {
        number = str_to_ull (NUMBER, 10);
        print_ull (number, 2);
        return 0;
    }
    printf ("Invalid input arguments\n");
    return -1;
}
----------------------------------------

int main (int argc, char **argv) {
    int i;
    int t;
    int c = 0;
    char b [2] = "";
    char bin [64] = "";
    if (argc != 2) {
        printf ("\nSYNTAX: binary <decimal>\n");
        return 1;
    }
    i = atoi (argv[1]);
    t = 0;
    while (i != 0) {
        t = i % 2;
        i = i / 2;
        itoa (t, b, 10);
        strcat (bin, b);
        c++;
    }
    strrev (bin);
    printf ("\nBinary: %d(10) = %s(2)\n", i, bin);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22319129_22319394_1_54
22319129_22320134_4_37
Title: "If and if else statements working but not else" 
----------------------------------------

int main (void) {
    int numbertobeguessed = 52;
    int guess;
    int attempt = 6;
    int playAgain = 1;
    printf ("Guess the integer that I am thinking of between 1 and 100\n");
    printf ("I will tell you if you guess too high or too low\n");
    printf ("You have 6 attempts\n");
    printf ("What is your first guess?\n");
    if (playAgain == 1) {
        while (attempt > 0) {
            scanf_s ("%d", & guess);
            if (guess < 0 || guess > 100) {
                printf ("Invalid input: Please enter an integer between 1 and 100:\n");
            }
            else {
                if (guess < numbertobeguessed) {
                    attempt--;
                    printf ("Sorry! Too low! You have %d more tries:\n", attempt);
                }
                else if (guess > numbertobeguessed) {
                    attempt--;
                    printf ("Sorry! Too high! You have %d more tries:\n", attempt);
                }
                else {
                    printf ("Correct! You win!\n");
                    attempt = 0;
                }
            }
        }
        printf ("Enter '1' to play again or anything else to terminate\n");
        scanf_s ("%d", & playAgain);
        attempt = 6;
    }
    else {
        printf ("Thanks for playing!\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int guess;
    int attempts = 6;
    char play = 'y';
    do {
        while (attempts) {
            printf ("\nEnter you guess: ");
            scanf ("%d", & guess);
            attempts--;
            if (guess > 0 && guess < 100) {
                if (guess > 52)
                    printf ("\nThat's not it. Try something lower than that.");
                else if (guess < 52)
                    printf ("\nThat's not the number. Try something higher than that.");
                else if (guess == 52) {
                    printf ("\nYou got it!. You won the game.");
                    attempts = 0;
                }
            }
            else
                printf ("\nNumber enter is not in range!");
        }
        printf ("\nDo you want to play again? (y/n): ");
        scanf ("%c", & play);
    }
    while (play == 'y' || play == 'Y');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2232706_11770860_3_12
2232706_2232732_1_20
Title: Swapping objects using pointers 
----------------------------------------

void swap (void *a, void *b, int size) {
    ucp c = (ucp) a;
    ucp d = (ucp) b;
    for (int i = 0; i < size; i++) {
        int temp = (int) c[i];
        c[i] = (int) d[i];
        d[i] = temp;
    }
}
----------------------------------------

void swap (void *a, void *b, size_t size) {
    enum {threshold = 100};
    if (size <= threshold) {
        char temp [threshold];
        memcpy (temp, b, size);
        memcpy (b, a, size);
        memcpy (a, temp, size);
    }
    else {
        void *temp = malloc (size);
        assert (temp);
        memcpy (temp, b, size);
        memcpy (b, a, size);
        memcpy (a, temp, size);
        free (temp);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22347891_22348483_5_18
22347891_22350191_23_37
Title: extracting number from string of number in specific order 
----------------------------------------

int main () {
    char *arr [2] = {"(98, 23, 56)", "(218, 176, 164)"};
    int i, j, digit [2] [3];
    for (i = 0; i < 2; i++)
        sscanf (arr[i], "(%d, %d, %d", &digit[i][0], &digit[i][1], &digit[i][2]);
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 3; j++) {
            printf ("array of values:%d ", digit [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    const char *arr [2] = {"(98, 23, 56)", "(218, 176, 164)"};
    int i;
    int digit [2] [3];
    for (i = 0; i < 2; i++) {
        if (ParseRGB (digit[i], arr[i])) {
            printf ("Error in '%s'\n", arr [i]);
        }
        else {
            printf ("array of values:(%d, %d, %d)\n", digit [i] [0], digit [i] [1], digit [i] [2]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22355624_22356219_11_34
22355624_22357108_21_45
Title: "C function too long for the norm" 
----------------------------------------

void ft_print_comb (void) {
    char digit [6];
    digit[0] = '0' - 1;
    digit[3] = ',';
    digit[4] = ' ';
    digit[5] = '\0';
    while (digit[0]++ < '7') {
        digit[1] = digit[0];
        while (digit[1]++ < '8') {
            digit[2] = digit[1];
            while (digit[2]++ < '9') {
                if (digit[0] == '7' && digit[1] == '8' && digit[2] == '9') {
                    digit[3] = '\n';
                }
                ft_puts (digit);
            }
        }
    }
}
----------------------------------------

void ft_print_comb (void) {
    int a;
    int b;
    int c;
    a = 0;
    while (a < 8)
        ;
    {
        b = a + 1;
        while (b < 9) {
            c = b + 1;
            while (c <= 9) {
                ft_print_inner (a, b, c);
                c ++ :
            }
            b++;
        }
        a++;
    }
    ft_putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22355624_22357654_3_14
22355624_22359087_7_19
Title: "C function too long for the norm" 
----------------------------------------

void ft_helper (int a, int b, int c) {
    if (a == 10)
        return;
    else if (b == 10)
        ft_helper (a +1, a +2, a +3);
    else if (c == 10)
        ft_helper (a, b +1, b +2);
    else {
        write (1, ", ", 2);
        write (1, "0123456789" + a, 1);
        write (1, "0123456789" + b, 1);
        write (1, "0123456789" + c, 1);
        ft_helper (a, b, c + 1);
    }
}
----------------------------------------

void ft_helper (int a, int b, int c) {
    if (a == 10)
        return;
    else if (b == 10)
        ft_helper (a +1, a +2, a +3);
    else if (c == 10)
        ft_helper (a, b +1, b +2);
    else {
        ft_putchar (',');
        ft_putchar (' ');
        ft_putchar ("0123456789" [a]);
        ft_putchar ("0123456789" [b]);
        ft_putchar ("0123456789" [c]);
        ft_helper (a, b, c + 1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22364758_22365792_62_102
22364758_22385433_16_46
Title: finding smallest two nodes in a linked list in c 
----------------------------------------

void find_two_min (node **List, node **lmin1, node **lmin2) {
    node *temp = *List;
    node *min1;
    node *min2;
    node *var1 = *List;
    node *second = (*List)->next;
    if (var1->freq > second->freq) {
        min1 = var1;
        min2 = second;
    }
    else {
        min2 = var1;
        min1 = second;
    }
    while (temp->next) {
        printf ("\nCurrent freq is %d", temp -> freq);
        printf ("\nNext freq is %d", (temp -> next) -> freq);
        if ((temp->next)->freq < min2->freq) {
            printf ("\n  Condition one is fulfilled");
            min1 = min2;
            min2 = temp->next;
        }
        else if ((temp->next)->freq < min1->freq) {
            printf ("\n  Condition two is fulfilled");
            min1 = temp->next;
        }
        temp = temp->next;
    }
    *lmin1 = min1;
    *lmin2 = min2;
}
----------------------------------------

void find_two_min (node **List, node **lmin1, node **lmin2) {
    node *temp = *List;
    node *min1;
    min1 = (node *) malloc (sizeof (node));
    min1->freq = INT_MAX;
    node *min2;
    min2 = (node *) malloc (sizeof (node));
    min2->freq = INT_MAX;
    printf ("check1\n");
    while (temp != NULL) {
        printf ("\ncheck2\n");
        if ((temp)->freq < min2->freq) {
            printf ("check3\n");
            min1 = min2;
            min2 = temp;
        }
        else if ((temp)->freq < min1->freq && (temp)->freq != min2->freq) {
            printf ("check4\n");
            min1 = temp;
        }
        temp = temp->next;
    }
    *lmin1 = min1;
    *lmin2 = min2;
    printf ("address of min2 is : %d  and value is %d \n", min2, min2 -> freq);
    printf ("check5\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22370713_22370792_3_23
22370713_22370816_2_17
Title: how to display entered letter in c? 
----------------------------------------

int main () {
    char *z;
    int a;
    printf ("enter the no.");
    scanf ("%d", & a);
    z = (char *) malloc (a);
    printf ("the entered no. is:%d\n", a);
    int i;
    for (i = 0; i < a; i++) {
        printf ("enter the letters:");
        scanf ("%c", z + i);
    }
    printf ("the entered letters are:");
    for (i = 0; i < a; i++) {
        printf ("%c\n", z);
    }
    return 0;
}
----------------------------------------

int main () {
    char z;
    int a;
    printf ("enter the no.");
    scanf ("%d", & a);
    printf ("the entered no. is:%d\n", a);
    int i;
    for (i = 0; i < a; i++) {
        printf ("enter the letters:");
        scanf ("%s", & z);
        printf ("letter scanned:%c\n", z);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22370713_22370799_1_20
22370713_22370816_2_17
Title: how to display entered letter in c? 
----------------------------------------

int main () {
    char z [10];
    int a;
    printf ("enter the no.");
    scanf ("%d", & a);
    printf ("the entered no. is:%d\n", a);
    int i;
    for (i = 0; i < a; i++) {
        printf ("enter the letters:");
        scanf ("%c", & z [i]);
    }
    printf ("the entered letters are:");
    for (i = 0; i < a; i++) {
        printf ("%c\n", z [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    char z;
    int a;
    printf ("enter the no.");
    scanf ("%d", & a);
    printf ("the entered no. is:%d\n", a);
    int i;
    for (i = 0; i < a; i++) {
        printf ("enter the letters:");
        scanf ("%s", & z);
        printf ("letter scanned:%c\n", z);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22370713_22370816_2_17
22370713_22374245_3_23
Title: how to display entered letter in c? 
----------------------------------------

int main () {
    char z;
    int a;
    printf ("enter the no.");
    scanf ("%d", & a);
    printf ("the entered no. is:%d\n", a);
    int i;
    for (i = 0; i < a; i++) {
        printf ("enter the letters:");
        scanf ("%s", & z);
        printf ("letter scanned:%c\n", z);
    }
    return 0;
}
----------------------------------------

int main () {
    int a;
    char *z = (char *) malloc (sizeof (a));
    printf ("enter the no.");
    scanf ("%d", & a);
    printf ("the entered no. is:%d\n", a);
    int i;
    for (i = 0; i < a; i++) {
        printf ("enter the letters:");
        scanf ("%s", & z [i]);
    }
    printf ("the entered letters are:\n");
    for (i = 0; i < a; i++) {
        printf ("%c\n", z [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22389184_22389695_15_23
22389184_42137574_4_12
Title: Recursive power function: approach 
----------------------------------------

int power (int x, int n) {
    int m;
    if (n == 0)
        return 1;
    if (n % 2 == 0) {
        m = power (x, n / 2);
        return m * m;
    }
    else
        return x * power (x, n -1);
}
----------------------------------------

long long power (long long x, long long y) {
    if (y == 0) {
        return 1;
    }
    else {
        y--;
        return x * power (x, y);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22395977_22396114_5_32
22395977_22396159_5_19
Title: Reading data from a text file in C? 
----------------------------------------

int main () {
    FILE *fptr;
    char *charptr;
    char temp [50];
    fptr = fopen ("bst.txt", "r");
    while (fgets (temp, 50, fptr) != NULL) {
        charptr = strtok (temp, " ");
        if (strcmp (charptr, "insert") == 0) {
            charptr = strtok (NULL, " ");
            printf ("insert num %d\n", atoi (charptr));
        }
        else if (strcmp (charptr, "delete") == 0) {
            charptr = strtok (NULL, " ");
            printf ("delete num %d\n", atoi (charptr));
        }
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fptr;
    char charptr [50];
    int value;
    fptr = fopen ("bst.txt", "r");
    while (fscanf (fptr, "%s%d", charptr, &value) > 0) {
        printf ("%s: %d\n", charptr, value);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22395977_22396114_5_32
22395977_22396255_1_14
Title: Reading data from a text file in C? 
----------------------------------------

int main () {
    FILE *fptr;
    char *charptr;
    char temp [50];
    fptr = fopen ("bst.txt", "r");
    while (fgets (temp, 50, fptr) != NULL) {
        charptr = strtok (temp, " ");
        if (strcmp (charptr, "insert") == 0) {
            charptr = strtok (NULL, " ");
            printf ("insert num %d\n", atoi (charptr));
        }
        else if (strcmp (charptr, "delete") == 0) {
            charptr = strtok (NULL, " ");
            printf ("delete num %d\n", atoi (charptr));
        }
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    char character [50];
    int value;
    fptr = fopen ("input.txt", "r");
    while (fscanf (fp, "%s%d", character, &value) > 0) {
        if (strcmp (character, "insert") == 0) {
            insert (value);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22395977_22396159_5_19
22395977_22396255_1_14
Title: Reading data from a text file in C? 
----------------------------------------

int main () {
    FILE *fptr;
    char charptr [50];
    int value;
    fptr = fopen ("bst.txt", "r");
    while (fscanf (fptr, "%s%d", charptr, &value) > 0) {
        printf ("%s: %d\n", charptr, value);
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    char character [50];
    int value;
    fptr = fopen ("input.txt", "r");
    while (fscanf (fp, "%s%d", character, &value) > 0) {
        if (strcmp (character, "insert") == 0) {
            insert (value);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22398987_22403825_3_23
22398987_22685072_2_20
Title: Most frequent element in a sequence using arrays in C 
----------------------------------------

int main () {
    int counter [201] = {0}, n, i, input, maximum = 0;
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        scanf ("%d", & input);
        if (input >= -100 && input <= 100)
            ++counter[input + 100];
    }
    maximum = counter[0];
    int index = 0;
    for (i = 0; i < 201; i++) {
        if (counter[i] >= maximum) {
            index = i;
            maximum = counter[i];
        }
    }
    printf ("number %d occured %d times\n", index - 100, maximum);
    return 0;
}
----------------------------------------

int main () {
    int n, input;
    scanf ("%d", & n);
    int count [201] = {0};
    int max = 0, found = -1;
    for (int i = 0; i < n; i++) {
        scanf ("%d", & input);
        count[input + 100]++;
        if (max < count[input + 100]) {
            max = count[input + 100];
            found = input;
        }
    }
    printf ("%d", found);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22418630_22418672_3_25
22418630_22419273_3_26
Title: Please help me spot my error 
----------------------------------------

int main (void) {
    int d1, d2, num1, num2;
    printf ("Enter the first number:");
    printf ("Enter the numerator:");
    scanf ("%d", & num1);
    printf ("Enter the denominator:");
    scanf ("%d", & d1);
    printf ("Enter the second number:");
    printf ("Enter the numerator:");
    scanf ("%d", & num2);
    printf ("Enter the denominator:");
    scanf ("%d", & d2);
    printf ("%f", ((float) num1 / (float) d1) + ((float) num2 / (float) d2));
    return 0;
}
----------------------------------------

int main (void) {
    int den1, den2, num1, num2, sum_num, sum_den;
    printf ("Enter the first number:\n");
    printf ("\tEnter the numerator:");
    scanf ("%d", & num1);
    printf ("\tEnter the denominator:");
    scanf ("%d", & den1);
    printf ("Enter the second number:\n");
    printf ("\tEnter the numerator:");
    scanf ("%d", & num2);
    printf ("\tEnter the denominator:");
    scanf ("%d", & den2);
    sum_num = num1 * den2 + num2 * den1;
    sum_den = den1 * den2;
    printf ("sum = %d/%d\n", sum_num, sum_den);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22427836_22428456_18_49
22427836_22573241_20_55
Title: RSA Algorithm some characters can't be encrypted (Cryptography) 
----------------------------------------

int main (void) {
    char msg [255];
    char crp [255], decrp [255];
    const int64_t p = 3, q = 11, n = p * q, e = 7, d = 3;
    const int addition = 'a' - 1;
    int i = 0;
    int64_t k = 0;
    printf ("your message: ");
    if (scanf ("%s", msg) != 1)
        return 1;
    printf ("\nyour plaintext msg is:  %s\n", msg);
    for (i = 0; msg[i] != '\0'; i++) {
        k = ipow (msg[i] - addition, e);
        crp[i] = k % n + addition;
    }
    crp[i] = '\0';
    printf ("\nyour encrypted msg is:  %s\n", crp);
    for (i = 0; crp[i] != '\0'; i++) {
        k = ipow (crp[i] - addition, d);
        decrp[i] = k % n + addition;
    }
    decrp[i] = '\0';
    printf ("\nyour decrypted msg is:  %s\n", decrp);
    return 0;
}
----------------------------------------

void main () {
    clrscr ();
    printf ("\nENTER FIRST PRIME NUMBER\n");
    scanf ("%d", & p);
    flag = prime (p);
    if (flag == 0) {
        printf ("\nWRONG INPUT\n");
        getch ();
        exit (1);
    }
    printf ("\nENTER ANOTHER PRIME NUMBER\n");
    scanf ("%d", & q);
    flag = prime (q);
    if (flag == 0 || p == q) {
        printf ("\nWRONG INPUT\n");
        getch ();
        exit (1);
    }
    printf ("\nENTER MESSAGE\n");
    fflush (stdin);
    scanf ("%s", msg);
    for (i = 0; msg[i] != NULL; i++)
        m[i] = msg[i];
    n = p * q;
    t = (p - 1) * (q - 1);
    ce ();
    printf ("\nPOSSIBLE VALUES OF e AND d ARE\n");
    for (i = 0; i < j - 1; i++)
        printf ("\n%ld\t%ld", e[i], d[i]);
    encrypt ();
    decrypt ();
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2242963_2242996_5_17
2242963_2243008_4_19
Title: get the current time in seconds 
----------------------------------------

int main () {
    char secstr [128];
    struct tm current_time;
    time_t current_secs = time (NULL);
    memset (secstr, 0, sizeof (secstr));
    localtime_r (& current_secs, & current_time);
    strftime (secstr, sizeof (secstr), "%S", & current_time);
    fprintf (stdout, "The second: %s\n", secstr);
    return (0);
}
----------------------------------------

int main (int argc, char *argv []) {
    time_t now;
    struct tm *tm;
    now = time (0);
    if ((tm = localtime (&now)) == NULL) {
        printf ("Error extracting time stuff\n");
        return 1;
    }
    printf ("%04d-%02d-%02d %02d:%02d:%02d\n", tm -> tm_year + 1900, tm -> tm_mon + 1, tm -> tm_mday, tm -> tm_hour, tm -> tm_min, tm -> tm_sec);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2242963_2242996_5_17
2242963_48389718_4_22
Title: get the current time in seconds 
----------------------------------------

int main () {
    char secstr [128];
    struct tm current_time;
    time_t current_secs = time (NULL);
    memset (secstr, 0, sizeof (secstr));
    localtime_r (& current_secs, & current_time);
    strftime (secstr, sizeof (secstr), "%S", & current_time);
    fprintf (stdout, "The second: %s\n", secstr);
    return (0);
}
----------------------------------------

int main (int argc, char **argv) {
    int iRet;
    struct timeval tv;
    iRet = gettimeofday (&tv, NULL);
    if (iRet == 0) {
        printf ("Seconds/USeconds since epoch: %d/%d\n", (int) tv.tv_sec, (int) tv.tv_usec);
        return 0;
    }
    else {
        perror ("gettimeofday");
    }
    return iRet;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2242963_2243008_4_19
2242963_48389718_4_22
Title: get the current time in seconds 
----------------------------------------

int main (int argc, char *argv []) {
    time_t now;
    struct tm *tm;
    now = time (0);
    if ((tm = localtime (&now)) == NULL) {
        printf ("Error extracting time stuff\n");
        return 1;
    }
    printf ("%04d-%02d-%02d %02d:%02d:%02d\n", tm -> tm_year + 1900, tm -> tm_mon + 1, tm -> tm_mday, tm -> tm_hour, tm -> tm_min, tm -> tm_sec);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int iRet;
    struct timeval tv;
    iRet = gettimeofday (&tv, NULL);
    if (iRet == 0) {
        printf ("Seconds/USeconds since epoch: %d/%d\n", (int) tv.tv_sec, (int) tv.tv_usec);
        return 0;
    }
    else {
        perror ("gettimeofday");
    }
    return iRet;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22456965_22458377_7_44
22456965_22459310_1_50
Title: "Arrays pointers and string manipulation" 
----------------------------------------

int main () {
    char *str [20] = {"literature", "scholar", "enormous", "influence", "orchestra", "publication", "teacher", "member", "final", "phonograph", "striking", "different", "screwdriver", "intelligient", "executed", "oldest", "people", "requiring", "pioneer", "telephone"};
    int ErrorCount = 5;
    char temp [50];
    int k, x = 0;
    int i;
    i = rand () % 19;
    for (k = 0; k != strlen (str[i]); k++) {
        temp[k] = '*';
    }
    temp[k] = 0;
    printf ("\n%s\n", temp);
    while (ErrorCount != 0) {
        ErrorCount = func (ErrorCount, temp, str[i]);
    }
    if (ErrorCount == 0) {
        printf ("GAME OVER\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char *chr, *c;
    char a;
    int error = 0, found = 0, i = 0;
    char *str [20] = {"literature", "scholar", "enormous", "influence", "orchestra", "publication", "teacher", "member", "final", "phonograph", "striking", "different", "screwdriver", "intelligient", "executed", "oldest", "people", "requiring", "pioneer", "telephone"};
    i = rand () % 19;
    chr = str[i];
    c = calloc (strlen (chr) +1, 1);
    memset (c, '*', strlen (chr));
    while (1) {
        printf ("Write a Letter ");
        scanf (" %c", & a);
        if (isalpha (a)) {
            i = 0;
            found = 0;
            while (chr[i] != '\0') {
                if (chr[i] == a) {
                    c[i] = chr[i];
                    found = 1;
                }
                i++;
            }
            if (!found) {
                error++;
            }
            if (error == 5) {
                printf ("You lose \n");
                break;
            }
            if (!strcmp (chr, c)) {
                printf ("%s \n", c);
                break;
            }
            printf ("%s \n", c);
        }
        else {
            printf ("No letter. Try again \n");
        }
    }
    free (c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22456965_22458377_7_44
22456965_22460301_7_19
Title: "Arrays pointers and string manipulation" 
----------------------------------------

int main () {
    char *str [20] = {"literature", "scholar", "enormous", "influence", "orchestra", "publication", "teacher", "member", "final", "phonograph", "striking", "different", "screwdriver", "intelligient", "executed", "oldest", "people", "requiring", "pioneer", "telephone"};
    int ErrorCount = 5;
    char temp [50];
    int k, x = 0;
    int i;
    i = rand () % 19;
    for (k = 0; k != strlen (str[i]); k++) {
        temp[k] = '*';
    }
    temp[k] = 0;
    printf ("\n%s\n", temp);
    while (ErrorCount != 0) {
        ErrorCount = func (ErrorCount, temp, str[i]);
    }
    if (ErrorCount == 0) {
        printf ("GAME OVER\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    enum {MAX_ERROR_COUNT = 5};
    int ErrorCount = MAX_ERROR_COUNT;
    srand (time (0));
    while (ErrorCount != 0)
        ErrorCount = hangman (MAX_ERROR_COUNT);
    printf ("GAME OVER\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22456965_22459310_1_50
22456965_22460301_7_19
Title: "Arrays pointers and string manipulation" 
----------------------------------------

int main () {
    char *chr, *c;
    char a;
    int error = 0, found = 0, i = 0;
    char *str [20] = {"literature", "scholar", "enormous", "influence", "orchestra", "publication", "teacher", "member", "final", "phonograph", "striking", "different", "screwdriver", "intelligient", "executed", "oldest", "people", "requiring", "pioneer", "telephone"};
    i = rand () % 19;
    chr = str[i];
    c = calloc (strlen (chr) +1, 1);
    memset (c, '*', strlen (chr));
    while (1) {
        printf ("Write a Letter ");
        scanf (" %c", & a);
        if (isalpha (a)) {
            i = 0;
            found = 0;
            while (chr[i] != '\0') {
                if (chr[i] == a) {
                    c[i] = chr[i];
                    found = 1;
                }
                i++;
            }
            if (!found) {
                error++;
            }
            if (error == 5) {
                printf ("You lose \n");
                break;
            }
            if (!strcmp (chr, c)) {
                printf ("%s \n", c);
                break;
            }
            printf ("%s \n", c);
        }
        else {
            printf ("No letter. Try again \n");
        }
    }
    free (c);
    return 0;
}
----------------------------------------

int main (void) {
    enum {MAX_ERROR_COUNT = 5};
    int ErrorCount = MAX_ERROR_COUNT;
    srand (time (0));
    while (ErrorCount != 0)
        ErrorCount = hangman (MAX_ERROR_COUNT);
    printf ("GAME OVER\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22479887_22480054_3_18
22479887_22480060_1_32
Title: how many times does i occur in x (unsigned 32 bit int C) 
----------------------------------------

int main (void) {
    unsigned int i;
    scanf ("%u", & i);
    unsigned int x;
    scanf ("%u", & x);
    int output = 0;
    int t = 0;
    while (x > 0) {
        t = x % 10;
        if (t == x) {
            output++;
        }
        x /= 10;
    }
    printf ("%d", output);
}
----------------------------------------

int main (int argc, char **argv) {
    unsigned int i;
    scanf ("%u", & i);
    if (i > 9) {
        printf ("expecting a single digit\n");
        return 1;
    }
    unsigned int x;
    scanf ("%u", & x);
    int output = 0;
    if (x == 0) {
        if (i == 0) {
            output = 1;
        }
    }
    else {
        while (x > 0) {
            if (i == (x % 10)) {
                output++;
            }
            x /= 10;
        }
    }
    printf ("%d\n", output);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22488100_22489875_8_41
22488100_22492102_26_44
Title: Find winner in a tic tac toe match 
----------------------------------------

int checkforwin (char board [3] [3]) {
    int x;
    for (x = 0; x < 3; x++) {
        if ((board[x][0] != '\0') && (board[x][0] == board[x][1]) && (board[x][0] == board[x][2]))
            return (board[x][0] == 'O' ? -1 : 1);
        if ((board[0][x] != '\0') && (board[0][x] == board[1][x]) && (board[0][x] == board[2][x]))
            return (board[0][x] == 'O' ? -1 : 1);
    }
    if ((board[0][0] != '\0') && (board[0][0] == board[1][1]) && (board[0][0] == board[2][2]))
        return (board[0][0] == 'O' ? -1 : 1);
    if ((board[2][0] != '\0') && (board[2][0] == board[1][1]) && (board[0][0] == board[0][2]))
        return (board[2][0] == 'O' ? -1 : 1);
    return 0;
}
----------------------------------------

int checkforwin (char board [3] [3]) {
    int a, b, c;
    stPath *pptr;
    for (pptr = paths; pptr->valid; pptr++) {
        a = board[pptr->rowA][pptr->colA];
        b = board[pptr->rowB][pptr->colB];
        c = board[pptr->rowC][pptr->colC];
        if (a == b && b == c && a != ' ')
            return ((a == 'X') ? 1 : -1);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2251452_20031237_23_37
2251452_2251472_21_37
Title: How to return a value from thread in C 
----------------------------------------

int main () {
    pthread_t tid;
    thread_data tdata;
    tdata.a = 10;
    tdata.b = 32;
    pthread_create (& tid, NULL, myThread, (void *) & tdata);
    pthread_join (tid, NULL);
    printf ("%d + %d = %d\n", tdata.a, tdata.b, tdata.result);
    return 0;
}
----------------------------------------

int main () {
    pthread_t tid;
    void *status = 0;
    int result;
    pthread_create (& tid, NULL, myThread, & result);
    pthread_join (tid, & status);
    if (status != 0) {
        printf ("%d\n", result);
    }
    else {
        printf ("thread failed\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22519576_22519651_4_28
22519576_22519694_6_28
Title: Printing out current date 
----------------------------------------

int main () {
    int days, weeks, months, years, option, rmd, currentyear, currentmonth;
    int daysinjan, daysinfeb, daysinmarch;
    time_t seconds;
    seconds = time (NULL);
    days = seconds / (60 * 60 * 24);
    weeks = seconds / ((60 * 60 * 24) * 7);
    rmd = seconds % 31557600;
    months = ((seconds / 31557600) * 12) + (((float) rmd / 31557600) * 12);
    years = days / (365.25);
    currentyear = 1970 + years;
    currentmonth = (((float) rmd / 31557600) * 12) + 1;
    printf ("%ld/%ld", currentmonth, currentyear);
    return 0;
}
----------------------------------------

int main (void) {
    char buffer [SIZE];
    time_t curtime;
    struct tm *loctime;
    curtime = time (NULL);
    loctime = localtime (&curtime);
    fputs (asctime (loctime), stdout);
    strftime (buffer, SIZE, "Today is %A, %B %d.\n", loctime);
    fputs (buffer, stdout);
    strftime (buffer, SIZE, "The time is %I:%M %p.\n", loctime);
    fputs (buffer, stdout);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22530956_22531171_3_24
22530956_22531464_3_32
Title: Give byte existing byte value (homework) 
----------------------------------------

int main (void) {
    unsigned int input = 0xaabbccdd;
    unsigned int first_byte = (input >> (8 * 0)) & 0xff;
    unsigned int second_byte = (input >> (8 * 1)) & 0xff;
    unsigned int third_byte = (input >> (8 * 2)) & 0xff;
    unsigned int fourth_byte = (input >> (8 * 3)) & 0xff;
    printf (" 1st : %x\n 2nd : %x\n 3rd : %x\n 4th : %x\n", first_byte, second_byte, third_byte, fourth_byte);
    unsigned int combo = first_byte << 8 | second_byte;
    combo = combo << 8 | third_byte;
    combo = combo << 8 | fourth_byte;
    printf (" combo : %x ", combo);
    return 0;
}
----------------------------------------

int main (void) {
    unsigned int input = 0xaabbccdd, byte [4] = {0}, n = 0, output = 0;
    do {
        byte[n] = (input >> (8 * n)) & 0xff;
        n = n + 1;
    }
    while (n < 4);
    n = 0;
    do {
        printf (" %d : %x\n", byte [n]);
        n = n + 1;
    }
    while (n < 4);
    n = 0;
    do {
        output = output << 8 | byte[n];
        n = n + 1;
    }
    while (n < 4);
    printf (" output : %x ", output);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22531804_22531858_1_12
22531804_22532359_8_23
Title: Reverse array content using recursion (C Language) 
----------------------------------------

int main () {
    char line [128];
    printf ("\nEnter an array of characters: ");
    if (fgets (line, sizeof line, stdin) != NULL) {
        const size_t len = strlen (line);
        printf ("The reversed array of characters is = %s\n", reverseAr (line, len));
    }
    return 0;
}
----------------------------------------

int main () {
    char str [128];
    int len;
    printf ("\nEnter an array of characters: ");
    if (fgets (str, sizeof (str), stdin) != NULL) {
        len = strlen (str);
        reverseAr (str, 0, len - 1);
    }
    printf ("The reversed array of characters is = %s\n", str);
    system ("pause");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22531832_22532350_11_25
22531832_22710890_1_16
Title: Quick Sort implementation not working properly 
----------------------------------------

int partition (int *vettore, int a, int b) {
    int i = a, j = b + 1;
    while (true) {
        while (vettore[++i] < vettore[a])
            if (i == b)
                break;
        while (vettore[a] < vettore[--j])
            if (j == a)
                break;
        if (i >= j)
            break;
        swap (& vettore [i], & vettore [j]);
    }
    swap (& vettore [a], & vettore [j]);
    return j;
}
----------------------------------------

int partition (int *vettore, int a, int b) {
    int i, j, pivot, temp;
    pivot = vettore[a];
    i = a;
    j = b;
    while (i < j) {
        while (vettore[i] < pivot && i < b)
            i++;
        while (vettore[j] >= pivot && j > a)
            j--;
        if (i < j) {temp = vettore [i];
        vettore[i] = vettore[j];
        vettore[j] = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22544888_22545179_4_55
22544888_22556026_3_28
Title: high low values in array print in between 
----------------------------------------

int main () {
    int high;
    int low, i;
    int array [25];
    int count = 0;
    int start;
    int end;
    printf ("Please input numbers for array:");
    for (i = 0; scanf ("%d", &array[i]), array[i] != 0; i += 1) {
        count += 1;
        if (i >= 25) {
            printf ("Unable to handle more than 25 input values\n");
            break;
        }
    }
    high = 0;
    for (i = 1; i < count; i += 1) {
        if (array[i] > array[high]) {
            high = i;
        }
    }
    low = 0;
    for (i = 1; i < count; i += 1) {
        if (array[i] < array[low]) {
            low = i;
        }
    }
    if (low < high) {
        start = low;
        end = high;
    }
    else {
        start = high;
        end = low;
    }
    for (i = start; i <= end; i += 1) {
        printf ("%d", array [i]);
        if (i != end) {
            printf (",");
        }
        else {
            printf ("\n");
        }
    }
}
----------------------------------------

int main () {
    int low, high, array [25];
    int i, count = 0;
    printf ("Please input numbers for array:");
    for (i = 0; i < 25; ++i) {
        int data;
        scanf ("%d", & data);
        if (data == 0)
            break;
        array[count++] = data;
    }
    low = high = 0;
    for (i = 1; i < count; ++i) {
        if (array[i] < array[low])
            low = i;
        if (array[i] > array[high])
            high = i;
    }
    for (i = low; i <= high; i++) {
        printf ("%d,", array [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22544888_22545179_4_55
22544888_22559201_3_38
Title: high low values in array print in between 
----------------------------------------

int main () {
    int high;
    int low, i;
    int array [25];
    int count = 0;
    int start;
    int end;
    printf ("Please input numbers for array:");
    for (i = 0; scanf ("%d", &array[i]), array[i] != 0; i += 1) {
        count += 1;
        if (i >= 25) {
            printf ("Unable to handle more than 25 input values\n");
            break;
        }
    }
    high = 0;
    for (i = 1; i < count; i += 1) {
        if (array[i] > array[high]) {
            high = i;
        }
    }
    low = 0;
    for (i = 1; i < count; i += 1) {
        if (array[i] < array[low]) {
            low = i;
        }
    }
    if (low < high) {
        start = low;
        end = high;
    }
    else {
        start = high;
        end = low;
    }
    for (i = start; i <= end; i += 1) {
        printf ("%d", array [i]);
        if (i != end) {
            printf (",");
        }
        else {
            printf ("\n");
        }
    }
}
----------------------------------------

int main () {
    int high = 0;
    int low = 0, i;
    int array [25];
    int count = 0;
    printf ("Please input numbers for array:");
    for (i = 0;; i += 1) {
        scanf ("%d", & array [i]);
        count += 1;
        if (array[i] == 0)
            break;
    }
    count--;
    for (i = 1; i < count; i += 1) {
        if (array[i] > array[high]) {
            high = i;
        }
    }
    for (i = 1; i < count; i += 1) {
        if (array[i] < array[low]) {
            low = i;
        }
    }
    for (i = low; i <= high; i += 1) {
        printf ("%d,", array [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22544888_22556026_3_28
22544888_22559201_3_38
Title: high low values in array print in between 
----------------------------------------

int main () {
    int low, high, array [25];
    int i, count = 0;
    printf ("Please input numbers for array:");
    for (i = 0; i < 25; ++i) {
        int data;
        scanf ("%d", & data);
        if (data == 0)
            break;
        array[count++] = data;
    }
    low = high = 0;
    for (i = 1; i < count; ++i) {
        if (array[i] < array[low])
            low = i;
        if (array[i] > array[high])
            high = i;
    }
    for (i = low; i <= high; i++) {
        printf ("%d,", array [i]);
    }
}
----------------------------------------

int main () {
    int high = 0;
    int low = 0, i;
    int array [25];
    int count = 0;
    printf ("Please input numbers for array:");
    for (i = 0;; i += 1) {
        scanf ("%d", & array [i]);
        count += 1;
        if (array[i] == 0)
            break;
    }
    count--;
    for (i = 1; i < count; i += 1) {
        if (array[i] > array[high]) {
            high = i;
        }
    }
    for (i = 1; i < count; i += 1) {
        if (array[i] < array[low]) {
            low = i;
        }
    }
    for (i = low; i <= high; i += 1) {
        printf ("%d,", array [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22548227_22549321_1_55
22548227_22557488_3_61
Title: What is an efficient way to REPLACE repeated elements within a 2D (10x10) int array 
----------------------------------------

int main () {
    int board [10] [10];
    int row = 0, col = 0;
    srand ((unsigned int) (time (NULL)));
    for (row = 0; row < 10; ++row) {
        for (col = 0; col < 10; ++col) {
            board[row][col] = rand () % 5 + 1;
            printf ("%d ", board [row] [col]);
        }
        printf ("\n");
    }
    int count = 1;
    int seek = 0;
    for (row = 0; row < 10; ++row) {
        for (col = 1; col < 8; ++col) {
            for (seek = col + 1; seek < 10;) {
                if (board[row][col] == board[row][seek]) {
                    ++count;
                    ++seek;
                }
                else {
                    col = seek - 1;
                    break;
                }
            }
            if (count >= 3) {
                int i;
                for (i = seek - 1; count >= 1; --count)
                    board[row][i--] = 6;
            }
            count = 1;
        }
    }
    for (row = 0; row < 10; ++row) {
        for (col = 0; col < 10; ++col) {
            printf ("%d ", board [row] [col]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int board [10] [10];
    int row, col;
    for (row = 0; row < 10; row++) {
        for (col = 0; col < 10; col++) {
            board[row][col] = rand () % 2 + 1;
            printf ("%d ", board [row] [col]);
        }
        printf ("\n");
    }
    printf ("\n");
    for (row = 0; row < 10; row++) {
        col = 0;
        while (col <= 10 - 4) {
            __m128i xmm0 = _mm_loadu_si128 ((__m128i *) &board[row][col]);
            __m128i xmm1 = _mm_set1_epi32 (board[row][col]);
            __m128i xmm2;
            __m128i xmm6 = _mm_set1_epi32 (6);
            __m128i xmmn = _mm_set1_epi32 (-1);
            unsigned long c;
            int mask;
            xmm0 = _mm_xor_si128 (_mm_cmpeq_epi32 (xmm0, xmm1), xmmn);
            mask = _mm_movemask_epi8 (xmm0);
            if (!mask) {
                _mm_storeu_si128 ((__m128i *) & board [row] [col], xmm6);
                col += 4;
                do {
                    if (col > 10 - 4)
                        col = 10 - 4;
                    xmm0 = _mm_loadu_si128 ((__m128i *) &board[row][col]);
                    xmm2 = _mm_or_si128 (_mm_cmpeq_epi8 (xmm0, xmm1), _mm_cmpeq_epi8 (xmm0, xmm6));
                    xmm0 = _mm_xor_si128 (xmm2, xmmn);
                    xmm0 = _mm_or_si128 (_mm_slli_si128 (xmm0, 4), xmm0);
                    xmm0 = _mm_or_si128 (_mm_slli_si128 (xmm0, 8), xmm0);
                    xmm2 = _mm_xor_si128 (xmm0, xmmn);
                    _mm_maskmoveu_si128 (_mm_set1_epi32 (6), xmm2, (char *) & board [row] [col]);
                    mask = _mm_movemask_epi8 (xmm0);
                    if (col == 10 - 4) {
                        col++;
                        break;
                    }
                    c = __builtin_ctz (mask);
                    c >>= 2;
                    col += c;
                }
                while (mask);
            }
            else {
                col += __builtin_ctz (mask) >> 2;
            }
        }
    }
    for (row = 0; row < 10; row++) {
        for (col = 0; col < 10; col++) {
            printf ("%d ", board [row] [col]);
        }
        printf ("\n");
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22567498_22567693_2_13
22567498_22568154_3_13
Title: alphabet shift with while loops 
----------------------------------------

void printAlphabet (int start) {
    int one = start;
    int nLettersInAlphabet = 26;
    while (nLettersInAlphabet--) {
        printf ("%c", one);
        if (one++ == 'z')
            one = 'a';
    }
    printf ("\n");
}
----------------------------------------

void printAlphabet (int start) {
    int p;
    char letter;
    for (p = 0; p < 26; p++) {
        letter = 'a' + (((start + p) - 'a') % 26);
        printf ("%c", letter);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22570892_22576329_1_21
22570892_22576994_18_30
Title: Passing a pointer variable to store an array of strings (command line arguments) 
----------------------------------------

int parse_cmdline (char ***argv, char *input) {
    int i = 0;
    char **argx = *argv;
    char *token = strtok (input, " ");
    fprintf (stderr, "argv=%p\n", (void *) argv);
    while (token != NULL) {
        fprintf (stderr, "%15s, sizeof=%u strlen=%u\n", token, sizeof (token), strlen (token));
    }
    *argv = argx;
    return i;
}
----------------------------------------

int parse_cmdline (char ***argv, char *input) {
    int i = 0;
    char *token = strtok (input, " ");
    while (token != NULL) {
        int len = strlen (token);
        *argv = realloc (*argv, (i + 1) * sizeof (char *));
        (*argv)[i] = malloc (len +1);
        strcpy ((* argv) [i ++], token);
        token = strtok (NULL, " ");
    }
    return i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22579467_22579552_19_31
22579467_22579595_22_40
Title: Returning malloc from a function in C 
----------------------------------------

int main (void) {
    int **poi, r, c, numcol, numrow;
    int templet [8] = {1, 1, 1, 1, 3, 4, 4, 4};
    int newWord [8] = {1, 1, 4, 4, 4, 5, 0, 0};
    printf ("please enter the number of rows and columns:\n");
    scanf ("%d%d", & numrow, & numcol);
    poi = func1 (numrow, numcol, templet, newWord);
    for (r = 0;
    r < numrow;
    r ++) for (c = 0;
    c numrow;
    c ++) printf ("%d\n", poi [r] [c]);
    return 0;
}
----------------------------------------

int main () {
    int **poi, r, c, numcol, numrow;
    int templet [8] = {1, 1, 1, 1, 3, 4, 4, 4};
    int newWord [8] = {1, 1, 4, 4, 4, 5, 0, 0};
    printf ("please enter the number of rows:\n");
    scanf ("%d%d", & numrow, & numcol);
    poi = func1 (numrow, numcol, templet, newWord);
    for (r = 0; r < numrow; r++) {
        for (c = 0; c < numrow; c++) {
            printf ("%d\n", poi [r] [c]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22579467_22579552_1_17
22579467_22579595_4_20
Title: Returning malloc from a function in C 
----------------------------------------

int **func1 (int numrow, int numcol, int *temp, int *word) {
    int i, c, d;
    int **pointer;
    pointer = malloc (numrow * sizeof (int *));
    for (i = 0; i < numrow; i++) {
        pointer[i] = malloc (numcol * sizeof (int));
    }
    for (c = 0; c < numrow; c++)
        for (d = 0; d < numcol; d++)
            pointer[c][d] = ((temp[c] - word[d]) * (temp[c] - word[d]));
    return pointer;
}
----------------------------------------

int **func1 (int numrow, int numcol, int *temp, int *word) {
    int i, c, d;
    int **pointer;
    pointer = (int **) malloc (numrow * sizeof (int *));
    for (i = 0; i < numrow; i++) {
        pointer[i] = (int *) malloc (numcol * sizeof (int *));
    }
    for (c = 0; c < numrow; c++) {
        for (d = 0; d < numcol; d++) {
            pointer[c][d] = ((temp[c] - word[d]) * (temp[c] - word[d]));
        }
    }
    return pointer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22583226_22583331_10_20
22583226_22583385_3_16
Title: Replace char* in function without memory leak 
----------------------------------------

int main (int argc, char **argv) {
    char *str = malloc (17);
    strcpy (str, "memory leak here");
    repl (& str);
    repl (& str);
    repl (& str);
    printf ("%s\n", str);
    exit (0);
}
----------------------------------------

int main (int argc, char **argv) {
    char *str = "memory leak here";
    repl (& str);
    free (str);
    repl (& str);
    free (str);
    repl (& str);
    printf ("%s\n", str);
    free (str);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22583585_22583960_9_21
22583585_22583979_16_34
Title: Creating an array during run-time and passing it to a function in C? 
----------------------------------------

int main () {
    int *array;
    int array_size;
    scanf ("%d", & array_size);
    array = malloc (sizeof (int) * array_size);
    for (int i = 0; i < array_size; i++) {
        *(array + i) = i;
    }
    print_array (array, array_size);
    return 0;
}
----------------------------------------

int main () {
    int num_of_flights;
    flight *database;
    do {
        printf ("Enter max number of flights to read in from file\n");
        printf ("--> ");
        fflush (stdin);
    }
    while (!(scanf ("%d", &num_of_flights)));
    database = (flight *) malloc (sizeof (flight) * num_of_flights);
    database[0].distance = 100;
    database[1].distance = 200;
    strcpy (database [0].aeroplane, "777");
    strcpy (database [1].aeroplane, "Airbus");
    show_flight_data (database [0]);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2258530_2258555_1_14
2258530_2258566_7_18
Title: How is the value of this variable changing in my C code? 
----------------------------------------

int main () {
    int cpd = 13;
    int nPart = 17;
    printf ("\ncpd1: %d\n", cpd);
    int p;
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
    }
    exit (0);
}
----------------------------------------

int main (void) {
    int p;
    printf ("\ncpd1: %d\n", cpd);
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
        exit (0);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2258530_2258555_1_14
2258530_2258582_6_19
Title: How is the value of this variable changing in my C code? 
----------------------------------------

int main () {
    int cpd = 13;
    int nPart = 17;
    printf ("\ncpd1: %d\n", cpd);
    int p;
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
    }
    exit (0);
}
----------------------------------------

int main (int argc, char **argv) {
    printf ("\ncpd1: %d\n", cpd);
    int cpd;
    int p;
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2258530_2258555_1_14
2258530_2258637_4_13
Title: How is the value of this variable changing in my C code? 
----------------------------------------

int main () {
    int cpd = 13;
    int nPart = 17;
    printf ("\ncpd1: %d\n", cpd);
    int p;
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
    }
    exit (0);
}
----------------------------------------

int main () {
    int cpd;
    char msg [4];
    cpd = 17;
    printf ("%d\n", cpd);
    strcpy (msg, "Oops");
    printf ("%d\n", cpd);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2258530_2258566_7_18
2258530_2258582_6_19
Title: How is the value of this variable changing in my C code? 
----------------------------------------

int main (void) {
    int p;
    printf ("\ncpd1: %d\n", cpd);
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
        exit (0);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    printf ("\ncpd1: %d\n", cpd);
    int cpd;
    int p;
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2258530_2258566_7_18
2258530_2258637_4_13
Title: How is the value of this variable changing in my C code? 
----------------------------------------

int main (void) {
    int p;
    printf ("\ncpd1: %d\n", cpd);
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
        exit (0);
    }
    return 0;
}
----------------------------------------

int main () {
    int cpd;
    char msg [4];
    cpd = 17;
    printf ("%d\n", cpd);
    strcpy (msg, "Oops");
    printf ("%d\n", cpd);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2258530_2258582_6_19
2258530_2258637_4_13
Title: How is the value of this variable changing in my C code? 
----------------------------------------

int main (int argc, char **argv) {
    printf ("\ncpd1: %d\n", cpd);
    int cpd;
    int p;
    for (p = 1; p <= nPart; p++) {
        printf ("\ncpd2: %d\n", cpd);
        break;
    }
}
----------------------------------------

int main () {
    int cpd;
    char msg [4];
    cpd = 17;
    printf ("%d\n", cpd);
    strcpy (msg, "Oops");
    printf ("%d\n", cpd);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22587837_22588965_2_76
22587837_22589217_3_31
Title: How to display the elements of a 5*5 matrix in the following way? 
----------------------------------------

int main () {
    int i, j, m, n, a [5] [5];
    scanf ("%d%d", & m, & n);
    if (m >= 1 && m <= 5 && n >= 1 && n <= 5) {
        for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                scanf ("%d", & a [i] [j]);
            }
        }
        if (m == 5 && n == 5) {
            for (i = 0; i == 0; i++) {
                for (j = 0; j < n; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = 1; i < n; i++) {
                for (j = n - 1; j == n - 1; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 1; i == n - 1; i++) {
                for (j = n - 2; j >= 0; j--) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 2; i >= n - 4; i--) {
                for (j = 0; j == 0; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 4; i == n - 4; i++) {
                for (j = n - 4; j <= n - 2; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 3; i <= n - 2; i++) {
                for (j = n - 2; j == n - 2; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 2; i == n - 2; i++) {
                for (j = n - 3; j >= n - 4; j--) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 3; i == n - 3; i++) {
                for (j = n - 4; j <= n - 3; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j, m, n, a [5] [5];
    m = n = 5;
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            scanf ("%d", & a [i] [j]);
        }
    }
    int side_size = m;
    int row = 0, col = 0;
    int side = side_size - 1;
    while (side > 1) {
        for (i = 0; i < side; ++i)
            printf ("%d ", a[row][col++]);
        for (i = 0; i < side; ++i)
            printf ("%d ", a[row++][col]);
        for (i = 0; i < side; ++i)
            printf ("%d ", a[row][col--]);
        for (i = 0; i < side; ++i)
            printf ("%d ", a[row--][col]);
        ++row;
        ++col;
        side -= 2;
    }
    printf ("%d\n", a [row] [col]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22587837_22588965_2_76
22587837_22589297_36_56
Title: How to display the elements of a 5*5 matrix in the following way? 
----------------------------------------

int main () {
    int i, j, m, n, a [5] [5];
    scanf ("%d%d", & m, & n);
    if (m >= 1 && m <= 5 && n >= 1 && n <= 5) {
        for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                scanf ("%d", & a [i] [j]);
            }
        }
        if (m == 5 && n == 5) {
            for (i = 0; i == 0; i++) {
                for (j = 0; j < n; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = 1; i < n; i++) {
                for (j = n - 1; j == n - 1; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 1; i == n - 1; i++) {
                for (j = n - 2; j >= 0; j--) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 2; i >= n - 4; i--) {
                for (j = 0; j == 0; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 4; i == n - 4; i++) {
                for (j = n - 4; j <= n - 2; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 3; i <= n - 2; i++) {
                for (j = n - 2; j == n - 2; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 2; i == n - 2; i++) {
                for (j = n - 3; j >= n - 4; j--) {
                    printf ("%d\t", a [i] [j]);
                }
            }
            for (i = n - 3; i == n - 3; i++) {
                for (j = n - 4; j <= n - 3; j++) {
                    printf ("%d\t", a [i] [j]);
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int cango;
    do {
        printf ("%d ", matrix [y] [x]);
        count++;
        cango = go_forward ();
        if (cango != 0) {
            turn_right ();
            cango = go_forward ();
        }
    }
    while (cango == 0 && count < 25);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22587837_22589217_3_31
22587837_22589297_36_56
Title: How to display the elements of a 5*5 matrix in the following way? 
----------------------------------------

int main () {
    int i, j, m, n, a [5] [5];
    m = n = 5;
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            scanf ("%d", & a [i] [j]);
        }
    }
    int side_size = m;
    int row = 0, col = 0;
    int side = side_size - 1;
    while (side > 1) {
        for (i = 0; i < side; ++i)
            printf ("%d ", a[row][col++]);
        for (i = 0; i < side; ++i)
            printf ("%d ", a[row++][col]);
        for (i = 0; i < side; ++i)
            printf ("%d ", a[row][col--]);
        for (i = 0; i < side; ++i)
            printf ("%d ", a[row--][col]);
        ++row;
        ++col;
        side -= 2;
    }
    printf ("%d\n", a [row] [col]);
    return 0;
}
----------------------------------------

int main () {
    int cango;
    do {
        printf ("%d ", matrix [y] [x]);
        count++;
        cango = go_forward ();
        if (cango != 0) {
            turn_right ();
            cango = go_forward ();
        }
    }
    while (cango == 0 && count < 25);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22593413_22593603_2_12
22593413_22593747_21_31
Title: Allocate memory for a pointer to a struct inside a function 
----------------------------------------

myName *structMemInit (void) {
    myName *myNameIs = (myName *) calloc (1, sizeof (myName));
    if (myNameIs == NULL) {
        printf ("allocating memory didn't work!\n");
        exit (1);
    }
    else {
        myNameIs->name = "Zach";
        return myNameIs;
    }
}
----------------------------------------

myName *structMemInit () {
    myName *p = (myName *) malloc (sizeof (myName));
    if (p == NULL) {
        fprintf (stderr, "allocating memory didn't work!\n");
    }
    else {
        fprintf (stderr, "allocating %d memory work!\n", sizeof (myName));
        p->name = strdup ("Zach");
    }
    return p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22593438_22593563_5_16
22593438_22593622_3_23
Title: In C how do I dynamically add command line arguments to a string array? 
----------------------------------------

int main (int argc, char *argv []) {
    char **myStrings;
    int ii;
    myStrings = malloc (argc * sizeof *myStrings);
    for (ii = 0; ii < argc; ii++) {
        myStrings[ii] = malloc (strlen (argv[ii]) + 1);
        strcpy (myStrings [ii], argv [ii]);
    }
    for (ii = 0; ii < argc; ii++) {
        printf ("copied argument %d: it is '%s'\n", ii, myStrings [ii]);
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    char *strlist [argc];
    int i = 0;
    while (i < argc) {
        strlist[i] = malloc (1 + strlen (argv[i]));
        if (strlist[i] == NULL) {
            printf ("not enough memory to allocate\n");
        }
        strcpy (strlist [i], argv [i]);
        i++;
    }
    for (i = 0; i < argc; i++) {
        free (strlist [i]);
        strlist[i] = NULL;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22598932_22599033_3_20
22598932_22599080_3_20
Title: Trying to get a c program to display this in GCC 
----------------------------------------

int main () {
    int i = 0;
    int days = 30;
    int day = 1;
    for (i = 0; i < days + day + 1; ++i) {
        if (i > day) {
            printf ("%02d ", i - day);
        }
        else {
            printf ("   ");
        }
        if (i % 7 == 0) {
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int weekDay = 3;
    int monthDay = 30;
    int i, wd, d;
    wd = weekDay - 1;
    printf ("Mo Tu We Th Fr Sa So\n");
    for (i = 0; i < wd; ++i)
        printf ("%*s", 3, "");
    for (d = 1; d <= monthDay; ++d) {
        printf ("%02d ", d);
        if (++wd == 7) {
            printf ("\n");
            wd = 0;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22599456_22599654_4_19
22599456_22599707_4_15
Title: How to parse an input line with sscanf? 
----------------------------------------

int main (int argc, char *argv []) {
    char const *line = "Mary Lou Gilley 17000 1";
    char name [255];
    int mileage, years, name_length;
    sscanf (line, "%254[^0123456789]%n %d %d ", name, & name_length, & mileage, & years);
    name[name_length - 1] = '\0';
    printf ("data: '%s', %d, %d", name, mileage, years);
    return 0;
}
----------------------------------------

int main () {
    char *buf;
    int mileage, years;
    while (!feof (stdin)) {
        if (fscanf (stdin, "%m[^0-9] %d %d", &buf, &mileage, &years) == 3) {
            fprintf (stderr, "Name:\t %s,\nMileage:\t %d,\nYears:\t %d.\n", buf, mileage, years);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22636934_22637944_1_31
22636934_22638949_3_22
Title: Error in float to string conversion 
----------------------------------------

int main () {
    float f = 2.44;
    int i, len;
    char str [100];
    i = (int) f;
    itoa (i, str, 10);
    len = strlen (str);
    str[len] = '.';
    f = f - i;
    while (len <= 6) {
        len++;
        f *= 10;
        str[len] = '0' + (int) f;
        f = f - (int) f;
    }
    str[len + 1] = '\0';
    for (; len > 0 && (str[len] == '0' || str[len] == '.'); --len) {
        if (str[len] == '.') {
            str[len] = '\0';
            break;
        }
        str[len] = '\0';
    }
    printf ("%s", str);
    return 0;
}
----------------------------------------

int main () {
    float origf = 2.44;
    float f = origf, newf = 0.0;
    int i, j = 0;
    int powerOfTen = 1;
    i = (int) f;
    f = f - i;
    do {
        f *= 10;
        powerOfTen *= 10;
        j = j * 10 + (int) f;
        f = f - (int) f;
        newf = i + (float) j / powerOfTen;
    }
    while ((origf + FLT_EPSILON) > newf && newf > (origf - FLT_EPSILON));
    printf ("%d %d\n", i, j);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22648948_22649380_1_14
22648948_22649513_1_19
Title: collatz c code logical error 
----------------------------------------

static void collatz (int i) {
    int count = 0;
    int array [50];
    array[0] = i;
    while (count < 49) {
        int j = array[count++];
        if (j == 1)
            break;
        else if (j % 2 == 0)
            array[count] = j / 2;
        else
            array[count] = 3 * j + 1;
    }
}
----------------------------------------

static void collatz (int i) {
    int x = 0, a = 0, res = 0, count = 0;
    int array [50] = {0};
    array[0] = i;
    while (array[count] > 1 && count < 50) {
        if (array[count] % 2 == 0) {
            count++;
            array[count] = array[count - 1] / 2;
        }
        else {
            count++;
            array[count] = 3 * array[count - 1] - 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22652168_22652346_1_19
22652168_22652610_1_21
Title: reversing order of bytes in c 
----------------------------------------

void reverse_order (unsigned char *start, unsigned char *end) {
    int i = 2;
    int t;
    do {
        t = *start;
        *start = *end;
        *end = t;
        ++start;
        --end;
        --i;
    }
    while (i > 0);
    int j;
    start -= 2;
    for (j = 0; j < 4; j++) {
        printf ("the value: 0x%x\n", start [j]);
    }
}
----------------------------------------

void reverse_order (unsigned char *start, unsigned char *end) {
    int i = 4;
    unsigned char cp;
    unsigned char *iter = start;
    int j;
    do {
        cp = *iter;
        *iter = *end;
        *end = cp;
        ++iter;
        --end;
        i -= 2;
    }
    while (i > 0);
    for (j = 0; j < 4; j++) {
        printf ("the value: 0x%x\n", start [j]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22652168_22652346_1_19
22652168_22652716_1_10
Title: reversing order of bytes in c 
----------------------------------------

void reverse_order (unsigned char *start, unsigned char *end) {
    int i = 2;
    int t;
    do {
        t = *start;
        *start = *end;
        *end = t;
        ++start;
        --end;
        --i;
    }
    while (i > 0);
    int j;
    start -= 2;
    for (j = 0; j < 4; j++) {
        printf ("the value: 0x%x\n", start [j]);
    }
}
----------------------------------------

void reverse_order (unsigned char *start, unsigned char *end) {
    while (end > start) {
        *start ^= *end;
        *end ^= *start;
        *start ^= *end;
        ++start;
        --end;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22652168_22652610_1_21
22652168_22652716_1_10
Title: reversing order of bytes in c 
----------------------------------------

void reverse_order (unsigned char *start, unsigned char *end) {
    int i = 4;
    unsigned char cp;
    unsigned char *iter = start;
    int j;
    do {
        cp = *iter;
        *iter = *end;
        *end = cp;
        ++iter;
        --end;
        i -= 2;
    }
    while (i > 0);
    for (j = 0; j < 4; j++) {
        printf ("the value: 0x%x\n", start [j]);
    }
}
----------------------------------------

void reverse_order (unsigned char *start, unsigned char *end) {
    while (end > start) {
        *start ^= *end;
        *end ^= *start;
        *start ^= *end;
        ++start;
        --end;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22658143_22658906_1_20
22658143_22659809_1_21
Title: C program which accepts only integers 1-42 into array and they cannot repeat in function 
----------------------------------------

void getnumbers (int *lotto_no) {
    int i, n, bins [42] = {};
    printf ("Enter your numbers\n");
    for (i = 0; i < NUMBERS; i++) {
        do {
            printf ("Please enter number %d, between 1 and 42\n", i + 1);
            scanf ("%d", & n);
        }
        while (n < 1 || n > 42);
        lotto_no[i] = n;
        ++bins[n - 1];
        printf ("Number %d accepted\n", i + 1);
    }
    for (i = 0; i < 42; ++i) {
        if (bins[i] > 0)
            printf ("number %d entered %d times\n", i +1, bins[i]);
    }
}
----------------------------------------

void getnumbers (int *lotto_no) {
    int i, j, temp;
    printf ("Enter 6 different numbers in the range 1-42\n");
    for (i = 0; i < 6; i++) {
        printf ("Enter number %d ", i + 1);
        scanf ("%d", & temp);
        for (j = 0; j < i; j++) {
            while ((temp == *(lotto_no + j)) || (temp < 1 || temp > 42)) {
                printf ("Wrong input. Please enter a unique number in the range 1-42");
                scanf ("%d", & temp);
                j = 0;
            }
        }
        *(lotto_no + i) = temp;
    }
    return
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22661614_22661931_21_53
22661614_22661931_78_96
Title: message queue in C: implementing 2 way comm 
----------------------------------------

main () {
    int msqid;
    int msgflg = IPC_CREAT | 0666;
    key_t key;
    struct msgbuf sbuf;
    size_t buflen;
    key = 1234;
    if ((msqid = msgget (key, msgflg)) < 0)
        die ("msgget");
    sbuf.mtype = 1;
    printf ("Enter a message to add to message queue : ");
    scanf ("%[^\n]", sbuf.mtext);
    getchar ();
    buflen = strlen (sbuf.mtext) + 1;
    if (msgsnd (msqid, &sbuf, buflen, IPC_NOWAIT) < 0) {
        printf ("%d, %d, %s, %d\n", msqid, sbuf.mtype, sbuf.mtext, buflen);
        die ("msgsnd");
    }
    else
        printf ("Message Sent\n");
    exit (0);
}
----------------------------------------

main () {
    int msqid;
    key_t key;
    struct msgbuf rcvbuffer;
    key = 1234;
    if ((msqid = msgget (key, 0666)) < 0)
        die ("msgget()");
    if (msgrcv (msqid, &rcvbuffer, MAXSIZE, 1, 0) < 0)
        die ("msgrcv");
    printf ("%s\n", rcvbuffer.mtext);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22685736_22686024_3_12
22685736_22687715_12_34
Title: How to scan a user defined number of strings in C? 
----------------------------------------

int main () {
    int n;
    scanf ("%d ", & n);
    char a [100] [10];
    for (int i = 0; i < n; i++) {
        fgets (a [i], 10, stdin);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, j, n.buf_len;
    puts ("How many words do you wish to enter?");
    scanf (" %d", & n);
    buf_len = MAX_TOTAL_BUFFER / n;
    if (buf_len > MAX_SINGLE_BUFFER)
        buf_len = MAX_SINGLE_BUFFER;
    else if (buf_len < MIN_SINGLE_BUFFER)
        buf_len = MIN_SINGLE_BUFFER;
    while ((j = getchar ()) != EOF && j != '\n')
        ;
    char a [n] [buf_len];
    printf ("Please enter %d words (max %d chars long)\n", n, buf_len - 1);
    for (i = 0; i < n; ++i) {
        fgets (a [i], buf_len, stdin);
        if (strlen (a [i] >= buf_len) while ((j = getchar ()) != EOF && j != '\n');
    }
    for (i = 0; i < n; ++i)
        printf ("Line %d: %s\n", i +1, a[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22685895_22686278_1_26
22685895_22687077_3_12
Title: Coding a Log Write function (wrapping vfprintf) : how to modify the text string to print? 
----------------------------------------

void write_log (enum LogType_e type, const char *file, const char *function, int line, const char *format, ... ) {
    va_list arg;
    int rv;
    switch (type) {
    case TYPE_ERROR :
        fprintf (log_fd, "Error: ");
        break;
    case TYPE_WARN :
        fprintf (log_fd, "Warning: ");
        break;
    }
    if (file) {
        if (function) {
            fprintf (log_fd, "[%s in %s, %d] ", function, file, line);
        }
        else {
            fprintf (log_fd, "[%s, %d] ", file, line);
        }
    }
    va_start (arg, format);
    rv = vfprintf (log_fd, format, arg);
    va_end (arg);
}
----------------------------------------

int write_log (enum LogType_e type, FILE *fp, const char *file, const char *function, int line, const char *format, ... ) {
    va_list arg;
    int rv;
    va_start (arg, format);
    fprintf (fp, "file %s:function %s:line %d:", file, function, __LINE__);
    rv = vfprintf (fp, format, arg);
    va_end (arg);
    return rv;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22690466_30909676_5_100
22690466_36083787_15_102
Title: Matrix Multiplication for any proper order with dynamic memory allocation 
----------------------------------------

int main () {
    int *ans, *first, *second;
    int *A, *B, *C;
    int i, j, k = 0;
    int rowA, colA, sizeA, sizeB, sizeC;
    int rowB, colB;
    printf ("Enter the row's and column of 1st matrix\n");
    scanf ("%d%d", & rowA, & colA);
    printf ("Enter the row's and column of 2nd matrix\n");
    scanf ("%d%d", & rowB, & colB);
    if (colA != rowB) {
        printf ("Error => colA must be equal to rowB\n");
        getch ();
        exit (EXIT_SUCCESS);
    }
    sizeC = rowA * colB;
    sizeA = rowA * colA;
    sizeB = rowB * colB;
    A = (int *) malloc (sizeA * sizeof (int *));
    first = A;
    B = (int *) malloc (sizeB * sizeof (int *));
    second = B;
    C = (int *) malloc (sizeC * sizeof (int *));
    ans = C;
    printf ("Enter the elements of the first matrix A\n");
    for (i = 0; i < sizeA; i++, first++)
        scanf ("%d", first);
    printf ("Enter the elements of the second matrix B\n");
    for (i = 0; i < sizeB; i++, second++)
        scanf ("%d", second);
    first = A;
    second = B;
    if (rowA == 1 && colB == 1) {
        for (i = 0; i < rowA; i++) {
            for (j = 0; j < colB; j++) {
                *ans = 0;
                for (k = 0; k < rowB; k++)
                    *ans = *ans + (*(first + (k + i * colA))) * (*(second + (j + k * colB)));
                ans++;
            }
        }
    }
    else {
        for (i = 0; i < rowA; i++) {
            for (j = 0; j < colB; j++) {
                *ans = 0;
                for (k = 0; k < rowB; k++)
                    *ans = *ans + (*(first + (k + i * colA))) * (*(second + (j + k * rowB)));
                ans++;
            }
        }
    }
    printf ("\nThe value of matrix 'C' = \n");
    ans = C;
    for (i = 0; i < rowA; i++) {
        printf ("\n");
        for (j = 0; j < colB; j++, ans++)
            printf ("%d\t", *ans);
    }
    free (A);
    free (B);
    free (C);
    getch ();
}
----------------------------------------

int main () {
    int ro1, co1, ro2, co2;
    double **a1, **b1, **c1;
    ro1 = 2;
    co1 = 3;
    ro2 = 3;
    co2 = 4;
    printf ("Ex1:__________________________________________________" "__________________________ \n");
    double (* (a [])) = {(double []) {1, 3, 5}, (double []) {2, 4, 0}};
    double (* (b [])) = {(double []) {6, 2, 4, 8}, (double []) {1, 7, 0, 9}, (double []) {0, 3, 5, 1}};
    printMatrix (a, ro1, co1);
    printMatrix (b, ro2, co2);
    printf ("MatMult \n");
    double **c;
    allocate_mem (& c, ro1, co2);
    multMatrixp (a, b, c, ro1, co1, ro2, co2);
    printMatrix (c, ro1, co2);
    printMatrixE (c, ro1, co2);
    deallocate_mem (& c, ro1);
    printf ("Ex2:__________________________________________________" "__________________________ \n");
    scanf ("%d%d", & ro1, & co1);
    readMatrix (& a1, ro1, co1);
    printMatrix (a1, ro1, co1);
    scanf ("%d%d", & ro2, & co2);
    readMatrix (& b1, ro2, co2);
    printMatrix (b1, ro2, co2);
    printf ("MatMult \n");
    multMatrixpp (a1, b1, & c1, ro1, co1, ro2, co2);
    printMatrix (c1, ro1, co2);
    printMatrixE (c1, ro1, co2);
    deallocate_mem (& a1, ro1);
    deallocate_mem (& b1, ro2);
    deallocate_mem (& c1, ro1);
    printf ("Ex3:__________________________________________________" "__________________________ \n");
    scanf ("%d%d", & ro1, & co1);
    a1 = readMatrixf (ro1, co1);
    printMatrix (a1, ro1, co1);
    scanf ("%d%d", & ro2, & co2);
    b1 = readMatrixf (ro2, co2);
    printMatrix (b1, ro2, co2);
    printf ("MatMult \n");
    c1 = multMatrixpf (a1, b1, ro1, co1, ro2, co2);
    printMatrix (c1, ro1, co2);
    printMatrixE (c1, ro1, co2);
    deallocate_mem (& a1, ro1);
    deallocate_mem (& b1, ro2);
    deallocate_mem (& c1, ro1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22696405_22697005_1_12
22696405_22697513_1_19
Title: SplitLinkedList how to split 
----------------------------------------

void split (ListNode *head, ListNode **even, ListNode **odd) {
    ListNode **lists [2] = {even, odd};
    for (; head; head = head->next) {
        ListNode ***target = &lists[head->item & 1];
        **target = malloc (sizeof ***target);
        ***target = (ListNode) {head->item};
        *target = &((**target)->next);
    }
    printList (*even);
    printList (*odd);
}
----------------------------------------

void split (ListNode *org, ListNode **ptrEvenList, ListNode **ptrOddList) {
    for (; org; org = org->next) {
        ListNode *new;
        new = malloc (sizeof *new);
        new->item = org->item;
        new->next = NULL;
        if (new->item % 2) {
            *ptrOddList = new;
            ptrOddList = &new->next;
        }
        else {
            *ptrEvenList = new;
            ptrEvenList = &new->next;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22710308_22710644_3_19
22710308_22712322_27_51
Title: Dynamic allocation of a struct in C 
----------------------------------------

int main () {
    news *note = NULL;
    int i = 0;
    int j = 0;
    if ((note = malloc (sizeof (news))) == NULL) {
        return (-1);
    }
    for (j = 0; j < 5; ++j) {
        i = insert (&note, "hello", i);
        printf ("%s\n", note [i - 1].name);
    }
    system ("pause");
}
----------------------------------------

int main () {
    news *note = NULL;
    int j, k;
    for (j = 0; j < 5; j++) {
        news *new_note = insert (note, "hello", j);
        if (new_note) {
            note = new_note;
            printf ("%s\n", note [j].name);
        }
        else
            break;
    }
    for (k = 0; k < j; k++)
        free (note[k].name);
    free (note);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22714115_22714350_2_25
22714115_22715348_3_39
Title: "In scanf how can I ignore one of two but not both characters?" 
----------------------------------------

int main (void) {
    char buf [256];
    int dd1, mm1, yyyy1;
    printf ("input date: ");
    fgets (buf, 256, stdin);
    if (sscanf (buf, "%d-%d-%d", &dd1, &mm1, &yyyy1) != 3) {
        if (sscanf (buf, "%d/%d/%d", &dd1, &mm1, &yyyy1) != 3) {
            printf ("Wrong format!\n");
        }
        else {
            printf ("format with /\n");
        }
    }
    else {
        printf ("Format with -\n");
    }
}
----------------------------------------

int main (void) {
    int yy, mm, dd;
    char del1 [2], del2 [2];
    const char *dates [] = {"28-03-2014", "-28-03-2014", "28--03-2014", "28-03--2014", "28/03/2014", "-28/03/2014", "28/-03/2014", "28/03/-2014", "28-3-2014", "8-03-2014", "28-03-14", "28-03/2014", "28/03-2014", "28 03 2014", NULL,};
    for (size_t i = 0; dates[i]; i++) {
        int ret = sscanf (dates[i], " %3d%1[/-]%3d%1[/-]%5d", &dd, del1, &mm, del2, &yy);
        if (ret != 5 || del1[0] != del2[0]) {
            fprintf (stderr, "%s : syntax error\n", dates [i]);
            continue;
        }
        printf ("del = %c, yy = %d, mm = %d, dd = %d\n", del1 [0], yy, mm, dd);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22724146_22724345_1_30
22724146_22724790_1_25
Title: Trouble with Link List insert placement function in C. 
----------------------------------------

Node *orderedInsert (Node *p, int newval) {
    Node *tmp = malloc (sizeof (Node));
    if (tmp == NULL)
        return 0;
    tmp->data = newval;
    if (p == NULL || newval < p->data) {
        tmp->next = p;
        return tmp;
    }
    Node **pp = &p->next;
    while ((*pp) != NULL && (*pp)->data < tmp->data) {
        pp = &(*pp)->next;
    }
    tmp->next = *pp;
    *pp = tmp;
    return p;
}
----------------------------------------

Node *orderedInsert (Node *p, int newval) {
    Node *new = malloc (sizeof new) new->data = newval;
    if (!p or p->data >= newval) {
        new->next = p;
        return new;
    }
    Node *ret = p;
    while (p->next and p->next->data < newval)
        p = p->next;
    new->next = p->next;
    p->next = new;
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22726186_22726342_5_23
22726186_22726698_22_41
Title: storing an array as a linked list in C 
----------------------------------------

int main () {
    char str [] = "cheese", chr;
std :
    : list < char > clist;
    for (int i = 0, len = strlen (str); i < len; i++)
        clist.push_back (str[i]);
    clist.push_back ('\0');
    do {
        chr = clist.front ();
        cout << chr << endl;
        clist.pop_front ();
    }
    while (chr);
    _getwch ();
    return 0;
}
----------------------------------------

int main () {
    char str [] = "cheese";
    node *first = NULL, *cur = NULL;
    for (int i = 0, len = strlen (str); i < len; i++) {
        cur = createNode (str[i], cur);
        if (first == NULL)
            first = cur;
    }
    cur = first;
    while (cur != NULL) {
        printf ("%c\n", cur -> data);
        cur = cur->next;
    }
    _getwch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22739266_22739337_1_19
22739266_22739377_1_15
Title: function help in C 
----------------------------------------

int hashLetter (const char *mneumonic) {
    for (int i = 0; i < 50; i++) {
        if (strings_label_table[i] != NULL) {
            if (strcmp (strings_label_table[i], mneumonic) == 0) {
                printf (" strings_label_table[i] is equal\n");
                printf (" strings_label_table[i] is %s \n", strings_label_table [i]);
                return string_equal_flag = 1;
            }
        }
    }
    return string_not_flag = 1;
}
----------------------------------------

int hashLetter (const char *mneumonic) {
    int i = 0;
    for (i = 0; i < 50; i++) {
        if (strings_label_table[i] != NULL) {
            if (strcmp (strings_label_table[i], mneumonic) == 0) {
                return 1;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22743519_22743648_4_14
22743519_22762747_3_13
Title: I'm getting runtime error in this program...why? 
----------------------------------------

int main () {
    char s1 [10], s2 [10], s3 [20];
    scanf ("%s", s1);
    scanf ("%s", s2);
    strcat (s3, s1);
    strcat (s3, s2);
    printf ("%s", s3);
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    char s1 [10], s2 [10], s3 [20];
    int i, j, n = 1;
    scanf ("%9s", s1);
    scanf ("%9s", s2);
    sprintf (s3, "%s%s", s1, s2);
    printf ("%s\n", s3);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22743519_22743648_4_14
22743519_22806181_4_29
Title: I'm getting runtime error in this program...why? 
----------------------------------------

int main () {
    char s1 [10], s2 [10], s3 [20];
    scanf ("%s", s1);
    scanf ("%s", s2);
    strcat (s3, s1);
    strcat (s3, s2);
    printf ("%s", s3);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    char a [20], b [10], c;
    int x [20];
    int i, j, l, n, swap;
    scanf ("%s", a);
    scanf ("%s", b);
    strcat (a, b);
    l = strlen (a);
    for (i = 0; i < l; i++) {
        n = a[i];
        x[i] = n;
    }
    for (i = 0; i < (l - 1); i++) {
        for (j = 0; j < (l - i - 1); j++) {
            if (x[j] > x[j + 1]) {
                swap = x[j];
                x[j] = x[j + 1];
                x[j + 1] = swap;
            }
        }
    }
    for (i = 0; i < l; i++) {
        c = x[i];
        printf ("%c", c);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22743519_22762747_3_13
22743519_22806181_4_29
Title: I'm getting runtime error in this program...why? 
----------------------------------------

int main (void) {
    char s1 [10], s2 [10], s3 [20];
    int i, j, n = 1;
    scanf ("%9s", s1);
    scanf ("%9s", s2);
    sprintf (s3, "%s%s", s1, s2);
    printf ("%s\n", s3);
    return 0;
}
----------------------------------------

int main () {
    char a [20], b [10], c;
    int x [20];
    int i, j, l, n, swap;
    scanf ("%s", a);
    scanf ("%s", b);
    strcat (a, b);
    l = strlen (a);
    for (i = 0; i < l; i++) {
        n = a[i];
        x[i] = n;
    }
    for (i = 0; i < (l - 1); i++) {
        for (j = 0; j < (l - i - 1); j++) {
            if (x[j] > x[j + 1]) {
                swap = x[j];
                x[j] = x[j + 1];
                x[j + 1] = swap;
            }
        }
    }
    for (i = 0; i < l; i++) {
        c = x[i];
        printf ("%c", c);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22743519_22762747_3_13
22743519_22806989_10_25
Title: I'm getting runtime error in this program...why? 
----------------------------------------

int main (void) {
    char s1 [10], s2 [10], s3 [20];
    int i, j, n = 1;
    scanf ("%9s", s1);
    scanf ("%9s", s2);
    sprintf (s3, "%s%s", s1, s2);
    printf ("%s\n", s3);
    return 0;
}
----------------------------------------

int main () {
    char s1 [10], s2 [10], s3 [20];
    scanf ("%s", s1);
    scanf ("%s", s2);
    strcpy (s3, s1);
    strcat (s3, s2);
    qsort (s3, strlen (s3), sizeof (char), compare);
    printf ("%s", s3);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22743519_22806181_4_29
22743519_22806989_10_25
Title: I'm getting runtime error in this program...why? 
----------------------------------------

int main () {
    char a [20], b [10], c;
    int x [20];
    int i, j, l, n, swap;
    scanf ("%s", a);
    scanf ("%s", b);
    strcat (a, b);
    l = strlen (a);
    for (i = 0; i < l; i++) {
        n = a[i];
        x[i] = n;
    }
    for (i = 0; i < (l - 1); i++) {
        for (j = 0; j < (l - i - 1); j++) {
            if (x[j] > x[j + 1]) {
                swap = x[j];
                x[j] = x[j + 1];
                x[j + 1] = swap;
            }
        }
    }
    for (i = 0; i < l; i++) {
        c = x[i];
        printf ("%c", c);
    }
}
----------------------------------------

int main () {
    char s1 [10], s2 [10], s3 [20];
    scanf ("%s", s1);
    scanf ("%s", s2);
    strcpy (s3, s1);
    strcat (s3, s2);
    qsort (s3, strlen (s3), sizeof (char), compare);
    printf ("%s", s3);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22747031_22748314_1_11
22747031_22888878_1_12
Title: How come my straight counter remains at a value of zero? 
----------------------------------------

int isStraight (card hand []) {
    int step = 0;
    for (int i = 1; i < HAND_SIZE; i++)
        if (hand[i].pip != hand[i - 1].pip + 1)
            if (step || hand->pip != 1 || hand[i].pip != hand[i - 1].pip + 13 - HAND_SIZE)
                return 0;
            else
                step = 1;
    return 1;
}
----------------------------------------

int isStraight (card hand []) {
    int i;
    if (hand[0].pips == 13 && hand[1].pips == 12 && hand[2].pips == 11 && hand[3].pips == 10 && hand[4].pips == 1)
        return 1;
    for (i = 0; i < (HAND_SIZE - 1); i += 1) {
        if (hand[i].pips != hand[i + 1].pips)
            return 0;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_28055928_5_37
22776422_28830131_4_77
Title: Caesar Cipher Simple Program 
----------------------------------------

void main () {
    int key, i;
    char data [200];
    printf ("\nEnter the alphabetical plain text in lowercase to be encrypted:\n");
    gets (data);
    printf ("\nEnter the key value,e.g.:3,4,5,etc. : ");
    scanf ("%d", & key);
    if (key > 26)
        key = key % 26;
    for (i = 0; i < strlen (data); i++) {
        if (data[i] == ' ') {
            continue;
        }
        else {
            if (data[i] >= 'x') {
                data[i] = data[i] - 26;
            }
            data[i] = data[i] + key;
        }
    }
    printf ("Your cipher text is: %s\n", data);
}
----------------------------------------

void main () {
    int i, c;
    char str [100];
    printf ("Enter the Text Message : ");
    gets (str);
    for (i = 0; i < strlen (str); i++) {
        switch (str[i]) {
        case 'x' :
            str[i] = 'a';
            continue;
        case 'y' :
            str[i] = 'b';
            continue;
        case 'z' :
            str[i] = 'c';
            continue;
        case 'X' :
            str[i] = 'A';
            continue;
        case 'Y' :
            str[i] = 'B';
            continue;
        case 'Z' :
            str[i] = 'C';
            continue;
        }
        if (str[i] >= 'a' && str[i] < 'x')
            str[i] = str[i] + 3;
        else if (str[i] >= 'A' && str[i] < 'X')
            str[i] = str[i] + 3;
    }
    printf ("Message After Encryption : \n");
    puts (str);
    for (i = 0; i < strlen (str); i++) {
        switch (str[i]) {
        case 'a' :
            str[i] = 'x';
            continue;
        case 'b' :
            str[i] = 'y';
            continue;
        case 'c' :
            str[i] = 'z';
            continue;
        case 'A' :
            str[i] = 'X';
            continue;
        case 'B' :
            str[i] = 'Y';
            continue;
        case 'C' :
            str[i] = 'Z';
            continue;
        }
        if (str[i] >= 'd' && str[i] <= 'z')
            str[i] = str[i] - 3;
        else if (str[i] >= 'D' && str[i] < 'Z')
            str[i] = str[i] - 3;
    }
    printf ("Message After Decryption : \n");
    puts (str);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_28055928_5_37
22776422_35202254_8_22
Title: Caesar Cipher Simple Program 
----------------------------------------

void main () {
    int key, i;
    char data [200];
    printf ("\nEnter the alphabetical plain text in lowercase to be encrypted:\n");
    gets (data);
    printf ("\nEnter the key value,e.g.:3,4,5,etc. : ");
    scanf ("%d", & key);
    if (key > 26)
        key = key % 26;
    for (i = 0; i < strlen (data); i++) {
        if (data[i] == ' ') {
            continue;
        }
        else {
            if (data[i] >= 'x') {
                data[i] = data[i] - 26;
            }
            data[i] = data[i] + key;
        }
    }
    printf ("Your cipher text is: %s\n", data);
}
----------------------------------------

int main (int argc, char *argv []) {
    char in [MAXSIZE];
    char en [MAXSIZE] = {0};
    read (STDIN_FILENO, in, MAXSIZE);
    encrypt (in, en);
    printf ("%s\n%s\n", in, en);
    bzero (in, strlen (in));
    decrypt (en, in);
    printf ("%s\n%s\n", en, in);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_28055928_5_37
22776422_36131630_5_31
Title: Caesar Cipher Simple Program 
----------------------------------------

void main () {
    int key, i;
    char data [200];
    printf ("\nEnter the alphabetical plain text in lowercase to be encrypted:\n");
    gets (data);
    printf ("\nEnter the key value,e.g.:3,4,5,etc. : ");
    scanf ("%d", & key);
    if (key > 26)
        key = key % 26;
    for (i = 0; i < strlen (data); i++) {
        if (data[i] == ' ') {
            continue;
        }
        else {
            if (data[i] >= 'x') {
                data[i] = data[i] - 26;
            }
            data[i] = data[i] + key;
        }
    }
    printf ("Your cipher text is: %s\n", data);
}
----------------------------------------

int main () {
    int i, key;
    char plain [100], cipher [100];
    printf ("Enter key:");
    scanf ("%d", & key);
    key = key % 26;
    fflush (stdin);
    printf ("Enter text:");
    gets (plain);
    for (i = 0; i < strlen (plain); i++) {
        if (isalpha (plain[i])) {
            if (islower (plain[i]))
                cipher[i] = (plain[i] + key - 'a') % 26 + 'a';
            else
                cipher[i] = (plain[i] + key - 'A') % 26 + 'A';
        }
        else
            cipher[i] = plain[i];
    }
    cipher[i] = '\0';
    printf ("After ciphering: %s", cipher);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_28055928_5_37
22776422_38129072_5_21
Title: Caesar Cipher Simple Program 
----------------------------------------

void main () {
    int key, i;
    char data [200];
    printf ("\nEnter the alphabetical plain text in lowercase to be encrypted:\n");
    gets (data);
    printf ("\nEnter the key value,e.g.:3,4,5,etc. : ");
    scanf ("%d", & key);
    if (key > 26)
        key = key % 26;
    for (i = 0; i < strlen (data); i++) {
        if (data[i] == ' ') {
            continue;
        }
        else {
            if (data[i] >= 'x') {
                data[i] = data[i] - 26;
            }
            data[i] = data[i] + key;
        }
    }
    printf ("Your cipher text is: %s\n", data);
}
----------------------------------------

void main () {
    char p [20];
    int key, i, enc;
    clrscr ();
    printf ("Enter Plain text=");
    gets (p);
    printf ("\n Enter Key=");
    scanf ("%d", & key);
    for (i = 0; i < strlen (p); i++) {
        p[i] = tolower (p[i]);
        enc = ((p[i] - 97) + key) % 26;
        printf ("%c", enc + 97);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_28830131_4_77
22776422_35202254_8_22
Title: Caesar Cipher Simple Program 
----------------------------------------

void main () {
    int i, c;
    char str [100];
    printf ("Enter the Text Message : ");
    gets (str);
    for (i = 0; i < strlen (str); i++) {
        switch (str[i]) {
        case 'x' :
            str[i] = 'a';
            continue;
        case 'y' :
            str[i] = 'b';
            continue;
        case 'z' :
            str[i] = 'c';
            continue;
        case 'X' :
            str[i] = 'A';
            continue;
        case 'Y' :
            str[i] = 'B';
            continue;
        case 'Z' :
            str[i] = 'C';
            continue;
        }
        if (str[i] >= 'a' && str[i] < 'x')
            str[i] = str[i] + 3;
        else if (str[i] >= 'A' && str[i] < 'X')
            str[i] = str[i] + 3;
    }
    printf ("Message After Encryption : \n");
    puts (str);
    for (i = 0; i < strlen (str); i++) {
        switch (str[i]) {
        case 'a' :
            str[i] = 'x';
            continue;
        case 'b' :
            str[i] = 'y';
            continue;
        case 'c' :
            str[i] = 'z';
            continue;
        case 'A' :
            str[i] = 'X';
            continue;
        case 'B' :
            str[i] = 'Y';
            continue;
        case 'C' :
            str[i] = 'Z';
            continue;
        }
        if (str[i] >= 'd' && str[i] <= 'z')
            str[i] = str[i] - 3;
        else if (str[i] >= 'D' && str[i] < 'Z')
            str[i] = str[i] - 3;
    }
    printf ("Message After Decryption : \n");
    puts (str);
    getch ();
}
----------------------------------------

int main (int argc, char *argv []) {
    char in [MAXSIZE];
    char en [MAXSIZE] = {0};
    read (STDIN_FILENO, in, MAXSIZE);
    encrypt (in, en);
    printf ("%s\n%s\n", in, en);
    bzero (in, strlen (in));
    decrypt (en, in);
    printf ("%s\n%s\n", en, in);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_28830131_4_77
22776422_36131630_5_31
Title: Caesar Cipher Simple Program 
----------------------------------------

void main () {
    int i, c;
    char str [100];
    printf ("Enter the Text Message : ");
    gets (str);
    for (i = 0; i < strlen (str); i++) {
        switch (str[i]) {
        case 'x' :
            str[i] = 'a';
            continue;
        case 'y' :
            str[i] = 'b';
            continue;
        case 'z' :
            str[i] = 'c';
            continue;
        case 'X' :
            str[i] = 'A';
            continue;
        case 'Y' :
            str[i] = 'B';
            continue;
        case 'Z' :
            str[i] = 'C';
            continue;
        }
        if (str[i] >= 'a' && str[i] < 'x')
            str[i] = str[i] + 3;
        else if (str[i] >= 'A' && str[i] < 'X')
            str[i] = str[i] + 3;
    }
    printf ("Message After Encryption : \n");
    puts (str);
    for (i = 0; i < strlen (str); i++) {
        switch (str[i]) {
        case 'a' :
            str[i] = 'x';
            continue;
        case 'b' :
            str[i] = 'y';
            continue;
        case 'c' :
            str[i] = 'z';
            continue;
        case 'A' :
            str[i] = 'X';
            continue;
        case 'B' :
            str[i] = 'Y';
            continue;
        case 'C' :
            str[i] = 'Z';
            continue;
        }
        if (str[i] >= 'd' && str[i] <= 'z')
            str[i] = str[i] - 3;
        else if (str[i] >= 'D' && str[i] < 'Z')
            str[i] = str[i] - 3;
    }
    printf ("Message After Decryption : \n");
    puts (str);
    getch ();
}
----------------------------------------

int main () {
    int i, key;
    char plain [100], cipher [100];
    printf ("Enter key:");
    scanf ("%d", & key);
    key = key % 26;
    fflush (stdin);
    printf ("Enter text:");
    gets (plain);
    for (i = 0; i < strlen (plain); i++) {
        if (isalpha (plain[i])) {
            if (islower (plain[i]))
                cipher[i] = (plain[i] + key - 'a') % 26 + 'a';
            else
                cipher[i] = (plain[i] + key - 'A') % 26 + 'A';
        }
        else
            cipher[i] = plain[i];
    }
    cipher[i] = '\0';
    printf ("After ciphering: %s", cipher);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_28830131_4_77
22776422_38129072_5_21
Title: Caesar Cipher Simple Program 
----------------------------------------

void main () {
    int i, c;
    char str [100];
    printf ("Enter the Text Message : ");
    gets (str);
    for (i = 0; i < strlen (str); i++) {
        switch (str[i]) {
        case 'x' :
            str[i] = 'a';
            continue;
        case 'y' :
            str[i] = 'b';
            continue;
        case 'z' :
            str[i] = 'c';
            continue;
        case 'X' :
            str[i] = 'A';
            continue;
        case 'Y' :
            str[i] = 'B';
            continue;
        case 'Z' :
            str[i] = 'C';
            continue;
        }
        if (str[i] >= 'a' && str[i] < 'x')
            str[i] = str[i] + 3;
        else if (str[i] >= 'A' && str[i] < 'X')
            str[i] = str[i] + 3;
    }
    printf ("Message After Encryption : \n");
    puts (str);
    for (i = 0; i < strlen (str); i++) {
        switch (str[i]) {
        case 'a' :
            str[i] = 'x';
            continue;
        case 'b' :
            str[i] = 'y';
            continue;
        case 'c' :
            str[i] = 'z';
            continue;
        case 'A' :
            str[i] = 'X';
            continue;
        case 'B' :
            str[i] = 'Y';
            continue;
        case 'C' :
            str[i] = 'Z';
            continue;
        }
        if (str[i] >= 'd' && str[i] <= 'z')
            str[i] = str[i] - 3;
        else if (str[i] >= 'D' && str[i] < 'Z')
            str[i] = str[i] - 3;
    }
    printf ("Message After Decryption : \n");
    puts (str);
    getch ();
}
----------------------------------------

void main () {
    char p [20];
    int key, i, enc;
    clrscr ();
    printf ("Enter Plain text=");
    gets (p);
    printf ("\n Enter Key=");
    scanf ("%d", & key);
    for (i = 0; i < strlen (p); i++) {
        p[i] = tolower (p[i]);
        enc = ((p[i] - 97) + key) % 26;
        printf ("%c", enc + 97);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_35202254_8_22
22776422_36131630_5_31
Title: Caesar Cipher Simple Program 
----------------------------------------

int main (int argc, char *argv []) {
    char in [MAXSIZE];
    char en [MAXSIZE] = {0};
    read (STDIN_FILENO, in, MAXSIZE);
    encrypt (in, en);
    printf ("%s\n%s\n", in, en);
    bzero (in, strlen (in));
    decrypt (en, in);
    printf ("%s\n%s\n", en, in);
    return 0;
}
----------------------------------------

int main () {
    int i, key;
    char plain [100], cipher [100];
    printf ("Enter key:");
    scanf ("%d", & key);
    key = key % 26;
    fflush (stdin);
    printf ("Enter text:");
    gets (plain);
    for (i = 0; i < strlen (plain); i++) {
        if (isalpha (plain[i])) {
            if (islower (plain[i]))
                cipher[i] = (plain[i] + key - 'a') % 26 + 'a';
            else
                cipher[i] = (plain[i] + key - 'A') % 26 + 'A';
        }
        else
            cipher[i] = plain[i];
    }
    cipher[i] = '\0';
    printf ("After ciphering: %s", cipher);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_35202254_8_22
22776422_38129072_5_21
Title: Caesar Cipher Simple Program 
----------------------------------------

int main (int argc, char *argv []) {
    char in [MAXSIZE];
    char en [MAXSIZE] = {0};
    read (STDIN_FILENO, in, MAXSIZE);
    encrypt (in, en);
    printf ("%s\n%s\n", in, en);
    bzero (in, strlen (in));
    decrypt (en, in);
    printf ("%s\n%s\n", en, in);
    return 0;
}
----------------------------------------

void main () {
    char p [20];
    int key, i, enc;
    clrscr ();
    printf ("Enter Plain text=");
    gets (p);
    printf ("\n Enter Key=");
    scanf ("%d", & key);
    for (i = 0; i < strlen (p); i++) {
        p[i] = tolower (p[i]);
        enc = ((p[i] - 97) + key) % 26;
        printf ("%c", enc + 97);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22776422_36131630_5_31
22776422_38129072_5_21
Title: Caesar Cipher Simple Program 
----------------------------------------

int main () {
    int i, key;
    char plain [100], cipher [100];
    printf ("Enter key:");
    scanf ("%d", & key);
    key = key % 26;
    fflush (stdin);
    printf ("Enter text:");
    gets (plain);
    for (i = 0; i < strlen (plain); i++) {
        if (isalpha (plain[i])) {
            if (islower (plain[i]))
                cipher[i] = (plain[i] + key - 'a') % 26 + 'a';
            else
                cipher[i] = (plain[i] + key - 'A') % 26 + 'A';
        }
        else
            cipher[i] = plain[i];
    }
    cipher[i] = '\0';
    printf ("After ciphering: %s", cipher);
    getch ();
    return 0;
}
----------------------------------------

void main () {
    char p [20];
    int key, i, enc;
    clrscr ();
    printf ("Enter Plain text=");
    gets (p);
    printf ("\n Enter Key=");
    scanf ("%d", & key);
    for (i = 0; i < strlen (p); i++) {
        p[i] = tolower (p[i]);
        enc = ((p[i] - 97) + key) % 26;
        printf ("%c", enc + 97);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2279379_2279435_3_13
2279379_32160031_1_28
Title: How to convert integer to char in C? 
----------------------------------------

int main (void) {
    char text [] = "StringX";
    int digit;
    for (digit = 0; digit < 10; ++digit) {
        text[6] = digit + '0';
        puts (text);
    }
    return 0;
}
----------------------------------------

void main () {
    int temp, integer, count = 0, i, cnd = 0;
    char ascii [10] = {0};
    printf ("enter a number");
    scanf ("%d", & integer);
    if (integer >> 31) {
        integer = ~integer + 1;
        for (temp = integer; temp != 0; temp /= 10, count++)
            ;
        ascii[0] = 0x2D;
        count++;
        cnd = 1;
    }
    else
        for (temp = integer; temp != 0; temp /= 10, count++)
            ;
    for (i = count - 1, temp = integer; i >= cnd; i--) {
        ascii[i] = (temp % 10) + 0x30;
        temp /= 10;
    }
    printf ("\n count =%d ascii=%s ", count, ascii);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22827533_22827768_2_14
22827533_22827788_3_14
Title: Passing arrays to a void function 
----------------------------------------

void tenfold (int array1 [], int size) {
    int i, array2 [size];
    for (i = 0; i < size; i++) {
        if (array1[i] > 0)
            array2[i] = 10 * array1[i];
        else
            array2[i] = array1[i];
    }
    for (i = 0; i < size; i++)
        printf ("(orignal) array1[%d]=%d, (new) array2[%d]=%d\n", i, array1[i], i, array2[i]);
}
----------------------------------------

void tenfold (int array [], int size) {
    int i;
    for (i = 0; i < size; i++) {
        if (array[i] > 0)
            printf ("%d ", (10 * array[i]));
        else
            printf ("%d ", array[i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22830337_22830443_5_16
22830337_22830623_5_16
Title: Calculate with 2 functions 
----------------------------------------

int main () {
    int sum, b;
    {
        funktion ();
        scanf ("%i", & b);
        sum = b * b;
        out ();
        printf ("%i", sum);
    }
    return 0;
}
----------------------------------------

int main () {
    int sum, b;
    {
        printf ("Enter any number that is to be squared!");
        scanf ("%i", & b);
        sum = funktion (b);
        out (sum);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22830398_22831033_12_40
22830398_22831061_13_27
Title: Traverse chars in String for Analysis in C 
----------------------------------------

void myName (char *theName) {
    char vowel [] = "aeiouAEIOU";
    int i = 0;
    for (i = 0; i < strlen (theName); i++) {
        if (strchr (vowel, theName[i])) {
            printf ("character [ %c ] located at position %d is a vowel\n", theName [i], i);
        }
        if (theName == ' ') {
            printf ("character [ %c ] located at position %d is a space\n", theName [i], i);
        }
        else if (theName == '$' || theName == '%') {
            printf ("character [ %c ] located at position %d is a symbol\n", theName [i], i);
        }
        else {
            printf ("character [ %c ] located at position %d is a consonant\n", theName [i], i);
        }
    }
}
----------------------------------------

void myName (char *theName) {
    for (int i = 0; theName[i]; ++i) {
        if (strchr ("aeiouAEIOU", theName[i])) {
            printf ("character [ %c ] located at position %d is a vowel\n", theName [i], i);
        }
        if (theName[i] == ' ') {
            printf ("character [ %c ] located at position %d is a space\n", theName [i], i);
        }
        else if (theName[i] == '$' || theName[i] == '%') {
            printf ("character [ %c ] located at position %d is a symbol\n", theName [i], i);
        }
        else {
            printf ("character [ %c ] located at position %d is a consonant\n,", theName [i], i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2283494_12131131_9_43
2283494_2283541_12_34
Title: Get IP address of an interface on Linux 
----------------------------------------

int main (int argc, char *argv []) {
    struct ifaddrs *ifaddr, *ifa;
    int family, s;
    char host [NI_MAXHOST];
    if (getifaddrs (&ifaddr) == -1) {
        perror ("getifaddrs");
        exit (EXIT_FAILURE);
    }
    for (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next) {
        if (ifa->ifa_addr == NULL)
            continue;
        s = getnameinfo (ifa->ifa_addr, sizeof (struct sockaddr_in), host, NI_MAXHOST, NULL, 0, NI_NUMERICHOST);
        if ((strcmp (ifa->ifa_name, "wlan0") == 0) && (ifa->ifa_addr->sa_family == AF_INET)) {
            if (s != 0) {
                printf ("getnameinfo() failed: %s\n", gai_strerror (s));
                exit (EXIT_FAILURE);
            }
            printf ("\tInterface : <%s>\n", ifa -> ifa_name);
            printf ("\t  Address : <%s>\n", host);
        }
    }
    freeifaddrs (ifaddr);
    exit (EXIT_SUCCESS);
}
----------------------------------------

int main () {
    int fd;
    struct ifreq ifr;
    fd = socket (AF_INET, SOCK_DGRAM, 0);
    ifr.ifr_addr.sa_family = AF_INET;
    strncpy (ifr.ifr_name, "eth0", IFNAMSIZ - 1);
    ioctl (fd, SIOCGIFADDR, & ifr);
    close (fd);
    printf ("%s\n", inet_ntoa (((struct sockaddr_in *) & ifr.ifr_addr) -> sin_addr));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22853229_22854108_3_26
22853229_22854115_5_20
Title: How do I splice a directory into a char * containing a pathname in C? 
----------------------------------------

int main () {
    char str [128] = "/home/user/folder/OTHERDIRNAME/morefolders/test/etc";
    char *delim = "/";
    char *tok;
    char buf [128];
    tok = strtok (str, delim);
    strcpy (buf, "/");
    while (tok) {
        strcat (buf, tok);
        strcat (buf, "/");
        if (strcmp (tok, "OTHERDIRNAME") == 0) {
            strcat (buf, "DIRNAME");
            strcat (buf, "/");
        }
        tok = strtok (NULL, delim);
    }
    printf ("Dir path: %s\n", buf);
}
----------------------------------------

int main () {
    char *dir = "/home/user/folder/OTHERDIRNAME/morefolders/test/etc";
    char *seek = "/OTHERDIRNAME/";
    char *ins = "DIRNAME/";
    char *splice_point;
    char *result;
    splice_point = strstr (dir, seek);
    splice_point += strlen (seek);
    result = malloc (strlen (dir) +strlen (ins) + 1);
    memcpy (result, dir, splice_point - dir);
    memcpy (result + (splice_point - dir), ins, strlen (ins));
    strcpy (result + (splice_point - dir) + strlen (ins), splice_point);
    printf ("%s\n", result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22868487_22868649_3_19
22868487_22869103_5_53
Title: word entry in an array of strings 
----------------------------------------

int main (void) {
    char words [20] [100];
    int i = 0;
    printf ("Enter up to 20 words to hide in the puzzle.\n");
    printf ("Enter the word 'done' after your last word if entering less than 20 words.\n");
    while (i < 20) {
        printf ("Entered words:\n");
        if (scanf ("%99s", words[i]) != 1 || strcmp (words[i], "done") == 0)
            break;
        printf ("%s\n", words [i]);
        i++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int wlimit = 20;
    int wcount = 0;
    int retval;
    char wstring [100 + 1];
    char **wlist = malloc (wlimit * sizeof *wlist);
    if (wlist == NULL) {
        printf ("not enough memory to allocate\n");
        return 1;
    }
    char *temp;
    while (1) {
        if (wcount >= wlimit) {
            wlimit *= 2;
            temp = wlist;
            wlist = realloc (wlist, wlimit);
            if (temp == NULL) {
                printf ("not enough memory to allocate\n");
                wlist = temp;
            }
        }
        retval = scanf ("%100s", wstring);
        if (retval != 1 || strcmp (wstring, "done") == 0)
            break;
        wlist[wcount++] = strdup (wstring);
    }
    for (int i = 0; i < wcount; i++)
        free (wlist[i]);
    free (wlist);
    wlist = NULL;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22868487_22868649_3_19
22868487_22870344_3_26
Title: word entry in an array of strings 
----------------------------------------

int main (void) {
    char words [20] [100];
    int i = 0;
    printf ("Enter up to 20 words to hide in the puzzle.\n");
    printf ("Enter the word 'done' after your last word if entering less than 20 words.\n");
    while (i < 20) {
        printf ("Entered words:\n");
        if (scanf ("%99s", words[i]) != 1 || strcmp (words[i], "done") == 0)
            break;
        printf ("%s\n", words [i]);
        i++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char words [20] [100];
    char temp [100] = "\0";
    int i = 0;
    int end = 0;
    printf ("Enter 20 words or enter done to exit.\n");
    while (i <= 19 && end == 0) {
        strset (temp, '\0');
        scanf (" %99[^\n]", temp);
        printf ("Given:%s\n\n", temp);
        if (strcmpi (temp, "done") == 0)
            end = 1;
        else {
            strcpy (words [i], temp);
            i++;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39425379_39425435_1_23
39425379_39428394_1_15
Title: "C Program User input into a single array" 
----------------------------------------

void main () {
    int arr [3];
    int i;
    printf ("Enter an Input: ");
    for (i = 0; i < 3; i++) {
        scanf ("%d", & arr [i]);
    }
    printf ("Your input is: ");
    for (i = 0; i < 3; i++) {
        printf ("%d ", arr [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

void main () {
    int arry [3], i = 0;
    printf ("enter numbers");
    for (i = 0; i < 3; i++) {
        scanf ("%d", & arry [i]);
    }
    for (i = 0; i < 3; i++) {
        printf ("%d \n", arry [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39429803_39430037_5_23
39429803_39430337_14_38
Title: How to list first level directories only in C? 
----------------------------------------

int main (void) {
    DIR *dirp;
    struct dirent *dp;
    dirp = opendir (".");
    while ((dp = readdir (dirp)) != NULL) {
        if (dp->d_type & DT_DIR) {
            if (dp->d_name[0] != '.')
                printf ("%s\n", dp->d_name);
        }
    }
    closedir (dirp);
    return 0;
}
----------------------------------------

int main () {
    DIR *dirhandle = opendir (".");
    struct dirent *de;
    while (de = readdir (dirhandle)) {
        _Bool is_dir;
        {
            struct stat stbuf;
            stat (de -> d_name, & stbuf);
            is_dir = S_ISDIR (stbuf.st_mode);
        }
        if (is_dir) {
            printf ("%s/\n", de -> d_name);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39432698_39432836_2_26
39432698_39442457_2_22
Title: decimal to binary conversion error 
----------------------------------------

int main () {
    int n, i = 0, j = 0, k;
    scanf ("%d", & n);
    int bin [100];
    k = n;
    while (n != 0) {
        bin[i] = n % 2;
        n = (n - n % 2) / 2;
        i++;
    }
    printf ("0b");
    if (k == 0) {
        printf ("0");
    }
    else {
        for (j = i - 1; j >= 0; j--) {
            printf ("%d", bin [(j - 1)]);
        }
    }
}
----------------------------------------

int main () {
    int n, i = 0, j = 0, k;
    scanf ("%d", & n);
    int bin [100];
    do {
        bin[i] = n % 2;
        n /= 2;
        i++;
    }
    while (n);
    printf ("0b");
    for (j = i; j > 0; j--) {
        printf ("%d", bin [(j - 1)]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39453941_39454959_3_19
39453941_39459139_4_22
Title: Count days between 2 dates input from keyboard 
----------------------------------------

int main () {
    struct tm start_date;
    struct tm end_date;
    time_t start_time, end_time;
    double seconds;
    printf ("Start date: ");
    scanf ("%d %d %d", & start_date.tm_mday, & start_date.tm_mon, & start_date.tm_year);
    printf ("End date: ");
    scanf ("%d %d %d", & end_date.tm_mday, & end_date.tm_mon, & end_date.tm_year);
    start_date.tm_hour = 0;
    start_date.tm_min = 0;
    start_date.tm_sec = 0;
    end_date.tm_hour = 0;
    end_date.tm_min = 0;
    end_date.tm_sec = 0;
    start_time = mktime (&start_date);
    end_time = mktime (&end_date);
    seconds = difftime (end_time, start_time);
    printf ("%d days difference\n", (int) (0.5 + seconds / (60 * 60 * 24)));
    return 0;
}
----------------------------------------

int main (void) {
    struct tm BD = {0};
    BD.tm_isdst = -1;
    struct tm KT = {0};
    KT.tm_isdst = -1;
    printf ("Start date: ");
    if (3 != scanf ("%d %d %d", &BD.tm_mday, &BD.tm_mon, &BD.tm_year))
        return -1;
    printf ("End date: ");
    if (3 != scanf ("%d %d %d", &KT.tm_mday, &KT.tm_mon, &KT.tm_year))
        return -1;
    double sec = difftime (mktime (&KT), mktime (&BD));
    printf ("%f\n", sec);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39454840_39455024_4_20
39454840_39455103_3_27
Title: How to concatenate strings in a for-loop? 
----------------------------------------

int main (void) {
    char buff [2056];
    char out [255];
    char ch = 'a';
    sprintf (out, "%02X", (int) (ch & 0x00FF));
    strcpy (buff, out);
    printf ("%s", buff);
    return 0;
}
----------------------------------------

int main (void) {
    const int N = 50;
    int i = 0;
    char text [N + 1];
    text[0] = '\0';
    int ch;
    while (i < N) {
        if (scanf ("%d", &ch) != 1) {
            break;
        }
        printf ("%02X ", (ch & 0x00FF));
        text[i] = (ch & 0x00FF);
        text[i + 1] = '\0';
        ++i;
    }
    printf ("\n");
    printf ("%s\n", text);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39476238_39476259_3_17
39476238_39476374_3_16
Title: C - converting a uppercase char to lowercase char 
----------------------------------------

int main (void) {
    char clef [] [2] = {
        ['A'] = "X",
    };
    printf ("Uppercase = %s\n", clef ['A']);
    printf ("Lowercase = %c\n", tolower ((unsigned char) clef ['A'] [0]));
    printf ("Lowercase = %c\n", tolower ((unsigned char) (* clef ['A'])));
    return 0;
}
----------------------------------------

int main (void) {
    int counter = 0;
    char myChar;
    char str [] = "ABCDEFG.\n";
    while (str[counter]) {
        myChar = str[counter];
        putchar (tolower ((unsigned char) myChar));
        counter++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39485246_39485527_8_21
39485246_39485546_1_15
Title: How do i get this to compile for x64 
----------------------------------------

Stuff *allocateArray () {
    Stuff *stuff = malloc (sizeof (Stuff) * ARR_SIZE);
    for (int i = 0; i < ARR_SIZE; i++) {
        (*(stuff + i)) = (Stuff) {i, i + i};
    }
    for (int i = 0; i < ARR_SIZE; i++) {
        printf ("%d : %d\n", (stuff + i) -> x, (stuff + i) -> y);
    }
    return stuff;
}
----------------------------------------

Stuff *allocateArray (size_t count) {
    Stuff *stuff = (Stuff *) malloc (sizeof (Stuff) * count);
    if (!stuff)
        return NULL;
    for (int i = 0; i < count; i++) {
        stuff[i].x = i;
        stuff[i].y = 2 * i;
        printf ("%d : %d\n", stuff [i].x, stuff [i].y);
    }
    return stuff;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39485246_39485546_1_15
39485246_39485616_9_23
Title: How do i get this to compile for x64 
----------------------------------------

Stuff *allocateArray (size_t count) {
    Stuff *stuff = (Stuff *) malloc (sizeof (Stuff) * count);
    if (!stuff)
        return NULL;
    for (int i = 0; i < count; i++) {
        stuff[i].x = i;
        stuff[i].y = 2 * i;
        printf ("%d : %d\n", stuff [i].x, stuff [i].y);
    }
    return stuff;
}
----------------------------------------

void *allocateArray (Stuff *stuffArr) {
    Stuff *stuff = (Stuff *) malloc (sizeof (Stuff) * ARR_SIZE);
    for (int i = 0; i < ARR_SIZE; i++) {
        (*(stuff + i)) = (Stuff) {i, i + i};
    }
    for (int i = 0; i < ARR_SIZE; i++) {
        printf ("%d : %d\n", (stuff + i) -> x, (stuff + i) -> y);
    }
    stuffArr = stuff;
    return stuff;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3949121_3949478_82_104
3949121_3963211_20_68
Title: Logic for 9 key keyboard to print qwerty keys 
----------------------------------------

int main () {
    char nk;
    char ok = 0;
    char c;
    int phase = 0;
    while (1) {
        nk = KeyGet ();
        c = DecodeKey (nk, &ok, &phase);
        if (c != 0) {
            printf ("%c", c);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    const sometype PHASE_WAIT = somevalue;
    char keyBuffer [BUFFER_SIZE];
    int keyIndex = 0;
    int keyPress1 = -1, keyPress2;
    sometype lastKeyPressTime;
    int numKeyPresses;
    while (1) {
        if ((GetSystemTime () - lastKeyPressTime > PHASE_WAIT) && (-1 != keyPress1)) {
            keyBuffer[keyIndex++] = KeyMap[keyPress1][numKeyPresses - 1];
            keyPress1 = -1;
        }
        if ((keyPress2 = KeyAvailable ()) > -1) {
            lastKeyPressTime = GetSystemTime ();
            if ((keyPress2 != keyPress1) && (-1 != keyPress1)) {
                keyBuffer[keyIndex++] = KeyMap[keypress1][numKeyPresses - 1];
                numKeyPresses = 1;
            }
            else if (keyPress2 == keyPress1) {
                numKeyPresses = ((numKeyPresses) % KEYMAPROWSIZE) + 1;
                if (0 == KeyMap[keypress2][numKeyPresses - 1]) {
                    numKeyPresses = 1;
                }
            }
            else {
                numKeyPresses = 1;
            }
            keyPress1 = keyPress2.
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39523267_39523371_7_25
39523267_39523468_18_47
Title: Aligning strings equally 
----------------------------------------

int main (void) {
    int i;
    char *mystrings [MAXSIZE] = {"Fred", "Augustine", "Bob", "Lenny", "Ricardo"};
    int maxLen = 0;
    for (i = 0; i < MAXSIZE; i++) {
        int len = strlen (mystrings[i]);
        maxLen = (len > maxLen) ? len : maxLen;
    }
    char formatString [50];
    sprintf (formatString, "%%-%ds %%d\n", maxLen + 1);
    for (i = 0; i < MAXSIZE; i++) {
        printf (formatString, mystrings [i], i);
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char * const mystrings [] = {"Fred", "Augustine", "Bob", "Lenny", "Ricardo"};
    size_t m = max_len (mystrings, 5);
    size_t i;
    for (i = 0; i < 5; i++) {
        const char *item = mystrings[i];
        size_t len = strlen (item);
        size_t padding = 0;
        if (len + 1 < m) {
            padding = m - len;
        }
        printf ("%s ", item);
        size_t ii;
        for (ii = 0; ii < padding; ii++) {
            fputc (' ', stdout);
        }
        printf ("%zu\n", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39543155_39543255_5_23
39543155_39543437_4_24
Title: Extreme troubles with full line input. C Programming Language 
----------------------------------------

int main () {
    int c;
    char input [MAX_LEN + 1];
    int i = 0;
    while ((c = getchar ()) != '\n' && c != EOF && i < MAX_LEN)
        input[i++] = c;
    if (c == EOF || c == '\n') {
        input[i] = '\0';
        printf ("read in your input string of: %s\n", input);
    }
    else {
        printf ("don't buffer overflow me dude!\n");
        return -1;
    }
    return 0;
}
----------------------------------------

int main (void) {
    enum {MAX_LINES = 8};
    char *lines [MAX_LINES];
    int index = 0;
    char *buffer = 0;
    size_t buflen = 0;
    while (index < MAX_LINES && getline (&buffer, &buflen, stdin) != -1) {
        lines[index++] = buffer;
        buffer = 0;
        buflen = 0;
    }
    free (buffer);
    for (int i = 0; i < index; i++)
        printf ("%d: %s", i, lines[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39550089_39551367_4_33
39550089_39551737_6_26
Title: "Taking user input adding it to array at the correct index (ascending order)" 
----------------------------------------

int main () {
    int array [MAX_SIZE];
    int i = 0, j = 0, num = 0;
    printf ("Please enter a series of positive integers!\n");
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & array [i]);
    }
    for (i = 0; i < MAX_SIZE; i++) {
        printf ("Before sort:Array[%d]=%d\n", i, array [i]);
    }
    for (i = 0; i < MAX_SIZE; ++i) {
        for (j = i + 1; j < MAX_SIZE; ++j) {
            if (array[i] > array[j]) {
                num = array[i];
                array[i] = array[j];
                array[j] = num;
            }
        }
    }
    for (i = 0; i < MAX_SIZE; i++) {
        printf ("After sort:Array[%d]=%d\n", i, array [i]);
    }
}
----------------------------------------

int main (void) {
    int array [MAX_SIZE];
    int userNum = 0;
    int arrSize = 0;
    printf ("Please enter a series of positive integers!\n");
    while (arrSize < MAX_SIZE) {
        if (1 != scanf ("%d", &userNum) || userNum < 0)
            break;
        arrSize = addToArray (array, arrSize, userNum);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3955601_3955679_11_24
3955601_3955720_6_36
Title: How do I split a string at an arbitrary index? 
----------------------------------------

int main () {
    char *text = "Hello World.";
    char *one = substr (text, 7, 4);
    char *two = substr (text, 5, 2);
    char *three = substr (text, 0, 5);
    printf ("\"%s\"\t\"%s\"\t\"%s\"\n", one, two, three);
    free (one);
    free (two);
    free (three);
    return 0;
}
----------------------------------------

int main () {
    char *text = "Hello World.";
    char one [6];
    char two [3];
    char three [6];
    strncpy (two, & text [5], 2);
    strncpy (three, text, 5);
    strcpy (one, & text [7]);
    two[2] = '\0';
    three[5] = '\0';
    printf ("%s\n", one);
    printf ("%s\n", two);
    printf ("%s\n", three);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39558725_39558883_4_25
39558725_39558917_5_23
Title: Reading in C in xCode errors 
----------------------------------------

int main (void) {
    char *lastName, *firstName, *depart, *arrive;
    printf ("Please enter passenger's last name: ");
    scanf ("%ms", & lastName);
    printf ("Please enter passenger's first name: ");
    scanf ("%ms", & firstName);
    printf ("Which airport are you departing from? ");
    scanf ("%ms", & depart);
    printf ("Which airport will you be heading to? ");
    scanf ("%ms", & arrive);
    printf ("LAST NAME: %s FIRST NAME: %s FROM: %s TO: %s\n", lastName, firstName, depart, arrive);
    free (lastName);
    free (firstName);
    free (depart);
    free (arrive);
    return 0;
}
----------------------------------------

int main () {
    char lname [MAXLNAME + 1], fname [MAXFNAME + 1], srcAirport [MAXAIRPORT + 1], destAirport [MAXAIRPORT + 1];
    printf ("Last name\n");
    fgets (lname, sizeof lname, stdin);
    printf ("First name\n");
    fgets (fname, sizeof fname, stdin);
    printf ("Source airport\n");
    fgets (srcAirport, sizeof srcAirport, stdin);
    printf ("Destination airport\n");
    fgets (destAirport, sizeof destAirport, stdin);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39559411_39559623_17_27
39559411_39559680_5_21
Title: C - execution time of program in millseconds using <time.h> 
----------------------------------------

int main () {
    struct timespec time1, time2;
    int temp = 0;
    clock_gettime (CLOCK_PROCESS_CPUTIME_ID, & time1);
    for (int i = 0; i < 242000000; i++)
        temp += temp;
    clock_gettime (CLOCK_PROCESS_CPUTIME_ID, & time2);
    printf ("Time difference: %ld [s] %ld [ns]", (long) diff (time1, time2).tv_sec, (long) diff (time1, time2).tv_nsec);
    return 0;
}
----------------------------------------

int main () {
    int i, j, a [1000000] = {0};
    clock_t start, stop;
    srand (0xdeadbeef);
    start = clock ();
    for (j = 0; j < 100; j++) {
        for (i = 0; i < 1000000; i++) {
            a[i] = rand () % 123;
            a[i] += 123;
        }
    }
    stop = clock ();
    printf ("Time %.10f seconds\n", (double) (stop - start) / CLOCKS_PER_SEC);
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39582332_39582850_5_57
39582332_39583285_4_37
Title: BOM endian in C 
----------------------------------------

int main (int argc, char *argv []) {
    unsigned char c [4];
    if (argc != 2) {
        fprintf (stderr, "Usage: %s file\n", argv [0]);
        return EXIT_FAILURE;
    }
    FILE *f = fopen (argv[1], "rb");
    if (f == 0) {
        fprintf (stderr, "%s: failed to open file %s for reading\n", argv [0], argv [1]);
        return EXIT_FAILURE;
    }
    size_t nbytes = fread (c, sizeof (char), sizeof (c), f);
    fclose (f);
    if (nbytes == 2) {
        if (c[0] == 0xFE && c[1] == 0xFF)
            printf ("UTF-16BE\n");
        else if (c[0] == 0xFF && c[1] == 0xFE)
            printf ("UTF-16LE\n");
        else
            printf ("Two random (non-UTF) bytes 0x%.2X and 0x%.2X\n", c[0], c[1]);
    }
    else if (nbytes == 4) {
        if (memcmp (c, "\xFF\xFE\x00\x00", 4) == 0)
            printf ("UTF-32LE\n");
        else if (memcmp (c, "\x00\x00\xFE\xFF", 4) == 0)
            printf ("UTF-32BE\n");
        else if (memcmp (c, "\xFE\xFF", 2) == 0)
            printf ("UTF-16BE\n");
        else if (memcmp (c, "\xFF\xFE", 2) == 0)
            printf ("UTF-16LE\n");
        else
            printf ("Four random (non-UTF) bytes 0x%.2X, 0x%.2X, 0x%.2X, 0x%.2X\n", c[0], c[1], c[2], c[3]);
    }
    else {
        fprintf (stderr, "%s: Odd-ball data size %zu (expected 2 or 3) - no diagnosis\n", argv [0], nbytes);
        return EXIT_FAILURE;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char bom [4];
    FILE *fp = fopen ("file.txt", "rb");
    if (fp == NULL) {
        perror ("fopen()");
        return 1;
    }
    if (fread (bom, 1, 4, fp) < 2 && feof (fp) || ferror (fp)) {
        fprintf (stderr, "Error occurred with fread() or file malformed.\n");
        return 1;
    }
    if (memcmp (bom, "\x00\x00\xFE\xFF", 4) == 0)
        printf ("UTF-32, big-endian.\n");
    else if (memcmp (bom, "\xFF\xFE\x00\x00", 4) == 0)
        printf ("UTF-32, little-endian.\n");
    else if (memcmp (bom, "\xFE\xFF", 2) == 0)
        printf ("UTF-16, big-endian.\n");
    else if (memcmp (bom, "\xFF\xFE", 2) == 0)
        printf ("UTF-16, little-endian.\n");
    else {
        fprintf (stderr, "Malformed BOM.\n");
        return 1;
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39595098_51472237_14_86
39595098_51472390_5_68
Title: "Program for spelling out integer number digits: (in switch statement) does not match case values why?" 
----------------------------------------

int main (void) {
    int rem, num, sum = 0, rem1;
    printf ("enter the number:\n");
    scanf ("%i", & num);
    if (num < 0) {
        printf ("minus ");
        num = -num;
    }
    if (num == 0) {
        printf ("zero");
    }
    while (num != 0) {
        rem = num % 10;
        num = num / 10;
        sum = sum * 10 + rem;
    }
    while (sum != 0) {
        rem1 = sum % 10;
        sum = sum / 10;
        if (rem1 == 0) {
            printf ("zero ");
        }
        else if (rem1 == 1) {
            printf ("one ");
        }
        else if (rem1 == 2) {
            printf ("two ");
        }
        else if (rem1 == 3) {
            printf ("three ");
        }
        else if (rem1 == 4) {
            printf ("four ");
        }
        else if (rem1 == 5) {
            printf ("five ");
        }
        else if (rem1 == 6) {
            printf ("six ");
        }
        else if (rem1 == 7) {
            printf ("seven ");
        }
        else if (rem1 == 8) {
            printf ("eight ");
        }
        else if (rem1 == 9) {
            printf ("nine ");
        }
        else {
            printf ("invalid no");
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int rem, num, sum = 0, rem1, num1, add;
    printf ("enter the number:\n");
    scanf ("%i", & num);
    if (num < 0) {
        printf ("minus ");
        num = -num;
    }
    if (num == 0) {
        printf ("zero");
    }
    while (num != 0) {
        rem = num % 10;
        num = num / 10;
        sum = sum * 10 + rem;
    }
    while (sum != 0) {
        rem1 = sum % 10;
        sum = sum / 10;
        switch (rem1) {
        case 0 :
            printf ("zero ");
            break;
        case 1 :
            printf ("one ");
            break;
        case 2 :
            printf ("two ");
            break;
        case 3 :
            printf ("three ");
            break;
        case 4 :
            printf ("four ");
            break;
        case 5 :
            printf ("five ");
            break;
        case 6 :
            printf ("six ");
            break;
        case 7 :
            printf ("seven ");
            break;
        case 8 :
            printf ("eight ");
            break;
        case 9 :
            printf ("nine ");
            break;
        default :
            printf ("invalid no");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39601044_39601586_5_22
39601044_39601921_3_30
Title: printing unsigned array and exiting the loop 
----------------------------------------

int main (void) {
    unsigned v, arrayTable [ArraySize] = {0};
    int n = 0;
    while (n < ArraySize) {
        printf ("Enter Measurement #%i (or 0): ", n + 1);
        if (1 != scanf ("%u", &v) || v == 0) {
            break;
        }
        arrayTable[n++] = v;
    }
    for (int i = 0; i < n; ++i) {
        printf ("%u\n", arrayTable [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int arrayTable [10] = {0};
    int iValue = 0;
    int i = 0;
    while (i < 10) {
        printf ("Enter Measurement #%i (or 0): ", i + 1);
        scanf ("%d", & iValue);
        if (!iValue)
            break;
        else {
            arrayTable[i] = iValue;
            i++;
        }
    }
    for (int i = 0; i < 10; i++) {
        printf ("%d\n", arrayTable [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39622332_39622807_1_11
39622332_39622944_1_12
Title: reading big-endian files in little-endian system 
----------------------------------------

void swapByteOrder_int16 (double *current, void const *rawsignal_, size_t length) {
    uint16_t const *rawsignal = rawsignal_;
    size_t i;
    for (i = 0; i < length; i++) {
        uint16_t tmp = rawsignal[2 * i];
        tmp = ((tmp >> 8) & 0xffu) | ((tmp << 8) & 0xff00u);
        current[i] = (int16_t) (tmp);
    }
}
----------------------------------------

void swapByteOrder_int16 (double *current, uint16_t *rawsignal, int64_t length) {
    union int16bits bitval;
    int64_t i;
    for (i = 0; i < length; i++) {
        bitval.bits = rawsignal[2 * i];
        bitval.bits = (bitval.bits << 8) | (bitval.bits >> 8);
        current[i] = (double) bitval.currentval;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39623081_39626304_53_72
39623081_39627199_23_43
Title: How can I effectively encode/decode a compressed position description? 
----------------------------------------

int main (int argc, char *argv []) {
    int src [argc], dest [argc];
    int cur, max = 0, n = argc - 1;
    for (int i = 0; i < n; i++) {
        src[i] = cur = atoi (argv[i + 1]);
        if (max < cur)
            max = cur;
    }
    if (max < 9) {
        encode9 (dest, src, n);
    }
    else {
        encode64 (dest, src, n);
    }
    for (int i = 0; i < n; i++) {
        printf ("%d ", dest [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int naive [argc], compact [argc];
    int n = argc - 1;
    for (int i = 0; i < n; i++) {
        naive[i] = atoi (argv[i + 1]);
    }
    encode16 (compact, naive, n);
    for (int i = 0; i < n; i++) {
        printf ("%d ", compact [i]);
    }
    printf ("\n");
    decode16 (naive, compact, n);
    for (int i = 0; i < n; i++) {
        printf ("%d ", naive [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39648100_39648621_55_96
39648100_39648669_1_33
Title: word frequency of string counter is sometimes wrong 
----------------------------------------

int extract_and_count (char *source, int count []) {
    int wordCounter = 0;
    char string [MAX_WORD_SIZE] = {'\0'};
    for (int i = 0, k = 0; i < strlen (source); i++, k++) {
        if (source[i] != ' ') {
            string[k] = source[i];
        }
        else {
            if (string[0] == '\0') {
                break;
            }
            int index = indexInWords (string);
            if (index == -1) {
                strcpy (words [wordCounter], string);
                count[wordCounter] = 1;
                wordCounter++;
            }
            else {
                count[index] += 1;
            }
            clearArray (string);
            k = -1;
        }
    }
    if (string[0] != '\0') {
        int index = indexInWords (string);
        if (index == -1) {
            strcpy (words [wordCounter], string);
            count[wordCounter] = 1;
            wordCounter++;
        }
        else {
            count[index] += 1;
        }
    }
    return wordCounter;
}
----------------------------------------

int extract_and_count (char *source, int *count) {
    int wordCounter = 0;
    char string [80];
    int i = 0, k = 0;
    clearArray (string);
    for (; i < strlen (source) + 1; ++i, ++k) {
        if (source[i] != ' ' && source[i] != 0) {
            string[k] = source[i];
        }
        else {
            if (string[0] != '\0') {
                int index = indexInWords (string);
                if (index == -1) {
                    strcpy (words [wordCounter], string);
                    count[wordCounter] = 1;
                    wordCounter++;
                }
                else {
                    count[index] += 1;
                }
            }
            clearArray (string);
            k = -1;
        }
    }
    return wordCounter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39648860_39648975_4_56
39648860_39649772_1_27
Title: "how can i split a string into tokens and store the tokens in a differents variables C language" 
----------------------------------------

int main () {
    char str [] = "+5000,-9000,7jj4";
    char **tokens = NULL;
    int totalTokens = 0;
    char *token = strtok (str, ",");
    while (token != NULL) {
        printf ("%s\n", token);
        token = strtok (NULL, "-");
        if (!tokens) {
            tokens = malloc (sizeof (char *));
            if (!tokens) {
            }
        }
        else {
            tokens = realloc (tokens, (sizeof (char *) * totalTokens);
            if (!tokens) {
            }
        }
        tokens[totalTokens] = malloc (sizeof (char) * (strlen (token) + 1));
        if (!tokens[totalTokens]) {
        }
        strcpy (tokens [totalTokens ++], token);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char str [] = "+5000, -9000, 7jj4";
    char *p_str = str;
    char a [10], b [10], c [10];
    size_t a_count = 0, b_count = 0, c_count = 0;
    size_t index = 0;
    while (*p_str) {
        if (*p_str == ',') {
            p_str++;
            index++;
            p_str++;
        }
        if (index == 0 && *p_str != ',') {
            a[a_count++] = *p_str;
        }
        else if (index == 1 && *p_str != ',') {
            b[b_count++] = *p_str;
        }
        else if (index == 2 && *p_str != '\0') {
            c[c_count++] = *p_str;
        }
        p_str++;
    }
    a[a_count] = b[b_count] = c[c_count] = '\0';
    printf ("A : ");
    puts (a);
    printf ("B : ");
    puts (b);
    printf ("C : ");
    puts (c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39658965_39659778_1_40
39658965_39659810_1_39
Title: Issues with 'saving progress' of function 
----------------------------------------

int test (struct state *pstate, const char *str, size_t len) {
    int result = 0;
    char ch;
    size_t i;
    for (i = 0; i <= len; i++) {
        ch = str[i];
        switch (ch) {
        case ';' :
            pstate->comc++;
            break;
        default :
            if (pstate->comc == 3) {
                ch = str[i];
                if (SO_SIZE <= pstate->pos) {
                    result = -1;
                    break;
                }
                pstate->so[pstate->pos++] = ch;
            }
            if (pstate->comc == 7) {
                printf (" %s ", pstate -> so);
                pstate->comc = 0;
                pstate->pos = 0;
            }
        }
    }
    return result;
}
----------------------------------------

void test (char *str, int len) {
    const char *ptr = str;
    char ch;
    int i;
    static char so [10];
    int comc = gcomc;
    int pos = gpos;
    for (i = 0; i < len; i++) {
        ch = ptr[i];
        switch (ch) {
        case ';' :
            comc++;
            break;
        default :
            if (comc == 3) {
                ch = ptr[i];
                so[pos++] = ch;
            }
            if (comc == 7) {
                so[pos] = '\0';
                printf (" %s ", so);
                comc = 0;
                pos = 0;
                gcomc = 0;
                gpos = 0;
            }
        }
    }
    gcomc = comc;
    gpos = pos;
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39670157_39670786_3_20
39670157_39674033_3_19
Title: How to write proper loop in [C] 
----------------------------------------

void main () {
    int row = 1;
    int column = 1;
    for (int i = 1; i <= 10; i++) {
        printf ("%d", i);
        if (column == row) {
            printf ("\n");
            row++;
            column = 1;
        }
        else {
            printf (" ");
            column++;
        }
    }
}
----------------------------------------

int main (void) {
    int i, b = 1, c = 0, n = 1;
    char *fmt1 = "%d", *fmt2 = " %d";
    for (i = 1; i < 11; i++) {
        printf (i == b ? fmt1 : fmt2, i);
        c++;
        if (c == n) {
            b = i + 1, c = 0, n++;
            putchar ('\n');
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39677286_39677427_2_21
39677286_39679567_2_15
Title: Reverse pyramid using same row number 
----------------------------------------

int main () {
    int i, j, k, row;
    printf ("Enter the no of rows");
    scanf ("%d", & row);
    for (i = row; i >= 1; i--) {
        for (k = 0; k < row - (i - 1); k++) {
            printf (" ");
        }
        for (j = 1; j <= i; j++) {
            printf ("%d", i);
            printf (" ");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int row, i, j, k;
    printf ("Enter Number of Rows: ");
    scanf ("%d", & row);
    for (i = row; i > 0; i--) {
        for (j = row - i; j > 0; j--)
            printf (" ");
        for (k = 1; k <= i + (i - 1); k++)
            printf ("*");
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39677935_39678172_10_25
39677935_39678520_5_17
Title: How to switch 2nd and 4th digit(before comma) in a double? C programming 
----------------------------------------

int main () {
    double d = 45392.56;
    int MAX = 100;
    char arr [MAX];
    sprintf (arr, "%f", d);
    if (dotPos (arr) > 3) {
        char aux = arr[1];
        arr[1] = arr[3];
        arr[3] = aux;
    }
    d = atof (arr);
    printf ("%.2f\n", d);
}
----------------------------------------

int main (void) {
    double d = 45392.56;
    unsigned long u;
    long dif;
    u = d;
    dif = finddiff (u, 3, 1);
    d += dif;
    printf ("%.2f\n", d);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39682191_39682540_13_50
39682191_39684961_18_34
Title: "C using argv[] for command line arguments" 
----------------------------------------

int main (int argc, char *argv []) {
    int m = 0, d = 0, y = 0;
    FILE *fp;
    int wrongFormat = 0;
    if (argc > 1) {
        if ((fp = fopen (argv[1], "rb")) == NULL) {
            if (sscanf (argv[1], "%d%*[/-]%d%*[/-]%d", &m, &d, &y) != 3)
                wrongFormat = 1;
        }
        else {
            if (fscanf (fp, "%d%*[/-]%d%*[/-]%d", &m, &d, &y) != 3)
                wrongFormat = 1;
        }
    }
    else {
        printf ("Type a date (mm-dd-yyyy) or (mm/dd/yyyy): \n");
        if (scanf ("%d%*[/-]%d%*[/-]%d", &m, &d, &y) != 3)
            wrongFormat = 1;
    }
    if (wrongFormat) {
        fprintf (stderr, "Not properly formatted.");
        exit (EXIT_FAILURE);
    }
    printf ("%s %2d, %4d\n", month (m), d, y);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int m = 0, d = 0, y = 0;
    if (argc == 2) {
        if (sscanf (argv[1], "%d%*[/-]%d%*[/-]%d", &m, &d, &y) != 3) {
            fprintf (stderr, "Not properly formatted.");
            exit (EXIT_FAILURE);
        }
        printf ("%s %2d, %4d", month (m), d, y);
    }
    else {
        fprintf (stderr, "Please provide one date argument to the program, formatted as mm-dd-yyyy or mm/dd/yyyy\n");
        exit (EXIT_FAILURE);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39694756_39694983_2_14
39694756_39695062_3_19
Title: I made a simple program in C which calculates the factorial of a number 
----------------------------------------

int main () {
    int facto, i, m;
    m = 1;
    printf ("Ener a Value : ");
    while (0 < scanf ("%d", &facto) && facto > 0) {
        for (i = facto - 1; i > m; i--)
            facto *= i;
        printf ("My Reg num:SP-16/BBS/033\nFactorial of the number : =%d\n", facto);
        printf ("press any key to find factorial of a number again : ");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int facto, i, m;
    char choice = 'y';
    do {
        printf ("Ener a Value : ");
        scanf ("%d", & facto);
        m = 1;
        for (i = facto - 1; i > m; i--)
            facto *= i;
        printf ("My Reg num:SP-16/BBS/033\nFactorial of the number : =%d\n", facto);
        printf ("Press any key to find factorial of a number again");
        scanf ("%c", & choice);
    }
    while (choice != 'n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39694756_39694983_2_14
39694756_39697856_2_18
Title: I made a simple program in C which calculates the factorial of a number 
----------------------------------------

int main () {
    int facto, i, m;
    m = 1;
    printf ("Ener a Value : ");
    while (0 < scanf ("%d", &facto) && facto > 0) {
        for (i = facto - 1; i > m; i--)
            facto *= i;
        printf ("My Reg num:SP-16/BBS/033\nFactorial of the number : =%d\n", facto);
        printf ("press any key to find factorial of a number again : ");
    }
    return 0;
}
----------------------------------------

int main () {
    int facto, i, m;
    m = 1;
    do {
        fflush (stdin);
        system ("cls");
        printf ("Ener a Value : ");
        scanf ("%d", & facto);
        getchar ();
        for (i = facto - 1; i > m; i--)
            facto *= i;
        printf ("My Reg num:SP-16/BBS/033\nFactorial of the number : =%d\n", facto);
        printf ("press any key to find factorial of a number again (Enter to end): ");
    }
    while (getchar () != '\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39694756_39695062_3_19
39694756_39697856_2_18
Title: I made a simple program in C which calculates the factorial of a number 
----------------------------------------

int main (void) {
    int facto, i, m;
    char choice = 'y';
    do {
        printf ("Ener a Value : ");
        scanf ("%d", & facto);
        m = 1;
        for (i = facto - 1; i > m; i--)
            facto *= i;
        printf ("My Reg num:SP-16/BBS/033\nFactorial of the number : =%d\n", facto);
        printf ("Press any key to find factorial of a number again");
        scanf ("%c", & choice);
    }
    while (choice != 'n');
}
----------------------------------------

int main () {
    int facto, i, m;
    m = 1;
    do {
        fflush (stdin);
        system ("cls");
        printf ("Ener a Value : ");
        scanf ("%d", & facto);
        getchar ();
        for (i = facto - 1; i > m; i--)
            facto *= i;
        printf ("My Reg num:SP-16/BBS/033\nFactorial of the number : =%d\n", facto);
        printf ("press any key to find factorial of a number again (Enter to end): ");
    }
    while (getchar () != '\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39716089_39717666_7_27
39716089_39718299_5_34
Title: How to parse this data of unknown size 
----------------------------------------

int main (void) {
    ifstream inpFile ("test.txt");
    string str;
    char c;
    while (inpFile.good ()) {
        getline (inpFile, str);
        istringstream is (str);
        do {
            is >> c;
            if (!is.eof ())
                cout << c << " ";
        }
        while (is.good ());
        cout << "[End of line]" << endl;
    }
    cout << "[End of file]" << endl;
}
----------------------------------------

int main (void) {
    FILE *inpFile = fopen ("test.txt", "r");
    char buf [MAX_LINE_LEN];
    char *p;
    while (!feof (inpFile)) {
        if (fgets (buf, MAX_LINE_LEN, inpFile) != NULL) {
            p = buf;
            while (*p != '\n' && *p != '\0') {
                while (isspace (*p) && *p != '\n')
                    p++;
                if (*p > 32) {
                    printf ("%c ", * p);
                    p++;
                }
            }
        }
        printf ("[End of line]\n");
    }
    printf ("[End of file]\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39727171_39728094_3_43
39727171_39728901_1_27
Title: How can i know even and odd numbers from input by user in array? -c 
----------------------------------------

int main () {
    int array [10];
    int i, j, k;
    int even_number_count;
    int odd_number_count;
    printf ("Amount of Array :");
    scanf ("%d", & j);
    for (i = 0; i < j; i++) {
        printf (" %d value : ", i + 1);
        scanf ("%d", & array [i]);
    }
    even_number_count = 0;
    odd_number_count = 0;
    printf ("Even numbers are: ");
    for (i = 0; i < j; i++) {
        if (array[i] % 2 == 0) {
            printf ("%d  ", array [i]);
            even_number_count++;
        }
    }
    printf ("\n");
    printf ("Odd numbers are: ");
    for (i = 0; i < j; i++) {
        if (array[i] % 2 != 0) {
            printf ("%d  ", array [i]);
            odd_number_count++;
        }
    }
    printf ("\n");
    printf ("Amount of even numbers : %d\n", even_number_count);
    printf ("Amount of odd numbers : %d\n", odd_number_count);
    return 0;
}
----------------------------------------

int main () {
    int array [10];
    int index, length, evencount;
    printf ("Amount of Array :");
    scanf ("%d", & length);
    for (index = 0; index < length; index++) {
        printf (" %d value : ", index + 1);
        scanf ("%d", & array [index]);
    }
    for (index = 0; array[index] % 2 == 0 && index < length; index++)
        evencount++;
    printf ("\n\nAmount of even numbers :%d\nThe Even numbers are:", evencount);
    for (index = 0; index < length; index++)
        (array[index] % 2 == 0) ? printf ("%d ", array[index]) : printf (" ");
    printf ("\n\nAmount of odd numbers :%d\nThe odd numbers are:", length - evencount);
    for (index = 0; index < length; index++)
        (array[index] % 2 != 0) ? printf ("%d ", array[index]) : printf (" ");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39728218_39796631_27_98
39728218_39800063_89_126
Title: Reading file into linked list 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fp;
    struct node *head, *current;
    char *pline, *pword;
    char line [MAXLINE + 1];
    char word [MAXWORD + 1];
    int i, n, line_count = 0;
    head = NULL;
    if (argc < 2) {
        fprintf (stderr, "Usage: %s filename\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    else {
        if ((fp = fopen (argv[1], "r")) == NULL) {
            fprintf (stderr, "Unable to open file %s\n", argv [1]);
            exit (EXIT_FAILURE);
        }
    }
    pline = line;
    pword = word;
    while (fgets (pline, MAXLINE, fp) != NULL) {
        ++line_count;
        strip (pline);
        while ((pword = strtok (pline, " ")) != NULL) {
            normalize_word (pword);
            if (*pword != '\0')
                head = update_word (pword, line_count, head);
            pline = NULL;
        }
        pline = line;
    }
    printf ("There are %d words in the text file,\n", list_len (head));
    printf ("and %d pairs of (line, occurrences)\n", num_pairs (head));
    printf ("Word: pairs\n");
    current = head;
    while (current != NULL) {
        n = current->num_lines;
        printf ("%s:", current -> word);
        for (i = 0; i < n; i++) {
            printf (" %d, %d;", current -> location [i], current -> frequency [i]);
        }
        putchar ('\n');
        current = current->next;
    }
    if (fclose (fp) != 0)
        fprintf (stderr, "Error closing file %s\n", argv[1]);
    current = head;
    while (current != NULL) {
        free (current -> word);
        free (current -> location);
        free (current -> frequency);
        current = current->next;
        free (head);
        head = current;
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    treeptr head = NULL;
    FILE *fp = fopen (argv[1], "r");
    char word [50], ch;
    int len = 0, lines = 1;
    if (fp == NULL) {
        fprintf (stderr, "Error reading file\n");
        exit (1);
    }
    while ((ch = getc (fp)) != EOF) {
        if (ch == '\n') {
            word[len] = '\0';
            if (len > 0)
                input_to_bst (&head, word, lines);
            len = 0;
            lines++;
        }
        else if (ch == ' ') {
            word[len] = '\0';
            if (len > 0)
                input_to_bst (&head, word, lines);
            len = 0;
        }
        else if (isalpha (ch)) {
            word[len] = ch;
            len++;
        }
    }
    if (len > 0) {
        word[len] = '\0';
        input_to_bst (& head, word, lines);
    }
    print_bst (head);
    fclose (fp);
    free_bst (head);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39738578_39739213_1_40
39738578_39740217_1_21
Title: "Divide and Conquer in C may reach end of non-void function" 
----------------------------------------

bool search (int value, int values [], int n) {
    int min = 0;
    int max = n;
    int mid = n / 2;
    do {
        if (value == values[mid]) {
            return 1;
        }
        else if (values[mid] < value) {
            min = mid + 1;
            mid = (max + min) / 2;
        }
        else if (values[mid] > value) {
            max = mid - 1;
            mid = (max + min) / 2;
        }
        else {
            return 0;
        }
    }
    while (min != max);
    return 0;
}
----------------------------------------

bool search (int value, int values [], int n) {
    int min = 0, max = n;
    int mid = n / 2;
    bool is_found = 0;
    while (min != max) {
        if (value == values[mid]) {
            is_found = 1;
            break;
        }
        else if (value > values[mid]) {
            min = mid + 1;
            mid = (max + min) / 2;
        }
        else if (value < values[mid]) {
            max = mid - 1;
            mid = (max + min) / 2;
        }
        else
            break;
    }
    return is_found;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3974416_3974439_7_33
3974416_3974487_9_33
Title: "C program problem with newlines & tabs next to each other" 
----------------------------------------

int main (void) {
    int ch;
    int inWord = FALSE;
    while ((ch = getchar ()) != EOF) {
        if (ch == ' ' || ch == '\n' || ch == '\t') {
            if (inWord) {
                printf ("\n");
            }
            inWord = FALSE;
        }
        else {
            inWord = TRUE;
        }
        if (inWord) {
            putchar (ch);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c, last, state;
    last = 0;
    state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (last != ' ' && last != '\n' && last != '\t' && last != 0) {
                state = OUT;
                printf ("\n");
            }
        }
        else if (state == OUT) {
            state = IN;
        }
        if (state == IN) {
            putchar (c);
        }
        last = c;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3974416_3974439_7_33
3974416_3974568_8_37
Title: "C program problem with newlines & tabs next to each other" 
----------------------------------------

int main (void) {
    int ch;
    int inWord = FALSE;
    while ((ch = getchar ()) != EOF) {
        if (ch == ' ' || ch == '\n' || ch == '\t') {
            if (inWord) {
                printf ("\n");
            }
            inWord = FALSE;
        }
        else {
            inWord = TRUE;
        }
        if (inWord) {
            putchar (ch);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c, state;
    state = OUT;
    while ((c = getchar ()) != EOF) {
        switch (state) {
        case OUT :
            switch (c) {
            case ' ' :
            case '\n' :
            case '\t' :
                break;
            default :
                putchar (c);
                state = IN;
            }
            break;
        case IN :
            switch (c) {
            case ' ' :
            case '\n' :
            case '\t' :
                putchar ('\n');
                state = OUT;
                break;
            default :
                putchar (c);
            }
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3974416_3974487_9_33
3974416_3974568_8_37
Title: "C program problem with newlines & tabs next to each other" 
----------------------------------------

int main (void) {
    int c, last, state;
    last = 0;
    state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (last != ' ' && last != '\n' && last != '\t' && last != 0) {
                state = OUT;
                printf ("\n");
            }
        }
        else if (state == OUT) {
            state = IN;
        }
        if (state == IN) {
            putchar (c);
        }
        last = c;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c, state;
    state = OUT;
    while ((c = getchar ()) != EOF) {
        switch (state) {
        case OUT :
            switch (c) {
            case ' ' :
            case '\n' :
            case '\t' :
                break;
            default :
                putchar (c);
                state = IN;
            }
            break;
        case IN :
            switch (c) {
            case ' ' :
            case '\n' :
            case '\t' :
                putchar ('\n');
                state = OUT;
                break;
            default :
                putchar (c);
            }
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39758325_39818739_3_22
39758325_39838854_1_21
Title: Get days between a date and now using the time() function 
----------------------------------------

int days_since_my_birth (int day, int month, int year, double *days) {
    struct tm birthdate = {0};
    birthdate.tm_year = year - 1900;
    birthdate.tm_mon = month - 1;
    birthdate.tm_mday = day;
    birthdate.tm_isdst = -1;
    time_t birth_time = mktime (&birthdate);
    if (birth_time == -1)
        return FAIL;
    time_t now;
    if (time (&now) == -1)
        return FAIL;
    *days = floor (difftime (now, birth_time) / 86400);
    return SUCCESS;
}
----------------------------------------

int days_since_my_birth (int day, int month, int year) {
    struct tm time_info = {0};
    time_info.tm_year = year - 1900;
    time_info.tm_mon = month - 1;
    time_info.tm_mday = day;
    int n = time (NULL);
    double birthday = mktime (&time_info);
    birthday = (birthday / 86400);
    int result = (n / 86400) - birthday;
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39761595_39761669_19_59
39761595_39763935_19_54
Title: I created a program for matrix multiplication using pthread But the [0][0] block value always get 0 
----------------------------------------

int main () {
    int i, j;
    struct Storage storage [3] [3];
    pthread_t thread [4] [4];
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            printf ("Enter a[%d][%d] : ", i, j);
            scanf ("%d", & a [i] [j]);
        }
    }
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            printf ("Enter b[%d][%d] : ", i, j);
            scanf ("%d", & b [i] [j]);
        }
    }
    printf ("****after multiplication****\n");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            storage[i][j].i = i;
            storage[i][j].j = j;
            pthread_create (& thread [i] [j], NULL, matThreadMul, & storage [i] [j]);
        }
    }
    for (i = 0; i < 3; i++)
        for (j = 0; j < 3; j++) {
            pthread_join (thread [i] [j], NULL);
        }
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            printf ("%d  ", c [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    struct Storage storage;
    pthread_t thread [3];
    for (i = 0; i <= 2; i++) {
        for (j = 0; j <= 2; j++) {
            printf ("Enter a[%d][%d] : ", i, j);
            scanf ("%d", & a [i] [j]);
        }
    }
    for (i = 0; i <= 2; i++) {
        for (j = 1; j <= 3; j++) {
            printf ("Enter b[%d][%d] : ", i, j);
            scanf ("%d", & b [i] [j]);
        }
    }
    printf ("****after multiplication****\n");
    for (i = 0; i <= 2; i++) {
        storage.i = i;
        for (j = 0; j <= 2; j++) {
            storage.j = j;
            pthread_create (& thread [j], NULL, matThreadMul, & storage);
        }
    }
    for (i = 0; i <= 2; i++) {
        pthread_join (thread [i], NULL);
    }
    for (i = 0; i <= 2; i++) {
        for (j = 0; j <= 2; j++) {
            printf ("%d  ", c [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39791090_39792379_53_68
39791090_39795830_69_83
Title: Function that extracts words from text ( array of chars ) and put them in 2 dimensions array 
----------------------------------------

int main (void) {
    char s [] = "c language is difficult c is also fun";
    int c, i;
    printf ("Searching: %s\n", s);
    extract_and_count (s, & c);
    printf ("Found %d different words\n", c);
    for (i = 0; i < c; i++) {
        printf ("%d times: %s\n", count [i], word [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int count [NUM_OF_WORDS_MAX] = {0};
    char text [MAX_WORD_LENGTH + 1];
    while (1 == scanf ("%" S (MAX_WORD_LENGTH) "[^\n]%*c", text)) {
        extract_and_count (text, count);
    }
    for (int i = 0; i < NUM_OF_WORDS_MAX; ++i) {
        if (*words[i]) {
            printf ("%s : %d\n", words [i], count [i]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39791090_39792379_8_51
39791090_39795830_36_67
Title: Function that extracts words from text ( array of chars ) and put them in 2 dimensions array 
----------------------------------------

int extract_and_count (char *source, int *strings_cnt) {
    char token [80] [81];
    char *p;
    int i = 0;
    p = strtok (source, " ");
    while (p != NULL) {
        strcpy (token [i], p);
        i++;
        p = strtok (NULL, " ");
    }
    *strings_cnt = 0;
    int j, k;
    for (j = 0; j < i; j++) {
        int found = 0;
        for (k = 0; k < *strings_cnt; k++) {
            if (strcmp (word[k], token[j]) == 0) {
                found = 1;
                count[k]++;
                break;
            }
        }
        if (!found) {
            strcpy (word [* strings_cnt], token [j]);
            count[*strings_cnt] = 1;
            (*strings_cnt)++;
        }
    }
    return 1;
}
----------------------------------------

int extract_and_count (char *source, int *count) {
    char *sp = source;
    char *word;
    int word_count = 0;
    while (word = extract (&sp)) {
        if (Words_entry == NUM_OF_WORDS_MAX) {
            fprintf (stderr, "words table is full.\n");
            return word_count;
        }
        int index = hash (word);
        while (1) {
            if (*words[index]) {
                if (strcasecmp (words[index], word) == 0) {
                    ++count[index];
                    break;
                }
                if (++index == NUM_OF_WORDS_MAX) {
                    index = 0;
                }
            }
            else {
                strcpy (words [index], word);
                count[index] = 1;
                ++Words_entry;
                break;
            }
        }
        ++word_count;
    }
    return word_count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39795274_39795386_3_14
39795274_39795530_3_26
Title: Repeating Characters (A B C) in C 
----------------------------------------

int main (void) {
    int numRows = 2;
    int numCols = 5;
    for (int row = 1; row <= numRows; row++) {
        for (int col = 0; col < numCols; col++) {
            printf ("%d%c ", row, 'A' + col);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int numRows = 2;
    int numCols = 3;
    int rows = 0;
    char cols = 'A';
    char var;
    for (rows = 1; rows <= numRows; ++rows) {
        var = 'A';
        for (cols = 0; cols < numCols; cols++) {
            printf ("%d", rows);
            printf ("%c ", var);
            ++var;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39810008_39810269_1_32
39810008_39813004_1_39
Title: "Linked link function won't put the max item at the end of the list as intended" 
----------------------------------------

void moveAllMaxAtEnd (list A) {
    int max = 0;
    link tmp = A->first;
    link curr = tmp->next;
    int i, count = 0;
    while (curr != NULL) {
        if (curr->item >= max) {
            max = curr->item;
            count++;
        }
        curr = curr->next;
    }
    link prev = A->first;
    link curr1 = prev->next;
    link tmp1;
    while (curr1->next != NULL) {
        if (curr1->item == max) {
            prev->next = curr1->next;
            tmp1 = curr1;
            curr1->next = NULL;
        }
        else {
            prev = prev->next;
            curr1 = curr1->next;
        }
    }
    curr1->next = tmp1;
}
----------------------------------------

void moveAllMaxAtEnd (list A) {
    if (!A || !A->first || !A->first->next)
        return;
    link prev = A->first;
    link curr = prev->next;
    int max = prev->item;
    while (curr != NULL) {
        if (curr->item >= max) {
            max = curr->item;
        }
        prev = curr;
        curr = curr->next;
    }
    link last = prev;
    prev = NULL;
    curr = A->first;
    link max_list = NULL;
    while (curr->next != NULL) {
        if (curr->item == max) {
            link cut = curr;
            curr = curr->next;
            if (prev) {
                prev->next = cut->next;
            }
            else {
                A->first = cut->next;
            }
            cut->next = max_list;
            max_list = cut;
        }
        else {
            prev = curr;
            curr = curr->next;
        }
    }
    last->next = max_list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39810634_39810787_6_31
39810634_39810797_6_25
Title: storing letters from text file into array 
----------------------------------------

int main () {
    FILE *fp;
    int c;
    int index = 0;
    char data [10000];
    fp = fopen ("file.txt", "r");
    if (!fp) {
        return EXIT_FAILURE;
    }
    while (1) {
        c = fgetc (fp);
        if (feof (fp)) {
            data[index] = 0;
            break;
        }
        data[index] = toupper (c);
        ++index;
    }
    fclose (fp);
    printf ("%s", data);
    return (EXIT_SUCCESS);
}
----------------------------------------

int main (void) {
    FILE *f;
    char notes [1000];
    f = fopen ("input.txt", "r");
    if (!f) {
        return 1;
    }
    while (fgets (notes, sizeof notes, f) != NULL) {
        size_t i, n = strlen (notes);
        for (i = 0; i < n; i++) {
            int c = toupper (notes[i]);
            putchar (c);
        }
    }
    fclose (f);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39815335_39815442_4_18
39815335_39815641_6_59
Title: How to restrict to a one letter input? 
----------------------------------------

int main (void) {
    char repeat [3] = {0};
    do {
        printf ("Do you want to try again? (Y/N): ");
        fflush (stdout);
        if (EOF == scanf ("%2s", repeat)) {
            *repeat = 'N';
            break;
        }
        *repeat = toupper (*repeat);
        if (repeat[1] || *repeat != 'Y' && *repeat != 'N') {
            printf ("Invalid answer. Please enter 'Y' or 'N'.\n\n");
            scanf ("%*[^\n]");
            scanf ("%*c");
            *repeat = 0;
        }
    }
    while (*repeat != 'N' && *repeat != 'Y');
    puts ("Bye!");
    return 0;
}
----------------------------------------

int main (void) {
    char repeat = '\0';
    do {
        int input_valid = 0;
        char line [3] = {0};
        puts ("Do you want to try again? (Y/N):");
        do {
            if (NULL == fgets (line, sizeof line, stdin)) {
                break;
            }
            if (line[1] != '\0' && line[1] != '\n') {
                break;
            }
            line[0] = toupper (line[0]);
            if (line[0] != 'Y' && line[0] != 'N') {
                break;
            }
            input_valid = 1;
        }
        while (0);
        if (input_valid == 0) {
            int c;
            do {
                c = getc (stdin);
            }
            while (EOF != c && '\n' != c);
            fprintf (stderr, "Invalid answer. Please enter 'Y' or 'N'.\n\n");
        }
        else {
            repeat = line[0];
        }
    }
    while ('\0' == repeat);
    printf ("The user entered: '%c'\n", repeat);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39816440_39816817_3_21
39816440_39817111_5_18
Title: How to write your program more efficiently 
----------------------------------------

int main () {
    int i;
    int Numbers [3] = {0};
    int sum;
    for (i = 0; i < 3; i++) {
        printf ("Enter Number %d", i);
        scanf ("%d", & Number [i]);
        sum += Number[0];
    }
    printf ("%d", sum);
}
----------------------------------------

int main () {
    int j;
    int d = 0;
    int sum = 0;
    for (j = 0; j < NUMBER_OF_VARS_TO_ADD; ++j) {
        printf ("Enter Number: ");
        scanf ("%d", & d);
        sum += d;
    }
    printf ("Sum: %d", sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39818675_39818705_4_27
39818675_39818745_3_25
Title: "I have written this code for conversion from binary to decimal but not getting the output. Nothing is printing on screen" 
----------------------------------------

int main () {
    char input [100];
    int value = 0;
    printf ("Input a binary: ");
    if (fgets (input, 100, stdin) == NULL) {
        printf ("error\n");
        return 0;
    }
    char *t = input;
    while (*t == '0' || *t == '1') {
        value = value * 2;
        value = value + *t - '0';
        ++t;
    }
    printf ("Decimal value: %d\n", value);
    return 0;
}
----------------------------------------

int main () {
    int ar [20], bin, i = 0, sum = 0, j, c;
    printf ("Enter a Binary number\n");
    scanf ("%d", & bin);
    while (bin != 0) {
        c = bin % 10;
        ar[i] = c;
        i++;
        bin = bin / 10;
    }
    for (j = 0; j < i; j++) {
        sum = sum + (ar[j] * pow (2, j));
    }
    printf ("%d", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39819924_39820472_1_22
39819924_39820902_3_29
Title: Fibonacci Series in C Program where FIRST 2 numbers are given by user 
----------------------------------------

int main () {
    int a, b, next, last, i;
    printf ("Enter the first Value:");
    scanf ("%d", & a);
    printf ("Enter the second Value:");
    scanf ("%d", & b);
    printf ("Enter the length of Fab. series:");
    scanf ("%d", & last);
    printf ("%d,%d,", a, b);
    for (i = 3; i <= last; i++) {
        next = a + b;
        if (i < last)
            printf ("%d,", next);
        else
            printf ("%d", next);
        a = b;
        b = next;
    }
    return 0;
}
----------------------------------------

int main () {
    int length = 0, a, b;
    while (length < 2 || length > 100 || a > b) {
        printf ("\nFirst number: ");
        (void) scanf ("%d", &a);
        printf ("\nSecond number: ");
        (void) scanf ("%d", &b);
        printf ("\nHow long?: ");
        (void) scanf ("%d", &length);
    }
    printf ("%d\t%d\t", a, b);
    for (int i = 2; i < length; i++) {
        int fib = a + b;
        printf ("%d\t", fib);
        a = b;
        b = fib;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39822819_39822937_5_27
39822819_39823216_5_23
Title: Slight issue with Do While Loop 
----------------------------------------

int main (void) {
    char input [99] = "";
    double userNum = 0;
    double sum = 0;
    while (1) {
        printf ("Please enter a number you would like to add [Enter 25 to exit at any time]:\n");
        if ((fgets (input, sizeof (input), stdin))) {
            if (strcmp (input, "25\n") == 0) {
                break;
            }
            if ((sscanf (input, "%lf", &userNum)) == 1) {
                sum = sum + userNum;
            }
        }
        else {
            break;
        }
    }
    printf ("The sum of all the numbers you entered:%f\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    double userNum = 0;
    double sum = 0;
    do {
        puts ("Please enter a number you would like to add [Enter 25 to exit at any time]:");
        scanf ("%lf", & userNum);
        sum = sum + userNum;
        if (userNum == 25) {
            sum = sum - 25;
        }
    }
    while (userNum != 25);
    printf ("The sum of all the numbers you entered:%lf\n", sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39822965_48792011_9_54
39822965_51955146_9_42
Title: Free Linked-List In C 
----------------------------------------

int main (void) {
    struct node *root, *next, *to_free;
    root = malloc (sizeof (struct node));
    root->x = 777;
    root->next = NULL;
    printf ("allocating memory for root. root->x = %i\n\n", root -> x);
    next = root;
    for (int i = 0; i <= 10; i++) {
        next->next = malloc (sizeof (struct node));
        printf ("allocating memory for next. next->x = %i\n", i + 1);
        next->next->x = i + 1;
        next = next->next;
        next->next = NULL;
    }
    printf ("\n");
    next = root;
    for (int j = 0; j <= 11; j++) {
        printf ("Printing x = %i\n", next -> x);
        next = next->next;
    }
    printf ("\n");
    next = root;
    while (next != NULL) {
        to_free = next;
        next = next->next;
        printf ("deallocating node with x = %i\n", to_free -> x);
        free (to_free);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    node_t *root, *next, *temp;
    root = (node_t *) malloc (sizeof (node_t));
    if (root == NULL) {
        fprintf (stderr, "unable to allocate memory\n");
        exit (1);
    }
    root->x = 100;
    root->next = NULL;
    for (int i = 0; i <= 10; i++) {
        next = (node_t *) malloc (sizeof (node_t));
        if (next == NULL) {
            fprintf (stderr, "unable to allocate memory\n");
            exit (1);
        }
        next->x = i;
        next->next = root;
        root = next;
    }
    temp = next;
    while (temp != NULL) {
        printf ("x value is: %d\n", temp -> x);
        temp = temp->next;
    }
    while (next != NULL) {
        temp = next->next;
        free (next);
        next = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39859733_39860523_5_21
39859733_39860572_2_12
Title: Program has stopped working in C 
----------------------------------------

char *espaco (char equacao []) {
    int i = 0, j = 0;
    for (i = 0; i < 50; i++) {
        if (equacao[i] != ' ') {
            equacao[j] = equacao[i];
            j++;
        }
    }
    return equacao;
}
----------------------------------------

char *espaco (char *equacao) {
    int i = 0, j = 0;
    static char x [40];
    for (i = 0; i < 40; i++) {
        if (equacao[i] != ' ') {
            x[j] = equacao[i];
            j++;
        }
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39865526_39866547_4_17
39865526_40315799_24_34
Title: Big Integer Modular Exponentiation 
----------------------------------------

int main (void) {
    mpz_t a, b, c, d;
    mpz_inits (a, b, c, d, NULL);
    printf ("a: ");
    mpz_inp_str (a, stdin, 10);
    printf ("b: ");
    mpz_inp_str (b, stdin, 10);
    printf ("c: ");
    mpz_inp_str (c, stdin, 10);
    mpz_powm (d, a, b, c);
    gmp_printf ("a ^ b mod c = %Zd\n", d);
    return 0;
}
----------------------------------------

int main () {
    char s_x [1111], s_y [1111];
    scanf ("%s %s", s_x, s_y);
    long long x, y, r;
    x = convert (s_x, MOD);
    y = convert (s_y, totient (MOD));
    r = power (x, y);
    printf ("%lld\n", r);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39865551_39865584_1_16
39865551_39889461_1_16
Title: How to use If statement as loop in C Programming? 
----------------------------------------

int main () {
    int n = 0;
    int sum = 0, counter;
    int aver;
    printf ("Enter Value of n");
    scanf ("%d", & n);
    while (n != 0) {
        sum = sum + n;
        printf ("Enter Value of n");
        scanf ("%d", & n);
    }
    printf ("Sum is = %d", sum);
}
----------------------------------------

int main () {
    int n, add;
Sum :
    add = add + n;
    printf ("Enter number:");
    scanf ("%d", & n);
    if (n != 0)
        goto Sum;
    else
        printf ("sum is =%d", add);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39887775_39887882_3_15
39887775_39887942_4_36
Title: How to repeat scanf() n times? 
----------------------------------------

int main (void) {
    int a [100];
    int n, x;
    int i = 0;
    scanf ("%d%d", & n, & x);
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int *a = NULL;
    int n, x, i;
    scanf ("%d%d", & n, & x);
    if (n <= 0) {
        fprintf (stderr, "n must be > 0\n");
        return 1;
    }
    a = malloc (n * sizeof (int));
    if (a == NULL) {
        fprintf (stderr, "failed to allocate memory for " "%d integers\n", n);
        return 1;
    }
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("a[%d] = %d\n", i, a [i]);
    }
    printf ("x = %d\n", x);
    free (a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39887775_39887882_3_15
39887775_39889772_3_20
Title: How to repeat scanf() n times? 
----------------------------------------

int main (void) {
    int a [100];
    int n, x;
    int i = 0;
    scanf ("%d%d", & n, & x);
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int a [MAX_ARR_LEN];
    int n, x;
    int i = 0;
    scanf ("%d%d", & n, & x);
    if (n > MAX_ARR_LEN) {
        printf ("You can't enter more than - %d\n", MAX_ARR_LEN);
        return -1;
    }
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39887775_39887942_4_36
39887775_39889772_3_20
Title: How to repeat scanf() n times? 
----------------------------------------

int main (void) {
    int *a = NULL;
    int n, x, i;
    scanf ("%d%d", & n, & x);
    if (n <= 0) {
        fprintf (stderr, "n must be > 0\n");
        return 1;
    }
    a = malloc (n * sizeof (int));
    if (a == NULL) {
        fprintf (stderr, "failed to allocate memory for " "%d integers\n", n);
        return 1;
    }
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("a[%d] = %d\n", i, a [i]);
    }
    printf ("x = %d\n", x);
    free (a);
    return 0;
}
----------------------------------------

int main (void) {
    int a [MAX_ARR_LEN];
    int n, x;
    int i = 0;
    scanf ("%d%d", & n, & x);
    if (n > MAX_ARR_LEN) {
        printf ("You can't enter more than - %d\n", MAX_ARR_LEN);
        return -1;
    }
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39901316_39901828_1_29
39901316_39901855_1_15
Title: Why does my palindrome checking function always return false for palindromes? 
----------------------------------------

int palindrome (char *str) {
    int n = 0, i = 0, j;
    char nova [100];
    while (str[i] != '\0') {
        if (str[i] >= 'A' && str[i] <= 'Z') {
            nova[n] = ('a' + str[i] - 'A');
            n++;
        }
        else if (str[i] >= 'a' && str[i] <= 'z') {
            nova[n] = str[i];
            n++;
        }
        i++;
    }
    i = 0;
    j = n - 1;
    while (i < j) {
        if (nova[i] != nova[j]) {
            return 0;
        }
        i++;
        j--;
    }
    return 1;
}
----------------------------------------

int palindrome (char *str) {
    int i = 0, j = strlen (str);
    while (i < j) {
        if (str[j] == '\0' || !isalpha (str[j]))
            --j;
        else if (!isalpha (str[i]))
            ++i;
        else if (tolower (str[i]) != tolower (str[j]))
            return 0;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39943667_39943768_4_15
39943667_39944245_4_47
Title: what to use to check in between comparisons in c? 
----------------------------------------

int main () {
    time_t now = time (NULL);
    struct tm *now_tm = localtime (&now);
    int hour = now_tm->tm_hour;
    if ((hour > 7 && hour < 10) || (hour > 17 && hour < 19))
        printf ("traffic\n");
    else
        printf ("smooth\n");
    return 0;
}
----------------------------------------

int main () {
    time_t now;
    struct tm newyear;
    struct tm _7am;
    struct tm _10am;
    struct tm _5pm;
    struct tm _7pm;
    double mytime;
    double s_7am, s_10am, s_5pm, s_7pm;
    time (& now);
    newyear = *localtime (&now);
    newyear.tm_hour = 0;
    newyear.tm_min = 0;
    newyear.tm_sec = 0;
    newyear.tm_mon = 0;
    newyear.tm_mday = 1;
    _7am = *localtime (&now);
    _7am.tm_hour = 7;
    _7am.tm_min = 0;
    _7am.tm_sec = 0;
    s_7am = difftime (mktime (&_7am), mktime (&newyear));
    _10am = *localtime (&now);
    _10am.tm_hour = 10;
    _10am.tm_min = 0;
    _10am.tm_sec = 0;
    s_10am = difftime (mktime (&_10am), mktime (&newyear));
    _5pm = *localtime (&now);
    _5pm.tm_hour = 17;
    _5pm.tm_min = 0;
    _5pm.tm_sec = 0;
    s_5pm = difftime (mktime (&_5pm), mktime (&newyear));
    _7pm = *localtime (&now);
    _7pm.tm_hour = 19;
    _7pm.tm_min = 0;
    _7pm.tm_sec = 0;
    s_7pm = difftime (mktime (&_7pm), mktime (&newyear));
    mytime = difftime (now, mktime (&newyear));
    if ((mytime > s_7am && mytime < s_10am) || (mytime > s_5pm && mytime < s_7pm)) {
        printf ("Traffic!");
    }
    else {
        printf ("Smooth...");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39951803_39952087_3_28
39951803_39952111_3_18
Title: Write a program in C to print armstrong numbers from 1 to 10000 
----------------------------------------

int main (void) {
    int digit;
    int sum = 0;
    int number;
    printf ("The armstrong numbers are-");
    for (number = 1; number <= 10000; number++) {
        int temporary = number;
        sum = 0;
        while (temporary > 0) {
            digit = temporary % 10;
            sum = sum + (digit * digit * digit);
            temporary = temporary / 10;
        }
        if (sum == number)
            printf ("%d ", number);
    }
    return 0;
}
----------------------------------------

int main () {
    int n;
    printf ("The armstrong numbers are-");
    for (n = 1; n <= 10000; n++) {
        int a, b = 0, s = n;
        while (s > 0) {
            a = s % 10;
            b = b + (a * a * a);
            s = s / 10;
        }
        if (b == n)
            printf ("%d ", n);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39965829_39967998_3_37
39965829_39969957_3_26
Title: Program in C to generate this pattern 
----------------------------------------

int main () {
    int input = 0;
    int i = 0;
    int j = 0;
    int k = 1;
    scanf ("%d", & input);
    int array [input] [input];
    for (i = 0; i < (input / 2); i++) {
        for (j = 0; j < input; j++) {
            array[i][j] = k;
            k++;
        }
        for (j = 0; j < input; j++) {
            array[input - 1 - i][j] = k;
            k++;
        }
    }
    if ((input % 2) == 1) {
        for (j = 0; j < input; j++) {
            array[input / 2][j] = k;
            k++;
        }
    }
    for (i = 0; i < input; i++) {
        for (j = 0; j < input; j++) {
            printf ("\t%d", array [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int number;
    (void) scanf ("%d", &number);
    int twice = 2 * number;
    int squared = number * number;
    for (int row = 0, upward = number, downward = 2 * squared; row < number; row++) {
        int n = ((upward > squared) ? downward : upward) - number + 1;
        for (int column = 0; column < number; column++) {
            printf ("%d*\t", n ++);
        }
        printf ("\n");
        upward += twice;
        downward -= twice;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39974904_39975070_1_46
39974904_39975361_1_39
Title: The game of Craps 
----------------------------------------

bool playGame (void) {
    int point, total;
    static int winCounter = 0, looseCounter = 0;
    printf ("The game is starting!\n");
    total = rollDice ();
    printf ("You rolled: %d\n", total);
    if (total == 7 || total == 11) {
        printf ("Wow it's your lucky day! You Win!\n");
        winCounter++;
    }
    else if (total == 2 || total == 3 || total == 12) {
        printf ("Unlucky! You Loose!\n");
        looseCounter++;
    }
    else {
        point = total;
        printf ("Your Point is: %d\n", point);
        while (true) {
            total = rollDice ();
            printf ("You rolled: %d\n", total);
            if (total == point) {
                printf ("You made your point! You Win!\n");
                winCounter++;
                break;
            }
            else if (total == 7) {
                printf ("Thats a %d. You Loose!\n", total);
                looseCounter++;
                break;
            }
        }
    }
    printf ("Won: %d - Lose: %d\n", winCounter, looseCounter);
    return true;
}
----------------------------------------

bool playGame (void) {
    int point, total;
    printf ("The game is starting!\n");
    total = rollDice ();
    printf ("You rolled: %d\n", total);
    if (total == 7 || total == 11) {
        printf ("Wow it's your lucky day! You Win!\n");
        return true;
    }
    else if (total == 2 || total == 3 || total == 12) {
        printf ("Unlucky! You Lose!\n");
        return false;
    }
    else {
        point = total;
        printf ("Your Point is: %d\n", point);
        while (true) {
            total = rollDice ();
            printf ("You rolled: %d\n", total);
            if (total == point) {
                printf ("You made your point! You Win!\n");
                return true;
            }
            else if (total == 7) {
                printf ("Thats a %d. You Lose!\n", total);
                return false;
            }
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39990871_39991193_1_25
39990871_39991433_4_28
Title: How to read a text file that has float numbers to a float array in C 
----------------------------------------

int main () {
    FILE *file = NULL;
    float integers [102], num;
    int i = 0;
    file = fopen ("Data.txt", "r");
    if (file == NULL) {
        printf ("Error while opening the file.\n");
        return -1;
    }
    while (fscanf (file, "%f", &num) != EOF) {
        integers[i++] = num;
    }
    fclose (file);
    for (i = 0; i < 102; i++) {
        printf ("integers[%d] = %.02f\n", i, integers [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    float fval [102];
    int n, i;
    fp = fopen ("foo.txt", "w+");
    if (fp == NULL) {
        printf ("failed to open file\n");
        return 1;
    }
    fputs ("0.000   1.800   3.240   4.374   5.249   5.905   6.377   7.696 ", fp);
    rewind (fp);
    n = 0;
    while (fscanf (fp, "%f", &fval[n++]) != EOF)
        ;
    for (i = 0; i < n - 1; i++)
        printf ("fval[%d]=%f\n", i, fval[i]);
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40027957_40028153_3_30
40027957_40028589_3_28
Title: So I wrote this code but the loop doesn't work 
----------------------------------------

int main (void) {
    int number;
    int originalnumber;
    for (originalnumber = 1; originalnumber <= 100; originalnumber++) {
        number = originalnumber;
        int sum = 0, result;
        while (number > 0) {
            result = number % 10;
            sum = sum + result;
            number = number / 10;
        }
        if ((sum * 4) == originalnumber) {
            printf ("\n%d is special number.", originalnumber);
        }
        else {
            printf ("\n%d is not special number.", originalnumber);
        }
    }
}
----------------------------------------

int main (void) {
    int number;
    int originalnumber;
    for (number = 1; number <= 100; number++) {
        originalnumber = number;
        int sum = 0, result;
        while (originalnumber > 0) {
            result = originalnumber % 10;
            sum = sum + result;
            originalnumber = originalnumber / 10;
        }
        if ((sum * 4) == number) {printf ("\n%d is special number.", number);
    }
    else {printf ("\n%d is not special number.", number);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40037787_40037933_1_17
40037787_40038700_60_74
Title: Runtime Errors When Using Free() in C 
----------------------------------------

void ST_free (SymTab oSymTab) {
    if (oSymTab != NULL) {
        symEntry *current;
        symEntry *previous;
        current = oSymTab->head;
        while (current != NULL && current->next != NULL) {
            previous = current;
            current = current->next;
            free (previous);
        }
        free (oSymTab);
    }
}
----------------------------------------

void ST_free (symTab *oSymTab) {
    symEntry *current;
    symEntry *previous;
    current = oSymTab->head;
    while (current->next != NULL) {
        previous = current;
        current = current->next;
        free (previous);
    }
    free (oSymTab);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40052656_40053165_11_41
40052656_40053560_12_31
Title: Passing arbitrary size 2D array of structs to function in C 
----------------------------------------

int main (void) {
    int num_rows, num_cols;
    int row, col;
    num_rows = 3;
    num_cols = 3;
    Object **obj_arr = malloc (sizeof (Object *) * num_rows);
    for (row = 0; row < num_rows; row++)
        obj_arr[row] = malloc (sizeof (Object) * num_cols);
    for (row = 0; row < num_rows; row++)
        for (col = 0; col < num_cols; col++) {
            printf ("Element [%d][%d]:\n", row, col);
            printf ("    enter id: ");
            scanf ("%9s", obj_arr [row] [col].id);
            printf ("    enter value: ");
            scanf ("%d", & (obj_arr [row] [col].value));
        }
    show_obj (obj_arr, num_rows, num_cols);
    for (row = 0; row < num_rows; row++)
        free (obj_arr[row]);
    free (obj_arr);
    return 0;
}
----------------------------------------

int main (void) {
    int i, j;
    printf ("\n enter i & j: ");
    if (scanf (" %d %d", &i, &j) != 2) {
        fprintf (stderr, "error: invalid input, i, j.\n");
        return 1;
    }
    obj o [i] [j];
    for (int a = 0; a < i; a++)
        for (int b = 0; b < j; b++)
            o[a][b].value = a + b;
    printf ("\n sum : %d\n\n", sum_all_elements (i, j, o));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40064485_40065695_4_52
40064485_40066863_11_34
Title: Extract a bit sequence from a character 
----------------------------------------

int main (void) {
    char arr [6] = {'h', 'e', 'l', 'l', 'o', 'o'};
    char charcode [9];
    char binarr [121] = "";
    char fives [24] [5] = {{0}};
    int i, j, n, numchars, grouping = 0, numgroups = 0;
    printf ("\nCharacter encodings:\n");
    for (j = 0; j < 6; j++) {
        for (i = 0, n = 7; i < 8; i++, n--)
            charcode[i] = (arr[j] & (01 << n)) ? '1' : '0';
        charcode[8] = '\0';
        printf ("%c = %s\n", arr [j], charcode);
        strcat (binarr, charcode);
    }
    numchars = strlen (binarr);
    j = 0;
    while (j < numchars) {
        i = 0;
        if ((numchars - j) < 5) {
            for (i = 0; i < (5 - (numchars - j)); i++)
                fives[grouping][i] = '0';
        }
        while (i < 5) {
            fives[grouping][i] = binarr[j];
            ++i;
            ++j;
        }
        ++grouping;
        ++numgroups;
    }
    printf ("\nConcatenated binary string:\n");
    printf ("%s\n", binarr);
    printf ("\nGroupings of five, with padded final grouping:\n");
    for (grouping = 0; grouping <= numgroups; grouping++) {
        for (i = 0; i < 5; i++)
            printf ("%c", fives[grouping][i]);
        putchar (' ');
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    char bits [GROUP_SIZE + 1];
    int firstTime, nBits;
    firstTime = 1;
    while ((nBits = nextGroup (bits)) == GROUP_SIZE) {
        if (!firstTime) {
            (void) putchar (' ');
        }
        firstTime = 0;
        (void) printf ("%s", bits);
    }
    if (nBits > 0) {
        if (!firstTime) {
            (void) putchar (' ');
        }
        while (nBits++ < GROUP_SIZE) {
            (void) putchar ('0');
        }
        (void) printf ("%s", bits);
    }
    (void) putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40071354_40071451_2_18
40071354_40071551_2_19
Title: Print integer from character array in c 
----------------------------------------

int main () {
    int n, i = 0, c1, c2;
    char a [1000];
    scanf ("%d", & n);
    while (n != 0) {
        a[i] = '0' + n % 2;
        n = n / 2;
        i++;
    }
    a[i] = '\0';
    for (i = 0; a[i] != '\0'; i++)
        printf ("%c", a[i]);
}
----------------------------------------

int main () {
    int n, i = 0, c1, c2;
    char a [1000];
    scanf ("%d", & n);
    while (n != 0) {
        a[i] = n % 2;
        printf ("%d\t%d\t%c\n", a [i], i, a [i]);
        n = n / 2;
        i++;
    }
    printf ("%d\n", i);
    a[i] = '\0';
    printf ("%d\t%d\n", a [i], i);
    for (i = 0; a[i] != '\0'; i++)
        printf ("%d\t%d\n", a[i], i);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40078327_40078769_5_20
40078327_40092595_40_53
Title: "how can I parse a string like this (68)" 
----------------------------------------

static int parsing (char *a) {
    char temp [80];
    strcpy (temp, a);
    printf ("temp 0 = %p [[%s]]\n", (void *) temp, temp);
    char *word1 = strtok (temp, "(,)");
    printf ("word 1 = %p [[%s]]\n", (void *) word1, word1 == 0 ? "<nothing>" : word1);
    char *word2 = strtok (NULL, "(,)");
    printf ("word 2 = %p [[%s]]\n", (void *) word2, word2 == 0 ? "<nothing>" : word2);
    int u = strtoumax (word1, 0, 0);
    int v = strtoumax (word2, 0, 0);
    printf ("%d %d\n", u, v);
    return 1;
}
----------------------------------------

size_t parsing (int **nums, char *a) {
    size_t nums_sz = 0;
    char *res;
    while ((res = strtok (a, "(,)"))) {
        nums_sz++;
        *nums = realloc (*nums, sizeof (int) * nums_sz);
        (*nums)[nums_sz - 1] = atoi (res);
        a = NULL;
    }
    return nums_sz;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40083069_40083382_4_20
40083069_40084030_6_18
Title: "Stuck in void funtion if conditions" 
----------------------------------------

int main () {
    int i;
    printf ("Enter Number:");
    scanf ("%d", & i);
    if (i % 2)
        printf ("%d is an odd number", i);
    else {
        if (i > 10 || i <= 20)
            i *= 2;
        if (i > 30 || i <= 40)
            i *= 3;
        if (i > 40 || i <= 50)
            i *= 4;
        printf ("%d", i);
    }
    return 0;
}
----------------------------------------

int main () {
    int i;
    printf ("Enter Number:\t", i);
    scanf ("%d", & i);
    if (i % 2 != 0) {
        printf ("%d is an odd number", i);
    }
    else {
        todo1 (i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40093729_40094499_31_49
40093729_40095988_3_31
Title: How to copy a string in C until I reach a space 
----------------------------------------

void main () {
    char names [10] [51] = {"Pat Townsend", "Michele Kelley", "Yolanda Franklin", "Willard Benson", "Ashley Simmons", "Shawn Lawson", "John Phelps", "Mildred Wheeler", "Lucy Mendoza", "Kelvin Barker"};
    for (int iName = 0; iName < 10; iName++) {
        char sFirst [255];
        char sLast [255];
        SplitNames (names [iName], sFirst, sLast);
        printf ("[%s]= [%s] [%s]\n", names [iName], sFirst, sLast);
    }
    system ("pause");
}
----------------------------------------

int main (void) {
    char names [10] [51] = {"Pat Townsend", "Michele Kelley", "Yolanda Franklin", "Willard Benson", "Ashley Simmons", "Shawn Lawson", "John Phelps", "Mildred Wheeler", "Lucy Mendoza", "Kelvin Barker"};
    char firstnames [10] [51];
    char surnames [10] [51];
    int i;
    for (i = 0; i < 10; i++) {
        firstnames[i][0] = lastnames[i][0] = '\0';
        sscanf (names [i], "%50s %50[^\n]", firstnames [i], lastnames [i]);
    }
    printf ("first names:\n");
    for (i = 0; i < 10; i++) {
        printf ("    %s\n", firstnames [i]);
    }
    printf ("last names:\n");
    for (i = 0; i < 10; i++) {
        printf ("    %s\n", lastnames [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40099439_40100043_3_19
40099439_40100144_8_17
Title: Concatenating 2 arrays in C 
----------------------------------------

struct array add (struct array a, struct array b) {
    int length = a.length + b.length;
    int *sum = (int *) calloc (length, sizeof (int));
    for (int i = 0; i < length; ++i) {
        if (i < a.length) {
            sum[i] = a.array[i];
        }
        else {
            sum[i] = b.array[i - a.length];
        }
    }
    struct array c;
    c.length = length;
    c.array = sum;
    return c;
}
----------------------------------------

void add (struct array a, struct array b, struct array *sum_str) {
    sum_str->length = a.length + b.length;
    for (int i = 0; i < sum_str->length; ++i) {
        if (i < a.length) {
            sum_str->array[i] = a.array[i];
        }
        else {
            sum_str->array[i] = b.array[i - a.length];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40108705_40109120_3_24
40108705_40110105_4_29
Title: Split string into INT array in c 
----------------------------------------

int main (int argc, char *argv []) {
    int j = 0, k, res;
    char buff [10];
    while (str[j]) {
        if ((str[j] >= '0') && (str[j] <= '9')) {
            k = 0;
            while ((str[j] != ' ') && (str[j] != '\0')) {
                buff[k] = str[j++];
                k++;
            }
            buff[k] = 0;
            res = atoi (buff);
        }
        j++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *input = "* SEARCH 2 4 5 12 34 123 207";
    int len = 0;
    sscanf (input, "%*[^0-9]%n", & len);
    char *p = input + len;
    char *start = p;
    int v, n = 0;
    while (1 == sscanf (p, "%d%n", &v, &len)) {
        ++n;
        p += len;
    }
    int array [n];
    char *endp = NULL;
    int i;
    for (i = 0; i < n; ++i) {
        array[i] = strtol (start, &endp, 10);
        start = endp + 1;
    }
    for (i = 0; i < n; ++i)
        printf ("%d ", array[i]);
    puts ("");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40108705_40109120_3_24
40108705_40111448_6_79
Title: Split string into INT array in c 
----------------------------------------

int main (int argc, char *argv []) {
    int j = 0, k, res;
    char buff [10];
    while (str[j]) {
        if ((str[j] >= '0') && (str[j] <= '9')) {
            k = 0;
            while ((str[j] != ' ') && (str[j] != '\0')) {
                buff[k] = str[j++];
                k++;
            }
            buff[k] = 0;
            res = atoi (buff);
        }
        j++;
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char message [] = "* SEARCH 2 4 5 12 34 123 207";
    char *buffer = NULL;
    int *integers = NULL;
    int buff_size = 1, buff_len = 0;
    int int_size = 1, int_len = 0;
    int ch, messlen, i, first_int = 0;
    buffer = malloc ((buff_size + 1) * sizeof (*buffer));
    integers = malloc (int_size * sizeof (*integers));
    if (buffer == NULL || integers == NULL) {
        fprintf (stderr, "Malloc problem, please check\n");
        exit (EXIT_FAILURE);
    }
    messlen = strlen (message);
    for (ch = 0; ch < messlen; ch++) {
        if (isdigit (message[ch])) {
            first_int = 1;
            if (buff_size == buff_len) {
                buff_size++;
                buffer = realloc (buffer, (2 * buff_size) * sizeof (*buffer));
            }
            buffer[buff_len++] = message[ch];
            buffer[buff_len] = '\0';
        }
        if (isspace (message[ch]) && first_int == 1) {
            if (int_size == int_len) {
                int_size++;
                integers = realloc (integers, (2 * int_size) * sizeof (*integers));
            }
            integers[int_len] = atoi (buffer);
            int_len++;
            buff_size = 1;
            buff_len = 0;
            first_int = 0;
        }
        if (isdigit (message[ch]) && ch == messlen - 1) {
            integers[int_len] = atoi (buffer);
            int_len++;
        }
    }
    printf ("Your string: %s\n", message);
    printf ("\nYour integer array:\n");
    for (i = 0; i < int_len; i++) {
        printf ("%d ", integers [i]);
    }
    free (integers);
    free (buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40108705_40110105_4_29
40108705_40111448_6_79
Title: Split string into INT array in c 
----------------------------------------

int main (void) {
    char *input = "* SEARCH 2 4 5 12 34 123 207";
    int len = 0;
    sscanf (input, "%*[^0-9]%n", & len);
    char *p = input + len;
    char *start = p;
    int v, n = 0;
    while (1 == sscanf (p, "%d%n", &v, &len)) {
        ++n;
        p += len;
    }
    int array [n];
    char *endp = NULL;
    int i;
    for (i = 0; i < n; ++i) {
        array[i] = strtol (start, &endp, 10);
        start = endp + 1;
    }
    for (i = 0; i < n; ++i)
        printf ("%d ", array[i]);
    puts ("");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char message [] = "* SEARCH 2 4 5 12 34 123 207";
    char *buffer = NULL;
    int *integers = NULL;
    int buff_size = 1, buff_len = 0;
    int int_size = 1, int_len = 0;
    int ch, messlen, i, first_int = 0;
    buffer = malloc ((buff_size + 1) * sizeof (*buffer));
    integers = malloc (int_size * sizeof (*integers));
    if (buffer == NULL || integers == NULL) {
        fprintf (stderr, "Malloc problem, please check\n");
        exit (EXIT_FAILURE);
    }
    messlen = strlen (message);
    for (ch = 0; ch < messlen; ch++) {
        if (isdigit (message[ch])) {
            first_int = 1;
            if (buff_size == buff_len) {
                buff_size++;
                buffer = realloc (buffer, (2 * buff_size) * sizeof (*buffer));
            }
            buffer[buff_len++] = message[ch];
            buffer[buff_len] = '\0';
        }
        if (isspace (message[ch]) && first_int == 1) {
            if (int_size == int_len) {
                int_size++;
                integers = realloc (integers, (2 * int_size) * sizeof (*integers));
            }
            integers[int_len] = atoi (buffer);
            int_len++;
            buff_size = 1;
            buff_len = 0;
            first_int = 0;
        }
        if (isdigit (message[ch]) && ch == messlen - 1) {
            integers[int_len] = atoi (buffer);
            int_len++;
        }
    }
    printf ("Your string: %s\n", message);
    printf ("\nYour integer array:\n");
    for (i = 0; i < int_len; i++) {
        printf ("%d ", integers [i]);
    }
    free (integers);
    free (buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40118509_40119150_37_47
40118509_40121021_13_59
Title: Read random line from .txt file 
----------------------------------------

int main () {
    srand ((unsigned) time (NULL));
    FILE *istream = fopen ("test.txt", "r");
    assert (istream);
    int lc = Line_Count (istream, RAND_MAX);
    assert (lc && lc < RAND_MAX);
    for (int i = 0; i < 5; i++) {
        print_random_line (istream, rand () % lc);
    }
    fclose (istream);
}
----------------------------------------

int main (void) {
    FILE *raw_words, *formatted_words;
    char word [MAXWORD];
    long wordcount;
    int i;
    int wpos;
    raw_words = fopen (RAW_WORDS, "r");
    if ((formatted_words = fopen (FMT_WORDS, "r+b")) == NULL) {
        if ((formatted_words = fopen (FMT_WORDS, "w+b")) == NULL) {
            fprintf (stderr, "Unable to open file %s\n", FMT_WORDS);
            exit (EXIT_FAILURE);
        }
        else {
            wordcount = 0L;
            fwrite (& wordcount, OFFSET_SZ, 1, formatted_words);
            fflush (formatted_words);
        }
    }
    if (raw_words != NULL)
        update_words (formatted_words, raw_words);
    srand ((unsigned) time (NULL));
    rewind (formatted_words);
    fread (& wordcount, OFFSET_SZ, 1, formatted_words);
    printf ("Five random words from %s:\n", FMT_WORDS);
    for (i = 0; i < 5; i++) {
        wpos = rand () % wordcount;
        fseek (formatted_words, wpos * MAXWORD + OFFSET_SZ, SEEK_SET);
        fread (word, MAXWORD, 1, formatted_words);
        puts (word);
    }
    if (raw_words && (fclose (raw_words) != 0))
        fprintf (stderr, "Unable to close file %s\n", RAW_WORDS);
    if (fclose (formatted_words) != 0)
        fprintf (stderr, "Unable to close file %s\n", FMT_WORDS);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40147794_40148782_1_32
40147794_40149207_4_30
Title: seperate the word from a sentence without library function 
----------------------------------------

int main () {
    char str [] = "This, a sample string.";
    int i = 0, k, begin, end;
    int t;
    while (str[i] != '\0') {
        begin = i;
        while (str[i] != ' ' && str[i] != '\0') {
            i++;
        }
        end = i - 1;
        char *ptr = (char *) malloc ((i - begin) * sizeof (char) + 1);
        t = 0;
        for (k = begin; k <= end; k++) {
            ptr[t++] = str[k];
        }
        ptr[t] = '\0';
        puts (ptr);
        if (str[i] == '\0') {
            break;
        }
        else
            while (str[i] == ' ')
                i++;
    }
    return 0;
}
----------------------------------------

int main () {
    char str [] = "This,  an sample string.";
    int i = 0, j, k, begin, end;
    char *ptr;
    while (str[i] != '\0') {
        while (str[i] == ' ') {
            i++;
        }
        begin = i;
        while (str[i] != ' ' && str[i] != '\0') {
            i++;
        }
        end = i - 1;
        ptr = (char *) malloc ((end - begin) * sizeof (char));
        for (k = 0, j = begin; k <= end - begin; k++, j++) {
            ptr[k] = str[j];
        }
        ptr[k] = '\0';
        printf ("%s\n", ptr);
        if (str[i] == '\0') {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40149021_40149386_3_37
40149021_40151115_2_43
Title: C programming: Find the subtraction of two greatest numbers out of three 
----------------------------------------

int main () {
    int numbers [3];
    printf ("Enter number 1: \n");
    scanf ("%d", & numbers [0]);
    printf ("Enter number 2; \n");
    scanf ("%d", & numbers [1]);
    printf ("Enter number 3: \n");
    scanf ("%d", & numbers [2]);
    printf ("%d %d %d\n", numbers [0], numbers [1], numbers [2]);
    int maximum_0 = 0;
    int maximum_1 = 0;
    int i;
    for (i = 0; i < 3; i++) {
        if (numbers[i] > maximum_0) {
            maximum_0 = numbers[i];
        }
    }
    for (i = 0; i < 3; i++) {
        if (numbers[i] > maximum_1 && numbers[i] < maximum_0) {
            maximum_1 = numbers[i];
        }
    }
    printf ("Result: %d\n", (maximum_0 - maximum_1));
    return 0;
}
----------------------------------------

int main () {
    int a, b, c, d, max, min, result;
    printf ("Enter three numbers: ");
    scanf ("%d%d%d", & a, & b, & c);
    if (a > b) {
        if (a > c) {
            max = a;
            if (c > b)
                min = c;
            else
                min = b;
        }
        else {
            max = c;
            a = min;
        }
    }
    else {
        if (b > c) {
            max = b;
            if (a > c)
                min = a;
            else
                min = c;
        }
        else {
            max = c;
            min = b;
        }
    }
    result = max - min;
    printf ("the greatest number is %d\n", result);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40149021_40149386_3_37
40149021_40151374_13_27
Title: C programming: Find the subtraction of two greatest numbers out of three 
----------------------------------------

int main () {
    int numbers [3];
    printf ("Enter number 1: \n");
    scanf ("%d", & numbers [0]);
    printf ("Enter number 2; \n");
    scanf ("%d", & numbers [1]);
    printf ("Enter number 3: \n");
    scanf ("%d", & numbers [2]);
    printf ("%d %d %d\n", numbers [0], numbers [1], numbers [2]);
    int maximum_0 = 0;
    int maximum_1 = 0;
    int i;
    for (i = 0; i < 3; i++) {
        if (numbers[i] > maximum_0) {
            maximum_0 = numbers[i];
        }
    }
    for (i = 0; i < 3; i++) {
        if (numbers[i] > maximum_1 && numbers[i] < maximum_0) {
            maximum_1 = numbers[i];
        }
    }
    printf ("Result: %d\n", (maximum_0 - maximum_1));
    return 0;
}
----------------------------------------

int main () {
    int abc [3];
    printf ("Enter three numbers: ");
    scanf ("%d%d%d", & abc [0], & abc [1], & abc [2]);
    qsort (abc, 3, sizeof (int), sort);
    printf ("%d\n", abc [2] - abc [1]);
    while (1) {
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40149021_40151115_2_43
40149021_40151374_13_27
Title: C programming: Find the subtraction of two greatest numbers out of three 
----------------------------------------

int main () {
    int a, b, c, d, max, min, result;
    printf ("Enter three numbers: ");
    scanf ("%d%d%d", & a, & b, & c);
    if (a > b) {
        if (a > c) {
            max = a;
            if (c > b)
                min = c;
            else
                min = b;
        }
        else {
            max = c;
            a = min;
        }
    }
    else {
        if (b > c) {
            max = b;
            if (a > c)
                min = a;
            else
                min = c;
        }
        else {
            max = c;
            min = b;
        }
    }
    result = max - min;
    printf ("the greatest number is %d\n", result);
    return 0;
}
----------------------------------------

int main () {
    int abc [3];
    printf ("Enter three numbers: ");
    scanf ("%d%d%d", & abc [0], & abc [1], & abc [2]);
    qsort (abc, 3, sizeof (int), sort);
    printf ("%d\n", abc [2] - abc [1]);
    while (1) {
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40159594_40159861_4_14
40159594_40159921_5_19
Title: To print only the first occurence of a substring in c 
----------------------------------------

int main () {
    char text [] = "..... $it is beautiful : $yes you are correct....";
    char *ret = strstr (text, "$");
    if (ret != NULL) {
        char *colon;
        if (colon = strrchr (ret, ':'))
            *colon = '\0';
        printf ("The statement is: %s", ret);
    }
    return 0;
}
----------------------------------------

int main () {
    char text [] = "..... $it is beautiful : $yes you are correct....";
    char *sub = "$";
    char *ret = strstr (text, sub);
    char *out = malloc (strlen (text) +1);
    if (ret != NULL) {
        sscanf (ret, "$%[^$^:]", out);
        printf ("the statement is : [%s] \n", out);
    }
    free (out);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40159672_40160404_18_41
40159672_40165865_3_35
Title: How do I shift an array in C? 
----------------------------------------

int main () {
    int arr [10] = {0}, cpy [10];
    int array = 0;
    printf ("Enter the size of the array (MAX): ");
    scanf ("%d", & array);
    printf ("Now please enter your %d values: \n", array);
    int i;
    for (i = 0; i < array; i++) {
        scanf ("%d", arr + i);
    }
    arrayRotate (arr, array);
    multArr (arr, cpy, array);
    for (i = 0; i < array; i++) {
        printf ("%d ", arr [i]);
    }
    printf ("\n");
    for (i = 0; i < array; i++) {
        printf ("%d ", cpy [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int number_elements;
    printf ("Enter the size of the array (MAX): ");
    (void) scanf ("%d", &number_elements);
    int array [number_elements + 1];
    printf ("Now please enter your %d values:\n", number_elements);
    for (int i = 0; i < number_elements; i++) {
        (void) scanf ("%d", array +i);
    }
    array[number_elements] = array[0];
    for (int i = 1; i <= number_elements; i++) {
        printf ("%d ", array [i]);
        array[i - 1] *= array[i];
    }
    putchar ('\n');
    for (int i = 0; i < number_elements; i++) {
        printf ("%d ", array [i]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40159672_40160404_18_41
40159672_40166473_7_24
Title: How do I shift an array in C? 
----------------------------------------

int main () {
    int arr [10] = {0}, cpy [10];
    int array = 0;
    printf ("Enter the size of the array (MAX): ");
    scanf ("%d", & array);
    printf ("Now please enter your %d values: \n", array);
    int i;
    for (i = 0; i < array; i++) {
        scanf ("%d", arr + i);
    }
    arrayRotate (arr, array);
    multArr (arr, cpy, array);
    for (i = 0; i < array; i++) {
        printf ("%d ", arr [i]);
    }
    printf ("\n");
    for (i = 0; i < array; i++) {
        printf ("%d ", cpy [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int arr [10] = {0};
    int array = 0;
    printf ("Enter the size of the array (MAX): ");
    scanf ("%d", & array);
    printf ("Now please enter your %d values: \n", array);
    int i;
    for (i = 0; i < array; i++) {
        scanf ("%d", arr + i);
    }
    shift (arr, array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40159672_40165865_3_35
40159672_40166473_7_24
Title: How do I shift an array in C? 
----------------------------------------

int main () {
    int number_elements;
    printf ("Enter the size of the array (MAX): ");
    (void) scanf ("%d", &number_elements);
    int array [number_elements + 1];
    printf ("Now please enter your %d values:\n", number_elements);
    for (int i = 0; i < number_elements; i++) {
        (void) scanf ("%d", array +i);
    }
    array[number_elements] = array[0];
    for (int i = 1; i <= number_elements; i++) {
        printf ("%d ", array [i]);
        array[i - 1] *= array[i];
    }
    putchar ('\n');
    for (int i = 0; i < number_elements; i++) {
        printf ("%d ", array [i]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main () {
    int arr [10] = {0};
    int array = 0;
    printf ("Enter the size of the array (MAX): ");
    scanf ("%d", & array);
    printf ("Now please enter your %d values: \n", array);
    int i;
    for (i = 0; i < array; i++) {
        scanf ("%d", arr + i);
    }
    shift (arr, array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40159892_40160038_1_20
40159892_46480387_18_26
Title: Using asprintf() on windows 
----------------------------------------

int vasprintf (char **strp, const char *fmt, va_list ap) {
    int len = _vscprintf (fmt, ap);
    if (len == -1) {
        return -1;
    }
    size_t size = (size_t) len + 1;
    char *str = malloc (size);
    if (!str) {
        return -1;
    }
    int r = _vsprintf_s (str, len +1, fmt, ap);
    if (r == -1) {
        free (str);
        return -1;
    }
    *strp = str;
    return r;
}
----------------------------------------

int vasprintf (char **strp, const char *fmt, va_list ap) {
    int len = _vscprintf_so (fmt, ap);
    if (len == -1)
        return -1;
    char *str = malloc ((size_t) len + 1);
    if (!str)
        return -1;
    int r = vsnprintf (str, len +1, fmt, ap);
    if (r == - 1) return free (str), - 1;
    *strp = str;
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40165106_40165279_8_23
40165106_40165392_5_16
Title: How to generate random numbers in the form _ _ _ . _ _ _ _ (C language) 
----------------------------------------

int main () {
    srand (time (NULL));
    int number;
    double p;
    number = rand () % 9999999;
    p = (double) number / 100;
    printf ("%8.4f\n", p);
    getchar ();
    return (0);
}
----------------------------------------

int main () {
    int number;
    double p;
    srand (time (NULL));
    while (1) {
        number = rand () % 16777216;
        if (number < 10000000)
            break;
    }
    p = number / 10000.0;
    printf ("%08.4f\n", p);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40166045_40166635_118_132
40166045_40166919_140_151
Title: Cannot delete vowels from singly linked list 
----------------------------------------

void addTolinkedList (char *str, struct linkedList **s, int *indexer) {
    if (*indexer == (int) strlen (str)) {
        free (*s);
        *s = NULL;
    }
    else {
        (*s)->ch = *(str + *indexer);
        (*s)->node = (struct linkedList *) malloc (sizeof (struct linkedList));
        ++*indexer;
        addTolinkedList (str, & (* s) -> node, indexer);
    }
}
----------------------------------------

void addTolinkedList (char *string, struct linkedList **s, int index) {
    if (index == strlen (string)) {
        *s = NULL;
    }
    else {
        *s = malloc (sizeof (struct linkedList));
        (*s)->ch = string[index];
        (*s)->node = NULL;
        addTolinkedList (string, & (* s) -> node, index + 1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40166045_40166635_134_151
40166045_40166919_153_167
Title: Cannot delete vowels from singly linked list 
----------------------------------------

char *combineWithNoSpaces (int argc, char *argv []) {
    int argl [argc + 1];
    int memory = 0;
    for (int i = 1; i < argc; i++) {
        argl[i] = strlen (argv[i]);
        memory += argl[i];
    }
    char *str = (char *) malloc (memory +1);
    char *base = str;
    for (int i = 1; i < argc; i++) {
        strcpy (base, argv [i]);
        base += argl[i];
    }
    return str;
}
----------------------------------------

char *combineWithNoSpaces (int argc, char *argv []) {
    int characters = 0;
    for (int i = 1; i < argc; i++) {
        characters += strlen (argv[i]);
    }
    char *string = calloc (characters +1, 1);
    for (int i = 1; i < argc; i++) {
        (void) strcat (string, argv[i]);
    }
    return string;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40166045_40166635_19_42
40166045_40166919_22_73
Title: Cannot delete vowels from singly linked list 
----------------------------------------

int main (int argc, char *argv []) {
    int indexer = 0;
    struct linkedList *s;
    char *string;
    if (argc == 1) {
        printf ("Parse a sentence.  Usage: %s word [word ...]\n", argv [0]);
    }
    else {
        s = (struct linkedList *) malloc (sizeof (struct linkedList));
        printf ("s = %p\n", (void *) s);
        string = combineWithNoSpaces (argc, argv);
        addTolinkedList (string, & s, & indexer);
        printLinkedList (& s);
        removeVowels (& s);
        printLinkedList (& s);
        printf ("s = %p\n", (void *) s);
        freeLinkedList (s);
        free (string);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int choice;
    char *string;
    if (argc == 1) {
        fprintf (stderr, "Enter a sentence\n");
        return EXIT_FAILURE;
    }
    struct linkedList *s = NULL;
    string = combineWithNoSpaces (argc, argv);
    addTolinkedList (string, & s, 0);
    free (string);
    while (true) {
        printMenu ();
        (void) scanf ("%d", &choice);
        printf ("\n");
        switch (choice) {
        case 1 :
            printLinkedList (s);
            break;
        case 2 :
            if (!delHead (&s)) {
                printf ("Failed. Empty linked list\n");
            }
            break;
        case 3 :
            removeVowels (&s);
            break;
        case 4 :
            if (isEmpty (s)) {
                printf ("Empty LinkedList\n");
            }
            else {
                printf ("Not Empty\n");
            }
            break;
        case 5 :
            freeLinkedList (s);
            return EXIT_SUCCESS;
        default :
            printf ("Invalid choice\n");
        }
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40166045_40166635_66_89
40166045_40166919_94_114
Title: Cannot delete vowels from singly linked list 
----------------------------------------

void removeVowels (struct linkedList **s) {
    struct linkedList *temp, *tag;
    while ((*s) != NULL && isvowel ((*s)->ch)) {
        struct linkedList *ts = *s;
        delHead (& ts);
        *s = ts;
    }
    struct linkedList *n = *s;
    while (n != NULL && (tag = locate (&n)) != NULL) {
        while (tag->node != NULL && isvowel (tag->node->ch)) {
            temp = tag->node;
            tag->node = tag->node->node;
            free (temp);
        }
        n = tag->node;
    }
}
----------------------------------------

void removeVowels (struct linkedList **s) {
    struct linkedList **vowel;
    while ((vowel = locateVowel (s)) != NULL) {
        struct linkedList *temporary = (*vowel)->node;
        if (temporary == NULL) {
            free (*vowel);
            *vowel = NULL;
            break;
        }
        (*vowel)->ch = temporary->ch;
        (*vowel)->node = temporary->node;
        free (temporary);
        s = vowel;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40166045_40166635_91_103
40166045_40166919_116_127
Title: Cannot delete vowels from singly linked list 
----------------------------------------

int delHead (struct linkedList **s) {
    struct linkedList *temp;
    if ((*s) == NULL)
        return 0;
    else {
        temp = (*s)->node;
        free (*s);
        *s = temp;
        return 1;
    }
}
----------------------------------------

bool delHead (struct linkedList **s) {
    if (*s == NULL) {
        return false;
    }
    struct linkedList *temporary = (*s)->node;
    free (*s);
    *s = temporary;
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40170214_40170530_3_15
40170214_40172877_3_14
Title: What's wrong with this C program?I's always appear a new number we not input?Compiled with Dev-C++ 
----------------------------------------

void sort (int b []) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 9; j++) {
            if (b[j + 1] < b[j]) {
                int temp = 0;
                temp = b[j + 1];
                b[j + 1] = b[j];
                b[j] = temp;
            }
        }
    }
}
----------------------------------------

void sort (int b []) {
    int temp = 0;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10 - i - 1; j++) {
            if (b[j + 1] > b[j]) {
                temp = b[j];
                b[j] = b[j + 1];
                b[j + 1] = temp;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40170479_40170841_10_18
40170479_40170869_8_15
Title: Array and type/value errors in sorting function 
----------------------------------------

void SelectionSort (int arr [], int len) {
    if (len <= 1)
        return;
    int max_ind = find_maxind (arr, len);
    int temp = arr[max_ind];
    arr[max_ind] = arr[len - 1];
    arr[len - 1] = temp;
    SelectionSort (arr, len - 1);
}
----------------------------------------

void SelectionSort (int arr [], int len) {
    if (len <= 1)
        return;
    int max_ind = find_maxind (arr, len);
    int temp = arr[max_ind];
    arr[max_ind] = arr[len - 1];
    arr[len - 1] = temp;
    SelectionSort (arr, len - 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40171162_40172826_8_20
40171162_40173024_5_30
Title: OpenMP Paralellize Pi program 
----------------------------------------

int main () {
    int i;
    double x, pi, sum = 0.0;
    {
        for (i = 0;
        i < num_steps;
        ++ i) {x = (i - 0.5) * step;
        sum += 4.0 / (1.0 + x * x);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    int i = 0, aux = 0;
    double step = 1.0 / 100000.0;
    long num_steps = 100000;
    double x = 0.0, pi = 0.0, sum = 0.0;
    {
        for (i = 0; i < num_steps; ++i) {
            x = (i - 0.5) * step;
            sum += 4.0 / (1.0 + x * x);
        }
    }
    pi = step * sum;
    printf ("PI value = %f\n", pi);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40171162_40172826_8_20
40171162_49373983_5_20
Title: OpenMP Paralellize Pi program 
----------------------------------------

int main () {
    int i;
    double x, pi, sum = 0.0;
    {
        for (i = 0;
        i < num_steps;
        ++ i) {x = (i - 0.5) * step;
        sum += 4.0 / (1.0 + x * x);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    long int i, num_steps = NUM_STEPS;
    double x, step, sum, pi;
    sum = 0.0;
    step = 1.0 / (double) num_steps;
    {
        for (i = 0;
        i < num_steps;
        ++ i) {x = (i + 0.5) * steps;
        sum += 4.0 / (1.0 + x * x);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40171162_40173024_5_30
40171162_49373983_5_20
Title: OpenMP Paralellize Pi program 
----------------------------------------

int main (int argc, char **argv) {
    int i = 0, aux = 0;
    double step = 1.0 / 100000.0;
    long num_steps = 100000;
    double x = 0.0, pi = 0.0, sum = 0.0;
    {
        for (i = 0; i < num_steps; ++i) {
            x = (i - 0.5) * step;
            sum += 4.0 / (1.0 + x * x);
        }
    }
    pi = step * sum;
    printf ("PI value = %f\n", pi);
}
----------------------------------------

int main (int argc, char **argv) {
    long int i, num_steps = NUM_STEPS;
    double x, step, sum, pi;
    sum = 0.0;
    step = 1.0 / (double) num_steps;
    {
        for (i = 0;
        i < num_steps;
        ++ i) {x = (i + 0.5) * steps;
        sum += 4.0 / (1.0 + x * x);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40172468_40174772_37_71
40172468_40180679_3_27
Title: Creating a faster perfect hash function for 6-byte strings 
----------------------------------------

int main (void) {
    unsigned char a, b, c, d, e, f;
    unsigned char buf [7] = {0};
    uint64_t h1, h2;
    for (a = 'A'; a <= 'Z'; a++) {
        buf[0] = a;
        for (b = 'A'; b <= 'Z'; b++) {
            buf[1] = b;
            for (c = 'A'; c <= 'Z'; c++) {
                buf[2] = c;
                for (d = '0'; d <= '9'; d++) {
                    buf[3] = d;
                    for (e = '0'; e <= '9'; e++) {
                        buf[4] = e;
                        for (f = '0'; f <= '9'; f++) {
                            buf[5] = f;
                            h1 = hash1 (buf);
                            h2 = hash2 (buf);
                            if (h1 != h2) {
                                printf ("Meh: %s mismatch: %llx %llx\n", (const char *) buf, (unsigned long long) h1, (unsigned long long) h2);
                                return 1;
                            }
                        }
                    }
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    size_t max = 0;
    unsigned char b [7] = {0};
    for (b[0] = 'A'; b[0] <= 'Z'; b[0]++) {
        for (b[1] = 'A'; b[1] <= 'Z'; b[1]++) {
            for (b[2] = 'A'; b[2] <= 'Z'; b[2]++) {
                for (b[3] = '0'; b[3] <= '9'; b[3]++) {
                    for (b[4] = '0'; b[4] <= '9'; b[4]++) {
                        for (b[5] = '0'; b[5] <= '9'; b[5]++) {
                            size_t i = hash3x26k (b);
                            if (i > max)
                                max = i;
                            if (z[i]++) {
                                printf ("%s %zu\n", b, i);
                                exit (- 1);
                            }
                        }
                    }
                }
            }
        }
    }
    printf ("%zu\n", max + 1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40185141_40185802_16_31
40185141_40186310_4_16
Title: count digit until you get number of digits you want 
----------------------------------------

int main (void) {
    int num;
    printf ("Please enter number:");
    scanf ("%d", & num);
    while (count_digit (num) != 7) {
        printf ("Please enter only 7digits number:\n ");
        scanf ("%d", & num);
    }
    printf ("The 7digit number you entered  is: %d", num);
    return 0;
}
----------------------------------------

int main () {
    char s [1000];
    printf ("Please enter number: ");
    scanf ("%s", s);
    while (strlen (s) != 7) {
        printf ("%d\n", strlen (s));
        printf ("You can use only 7 digits numbers\n");
        scanf ("%s", s);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40186607_40186957_3_20
40186607_40187055_3_11
Title: Multiple scanf from a single input 
----------------------------------------

int main (void) {
    char str [6];
    printf ("\nPART 2: EXPRESSIONS SUM\n\n");
    printf ("Enter 5-digit integer: ");
    scanf (" \ n % s, & str);
    int fivedigit = atoi (str);
    int sum = 0;
    for (int i = 0; i < 5; i++) {
        int tempadd = (int) str[i];
        sum += tempadd;
    }
}
----------------------------------------

int main (void) {
    int val;
    printf ("Enter a number: ");
    if (scanf ("%d", &val) != 1)
        return 1;
    int sum = 0;
    for (int x = val; x; x /= 10)
        sum += x % 10;
    printf ("Value = %d. Digit sum = %d\n", val, sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40194180_40194497_1_12
40194180_40196121_1_12
Title: Merge Sort Base Case (Recursion) Dissect 
----------------------------------------

int divide (int a [], int start, int end) {
    int mid;
    if (end > start) {
        mid = (start + end) / 2;
        divide (a, start, mid);
        divide (a, mid + 1, end);
        merge (a, start, mid, end);
    }
}
----------------------------------------

void divide (int a [], int start, int end) {
    int mid;
    if (start < end) {
        mid = (start + end) / 2;
        divide (a, start, mid);
        divide (a, mid + 1, end);
        merge (a, start, mid, end);
    }
}
----------------------------------------

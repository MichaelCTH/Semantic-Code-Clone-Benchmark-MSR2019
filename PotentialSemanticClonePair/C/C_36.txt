$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35790454_35790532_6_26
35790454_35791243_3_21
Title: code blocks cyclic shift 
----------------------------------------

int main () {
    int num;
    scanf ("%d", & num);
    int temp = num;
    int flag = 0;
    while (temp != 0) {
        temp = temp / 10;
        flag++;
    }
    int r = num % 10;
    int s = num / 10;
    int k = r * pow (10, flag -1);
    int crs = k + s;
    printf ("%d", crs);
    return 0;
}
----------------------------------------

int main () {
    while (true) {
        const unsigned int Base = 10;
    std :
        : cout << "Enter a non-negative number (0-exit): ";
        unsigned int x = 0;
        if (! (std : : cin >> x) || (x == 0)) break;
        unsigned int multiplier = 1;
        for (unsigned int tmp = x; tmp /= Base;)
            multiplier *= Base;
    std :
        : cout << "The shifted number is " << x / Base + x % Base * multiplier << std : : endl;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35810676_35811134_9_28
35810676_35811305_34_77
Title: print common elements from two arrays 
----------------------------------------

int main () {
    int a [] = {3, 4, 1, 6, 7, 8, 3, 4, 5};
    int b [] = {2, 4, 6, 8, 10, 12, 14, 16, 18};
    int n = 9;
    commonelefind (a, b, n);
    if (k == 0) {
        printf ("there is no common element\n");
    }
    else {
        printf ("common elements are\n");
        while (k-- > 0) {
            printf ("%d\n", arr [k]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int *a1, *a2, i, n, *common, length;
    printf ("enter no of elements in arrays: ");
    scanf ("%d", & n);
    a1 = (int *) malloc (sizeof (int) * n);
    a2 = (int *) malloc (sizeof (int) * n);
    printf ("enter elements 1st array\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a1 [i]);
    }
    printf ("enter elements 2nd array\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a2 [i]);
    }
    common = commonelefind (a1, a2, n, &length);
    if (length == 0) {
        printf ("there is no common element");
    }
    else {
        printf ("common elements are:\n");
        for (i = 0; i < length; i++) {
            printf ("%d\n", common [i]);
        }
    }
    free (common);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35812031_35812388_22_30
35812031_35846628_44_65
Title: Array of Chars as Queue in C 
----------------------------------------

char queue_pop (void) {
    char temp;
    if (queue_head == queue_tail)
        return '\0';
    --queue_head;
    temp = *queue_head;
    *queue_head = '\0';
    return temp;
}
----------------------------------------

char queue_pop () {
    if ((queue_tail == queue_head) && (queueState == QUEUE_NOT_FULL)) {
        return '\0';
    }
    else {
        const char result = *queue_tail;
        queue_tail++;
        if (queue_tail == END_OF_QUEUE) {
            queue_tail = &queue[0];
        }
        queueState = QUEUE_NOT_FULL;
        return result;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35812031_35812388_7_20
35812031_35846628_12_42
Title: Array of Chars as Queue in C 
----------------------------------------

void queue_push (char l_item) {
    if (queue_head != queue + sizeof (queue) / sizeof (*queue)) {
        char *traveler = queue_head;
        for (; traveler != queue_tail; --traveler) {
            *traveler = *(traveler - 1);
        }
        ++queue_head;
        *queue_tail = l_item;
    }
}
----------------------------------------

void queue_push (const char l_item) {
    if (queueState == QUEUE_NOT_FULL) {
        *queue_head = l_item;
        queue_head++;
        if (queue_head == END_OF_QUEUE) {
            queue_head = &queue[0];
        }
        if (queue_head == queue_tail) {
            queueState = QUEUE_IS_FULL;
        }
    }
    else {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35816080_35816213_7_24
35816080_35816327_4_20
Title: "Character counting program character as ints issue" 
----------------------------------------

int main (void) {
    char string [100] = "this is A TEST";
    int count [NO_OF_CHAR] = {0};
    for (int i = 0; string[i] != '\0'; i++) {
        unsigned char c = toupper (string[i]);
        count[c]++;
    }
    for (int c = 0; c < NO_OF_CHAR; c++) {
        if (count[c] > 0 && isupper (c))
            printf ("%c: %d \n", c, count[c]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char string [] = "this is A TEST";
    unsigned int frequency ['Z' - 'A' + 1] = {0};
    for (const char *p = string; *p; ++p) {
        char c = toupper ((unsigned char) *p);
        if (c >= 'A' && c <= 'Z')
            ++frequency[c - 'A'];
    }
    for (char c = 'A'; c <= 'Z'; ++c) {
        if (frequency[c - 'A'])
            printf ("%c: %u\t", c, frequency[c - 'A']);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35816080_35816213_7_24
35816080_35816840_8_31
Title: "Character counting program character as ints issue" 
----------------------------------------

int main (void) {
    char string [100] = "this is A TEST";
    int count [NO_OF_CHAR] = {0};
    for (int i = 0; string[i] != '\0'; i++) {
        unsigned char c = toupper (string[i]);
        count[c]++;
    }
    for (int c = 0; c < NO_OF_CHAR; c++) {
        if (count[c] > 0 && isupper (c))
            printf ("%c: %d \n", c, count[c]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    for (char *p = string; *p; p++) {
        unsigned char uc = (unsigned char) *p;
        uc = toupper (uc);
        (frequency[uc])++;
    }
    for (int i = 0; i <= UCHAR_MAX; i++) {
        if (isupper (i)) {
            printf ("Char: %c, frequency: %u\n", (char) i, frequency [i]);
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35816080_35816327_4_20
35816080_35816840_8_31
Title: "Character counting program character as ints issue" 
----------------------------------------

int main (void) {
    char string [] = "this is A TEST";
    unsigned int frequency ['Z' - 'A' + 1] = {0};
    for (const char *p = string; *p; ++p) {
        char c = toupper ((unsigned char) *p);
        if (c >= 'A' && c <= 'Z')
            ++frequency[c - 'A'];
    }
    for (char c = 'A'; c <= 'Z'; ++c) {
        if (frequency[c - 'A'])
            printf ("%c: %u\t", c, frequency[c - 'A']);
    }
    printf ("\n");
}
----------------------------------------

int main (void) {
    for (char *p = string; *p; p++) {
        unsigned char uc = (unsigned char) *p;
        uc = toupper (uc);
        (frequency[uc])++;
    }
    for (int i = 0; i <= UCHAR_MAX; i++) {
        if (isupper (i)) {
            printf ("Char: %c, frequency: %u\n", (char) i, frequency [i]);
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35827451_35827497_1_16
35827451_35827578_1_18
Title: String concat in C 
----------------------------------------

void xsdValidation (char *xsdName, char *xmlName) {
    static const char *xmlLint = "xmllint --noout --schema ";
    size_t xmlLintLen = strlen (xmlLint);
    size_t xsdNameLen = strlen (xsdName);
    size_t xmlNameLen = strlen (xmlName);
    char *terminalCommand = malloc (xmlLintLen +xsdNameLen + xmlNameLen + 1);
    if (terminalCommand != NULL) {
        strcpy (terminalCommand, xmlLint);
        strcpy (terminalCommand + xmlLintLen, xsdName);
        strcpy (terminalCommand + xmlLintLen + xsdNameLen, xmlName);
        system (terminalCommand);
        free (terminalCommand);
    }
}
----------------------------------------

void xsdValidation (const char *xsdName, const char *xmlName) {
    const char *command = "xmllint --noout --schema ";
    char *terminalCommand = malloc (strlen (command) +strlen (xsdName) + strlen (xmlName) + 2);
    if (terminalCommand != NULL) {
        strcpy (terminalCommand, command);
        strcat (terminalCommand, xsdName);
        strcat (terminalCommand, " ");
        strcat (terminalCommand, xmlName);
        system (terminalCommand);
        free (terminalCommand);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35834073_35834191_18_52
35834073_35834283_14_56
Title: trouble getting correct answer when dividing by a decimal 
----------------------------------------

int main () {
    int intValue, menuSelect, results;
    double shrink;
    intValue = 1;
    while (intValue > 0) {
        printf ("Enter a positive Integer\n: ");
        scanf ("%d", & intValue);
        {
            printf ("Enter 1 to calculate Square, 2 to Calculate Cube, or 3 to divide  input by 2, to end program enter a negative integer.\n: ");
            scanf ("%d", & menuSelect);
            if (menuSelect == 1) {
                results = Square (intValue);
                printf ("Square of %d is %d\n", intValue, results);
            }
            else if (menuSelect == 2) {
                results = Cube (intValue);
                printf ("Cube of %d is %d\n", intValue, results);
            }
            else if (menuSelect == 3) {
                shrink = Shrink (intValue);
                printf ("The quotient of %d is %g\n", intValue, shrink);
            }
            else {
                printf ("Invalid menu item, only 1, 2 or 3 is accepted\n");
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    float numer_input, results;
    int menuSelect;
    numer_input = 1;
    while (numer_input > 0) {
        printf ("Enter a positive Integer\n: ");
        scanf ("%f", & numer_input);
        printf ("Enter 1 to calculate Square, 2 to Calculate Cube, or 3 to divide  input by 2, to end program enter a negative integer.\n: ");
        scanf ("%d", & menuSelect);
        if (menuSelect == 1) {
            results = Square (numer_input);
            printf ("Square of %f is %f\n", numer_input, results);
        }
        else if (menuSelect == 2) {
            results = Cube (numer_input);
            printf ("Cube of %f is %f\n", numer_input, results);
        }
        else if (menuSelect == 3) {
            results = Shrink (numer_input);
            printf ("The quotient of %f is %f\n", numer_input, results);
        }
        else
            printf ("Invalid menu item, only 1, 2 or 3 is accepted\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35843988_35844475_19_30
35843988_35848857_18_30
Title: how to return float array from a function? 
----------------------------------------

int main () {
    int a [4] = {1, 5, 3, 7};
    float p [4] = {0};
    int size = 4;
    int i;
    funcTest (p, a, size);
    for (i = 0; i < size; i++) {
        printf ("%f\n", p [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int a [4] = {1, 5, 3, 7};
    int size = 4;
    int i, j;
    float *k;
    funcTest (& a [0], size, k);
    for (i = 0; i < size; i++) {
        printf ("%f\n", k);
        k++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35843988_35844475_4_17
35843988_35848857_4_16
Title: how to return float array from a function? 
----------------------------------------

int funcTest (float *p, int *a, int size) {
    int i;
    for (i = 0; i < size; i++) {
        p[i] = *a;
        p[i] = p[i] / 2;
        a++;
    }
    for (i = 0; i < size; i++) {
        printf ("%f\n", p [i]);
    }
    return 0;
}
----------------------------------------

void funcTest (int *a, int size, float *output) {
    output = (float *) malloc (sizeof (float) * size);
    int i;
    for (i = 0; i < size; i++) {
        output[i] = *a;
        output[i] = output[i] / 2;
        a++;
    }
    for (i = 0; i < size; i++) {
        printf ("%f\n", output [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3584705_3584904_23_59
3584705_50182937_5_23
Title: defining a 2D array with malloc and modifying it 
----------------------------------------

int main (int argc, char *argv []) {
    int **m = alloc_matrix (10, 15);
    for (int y = 0; y < 15; y++) {
        for (int x = 0; x < 10; x++) {
            m[y][x] = y * x;
        }
    }
    for (int y = 0; y < 15; y++) {
        for (int x = 0; x < 10; x++) {
            printf ("%d\t", m [y] [x]);
        }
        printf ("\n");
    }
    realloc_matrix (& m, 20, 10);
    for (int y = 0; y < 10; y++) {
        for (int x = 0; x < 20; x++) {
            m[y][x] = y * x;
        }
    }
    for (int y = 0; y < 10; y++) {
        for (int x = 0; x < 20; x++) {
            printf ("%d\t", m [y] [x]);
        }
        printf ("\n");
    }
}
----------------------------------------

int main (int arvc, char *argv []) {
    int (*a) [5] [8];
    int i, j;
    a = (int (*)[5] [8]) calloc (5 * 8, sizeof (int));
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 8; j++)
            (*a)[i][j] = i * 10 + j;
    }
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 8; j++)
            printf ("%d ", (*a)[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35849152_35849329_1_17
35849152_35849473_1_11
Title: fprintf does not display value properly 
----------------------------------------

p_loc init_cards (int n, p_loc *lastCard) {
    if (n <= 0)
        return NULL;
    p_loc loc = malloc (sizeof (struct list_of_cards));
    if (loc != NULL) {
        scanf ("%s", loc -> card);
        fprintf (stderr, "%s\n", loc -> card);
        *lastCard = loc;
        loc->ncards = init_cards (n -1);
    }
    return loc;
}
----------------------------------------

p_loc init_cards (p_loc *loc, int n) {
    *loc = malloc (sizeof (struct list_of_cards));
    scanf ("%s", (* loc) -> card);
    fprintf (stderr, "%s\n", (* loc) -> card);
    if (n == 1) {
        (*loc)->ncards = NULL;
        return *loc;
    }
    return init_cards (&((*loc)->ncards), n -1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35857973_35858100_13_33
35857973_35858436_15_38
Title: Synchronizing threads in the order using mutexes 
----------------------------------------

int main () {
    int i;
    pthread_t tid [7];
    time_t seconds;
    time (& seconds);
    srand ((unsigned int) seconds);
    for (i = 0; i < 7; i++)
        pthread_create (&tid[i], NULL, text, (void *) code[i]);
    for (i = 0; i < 7; i++)
        if (pthread_join (tid[i], NULL))
            ;
    pthread_mutex_destroy (& a_mutex);
    return 0;
}
----------------------------------------

int main () {
    int i;
    pthread_t tid [7];
    for (i = 0; i < 7; i++) {
        pthread_create (& tid [i], NULL, text, (void *) & code [i]);
    }
    for (i = 0; i < 7; i++) {
        pthread_join (tid [i], NULL);
    }
    pthread_mutex_destroy (& a_mutex);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35857973_35858100_35_56
35857973_35858436_40_52
Title: Synchronizing threads in the order using mutexes 
----------------------------------------

void *text (void *arg) {
    long n = (long) arg;
    long localNum = -1;
    int rand_sec = rand () % (3 - 1 + 1) + 1;
    int rc;
    while (localNum != n) {
        rc = pthread_mutex_lock (&a_mutex);
        localNum = num;
        rc = pthread_mutex_unlock (&a_mutex);
        sleep (rand_sec);
    }
    printf ("This is thread %d.\n", n);
    rc = pthread_mutex_lock (&a_mutex);
    num++;
    rc = pthread_mutex_unlock (&a_mutex);
    pthread_exit (0);
}
----------------------------------------

void *text (void *arg) {
    while (1) {
        pthread_mutex_lock (& a_mutex);
        if (num == *(int*) arg) {
            printf ("This is thread has the code %d\n", * (int *) arg);
            num++;
            pthread_mutex_unlock (& a_mutex);
            pthread_exit (0);
        }
        pthread_mutex_unlock (& a_mutex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3585846_23657072_12_23
3585846_3586005_12_24
Title: Color text in terminal applications in UNIX 
----------------------------------------

int main () {
    printf (RED "red\n" RESET);
    printf (GRN "green\n" RESET);
    printf (YEL "yellow\n" RESET);
    printf (BLU "blue\n" RESET);
    printf (MAG "magenta\n" RESET);
    printf (CYN "cyan\n" RESET);
    printf (WHT "white\n" RESET);
    return 0;
}
----------------------------------------

int main () {
    printf ("%sred\n", KRED);
    printf ("%sgreen\n", KGRN);
    printf ("%syellow\n", KYEL);
    printf ("%sblue\n", KBLU);
    printf ("%smagenta\n", KMAG);
    printf ("%scyan\n", KCYN);
    printf ("%swhite\n", KWHT);
    printf ("%snormal\n", KNRM);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35866751_35867089_27_39
35866751_35867278_11_59
Title: Read line by line from a file and save in a list C 
----------------------------------------

int main () {
    char str [] = "0008   0008    BANCO BAI EUROPA, SA    Bancos";
    char *t;
    t = token (str);
    while (t) {
        puts (t);
        t = token (NULL);
    }
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fp;
    char str [1000];
    char *aptr, *bptr, *cptr;
    struct list rec;
    if ((fp = fopen ("file.txt", "rt")) == NULL)
        return 1;
    while (fgets (str, sizeof str, fp) != NULL) {
        aptr = strstr (str, "   ");
        if (aptr == NULL)
            return 1;
        *aptr++ = '\0';
        while (*aptr == ' ')
            aptr++;
        bptr = strstr (aptr, "   ");
        if (bptr == NULL)
            return 1;
        *bptr++ = '\0';
        while (*bptr == ' ')
            bptr++;
        cptr = strstr (bptr, "   ");
        if (cptr == NULL)
            return 1;
        *cptr++ = '\0';
        while (*cptr == ' ')
            cptr++;
        cptr[strcspn (cptr, "\r\n")] = 0;
        if (sscanf (str, "%d", &rec.code1) != 1)
            return 1;
        if (sscanf (aptr, "%d", &rec.code2) != 1)
            return 1;
        strcpy (rec.name, bptr);
        strcpy (rec.type, cptr);
        printf ("%d/%d/%s/%s\n", rec.code1, rec.code2, rec.name, rec.type);
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35869784_35870917_4_28
35869784_35875539_1_20
Title: Serial numbers of equal numbers next to each other in array 
----------------------------------------

int main (void) {
    int i = 0;
    int prev = 0;
    int iprev = 0;
    int n;
    while (scanf ("%d", &n) == 1) {
        if (n != prev) {
            if (i - iprev > 1) {
                while (iprev < i)
                    printf ("%d\n", iprev++);
            }
            iprev = i;
            prev = n;
        }
        i++;
    }
    if (i - iprev > 1) {
        while (iprev < i)
            printf ("%d\n", iprev++);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char myList [] = {'.', '1', '2', '2', '3', '4', '4', '4', '5', '6', '6'};
    int listSz = strlen (myList) - 1;
    int n;
    for (n = 1; n < listSz; n++) {
        if ((myList[n] == myList[n + 1]) || (myList[n] == myList[n - 1])) {
            printf ("%d . ", n);
        }
    }
    if (myList[listSz] == myList[listSz - 1]) {
        printf ("%d", n);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35882904_35883180_7_35
35882904_35883410_6_47
Title: left to right evaluation 
----------------------------------------

int main (void) {
    char exp [SIZE];
    int ans, length, i;
    printf ("Enter your expression: ");
    fgets (exp, 20, stdin);
    ans = exp[0] - '0';
    length = strlen (exp) - 1;
    for (i = 0; i < length && exp[i] != '\n'; i++) {
        switch (exp[i]) {
        case '+' :
            ans += exp[i + 1] - '0';
            break;
        case '-' :
            ans -= exp[i + 1] - '0';
            break;
        case '*' :
            ans *= exp[i + 1] - '0';
            break;
        case '/' :
            ans /= exp[i + 1] - '0';
            break;
        default :
            break;
        }
    }
    printf ("The answer is %d\n", ans);
    return 0;
}
----------------------------------------

int main (void) {
    char exp [SIZE];
    int ans, c, i = 0;
    int length, j;
    printf ("Enter your expression: ");
    fgets (exp, 20, stdin);
    length = strlen (exp);
    char ch;
    ans = exp[i] - '0';
    i++;
    while (i <= length) {
        switch (exp[i]) {
        case '+' :
            i++;
            ans += (exp[i] - '0');
            break;
        case '-' :
            i++;
            ans -= (exp[i] - '0');
            break;
        case '*' :
            i++;
            ans *= (exp[i] - '0');
            break;
        case '/' :
            i++;
            ans /= (exp[i] - '0');
            break;
        default :
            break;
        }
        i++;
    }
    printf ("The answer is %d\n", ans);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35903783_35904209_3_39
35903783_35904288_3_40
Title: Getting a for loop to work with negative numbers 
----------------------------------------

int main (void) {
    const int SCORES_SIZE = 4;
    int bonusScores [SCORES_SIZE];
    bonusScores[0] = 10;
    bonusScores[1] = 20;
    bonusScores[2] = 30;
    bonusScores[3] = 40;
    for (int i = 1; i < SCORES_SIZE; ++i) {
        bonusScores[i - 1] += bonusScores[i];
    }
    for (int i = 0; i < SCORES_SIZE; ++i) {
        printf ("%d ", bonusScores [i]);
    }
    printf ("\n");
    bonusScores[0] = -100;
    bonusScores[1] = -200;
    bonusScores[2] = -300;
    bonusScores[3] = -400;
    for (int i = 1; i < SCORES_SIZE; ++i) {
        bonusScores[i - 1] += bonusScores[i];
    }
    for (int i = 0; i < SCORES_SIZE; ++i) {
        printf ("%d ", bonusScores [i]);
    }
    printf ("\n");
}
----------------------------------------

int main (void) {
    const int SCORES_SIZE = 4;
    int bonusScores [SCORES_SIZE];
    int i = 0;
    bonusScores[0] = -10;
    bonusScores[1] = -20;
    bonusScores[2] = -30;
    bonusScores[3] = -40;
    printf ("Negative scores:\n");
    for (i = 0; i < SCORES_SIZE; i++) {
        if (i != SCORES_SIZE - 1)
            bonusScores[i] = (bonusScores[i] + bonusScores[i + 1]);
    }
    for (i = 0; i < SCORES_SIZE; ++i) {
        printf ("%d ", bonusScores [i]);
    }
    printf ("\n");
    bonusScores[0] = 10;
    bonusScores[1] = 20;
    bonusScores[2] = 30;
    bonusScores[3] = 40;
    printf ("Positive scores:\n");
    for (i = 0; i < SCORES_SIZE; i++) {
        if (i != SCORES_SIZE - 1)
            bonusScores[i] = (bonusScores[i] + bonusScores[i + 1]);
    }
    for (i = 0; i < SCORES_SIZE; ++i) {
        printf ("%d ", bonusScores [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35911335_35911428_1_11
35911335_40333415_10_20
Title: Factorial using recursion but getting the values in some order 
----------------------------------------

void fact (int a, int i, int b) {
    if (i < b) {
        a = a * i;
        i++;
        fact (a, i, b);
        return;
    }
    printf ("%d\n", a);
}
----------------------------------------

int fact (int a, int i, int b) {
    if (i < b) {
        a = a * i;
        i++;
        fact (a, i, b);
        return;
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35911423_35911619_4_15
35911423_35912142_16_38
Title: Retrieving last set of input values from a char pointer 
----------------------------------------

int main (void) {
    char *str = "1234 4567 789";
    char *pch;
    int last_idx = 0;
    pch = strchr (str, ' ');
    while (pch != NULL) {
        last_idx = pch - str + 1;
        pch = strchr (pch +1, ' ');
    }
    printf ("%s\n", str + last_idx);
    return 0;
}
----------------------------------------

int main (void) {
    char *s1 = "1234 4567 789";
    char *s2 = "123 445";
    char *p1 = extract (s1, strlen (s1));
    while (p1) {
        printf ("%d ", atoi (p1));
        p1 = extract (s1, p1 -s1);
    }
    printf ("\n");
    p1 = extract (s2, strlen (s2));
    while (p1) {
        printf ("%d ", atoi (p1));
        p1 = extract (s2, p1 -s2);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35922076_35922146_5_25
35922076_35922509_3_12
Title: Lower to Upper Case Conversion with C 
----------------------------------------

int main (void) {
    int T, i, k;
    char string [100];
    scanf ("%d ", & T);
    for (i = 0; i < T; ++i) {
        gets (string);
        printf ("[%d] : %s\n", i, string);
        for (k = 0; k < strlen (string); ++k) {
            putchar (toupper (string [k]));
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    int i;
    scanf ("%s", string);
    for (i = 0; i < strlen (string); i++) {
        string[i] = string[i] - 32;
    }
    printf ("%s", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35922313_35922985_2_18
35922313_35923010_3_25
Title: Why is the program terminating before scanning an input? 
----------------------------------------

int main () {
    int n, a = 1, c = 5;
    char ch;
    do {
        printf ("\nType the last number of the series 5 * 10 * 15 * ... * N:");
        scanf ("%d", & n);
        for (; c <= n; a = a * c, c = c + 5)
            ;
        printf ("%d\nthe series is", a);
        printf ("The result is %d\nDo you want do it again? (Type 'Y' for yes and 'N' for no)", a);
        ch = getch ();
    }
    while (ch != 'n');
    return 0;
}
----------------------------------------

int main () {
    int n, a, c;
    char ch;
    do {
        printf ("Type the last number of the series 5 * 10 * 15 * ... * N:");
        scanf ("%d", & n);
        getchar ();
        for (a = 1, c = 5; c <= n; a = a * c, c = c + 5) {
        }
        printf ("The result is %d\nDo you want do it again? (Type 'Y' for yes and 'N' for no)", a);
        ch = getchar ();
    }
    while (ch == 'y');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35927323_35927977_7_16
35927323_35927984_28_46
Title: Random float in C using getrandom 
----------------------------------------

int main () {
    uint32_t r = 0;
    float result;
    for (int i = 0; i < 20; i++) {
        syscall (SYS_getrandom, & r, sizeof (uint32_t), 0);
        result = (float) (r & ((1 << FLT_MANT_DIG) - 1)) / (1 << FLT_MANT_DIG);
        printf ("%f\n", result);
    }
    return 0;
}
----------------------------------------

int main (void) {
    FILE *istream = fopen ("/dev/urandom", "rb");
    assert (istream);
    unsigned long seed = 0;
    for (unsigned i = 0; i < sizeof seed; i++) {
        seed *= (UCHAR_MAX + 1);
        int ch = fgetc (istream);
        assert (ch != EOF);
        seed += (unsigned) ch;
    }
    fclose (istream);
    srand (seed);
    for (int i = 0; i < 20; i++) {
        printf ("%f\n", rand_01 ());
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35936358_35936857_1_24
35936358_45524509_5_20
Title: C - Printing a 2D Char Array 
----------------------------------------

int main () {
    const unsigned int size = 4;
    char word [size] [size];
    for (int k = 0; k < (size); ++k) {
        for (int j = 0; j < (size); ++j) {
            word[k][j] = 'a' + j + (k * size);
        }
    }
    for (int k = 0; k < size; ++k) {
        for (int j = 0; j < size; ++j) {
            printf ("%c", word [k] [j]);
        }
        printf ("\n");
    }
    printf ("\n");
    getchar ();
    return 0;
}
----------------------------------------

void main () {
    clrscr ();
    char arr [5] [3] = {"abc", "aks", "tny", "dkn", "kbf"};
    for (int a = 0; a < 5; a++) {
        for (int b = 0; b < 3; b++) {
            cout << " " << arr[a][b];
        }
        cout << endl;
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35953482_35955840_17_67
35953482_35956031_8_22
Title: How to count columns from within a file 
----------------------------------------

int main () {
    int i, j;
    char **data = (char **) malloc (100 * sizeof (char *));
    for (i = 0; i < 100; i++) {
        data[i] = (char *) malloc (20 * sizeof (char));
    }
    char ***mydata = (char ***) malloc (3 * sizeof (char **));
    for (i = 0; i < 3; i++) {
        mydata[i] = (char **) malloc (3 * sizeof (char *));
        for (j = 0; j < 3; j++) {
            mydata[i][j] = (char *) malloc (20 * sizeof (char));
        }
    }
    FILE *fp = fopen ("test.csv", "r");
    if (fp == NULL) {
        return -1;
    }
    char line [1024];
    int row = 0;
    while (fgets (line, sizeof (line), fp)) {
        char *save_ptr;
        char *name = strtok_r (line, ",", &save_ptr);
        if (name == NULL) {
            return -1;
        }
        char *age = strtok_r (NULL, ",", &save_ptr);
        char *birthday = strtok_r (NULL, ",", &save_ptr);
        strcpy (mydata [row] [0], trim (name));
        strcpy (mydata [row] [1], trim (age));
        strcpy (mydata [row] [2], trim (birthday));
        row++;
    }
    for (row = 0; row < 3; row++) {
        printf ("%s\t%s\t%s\n", mydata [row] [0], mydata [row] [1], mydata [row] [2]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buf [MAXC] = "";
    int col = 0;
    while (fgets (buf, MAXC, stdin)) {
        rmcrlf (buf);
        if (!*buf)
            continue;
        col = countcol (buf);
        printf ("'%s' (%d-col)\n", buf, col);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35967456_35967481_4_63
35967456_35967505_5_46
Title: add input values from arg in c into array for Sudoku solver 
----------------------------------------

int main (int argc, char *argv []) {
    int lineCnt;
    int posCnt;
    FILE *inpFile = NULL;
    if (argc < 2) {
        printf ("run program with argument - name of file\n");
        return 1;
    }
    inpFile = fopen (argv[1], "r");
    if (inpFile == NULL) {
        printf ("file %s cannot be open\n", argv [1]);
        return 2;
    }
    int grid [9] [9] = {0};
    int chr;
    for (lineCnt = 0; lineCnt < 9; lineCnt++) {
        for (posCnt = 0; posCnt < 9; posCnt++) {
            do {
                chr = getc (inpFile);
            }
            while (isspace (chr));
            if (chr == EOF) {
                printf ("file %s if incomplete\n", argv [1]);
                return 3;
            }
            if (chr == '.') {
                grid[lineCnt][posCnt] = 0;
            }
            else if (chr > '0' && chr <= '9') {
                grid[lineCnt][posCnt] = chr - '0';
            }
            else {
                printf ("file %s has incorrect format\n", argv [1]);
                return 4;
            }
        }
    }
    for (lineCnt = 0; lineCnt < 9; lineCnt++) {
        for (posCnt = 0; posCnt < 9; posCnt++) {
            printf ("%i ", grid [lineCnt] [posCnt]);
        }
        printf ("\n");
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int grid [9] [9];
    int input_error = 0;
    int i, j;
    if (argc != 1 + 9) {
        input_error = 1;
    }
    else {
        for (i = 0; i < 9; i++) {
            if (strlen (argv[i + 1]) != 9) {
                input_error = 1;
                break;
            }
            for (j = 0; j < 9; j++) {
                if (isdigit (argv[i + 1][j]) && argv[i + 1][j] != '0') {
                    grid[i][j] = argv[i + 1][j] - '0';
                }
                else if (argv[i + 1][j] == '.') {
                    grid[i][j] = 0;
                }
                else {
                    input_error = 1;
                    break;
                }
            }
        }
    }
    if (input_error) {
        fputs ("invalid usage\n", stderr);
        return 1;
    }
    for (i = 0; i < 9; i++) {
        for (j = 0; j < 9; j++) {
            printf (" %d", grid [i] [j]);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35968899_35969201_25_48
35968899_35969332_4_19
Title: A simple program for splitting numbers does not display zeroes 
----------------------------------------

int main () {
    int n, m, digit;
    int i, j;
    int n10, m10;
    scanf ("%d %d", & n, & m);
    int lengthOfM = nDigits (m);
    n10 = multipleOfTen (n);
    m10 = multipleOfTen (m);
    for (i = 0; i < lengthOfM; i++) {
        digit = m / m10;
        m10 /= 10;
        for (j = 0; j < digit; j++) {
            printf ("%d", n / n10);
            n = n % n10;
            n10 /= 10;
        }
        printf ("\n");
        m = m % multipleOfTen (m);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char n [64];
    char m [64];
    char *p = n;
    int i = 0;
    int c;
    scanf ("%63[0-9] %63[0-9]", n, m);
    while ((c = m[i++]) != '\0') {
        int j = c - '0';
        while (j-- > 0)
            if (*p)
                putchar (*p++);
        putchar (' ');
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35974719_35975997_1_45
35974719_35976601_31_68
Title: How to split up a string and count how many times a word is used? 
----------------------------------------

int main () {
    char haystack [50] = "Hello my cat is saying Hello";
    char needle [10];
    int i = 0, j = 0, k = 0;
    char *ret = NULL;
    int cnt = 0;
    while (haystack[i] != NULL) {
        if (haystack[i] == ' ') {
            i++;
        }
        else {
            while ((haystack[i] != ' ') && (haystack[i] != NULL)) {
                needle[k++] = haystack[i];
                i++;
            }
            needle[k] = '\0';
            printf ("The substring is: %s", needle);
            while (strstr (haystack, needle) != NULL) {
                ret = strstr (haystack, needle);
                for (j = 0; j < k; j++) {
                    *(ret + j) = ' ';
                }
                cnt++;
            }
            printf ("= %d\n", cnt);
            cnt = 0;
            k = 0;
        }
    }
    return (0);
}
----------------------------------------

int main (void) {
    struct wordsDetail myWords [100];
    int wordsDetailLength = sizeof (myWords) / sizeof (wordsDetail);
    const size_t line_size = 1024;
    char *str = NULL;
    int *str2 = NULL;
    int i = 0;
    char *token;
    for (i = 0; i < wordsDetailLength; i++) {
        myWords[i].word[0] = '\0';
        myWords[i].freq = 0;
    }
    if ((str = calloc (line_size, sizeof (char))) == NULL) {
        printf ("error\n");
        exit (- 1);
    }
    printf ("Input: ");
    if (scanf ("%[^\n]", str) != 1) {
        printf ("error\n");
        exit (- 1);
    }
    printf ("Output: \n");
    token = strtok (str, " .,!");
    while (token != NULL) {
        updateWords (myWords, wordsDetailLength, token);
        token = strtok (NULL, " .,!");
    }
    printResults (myWords, wordsDetailLength);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35993672_35993897_5_24
35993672_35995353_5_34
Title: Can sscanf in C write on char* instead of char[]? 
----------------------------------------

int main (void) {
    char const *my_words = "foo bar 1 2";
    char *str = malloc (1 + strlen (my_words));
    strcpy (str, my_words);
    int countWord = 0;
    char *pch;
    printf ("Splitting string \"%s\" into tokens:\n", str);
    pch = strtok (str, " ");
    while (pch != NULL) {
        printf ("%s\n", pch);
        pch = strtok (NULL, " ");
        ++countWord;
    }
    printf ("Total words = %d\n", countWord);
    return 0;
}
----------------------------------------

int main (void) {
    const char *input = " foo  bar 1    2 ";
    char *words [4];
    size_t b = 0;
    size_t e = 0;
    size_t l = strlen (input);
    int w = 0;
    while (b < l) {
        b += strspn (input +b, " ");
        e = b + strcspn (input +b, " ");
        words[w] = malloc (e -b + 1);
        strncpy (words [w], input + b, e - b);
        w++;
        b = e + 1;
    }
    while (w--) {
        printf ("%s\n", words [w]);
        free (words [w]);
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35994868_35995716_17_27
35994868_35995813_18_27
Title: Print ABC - string 
----------------------------------------

void makeABC (char abc [NUM_ABC_LET + 1]) {
    char letter;
    int i = 0;
    for (letter = 'a'; letter <= 'z'; letter++) {
        abc[i] = letter;
        i++;
    }
    abc[i] = '\0';
}
----------------------------------------

void makeABC (char *abc) {
    char letter;
    char buf [2];
    for (letter = 'a'; letter <= 'z'; letter++) {
        buf[0] = letter;
        buf[1] = '\0';
        strcat (abc, buf);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36007706_36007919_5_47
36007706_36008199_5_21
Title: Not able to retrieve string from Array 
----------------------------------------

int main (void) {
    char itemName [ITEM_MAX] [1000];
    int n = 0, i, total = 0, itemPrice [ITEM_MAX];
    printf ("Enter number of items: \n");
    if (scanf ("%d", &n) != 1) {
        fputs ("read error\n", stderr);
        return 1;
    }
    for (i = 0; i < n; i++) {
        printf ("Item name: \n");
        if (scanf ("%999s", itemName[i]) != 1) {
            fputs ("read error\n", stderr);
            return 1;
        }
        printf ("Enter the price\n");
        if (scanf ("%d", &itemPrice[i]) != 1) {
            fputs ("read error\n", stderr);
            return 1;
        }
        total += itemPrice[i];
    }
    for (i = 0; i < n; i++) {
        printf (" %s", itemName [i]);
        printf ("\t\t%d\n", itemPrice [i]);
    }
    return 0;
}
----------------------------------------

void main () {
    char itemName [100] [100];
    int n = 0, i, j, total = 0, itemPrice [100];
    printf ("Enter number of items: \n");
    scanf ("%d", & n);
    for (i = 0;
    i < n;
    i ++) {printf ("Item name: \n");
    scanf ("%s", & itemName [i]);
    printf ("Enter the price\n");
    scanf ("%d", & itemPrice [i]);
    total += itemPrice[i];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36019668_36020014_4_28
36019668_36020201_3_30
Title: C: Alphabetical sorting of array of character arrays 
----------------------------------------

void main () {
    char s [10] [20], t [20];
    int i, j;
    clrscr ();
    printf ("\nEnter any five strings : ");
    for (i = 0; i < 10; i++)
        scanf ("%s", s[i]);
    for (i = 1; i < 10; i++) {
        for (j = 1; j < 10; j++) {
            if (strcmp (s[j - 1], s[j]) > 0) {
                strcpy (t, s [j - 1]);
                strcpy (s [j - 1], s [j]);
                strcpy (s [j], t);
            }
        }
    }
    printf ("\nStrings in order are : ");
    for (i = 0; i < 10; i++)
        printf ("\n%s", s[i]);
    getch ();
}
----------------------------------------

int main () {
    int i, j, n;
    char str [20] [20], temp [20];
    puts ("Enter the no. of string to be sorted");
    scanf ("%d", & n);
    for (i = 0; i <= n; i++) {
        gets (str [i]);
    }
    for (i = 0; i <= n; i++)
        for (j = i + 1; j <= n; j++) {
            if (strcmp (str[i], str[j]) > 0) {
                strcpy (temp, str [i]);
                strcpy (str [i], str [j]);
                strcpy (str [j], temp);
            }
        }
    printf ("The sorted string\n");
    for (i = 0; i <= n; i++) {
        puts (str [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3602079_3602171_1_11
3602079_3602757_1_21
Title: Is there a more efficient way to get the length of a 32bit integer in bytes? 
----------------------------------------

inline int len (uint32 val) {
    if (val & 0xffffff00) {
        if (val & 0xffff0000) {
            if (val & 0xff000000)
                return 4;
            return 3;
        }
        return 2;
    }
    return 1;
}
----------------------------------------

int len (uint32_t val) {
    union int_char {
        uint32_t u;
        uint8_t a [4];
    } x;
    const uint16_t w = 1;
    x.u = val;
    if (((uint8_t *) &w)[1]) {
        if (x.a[0])
            return 4;
        if (x.a[1])
            return 3;
        if (x.a[2])
            return 2;
    }
    else {
        if (x.a[3])
            return 4;
        if (x.a[2])
            return 3;
        if (x.a[1])
            return 2;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36023063_36023884_1_14
36023063_36024505_2_43
Title: Two dice rolling simulator 
----------------------------------------

int main (void) {
    int numberArray [2 * UPPER_DIE + 1] = {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'};
    int roll = 0;
    int i = 0;
    srand ((unsigned int) time (NULL));
    for (i = 0;
    i < TRIALS;
    i ++) {getTwoDieSum (LOWER_DIE, UPPER_DIE);
    int main_total = getTwoDieSum (LOWER_DIE, UPPER_DIE);
    roll = main_total;
    numberArray[roll] = numberArray[roll] + 1;
}
----------------------------------------

int main () {
    int numberArray [2 * UPPER_DIE + 1] = {0};
    int size = sizeof (numberArray) / sizeof (int);
    int i;
    srand (time (NULL));
    int roll;
    for (i = 0; i < TRIALS; i++) {
        roll = getTwoDieSum (LOWER_DIE, UPPER_DIE);
        ++numberArray[roll];
    }
    printf ("ROLL VALUE : FREQUENCY\n");
    for (i = 2; i < size; i++) {
        printf ("%d\t: %d\n", i, numberArray [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36050861_36051110_14_23
36050861_36051267_15_24
Title: How can I exit a while loop based on input from a function in a function in C? 
----------------------------------------

bool readRectangle (rectangle *r) {
    if (!readPoint (&r->c) || !readPoint (&r->b))
        return false;
    r->a.x = r->c.x;
    r->a.y = r->b.y;
    r->d.x = r->b.x;
    r->d.y = r->c.y;
    return true;
}
----------------------------------------

rectangle readRectangle (jmp_buf jmp) {
    rectangle r;
    r.c = readPoint (jmp);
    r.b = readPoint (jmp);
    r.a.x = r.c.x;
    r.a.y = r.b.y;
    r.d.x = r.b.x;
    r.d.y = r.c.y;
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36050861_36051110_25_36
36050861_36051267_26_46
Title: How can I exit a while loop based on input from a function in a function in C? 
----------------------------------------

int main (void) {
    while (1) {
        rectangle r;
        printf ("Enter rectangle: ");
        if (!readRectangle (&r))
            break;
        � � �
    }
    return 0;
}
----------------------------------------

int main (void) {
    jmp_buf jmp;
    if (setjmp (jmp) == 0) {
        while (1) {
            int a = 0;
            rectangle r;
            circle c;
            printf ("Enter rectangle:");
            r = readRectangle (jmp);
            printf ("Enter circle:");
            c = readCircle (jmp);
            a = overlap (r, c);
            if (a == 1)
                printf ("The rectangle and the circle overlap.\n\n");
            else
                printf ("The rectangle and the circle do not overlap.\n\n");
        }
    }
    printf ("Program completed normally.");
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36072543_36072621_5_26
36072543_36073268_6_26
Title: Strange output of the C program using toupper function 
----------------------------------------

int main (void) {
    char input;
    char upper [100];
    int count = 0;
    for (int i = 0; i < 100; i++) {
        upper[i] = 0;
    }
    while ((input = getchar ())) {
        if (input == '\n')
            break;
        if (input >= 'a' && input <= 'z')
            input = toupper (input);
        *(upper + count) = input;
        count++;
    }
    printf ("%s\n", upper);
    return 0;
}
----------------------------------------

int main () {
    int input;
    char upper [MAX_CHAR];
    int count = 0;
    while (count < MAX_CHAR - 1) {
        input = getchar ();
        if (input == EOF || input == '\n' || input == '\r')
            break;
        if (input >= 'a' && input <= 'z')
            input = toupper (input);
        upper[count] = input;
        count++;
    }
    upper[count] = '\0';
    printf ("%s\n", upper);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36083984_36084198_8_35
36083984_45598753_6_29
Title: execve() with redirected stdin from file 
----------------------------------------

int main (void) {
    pid_t pid;
    int fd;
    fd = open ("in.txt", O_RDONLY);
    if (fd < 0) {
        perror ("open");
        return EXIT_FAILURE;
    }
    if ((pid = fork ()) < 0) {
        perror ("fork");
        return EXIT_FAILURE;
    }
    else if (!pid) {
        dup2 (fd, STDIN_FILENO);
        close (fd);
        execlp ("/opt/prog", "prog", (char *) 0);
        perror ("exec");
        return EXIT_FAILURE;
    }
    else {
        close (fd);
        printf ("Parent waiting\n");
        getchar ();
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (int argc, char **argv) {
    int fd, status;
    pid_t child_pid;
    char c;
    char *args [2] = {"/opt/prog", NULL};
    if (argc != 2)
        exit (1);
    fd = open (argv[1], O_RDONLY);
    child_pid = fork ();
    if (child_pid == 0) {
        if (dup2 (fd, STDIN_FILENO) == -1) {
            perror ("dup2");
            return (EXIT_FAILURE);
        }
        close (fd);
        execve (args [0], args, NULL);
    }
    if (child_pid != 0) {
        close (fd);
        wait (& status);
    }
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36084752_36085008_3_80
36084752_43851821_3_31
Title: 2d-arrays in bubble sorting 
----------------------------------------

int main () {
    int arr [5] [5], l = 0;
    int result [25], k = 0, i, j, temp;
    arr[0][0] = 4;
    arr[0][1] = 5;
    arr[0][2] = 8;
    arr[0][3] = 9;
    arr[0][4] = 4;
    arr[1][0] = 2;
    arr[1][1] = 1;
    arr[1][2] = 0;
    arr[1][3] = 2;
    arr[1][4] = 4;
    arr[2][0] = 6;
    arr[2][1] = 7;
    arr[2][2] = 4;
    arr[2][3] = 5;
    arr[2][4] = 5;
    arr[3][0] = 4;
    arr[3][1] = 8;
    arr[3][2] = 9;
    arr[3][3] = 1;
    arr[3][4] = 2;
    arr[4][0] = 4;
    arr[4][1] = 5;
    arr[4][2] = 2;
    arr[4][3] = 1;
    arr[4][4] = 9;
    for (i = 0; i < 5; i++) {
        printf ("\n");
        for (j = 0; j < 5; j++) {
            printf (" %d", arr [i] [j]);
            result[k++] = arr[i][j];
        }
    }
    for (i = 0; i < 25; i++) {
        for (j = 0; j < 24; j++) {
            if (result[j] > result[j + 1]) {
                temp = result[j];
                result[j] = result[j + 1];
                result[j + 1] = temp;
            }
        }
    }
    i = 0;
    l = 0;
    k = 0;
    while (i < 25) {
        for (j = 0; j < 5; j++) {
            arr[k][j] = result[l];
            l++;
        }
        k++;
        i = i + 5;
    }
    for (i = 0; i < 5; i++) {
        printf ("\n");
        for (j = 0; j < 5; j++) {
            printf (" %d", arr [i] [j]);
        }
    }
}
----------------------------------------

int main () {
    int temp;
    int arr [2] [5] = {2, 15, 26, 14, 12, 18, 1, 2, 3, 4};
    int arr2 [10] = {0};
    int index = 0;
    for (int t = 0; t < 50; t++) {
        for (int i = 0; i < ROW; i++) {
            for (int j = 0; j < 5 - 1; j++) {
                if (arr[i][j] > arr[i][j + 1]) {
                    temp = arr[i][j];
                    arr[i][j] = arr[i][j + 1];
                    arr[i][j + 1] = temp;
                }
            }
            for (int k = 0; k < ROW - 1; k++) {
                if (arr[k][COL - 1] > arr[k + 1][0]) {
                    temp = arr[k][COL - 1];
                    arr[k][COL - 1] = arr[k + 1][0];
                    arr[k + 1][0] = temp;
                }
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36084752_36085008_3_80
36084752_50452511_6_42
Title: 2d-arrays in bubble sorting 
----------------------------------------

int main () {
    int arr [5] [5], l = 0;
    int result [25], k = 0, i, j, temp;
    arr[0][0] = 4;
    arr[0][1] = 5;
    arr[0][2] = 8;
    arr[0][3] = 9;
    arr[0][4] = 4;
    arr[1][0] = 2;
    arr[1][1] = 1;
    arr[1][2] = 0;
    arr[1][3] = 2;
    arr[1][4] = 4;
    arr[2][0] = 6;
    arr[2][1] = 7;
    arr[2][2] = 4;
    arr[2][3] = 5;
    arr[2][4] = 5;
    arr[3][0] = 4;
    arr[3][1] = 8;
    arr[3][2] = 9;
    arr[3][3] = 1;
    arr[3][4] = 2;
    arr[4][0] = 4;
    arr[4][1] = 5;
    arr[4][2] = 2;
    arr[4][3] = 1;
    arr[4][4] = 9;
    for (i = 0; i < 5; i++) {
        printf ("\n");
        for (j = 0; j < 5; j++) {
            printf (" %d", arr [i] [j]);
            result[k++] = arr[i][j];
        }
    }
    for (i = 0; i < 25; i++) {
        for (j = 0; j < 24; j++) {
            if (result[j] > result[j + 1]) {
                temp = result[j];
                result[j] = result[j + 1];
                result[j + 1] = temp;
            }
        }
    }
    i = 0;
    l = 0;
    k = 0;
    while (i < 25) {
        for (j = 0; j < 5; j++) {
            arr[k][j] = result[l];
            l++;
        }
        k++;
        i = i + 5;
    }
    for (i = 0; i < 5; i++) {
        printf ("\n");
        for (j = 0; j < 5; j++) {
            printf (" %d", arr [i] [j]);
        }
    }
}
----------------------------------------

int main () {
    int temp, t, i, j;
    int arr [ROW] [COL] = {30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    for (t = 1; t < (ROW * COL); t++) {
        for (i = 0; i < ROW; i++) {
            for (j = 0; j < COL - 1; j++) {
                if (arr[i][j] > arr[i][j + 1]) {
                    temp = arr[i][j];
                    arr[i][j] = arr[i][j + 1];
                    arr[i][j + 1] = temp;
                }
            }
        }
        for (i = 0; i < ROW - 1; i++) {
            if (arr[i][COL - 1] > arr[i + 1][0]) {
                temp = arr[i][COL - 1];
                arr[i][COL - 1] = arr[i + 1][0];
                arr[i + 1][0] = temp;
            }
        }
    }
    for (i = 0; i < ROW; i++) {
        printf ("\n");
        for (j = 0; j < COL; j++)
            printf ("%3d", arr[i][j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36084752_43851821_3_31
36084752_50452511_6_42
Title: 2d-arrays in bubble sorting 
----------------------------------------

int main () {
    int temp;
    int arr [2] [5] = {2, 15, 26, 14, 12, 18, 1, 2, 3, 4};
    int arr2 [10] = {0};
    int index = 0;
    for (int t = 0; t < 50; t++) {
        for (int i = 0; i < ROW; i++) {
            for (int j = 0; j < 5 - 1; j++) {
                if (arr[i][j] > arr[i][j + 1]) {
                    temp = arr[i][j];
                    arr[i][j] = arr[i][j + 1];
                    arr[i][j + 1] = temp;
                }
            }
            for (int k = 0; k < ROW - 1; k++) {
                if (arr[k][COL - 1] > arr[k + 1][0]) {
                    temp = arr[k][COL - 1];
                    arr[k][COL - 1] = arr[k + 1][0];
                    arr[k + 1][0] = temp;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int temp, t, i, j;
    int arr [ROW] [COL] = {30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    for (t = 1; t < (ROW * COL); t++) {
        for (i = 0; i < ROW; i++) {
            for (j = 0; j < COL - 1; j++) {
                if (arr[i][j] > arr[i][j + 1]) {
                    temp = arr[i][j];
                    arr[i][j] = arr[i][j + 1];
                    arr[i][j + 1] = temp;
                }
            }
        }
        for (i = 0; i < ROW - 1; i++) {
            if (arr[i][COL - 1] > arr[i + 1][0]) {
                temp = arr[i][COL - 1];
                arr[i][COL - 1] = arr[i + 1][0];
                arr[i + 1][0] = temp;
            }
        }
    }
    for (i = 0; i < ROW; i++) {
        printf ("\n");
        for (j = 0; j < COL; j++)
            printf ("%3d", arr[i][j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36106496_36110625_19_33
36106496_36111079_33_55
Title: Simple example for pthread_join deadlock 
----------------------------------------

int main () {
    pthread_t thread1;
    pthread_t thread2;
    pthread_mutex_lock (& lock);
    pthread_create (& thread1, NULL, joinit, & thread2);
    pthread_create (& thread2, NULL, joinit, & thread1);
    pthread_mutex_unlock (& lock);
    pthread_join (thread2, NULL);
    return 0;
}
----------------------------------------

int main () {
    pthread_mutex_init (& mutex, NULL);
    pthread_cond_init (& cond, NULL);
    pthread_create (& thread1, NULL, joinit, & thread2);
    pthread_create (& thread2, NULL, joinit, & thread1);
    pthread_mutex_lock (& mutex);
    go = 1;
    pthread_cond_broadcast (& cond);
    pthread_mutex_unlock (& mutex);
    pthread_mutex_lock (& mutex);
    while (go != 3)
        pthread_cond_wait (&cond, &mutex);
    pthread_mutex_unlock (& mutex);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36106496_36110625_6_17
36106496_36111079_11_31
Title: Simple example for pthread_join deadlock 
----------------------------------------

void *joinit (void *tid) {
    pthread_t *tid_c = (pthread_t *) tid;
    int retval = -1;
    pthread_mutex_lock (& lock);
    pthread_mutex_unlock (& lock);
    printf ("%#x waiting on %#x\n", pthread_self (), * tid_c);
    retval = pthread_join (*tid_c, NULL);
    printf ("In joinit: tid = %d, retval = %d \n", * tid_c, retval);
    return NULL;
}
----------------------------------------

void *joinit (void *ptr) {
    pthread_mutex_lock (& mutex);
    while (go == 0)
        pthread_cond_wait (&cond, &mutex);
    pthread_mutex_unlock (& mutex);
    pthread_t *tid_c = *((pthread_t **) ptr);
    printf ("About to wait\n");
    int retval = pthread_join (*tid_c, NULL);
    printf ("In joinit: tid = %d, retval = %d \n", * tid_c, retval);
    pthread_mutex_lock (& mutex);
    go++;
    pthread_cond_broadcast (& cond);
    pthread_mutex_unlock (& mutex);
    return NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36107540_36107768_5_33
36107540_36108326_17_49
Title: i cannot figure out how to read the strings(words) from an input file into a linked list 
----------------------------------------

int main () {
    FILE *fptr;
    char buf [100];
    char *p, *s;
    strcpy (buf, "this is just a test");
    fptr = fopen ("test.txt", "r");
    while (fgets (buf, sizeof (buf), fptr) != NULL) {
        printf ("LINE: %s\n", buf);
        p = s = buf;
        while (*p != 0) {
            if (*p == ' ') {
                *p = 0;
                printf ("TOKEN: %s\n", s);
                s = p + 1;
            }
            p++;
        }
        printf ("TOKEN: %s\n", s);
    }
    fclose (fptr);
    return 0;
}
----------------------------------------

int main () {
    struct node *head = NULL;
    FILE *fptr;
    char file_name [20];
    char str [1000];
    int numOfChar;
    printf ("Enter the name of the file: ");
    scanf ("%s", file_name);
    printf ("Enter the number of characters per line: ");
    scanf ("%d", & numOfChar);
    fptr = fopen (file_name, "r");
    while (fscanf (fptr, "%s ", str) != EOF) {
        insertNode (& head, str);
    }
    fclose (fptr);
    printList (head);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36128905_36129389_4_34
36128905_36129407_4_26
Title: Interleave 2 strings alternatively in C 
----------------------------------------

int main () {
    char a [80];
    char b [80];
    char l [120];
    char f [120];
    strcpy (a, "abc");
    strcpy (f, "");
    strcpy (l, "abc");
    strcpy (b, "123");
    strcat (a, b);
    int pop;
    pop = strlen (a);
    int j, k = 0;
    int index = 0;
    for (j = 0; j < pop; j++) {
        if (j % 2 == 0) {
            f[index++] = l[k];
        }
        else {
            f[index++] = b[k];
            k++;
        }
    }
    f[index] = '\0';
    printf ("String is %s ", f);
}
----------------------------------------

int main (void) {
    char a [80];
    char b [80];
    char l [120];
    strcpy_s (a, sizeof (a), "abc");
    strcpy_s (b, sizeof (b), "123");
    int pop;
    pop = strlen (a);
    int i, j = 0;
    for (i = 0; i < pop * 2; i++) {
        if (i % 2 == 0) {
            l[i] = a[j];
        }
        else {
            l[i] = b[j++];
        }
    }
    l[i] = '\0';
    printf ("String is %s ", l);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36128905_36129389_4_34
36128905_36129517_4_28
Title: Interleave 2 strings alternatively in C 
----------------------------------------

int main () {
    char a [80];
    char b [80];
    char l [120];
    char f [120];
    strcpy (a, "abc");
    strcpy (f, "");
    strcpy (l, "abc");
    strcpy (b, "123");
    strcat (a, b);
    int pop;
    pop = strlen (a);
    int j, k = 0;
    int index = 0;
    for (j = 0; j < pop; j++) {
        if (j % 2 == 0) {
            f[index++] = l[k];
        }
        else {
            f[index++] = b[k];
            k++;
        }
    }
    f[index] = '\0';
    printf ("String is %s ", f);
}
----------------------------------------

int main (void) {
    char even [4];
    char odd [4];
    char res [7];
    strcpy (even, "abc");
    strcpy (odd, "123");
    int pop;
    printf ("even %s\n", even);
    printf ("odd %s\n", odd);
    pop = sizeof (res) - 1;
    int j;
    for (j = 0; j < pop; ++j) {
        if (j % 2 == 0) {
            res[j] = even[j / 2];
        }
        else {
            res[j] = odd[(j - 1) / 2];
        }
    }
    res[j] = '\0';
    printf ("String is %s", res);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36128905_36129407_4_26
36128905_36129517_4_28
Title: Interleave 2 strings alternatively in C 
----------------------------------------

int main (void) {
    char a [80];
    char b [80];
    char l [120];
    strcpy_s (a, sizeof (a), "abc");
    strcpy_s (b, sizeof (b), "123");
    int pop;
    pop = strlen (a);
    int i, j = 0;
    for (i = 0; i < pop * 2; i++) {
        if (i % 2 == 0) {
            l[i] = a[j];
        }
        else {
            l[i] = b[j++];
        }
    }
    l[i] = '\0';
    printf ("String is %s ", l);
}
----------------------------------------

int main (void) {
    char even [4];
    char odd [4];
    char res [7];
    strcpy (even, "abc");
    strcpy (odd, "123");
    int pop;
    printf ("even %s\n", even);
    printf ("odd %s\n", odd);
    pop = sizeof (res) - 1;
    int j;
    for (j = 0; j < pop; ++j) {
        if (j % 2 == 0) {
            res[j] = even[j / 2];
        }
        else {
            res[j] = odd[(j - 1) / 2];
        }
    }
    res[j] = '\0';
    printf ("String is %s", res);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36149766_36150309_4_34
36149766_36150705_1_28
Title: Custom iteration through array in C printing every nth value 
----------------------------------------

int main (void) {
    int amount = 0, often = 0, counter = 0, x;
    printf ("Size of Array? ");
    scanf ("%d", & amount);
    printf ("iteration size? ");
    scanf ("%d", & often);
    int array [amount];
    for (x = 0; x < amount; x++)
        array[x] = 1;
    int total = amount;
    counter = often - 1;
    while (total > 0) {
        for (x = 0; x < amount; x++) {
            if (array[x] == 1)
                counter++;
            if (counter == often) {
                printf ("#%d\n", x);
                array[x] = 0;
                counter = 0;
                total--;
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int array [10] = {0};
    int total_length = 10;
    int visited_count = 0;
    int index = 0;
    int step_size = 3;
    int current_step = 3;
    while (visited_count != total_length) {
        if (!array[index] && current_step == step_size) {
            array[index] = 1;
            visited_count++;
            printf ("%d\n", index);
            current_step = 0;
        }
        index++;
        if (index == total_length) {
            index = 0;
        }
        if (!array[index]) {
            current_step++;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36163675_36163936_1_17
36163675_36164105_5_16
Title: Reversing a string in C using Visual Studio 
----------------------------------------

int main () {
    char line [80];
    fgets (line, 80, stdin);
    if (*line == '\0') {
        fprintf (stderr, "Empty string is not a string\n");
        return 1;
    }
    remnl (line);
    rev (line);
    printf ("%s\n", line);
    return 0;
}
----------------------------------------

int main (void) {
    char r [256];
    int i, d;
    printf ("\nEnter the word you want to reverse : ");
    gets_s (r, sizeof (r));
    d = strlen (r) - 1;
    for (i = d; i >= 0; i--) {
        printf ("%c", r [i]);
    }
    _getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36164722_36165771_152_258
36164722_36168116_10_34
Title: read continues to block despite pipe closure 
----------------------------------------

int main (int argc, char **argv) {
    char *cp;
    struct child *cld;
    int len;
    char buf [128];
    --argc;
    ++argv;
    for (; argc > 0; --argc, ++argv) {
        cp = *argv;
        if (*cp != '-')
            break;
        switch (cp[1]) {
        case 'n' :
            opt_n = 1;
            break;
        case 'p' :
            opt_p = 1;
            break;
        case 'v' :
            opt_v = 1;
            break;
        }
    }
    setlinebuf (stdout);
    printf ("main: pipes will be created %s\n", opt_p ? "all at once" : "as needed");
    printf ("main: other child descriptors %s be closed\n", opt_n ? "will not" : "will");
    for (int i = 0; i < PROCESSES; i++) {
        cld = &children[i];
        cld->cld_idx = i;
        cld->cld_topar[0] = -1;
        cld->cld_topar[1] = -1;
        cld->cld_tocld[0] = -1;
        cld->cld_tocld[1] = -1;
    }
    if (opt_p) {
        for (int i = 0; i < PROCESSES; i++)
            childopen (i);
        if (opt_v)
            fdlist (NULL, "master/OPEN");
    }
    for (int i = 0; i < PROCESSES; i++)
        childstart (i);
    if (opt_v) {
        sleep (1);
        for (int i = 0; i < PROCESSES; i++) {
            cld = &children[i];
            fdlist (cld, "master/POSTSTART");
        }
    }
    for (int i = 0; i < PROCESSES; i++) {
        cld = &children[i];
        len = sprintf (buf, "child %d, you are pid %d\n", i, cld->cld_pid);
        write (cld -> cld_tocld [1], buf, len);
    }
    printf ("\n");
    for (int i = 0; i < PROCESSES; i++) {
        cld = &children[i];
        len = read (cld->cld_topar[0], buf, sizeof (buf));
        printf ("RECV(%d): %s", i, buf);
    }
    if (opt_v) {
        sleep (1);
        for (int i = 0; i < PROCESSES; i++) {
            cld = &children[i];
            fdlist (cld, "master/FINAL");
        }
    }
    for (int i = 0; i < PROCESSES; i++) {
        cld = &children[i];
        CLOSEME (cld -> cld_topar [0]);
        CLOSEME (cld -> cld_tocld [1]);
    }
    for (int i = 0; i < PROCESSES; i++) {
        cld = &children[i];
        waitpid (cld -> cld_pid, & cld -> cld_status, 0);
    }
    printf ("All children have died\n");
    return 0;
}
----------------------------------------

int main () {
    pipe_io io;
    pipe ((int *) & io);
    pid_t child;
    if (!(child = fork ())) {
        close (io.out);
        char buff [4];
        printf ("Child waiting (read will block)\n");
        read (io.in, buff, 1);
        close (io.in);
        printf ("Child exits (read stopped blocking once all inputs were closed)\n");
        exit (0);
    }
    sleep (1);
    printf ("closing parent's writing (output) endpoint.\n");
    close (io.out);
    sleep (1);
    printf ("closing parent's reading (input) endpoint.\ndone.\n");
    waitpid (child, NULL, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36168854_36168947_1_43
36168854_36169038_4_40
Title: Nested if-else statements are giving me problems 
----------------------------------------

void countBase (char *p) {
    int aCount = 0, cCount = 0, tCount = 0, gCount = 0;
    char invalidBase [100];
    int i, j = 0;
    while (*p != '\0') {
        switch (*p) {
        case 'A' :
        case 'a' :
            aCount++;
            break;
        case 'C' :
        case 'c' :
            cCount++;
            break;
        case 'T' :
        case 't' :
            tCount++;
            break;
        case 'G' :
        case 'g' :
            gCount++;
            break;
        default :
            if (j < (int) (sizeof (invalidBase) / sizeof (*invalidBase))) {
                invalidBase[j] = *p;
                j++;
            }
            break;
        }
        p++;
    }
    for (i = 0; i < j; i++) {
        printf ("Invalid Base: %c\n", invalidBase [i]);
    }
    printf (" A: %i\n C: %i\n T: %i\n G: %i\n", aCount, cCount, tCount, gCount);
}
----------------------------------------

void countBase (char *p) {
    int aCount = 0, cCount = 0, tCount = 0, gCount = 0;
    char invalidBase [100];
    int i, j = 0;
    while (*p != '\0') {
        if (tolower (*p) == 'a') {
            aCount++;
        }
        else if (tolower (*p) == 'c') {
            cCount++;
        }
        else if (tolower (*p) == 't') {
            tCount++;
        }
        else if (tolower (*p) == 'g') {
            gCount++;
        }
        else {
            invalidBase[j++] = *p;
        }
        p++;
    }
    invalidBase[j] = '\0';
    for (i = 0; invalidBase[i] != '\0'; i++) {
        printf ("Invalid Base: %c\n", invalidBase [i]);
    }
    printf (" A: %i\n C: %i\n T: %i\n G: %i\n", aCount, cCount, tCount, gCount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36184019_36188053_224_310
36184019_36198530_655_701
Title: "Is it possible ""force"" UTF-8 in a C program?" 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *out;
    wchar_t *line = NULL;
    size_t size = 0;
    size_t len;
    setlocale (LC_ALL, "");
    fwide (stdin, 1);
    fwide (stdout, 1);
    if (argc < 2 || argc > 3 || strcmp (argv[1], "-h") == 0 || strcmp (argv[1], "--help") == 0 || strcmp (argv[1], "/?") == 0) {
        fprintf (stderr, "\n");
        fprintf (stderr, "Usage: %s [ -h | --help | /? ]\n", argv [0]);
        fprintf (stderr, "       %s FILENAME [ PROMPT ]\n", argv [0]);
        fprintf (stderr, "\n");
        fprintf (stderr, "The program will read input lines until an only '.' is supplied.\n");
        fprintf (stderr, "If you do not want to save the output to a file,\n");
        fprintf (stderr, "use '-' as the FILENAME.\n");
        fprintf (stderr, "\n");
        return EXIT_SUCCESS;
    }
    if (strcmp (argv[1], "-") == 0)
        out = NULL;
    else {
        out = fopen (argv[1], "w");
        if (out == NULL) {
            fprintf (stderr, "%s: %s.\n", argv [1], strerror (errno));
            return EXIT_FAILURE;
        }
        fwide (out, 1);
    }
    while (1) {
        if (argc > 2) {
            wprintf (L "%s\n", argv [2]);
            fflush (stdout);
        }
        len = getwline (&line, &size, stdin, CLEANUP);
        if (len == 0) {
            if (errno) {
                fprintf (stderr, "Error reading standard input: %s.\n", strerror (errno));
                break;
            }
            if (feof (stdin))
                break;
        }
        if (wcscmp (line, L ".") == 0)
            break;
        if (out != NULL) {
            fputws (line, out);
            fputwc (L '\n', out);
        }
        wprintf (L "Received %lu wide characters, %lu of which were letterlike.\n", (unsigned long) len, (unsigned long) count_letters (line));
        fflush (stdout);
    }
    free (line);
    line = NULL;
    size = 0;
    return EXIT_SUCCESS;
}
----------------------------------------

int main (int argc, char *argv []) {
    FILE *in;
    int arg;
    setlocale (LC_ALL, "");
    fwide (stdin, 1);
    fwide (stdout, 1);
    if (argc < 1)
        return usage (argv[0]);
    for (arg = 1; arg < argc; arg++) {
        if (!strcmp (argv[arg], "-h") || !strcmp (argv[arg], "--help") || !strcmp (argv[arg], "/?"))
            return usage (argv[0]);
        if (!strcmp (argv[arg], "-")) {
            if (show_csv (stdin, "(standard input)"))
                return EXIT_FAILURE;
        }
        else {
            in = fopen (argv[arg], "r");
            if (!in) {
                fprintf (stderr, "%s: %s.\n", argv [arg], strerror (errno));
                return EXIT_FAILURE;
            }
            if (show_csv (in, argv[arg]))
                return EXIT_FAILURE;
            if (ferror (in)) {
                fprintf (stderr, "%s: %s.\n", argv [arg], strerror (EIO));
                fclose (in);
                return EXIT_FAILURE;
            }
            if (fclose (in)) {
                fprintf (stderr, "%s: %s.\n", argv [arg], strerror (EIO));
                return EXIT_FAILURE;
            }
        }
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36188859_36189763_1_18
36188859_36190268_16_31
Title: "K&R exercise 2-5error control may reach end of non-void function c" 
----------------------------------------

int any (string a, string b) {
    size_t i, j;
    int c = 0;
    for (i = 0; i < strlen (a); i++) {
        for (j = 0; j < strlen (b); j++) {
            if (b[j] == a[i] && c == 0) {
                c = 1;
                break;
            }
        }
    }
    if (c == 1) {
        return (int) i;
    }
    else {
        return (int) -1;
    }
}
----------------------------------------

int any (char *a, char *b) {
    int lookup [CHAR_MAX + 1] = {0};
    for (int i = 0; b[i]; ++i) {
        lookup[b[i]] += 1;
    }
    for (int i = 0; a[i]; ++i) {
        if (lookup[a[i]]) {
            return i;
        }
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3618889_3618919_4_25
3618889_3618985_4_16
Title: How to Find a current day in c language? 
----------------------------------------

int main (int argc, char *argv []) {
    char outstr [200];
    time_t t;
    struct tm *tmp;
    t = time (NULL);
    tmp = localtime (&t);
    if (tmp == NULL) {
        perror ("localtime");
        exit (EXIT_FAILURE);
    }
    if (strftime (outstr, sizeof (outstr), "%A", tmp) == 0) {
        fprintf (stderr, "strftime returned 0");
        exit (EXIT_FAILURE);
    }
    printf ("Result string is \"%s\"\n", outstr);
    exit (EXIT_SUCCESS);
}
----------------------------------------

int main (void) {
    char buffer [32];
    struct tm *ts;
    size_t last;
    time_t timestamp = time (NULL);
    ts = localtime (&timestamp);
    last = strftime (buffer, 32, "%A", ts);
    buffer[last] = '\0';
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36195730_36196010_7_39
36195730_36196281_4_18
Title: Finding last letters of a string 
----------------------------------------

int main (void) {
    int i, t, j, len;
    int found = 0;
    printf ("Enter string: ");
    scanf ("%[^\n]ed", str);
    len = strlen (str);
    str[len] = ' ';
    for (t = 0, i = 0; i < strlen (str); i++) {
        if ((str[i] == ' ') && (str[i - 1] == 'd') && (str[i - 2] == 'e')) {
            for (j = t; j < i; j++)
                printf ("%c", str[j]);
            t = i + 1;
            printf ("\n");
            found++;
        }
        else {
            if (str[i] == ' ') {
                t = i + 1;
            }
        }
    }
    if (found == 0)
        printf ("NotFound\r\n");
    return 0;
}
----------------------------------------

int main (void) {
    char str [100], *substr;
    size_t len;
    puts ("Enter string: ");
    fgets (str, 100, stdin);
    substr = strtok (str, " ");
    while (substr) {
        len = strlen (substr);
        if (substr[len - 2] == 'e' && substr[len - 1] == 'd')
            puts (substr);
        substr = strtok (NULL, " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36196652_36196892_1_28
36196652_36196968_1_31
Title: output many chars (including ASCII) at once? 
----------------------------------------

void printField () {
    int i, j;
    int n = 0;
    char toPrint [52 * (142 + 1) + 1];
    system ("CLS");
    for (i = 0; i < 52; i++) {
        for (j = 0; j < 142; j++) {
            switch (field[i][j]) {
            case 0 :
                toPrint[n++] = ' ';
                break;
            case 9 :
                toPrint[n++] = 219;
                break;
            case 2 :
                toPrint[n++] = 219;
                break;
            case 1 :
                toPrint[n++] = ' ';
                break;
            case 6 :
                toPrint[n++] = ' ';
                break;
            case 7 :
                toPrint[n++] = 207;
                break;
            }
        }
        toPrint[n++] = '\n';
    }
    toPrint[n] = '\0';
    printf ("%s\n", toPrint);
}
----------------------------------------

void printField () {
    int i, j;
    char toPrint [10000];
    char *current = toPrint;
    system ("CLS");
    for (i = 0; i < 52; i++) {
        for (j = 0; j < 142; j++) {
            if (field[i][j] == 0) {
                *current++ = ' ';
            }
            if (field[i][j] == 9) {
                *current++ = '\xDB';
            }
            if (field[i][j] == 2) {
                *current++ = '\xDB';
            }
            if (field[i][j] == 1) {
                *current++ = ' ';
            }
            if (field[i][j] == 6) {
                *current++ = ' ';
            }
            if (field[i][j] == 7) {
                *current++ = '\xCF';
            }
        }
        *current++ = '\n';
    }
    *current = '\0';
    puts (toPrint);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36204280_36204770_1_30
36204280_36208380_2_22
Title: Another way to do cleanup in C? 
----------------------------------------

int main (void) {
    int *i = NULL;
    int *j = NULL;
    bool success = false;
    do {
        i = malloc (sizeof (int));
        if (NULL == i)
            break;
        j = malloc (sizeof (int));
        if (NULL == j)
            break;
        success = true;
    }
    while (0);
    if (!success) {
        printf ("Something failed!");
    }
    else {
        printf ("All succeeded!");
    }
    free (i);
    free (j);
    return (success ? 0 : 1);
}
----------------------------------------

int main (void) {
    int *i = malloc (sizeof *i);
    double *j = malloc (sizeof *j);
    bool ok = i && j;
    if (ok) {
    }
    free (i);
    free (j);
    return ok ? 0 : -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36205551_36205723_3_15
36205551_36209121_6_30
Title: How do I save integers read by getchar() to an array? 
----------------------------------------

int main () {
    printf ("Please enter three digit number 100 to 999: ");
    int numEntered [3];
    for (int i = 0; i < 3; i++) {
        scanf ("%d", & numEntered [i]);
        printf ("%d", numEntered [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char digits [4] = {0};
    int ch, value;
    do {
        printf ("Please enter three digit number 100 to 999: ");
        for (int i = 0; i < 3 && (ch = getchar ()) != '\n' && ch != EOF; ++i) {
            digits[i] = ch;
        }
        if (ch != '\n')
            while ((ch = getchar ()) != '\n')
                if (!isspace (ch))
                    *digits = 0;
        value = atoi (digits);
    }
    while (value < 100 || 999 < value);
    char *rotate_left (char digits [4]);
    printf ("%d\n", value);
    printf ("%d\n", atoi (rotate_left (digits)));
    printf ("%d\n", atoi (rotate_left (digits)));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36208801_36209889_26_72
36208801_36225027_9_37
Title: Strtok-ing a file into an array in C 
----------------------------------------

void ArrayFormatter (FILE *cipherKey) {
    char line [LINESIZE];
    char *bp;
    char *cp;
    char *fileWords [WORDMAX];
    int wordCount = 0;
    while (fgets (line, sizeof (line), cipherKey) != NULL) {
        bp = line;
        for (; wordCount < WORDMAX; ++wordCount) {
            cp = strtok (bp, " ");
            bp = NULL;
            if (cp == NULL)
                break;
            fileWords[wordCount] = xstrdup (cp);
            fprintf (stdout, "_%s_", fileWords [wordCount]);
        }
        if (wordCount >= WORDMAX)
            break;
    }
    fprintf (stdout, "\n\n\n");
    for (i = 0; i < wordCount; i++) {
        fprintf (stdout, "_%s_", fileWords [i]);
    }
}
----------------------------------------

void ArrayFormatter (FILE *cipherKey) {
    char line [MAX_LINE_LEN];
    size_t wordCount = 0;
    static char fileWords [MAX_WORDS] [MAX_WORD_LEN];
    while (wordCount < MAX_WORDS && fgets (line, MAX_LINE_LEN, cipherKey)) {
        char *token = strtok (line, " ");
        while (token) {
            strncpy (fileWords [wordCount], token, MAX_WORD_LEN);
            fprintf (stdout, "_%s_", fileWords [wordCount]);
            wordCount++;
            token = strtok (NULL, " ");
        }
    }
    fprintf (stdout, "\n\n\n");
    for (size_t i = 0; i < wordCount; i++) {
        fprintf (stdout, "_%s_", fileWords [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36219237_36220305_6_29
36219237_36220895_13_28
Title: Need to repromt the user in case he input digits and not letters 
----------------------------------------

int main () {
    char name [50];
    int valid = 0;
    size_t len = 0;
    size_t each = 0;
    do {
        valid = 1;
        printf ("Please enter your name\n");
        fgets (name, sizeof (name), stdin);
        name[strcspn (name, "\n")] = '\0';
        len = strlen (name);
        for (each = 0; each < len; each++) {
            if ((isdigit (name[each]))) {
                valid = 0;
                printf ("Do not use digits\n");
                break;
            }
        }
    }
    while (!valid);
    printf ("Your name is %s\n", name);
    return 0;
}
----------------------------------------

int main () {
    char name [50];
    printf ("\nPlease enter your name:\n");
    scanf ("%s", name);
    while (has_digits (name)) {
        printf ("wrong input try again\n");
        scanf ("%s", name);
    }
    printf ("Your name is %s\n", name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36223658_36223997_4_28
36223658_36224143_1_16
Title: C program- how do I integrate 2 strings into eachother? 
----------------------------------------

int main (void) {
    char *s1 = "Hello";
    char *s2 = "there";
    char s3 [strlen (s1) + strlen (s2) + 1];
    char *p1 = s1, *p2 = s2, *p3 = s3;
    int first = 0;
    while (*p1 && *p2) {
        *p3++ = (first ^= 1) ? *p1++ : *p2++;
    }
    while (*p1)
        *p3++ = *p1++;
    while (*p2)
        *p3++ = *p2++;
    *p3 = '\0';
    puts (s1);
    puts (s2);
    puts (s3);
    return 0;
}
----------------------------------------

int main () {
    char c1 [] = "Hello", c2 [] = "There", c3 [11];
    int i = 0, j = 0, k = 0;
    while (c1 [i] != '\0' && c2 [j] != '\0') {c3 [k] = c1 [i];
    k++;
    c3[k] = c2[j];
    k++;
    if (c1[i] != '\0')
        i++;
    if (c2[j] != '\0')
        j++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36223658_36223997_4_28
36223658_36224175_4_35
Title: C program- how do I integrate 2 strings into eachother? 
----------------------------------------

int main (void) {
    char *s1 = "Hello";
    char *s2 = "there";
    char s3 [strlen (s1) + strlen (s2) + 1];
    char *p1 = s1, *p2 = s2, *p3 = s3;
    int first = 0;
    while (*p1 && *p2) {
        *p3++ = (first ^= 1) ? *p1++ : *p2++;
    }
    while (*p1)
        *p3++ = *p1++;
    while (*p2)
        *p3++ = *p2++;
    *p3 = '\0';
    puts (s1);
    puts (s2);
    puts (s3);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 3) {
        printf ("Give me two strings!");
        return 1;
    }
    int len = strlen (argv[1]) + strlen (argv[2]);
    char mixed_string [len];
    char *a = argv[1];
    char *b = argv[2];
    int i;
    for (i = 0; i < len;) {
        if (*a) {
            mixed_string[i++] = *a++;
        }
        if (*b) {
            mixed_string[i++] = *b++;
        }
    }
    mixed_string[i] = '\0';
    printf ("%s\n", mixed_string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36223658_36224143_1_16
36223658_36224175_4_35
Title: C program- how do I integrate 2 strings into eachother? 
----------------------------------------

int main () {
    char c1 [] = "Hello", c2 [] = "There", c3 [11];
    int i = 0, j = 0, k = 0;
    while (c1 [i] != '\0' && c2 [j] != '\0') {c3 [k] = c1 [i];
    k++;
    c3[k] = c2[j];
    k++;
    if (c1[i] != '\0')
        i++;
    if (c2[j] != '\0')
        j++;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 3) {
        printf ("Give me two strings!");
        return 1;
    }
    int len = strlen (argv[1]) + strlen (argv[2]);
    char mixed_string [len];
    char *a = argv[1];
    char *b = argv[2];
    int i;
    for (i = 0; i < len;) {
        if (*a) {
            mixed_string[i++] = *a++;
        }
        if (*b) {
            mixed_string[i++] = *b++;
        }
    }
    mixed_string[i] = '\0';
    printf ("%s\n", mixed_string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3622637_3639557_5_19
3622637_7422067_1_41
Title: "Custom malloc for lots of small fixed size blocks?" 
----------------------------------------

int main () {
    int *mem = (int *) malloc (sizeof (int));
    if (mem == 0)
        return 1;
    long i = 1L;
    while (i) {
        mem[i - 1] = i;
        printf ("block is %d bytes\n", sizeof (int) * i ++);
    }
    free (mem);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    struct node {
        int data;
        struct node *next, *prev;
    };
    ChunkAllocator *nodes = chcreate (1024 * 1024, sizeof (struct node));
    struct node *head = challoc (nodes);
    head->data = 1;
    struct node *cur = NULL;
    int i;
    for (i = 1; i < 1024 * 1024; i++) {
        cur = challoc (nodes);
        cur->data = i;
        cur = cur->next;
    }
    chfree (nodes, head);
    chclear (nodes);
    chdestroy (nodes);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36229327_36229701_11_43
36229327_36230472_16_77
Title: Reading data into struct 
----------------------------------------

int main (void) {
    FILE *fp;
    int counter = 0;
    char a [10];
    int b, i;
    int file_length = 0;
    fp = fopen ("test.txt", "r");
    while (fscanf (fp, "%c%d\n", a, &b) > 0) {
        printf ("%c,%d\n", a [0], b);
        file_length += 1;
    }
    printf ("There are %d entries\n", file_length);
    struct myStruct *list [file_length];
    fclose (fp);
    fp = fopen ("test.txt", "r");
    while (fscanf (fp, "%c%d\n", a, &b) > 0) {
        list[counter] = malloc (sizeof (struct myStruct));
        strcpy (list [counter] -> singleChar, a);
        list[counter]->height = b;
        counter += 1;
    }
    for (i = 0; i < file_length; i++) {
        printf ("%c,%d\n", list [i] -> singleChar [0], list [i] -> height);
        free (list [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char tempc, nl;
    int tempd;
    LinkedList *ptr;
    LinkedList *current = NULL;
    FILE *fp;
    if ((fp = fopen ("36229327.txt", "r")) != NULL) {
        printf ("Contents from file\n");
        while (fscanf (fp, "%c%d%c", &tempc, &tempd, &nl) > 0) {
            printf ("%c %d\n", tempc, tempd);
            ptr = malloc (1 * sizeof (LinkedList));
            if (ptr != NULL) {
                if (first_time_here) {
                    head = ptr;
                    first_time_here = 0;
                }
                ptr->c = tempc;
                ptr->i = tempd;
                ptr->lp = NULL;
                if (current != NULL) {
                    current->lp = ptr;
                }
                current = ptr;
            }
            else {
                printf ("Can't allocate memory\n");
                printf ("Aborting\n");
            }
        }
        fclose (fp);
        printf ("\nFile Closed\n\n");
        if (head != NULL) {
            current = head;
            printf ("File contents retrieved from Linked List\n");
            while (current != NULL) {
                printf ("%c %d\n", current -> c, current -> i);
                tmp = current;
                current = current->lp;
                free (tmp);
            }
        }
    }
    else {
        printf ("Can't open file\n");
        exit (- 1);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36233185_36233502_48_62
36233185_36233516_16_40
Title: Linked list and pointers 
----------------------------------------

int main (void) {
    list lst = {NULL, NULL};
    int data;
    while (scanf ("%d", &data) == 1 && data != -1) {
        if (data % 2 != 0)
            push_back (&lst, data);
    }
    display (& lst);
    return 0;
}
----------------------------------------

void main () {
    int num = 0;
    list my_list = {0};
    node_list *printer;
    while (num != 50) {
        if (num % 2) {
            insert_list (& my_list, num);
        }
        num += 1;
    }
    for (printer = my_list.head; printer; printer = printer->next) {
        printf ("%d\n", printer -> data);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36242321_36242663_23_31
36242321_37095904_45_58
Title: C Program To Generated Random Uppercase String and Replace Values 
----------------------------------------

void getRandomStr (char *s1) {
    int i;
    srand (time (NULL));
    for (i = 0; i < 40; i++) {
        char c = rand () % 26 + 'A';
        s1[i] = c;
    }
    s1[40] = '\0';
}
----------------------------------------

void getRandomStr (char s1 []) {
    int i;
    srand (time (NULL));
    for (i = 0; i < 40; i++) {
        char c = rand () % 26 + 'A';
        s1[i] = c;
    }
    s1[40] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36242321_36242663_4_20
36242321_37095904_13_42
Title: C Program To Generated Random Uppercase String and Replace Values 
----------------------------------------

int main (int argc, const char *argv []) {
    char s1 [41];
    char s2 [256], repl_chr;
    getRandomStr (s1);
    printf ("%s\n", s1);
    printf ("\nEnter characters to be replaced: ");
    fgets (s2, sizeof (s2), stdin);
    repl_chr = '*';
    printf ("\nModified string after replacement is: ");
    strreplace (s1, s2, repl_chr);
    return 0;
}
----------------------------------------

int main (int argc, const char argv []) {
    char s1 [BUFF_SIZE];
    char s2 [BUFF_SIZE], repl_chr;
    char proceed = 0;
    do {
        getRandomStr (s1);
        printf ("Your random string is: %s\n", s1);
        printf ("\nEnter only 20 characters to be replaced: ");
        gets (s2, sizeof (s2), stdin);
        repl_chr = '*';
        check (s1, s2);
        printf ("\nModified string after replacement is: ");
        strreplace (s1, s2, repl_chr);
        proceed = cont ();
    }
    while (proceed == 'Y' || proceed == 'y');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36248210_36248861_9_33
36248210_36248940_3_28
Title: How to read an integer Array 
----------------------------------------

int main () {
    char upc [12];
    printf ("Enter the UPC code (11 digits):");
    scanf ("%11s", upc);
    if (strlen (upc) == 11) {
        if (isDigit (upc)) {
        }
        else {
            printf ("The UPC must contain only digits\n");
        }
    }
    else {
        printf ("The UPC must be exactly 11 digits long\n");
    }
    return 0;
}
----------------------------------------

int main () {
    long long input;
    int first_sum = 0, second_sum = 0, total, i;
    printf ("Enter the UPC code (11 digits): ");
    if (scanf ("%lld", &input) == 1) {
        i = 0;
        while (input) {
            if (i % 2 == 0)
                first_sum += input % 10;
            else
                second_sum += input % 10;
            input /= 10;
            i++;
        }
    }
    total = (3 * first_sum) + second_sum;
    printf ("Check digit: %d\n", 9 - ((total - 1) % 10));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36287654_36288029_1_25
36287654_36288084_1_18
Title: Nested Loop for C Programming 
----------------------------------------

void displayBoard (Cell board [BOARD_HEIGHT] [BOARD_WIDTH], Player *player) {
    int i, j;
    printf ("| ");
    for (j = 0; j < BOARD_WIDTH; j++) {
        printf ("|%d", j);
    }
    printf ("|\n");
    for (i = 0; i < BOARD_HEIGHT; i++) {
        for (j = 0; j < BOARD_WIDTH; j++) {
            if (j == 0) {
                printf ("|%d", i);
            }
            printf ("| ");
        }
        printf ("|\n");
    }
    printf ("\n");
}
----------------------------------------

void displayBoard (int height, int width) {
    int i, j;
    printf ("| ");
    for (j = 0; j < width; j++) {
        printf ("|%d", j);
    }
    printf ("|\n");
    for (i = 0; i < height; i++) {
        printf ("|%d", i);
        for (j = 0; j < width; j++) {
            printf ("| ");
        }
        printf ("|\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36287654_36288029_1_25
36287654_36288267_4_24
Title: Nested Loop for C Programming 
----------------------------------------

void displayBoard (Cell board [BOARD_HEIGHT] [BOARD_WIDTH], Player *player) {
    int i, j;
    printf ("| ");
    for (j = 0; j < BOARD_WIDTH; j++) {
        printf ("|%d", j);
    }
    printf ("|\n");
    for (i = 0; i < BOARD_HEIGHT; i++) {
        for (j = 0; j < BOARD_WIDTH; j++) {
            if (j == 0) {
                printf ("|%d", i);
            }
            printf ("| ");
        }
        printf ("|\n");
    }
    printf ("\n");
}
----------------------------------------

void displayBoard () {
    int i, j;
    printf ("| ");
    for (j = 0; j < BOARD_WIDTH; j++) {
        printf ("|%d", j);
    }
    printf ("|\n");
    for (i = 0; i < BOARD_HEIGHT; i++) {
        printf ("|%d", i);
        for (j = 1; j < BOARD_WIDTH; j++) {
            printf ("| ");
        }
        printf ("| |\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36287654_36288084_1_18
36287654_36288267_4_24
Title: Nested Loop for C Programming 
----------------------------------------

void displayBoard (int height, int width) {
    int i, j;
    printf ("| ");
    for (j = 0; j < width; j++) {
        printf ("|%d", j);
    }
    printf ("|\n");
    for (i = 0; i < height; i++) {
        printf ("|%d", i);
        for (j = 0; j < width; j++) {
            printf ("| ");
        }
        printf ("|\n");
    }
}
----------------------------------------

void displayBoard () {
    int i, j;
    printf ("| ");
    for (j = 0; j < BOARD_WIDTH; j++) {
        printf ("|%d", j);
    }
    printf ("|\n");
    for (i = 0; i < BOARD_HEIGHT; i++) {
        printf ("|%d", i);
        for (j = 1; j < BOARD_WIDTH; j++) {
            printf ("| ");
        }
        printf ("| |\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36319712_36320866_11_35
36319712_36321446_4_29
Title: How to scan txt file for data and store in arrays in C? 
----------------------------------------

int main (int argc, char **argv) {
    size_t i, idx = 0;
    char buf [MAXC] = "";
    person p [MAXP] = {{"", "", 0}};
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (idx < MAXP && fgets (buf, MAXC, fp) && sscanf (buf, "%[^,],%s%d", p[idx].last, p[idx].first, &p[idx].age) == 3)
        idx++;
    if (fp != stdin)
        fclose (fp);
    for (i = 0; i < idx; i++)
        printf (" p[%2zu] '%s %s' is %d years old.\n", i, p[i].first, p[i].last, p[i].age);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char first [100] [40], last [100] [40];
    int age [100];
    size_t i = 0;
    FILE *file = fopen (argv[1], "r");
    if (!file) {
        printf ("Could not open file. Exiting application.");
        return 1;
    }
    while (fscanf (file, " %[^,],%s%d", first[i], last[i], &age[i]) == 3) {
        i++;
    }
    size_t num = i;
    fclose (file);
    for (i = 0; i < num; i++)
        printf ("%s, %s\t%d\n", first[i], last[i], age[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36337100_36337348_1_19
36337100_36337751_1_26
Title: Cannot seem to get my While statement to work 
----------------------------------------

int main () {
    int wordvalue;
    char name [100];
    while (1) {
        printf ("\nEnter a word :");
        scanf ("%s", name);
        if (strcmp (name, "Q") == 0)
            break;
        wordvalue = scrabbleValue (name);
        printf ("Your word value is: %d\n", wordvalue);
    }
    return 0;
}
----------------------------------------

int main () {
    char *ptr;
    char check;
    int wordvalue;
    char name [100];
    printf ("\nEnter a word :");
    scanf ("%s", name);
    ptr = name;
    check = name[0];
    wordvalue = scrabbleValue (ptr);
    printf ("Your word value is: %d\n", wordvalue);
    while (strcmp (name, "q") && strcmp (name, "Q")) {
        printf ("\nEnter a word :");
        scanf ("%s", name);
        ptr = name;
        wordvalue = scrabbleValue (ptr);
        printf ("Your word value is: %d\n", wordvalue);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36354759_36358877_1_42
36354759_36362147_5_30
Title: C : how can I type a name and end it with '.' (dot) 
----------------------------------------

int main () {
    int flag, n;
    char *Nameplate = malloc (22);
    fflush (stdin);
    while (1) {
        printf ("Please enter the last name of your doctor(please type with only small letters):\n");
        printf ("End name with a period/full stop\n");
        fgets (Nameplate, 20, stdin);
        flag = 0;
        for (n = 0; n < strlen (Nameplate) - 2; n++) {
            if (!('a' <= Nameplate[n] && Nameplate[n] <= 'z')) {
                flag = 1;
                break;
            }
        }
        if (Nameplate[strlen (Nameplate) - 2] != '.') {
            flag = 2;
        }
        if (flag == 1) {
            printf ("small letters only\n");
        }
        else if (flag == 2) {
            printf ("remember to end with a period/full stop\n");
        }
        else {
            break;
        }
    }
    printf ("\n Your appointment with %s has been successfully canceled.\n\n", Nameplate);
    free (Nameplate);
    return 0;
}
----------------------------------------

int main (void) {
    int c = 0, cnx = 0, i = 0;
    char name [MAXC] = "";
    printf ("\n enter doctor's name (end with '.' to cancel): ");
    while (i + 1 < MAXC && (c = getchar ()) != '\n' && c != EOF)
        if (('a' <= c && c <= 'z') || c == '.' || c == ' ')
            name[i++] = c;
        else if ('A' <= c && c <= 'Z')
            name[i++] = c ^ (1u << 5);
    if (i && name[i - 1] == '.') {
        cnx = 1;
        name[--i] = 0;
    }
    else
        name[i] = 0;
    if (cnx)
        printf ("\n Your appointment with doctor '%s' has been canceled.\n\n", name);
    else
        printf ("\n You have a new appointment with doctor '%s'.\n\n", name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36356544_36357084_3_21
36356544_36357110_1_21
Title: C - Position of digit in a number 
----------------------------------------

int main () {
    int i = 0;
    int j = 0;
    int p = 5;
    int n = 123456;
    int digits [12] = {};
    j = n;
    while (j) {
        digits[i] = j % 10;
        j = j / 10;
        i++;
    }
    printf ("The digit of %d in the position %d is %d", n, p, digits [i - p]);
    return 0;
}
----------------------------------------

int main () {
    int i, j = 0, p, N;
    printf ("Enter two positive integers: ");
    scanf ("%d%d", & N, & p);
    int pow = 1, tmp = N;
    while (tmp > 10) {
        pow *= 10;
        tmp /= 10;
    }
    tmp = N;
    for (i = 1; i <= p; i++) {
        j = tmp / pow;
        tmp %= pow;
        pow /= 10;
    }
    printf ("The digit of %d in the position %d is %d\n", N, p, j);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36356544_36357084_3_21
36356544_36357396_1_15
Title: C - Position of digit in a number 
----------------------------------------

int main () {
    int i = 0;
    int j = 0;
    int p = 5;
    int n = 123456;
    int digits [12] = {};
    j = n;
    while (j) {
        digits[i] = j % 10;
        j = j / 10;
        i++;
    }
    printf ("The digit of %d in the position %d is %d", n, p, digits [i - p]);
    return 0;
}
----------------------------------------

int main () {
    int i, ans, p, N, no_of_digits = 0, temp;
    printf ("Enter two positive integers: ");
    scanf ("%d%d", & N, & p);
    temp = N;
    no_of_digits = (int) log10 (N) + 1;
    while (i <= (no_of_digits - p)) {
        ans = N % 10;
        N = N / 10;
        i++;
    }
    printf ("The digit of %d in the position %d is %d\n", temp, p, ans);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36356544_36357084_3_21
36356544_48905068_5_34
Title: C - Position of digit in a number 
----------------------------------------

int main () {
    int i = 0;
    int j = 0;
    int p = 5;
    int n = 123456;
    int digits [12] = {};
    j = n;
    while (j) {
        digits[i] = j % 10;
        j = j / 10;
        i++;
    }
    printf ("The digit of %d in the position %d is %d", n, p, digits [i - p]);
    return 0;
}
----------------------------------------

int main (void) {
    int i, q, n, p;
    do {
        printf ("Enter two positive integers for number,  position: ");
        scanf ("%d%d", & n, & p);
    }
    while (n < 0 || p <= 0);
    int nOrigin = n;
    int len = getDgtLen (n);
    if (p <= len) {
        for (i = 0; i < p; i++) {
            q = n % 10;
            n /= 10;
        }
        printf ("The digit of %d in the position %d is %d\n", nOrigin, p, len - q + 1);
    }
    else {
        printf ("position not found!\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36356544_36357110_1_21
36356544_36357396_1_15
Title: C - Position of digit in a number 
----------------------------------------

int main () {
    int i, j = 0, p, N;
    printf ("Enter two positive integers: ");
    scanf ("%d%d", & N, & p);
    int pow = 1, tmp = N;
    while (tmp > 10) {
        pow *= 10;
        tmp /= 10;
    }
    tmp = N;
    for (i = 1; i <= p; i++) {
        j = tmp / pow;
        tmp %= pow;
        pow /= 10;
    }
    printf ("The digit of %d in the position %d is %d\n", N, p, j);
}
----------------------------------------

int main () {
    int i, ans, p, N, no_of_digits = 0, temp;
    printf ("Enter two positive integers: ");
    scanf ("%d%d", & N, & p);
    temp = N;
    no_of_digits = (int) log10 (N) + 1;
    while (i <= (no_of_digits - p)) {
        ans = N % 10;
        N = N / 10;
        i++;
    }
    printf ("The digit of %d in the position %d is %d\n", temp, p, ans);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36356544_36357110_1_21
36356544_48905068_5_34
Title: C - Position of digit in a number 
----------------------------------------

int main () {
    int i, j = 0, p, N;
    printf ("Enter two positive integers: ");
    scanf ("%d%d", & N, & p);
    int pow = 1, tmp = N;
    while (tmp > 10) {
        pow *= 10;
        tmp /= 10;
    }
    tmp = N;
    for (i = 1; i <= p; i++) {
        j = tmp / pow;
        tmp %= pow;
        pow /= 10;
    }
    printf ("The digit of %d in the position %d is %d\n", N, p, j);
}
----------------------------------------

int main (void) {
    int i, q, n, p;
    do {
        printf ("Enter two positive integers for number,  position: ");
        scanf ("%d%d", & n, & p);
    }
    while (n < 0 || p <= 0);
    int nOrigin = n;
    int len = getDgtLen (n);
    if (p <= len) {
        for (i = 0; i < p; i++) {
            q = n % 10;
            n /= 10;
        }
        printf ("The digit of %d in the position %d is %d\n", nOrigin, p, len - q + 1);
    }
    else {
        printf ("position not found!\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36356544_36357396_1_15
36356544_48905068_5_34
Title: C - Position of digit in a number 
----------------------------------------

int main () {
    int i, ans, p, N, no_of_digits = 0, temp;
    printf ("Enter two positive integers: ");
    scanf ("%d%d", & N, & p);
    temp = N;
    no_of_digits = (int) log10 (N) + 1;
    while (i <= (no_of_digits - p)) {
        ans = N % 10;
        N = N / 10;
        i++;
    }
    printf ("The digit of %d in the position %d is %d\n", temp, p, ans);
}
----------------------------------------

int main (void) {
    int i, q, n, p;
    do {
        printf ("Enter two positive integers for number,  position: ");
        scanf ("%d%d", & n, & p);
    }
    while (n < 0 || p <= 0);
    int nOrigin = n;
    int len = getDgtLen (n);
    if (p <= len) {
        for (i = 0; i < p; i++) {
            q = n % 10;
            n /= 10;
        }
        printf ("The digit of %d in the position %d is %d\n", nOrigin, p, len - q + 1);
    }
    else {
        printf ("position not found!\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36363432_36363480_1_13
36363432_36363508_1_10
Title: "Searching for element in binary tree function always returns 0" 
----------------------------------------

int isElementInBinaryTree (BinaryTreeNode *root, int search_item) {
    if (root) {
        if (search_item < root->data)
            return isElementInBinaryTree (root->left, search_item);
        if (search_item > root->data)
            return isElementInBinaryTree (root->right, search_item);
        return 1;
    }
    return 0;
}
----------------------------------------

int isElementInBinaryTree (BinaryTreeNode *root, int search_item) {
    if (root) {
        if (search_item == root->data)
            return 1;
        if (isElementInBinaryTree (root->left, search_item))
            return 1;
        if (isElementInBinaryTree (root->right, search_item))
            return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36363432_36363480_1_13
36363432_36363685_1_10
Title: "Searching for element in binary tree function always returns 0" 
----------------------------------------

int isElementInBinaryTree (BinaryTreeNode *root, int search_item) {
    if (root) {
        if (search_item < root->data)
            return isElementInBinaryTree (root->left, search_item);
        if (search_item > root->data)
            return isElementInBinaryTree (root->right, search_item);
        return 1;
    }
    return 0;
}
----------------------------------------

int isElementInBinaryTree (BinaryTreeNode *root, int search_item) {
    if (root) {
        if (search_item == root->data)
            return 1;
        else if (search_item < root->data)
            return isElementInBinaryTree (root->left, search_item);
        else if (search_item > root->data)
            return isElementInBinaryTree (root->right, search_item);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36363432_36363508_1_10
36363432_36363685_1_10
Title: "Searching for element in binary tree function always returns 0" 
----------------------------------------

int isElementInBinaryTree (BinaryTreeNode *root, int search_item) {
    if (root) {
        if (search_item == root->data)
            return 1;
        if (isElementInBinaryTree (root->left, search_item))
            return 1;
        if (isElementInBinaryTree (root->right, search_item))
            return 1;
    }
    return 0;
}
----------------------------------------

int isElementInBinaryTree (BinaryTreeNode *root, int search_item) {
    if (root) {
        if (search_item == root->data)
            return 1;
        else if (search_item < root->data)
            return isElementInBinaryTree (root->left, search_item);
        else if (search_item > root->data)
            return isElementInBinaryTree (root->right, search_item);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36373026_36373077_3_18
36373026_36373251_1_14
Title: C Program - Add integers from while loop together 
----------------------------------------

int main (void) {
    int numberEntered;
    long long int sum;
    sum = 0;
    printf ("Enter numbers to add together (a negative number - exit): ");
    while (scanf ("%d", &numberEntered) == 1 && numberEntered >= 0) {
        sum += numberEntered;
    }
    printf ("%lld\n", sum);
}
----------------------------------------

int main () {
    int numbersEntered, sum = 0;
    printf ("Enter the first number: ");
    while (scanf ("%d", &numbersEntered) > 0 && numbersEntered > 0) {
        printf ("Enter another number to be added to the sum: ");
        sum += numbersEntered;
    }
    printf ("\nSum is: ");
    printf ("%d", sum);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36390223_36390393_32_41
36390223_36390415_41_50
Title: Input to stack data in c 
----------------------------------------

void push (double elmt, stack *c) {
    if (c->top != size) {
        c->top = c->top + 1;
        c->arr[c->top] = elmt;
    }
    else {
        printf ("Stack is full\n");
    }
}
----------------------------------------

void push (double elmt, stack *p_c) {
    if (p_c->top != size) {
        p_c->top = p_c->top + 1;
        p_c->arr[p_c->top] = elmt;
    }
    else {
        printf ("Stack is full\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36393223_36393387_4_17
36393223_36393808_5_30
Title: C : Reading bytes from binary file 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *binary = fopen ("file.txt", "wbx");
    if (!binary) {
        perror ("fopen()");
        exit (EXIT_FAILURE);
    }
    char bytesToBinary [256] = ":-)";
    fwrite (bytesToBinary, 1, 256, binary);
    fclose (binary);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    unsigned char buf [BUFSZ] = {0};
    size_t bytes = 0, i, readsz = sizeof buf;
    FILE *fp = argc > 1 ? fopen (argv[1], "rb") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while ((bytes = fread (buf, sizeof *buf, readsz, fp)) == readsz) {
        for (i = 0; i < readsz; i++)
            printf (" 0x%02x", buf[i]);
        putchar ('\n');
    }
    for (i = 0; i < bytes; i++)
        printf (" 0x%02x", buf[i]);
    putchar ('\n');
    if (fp != stdin)
        fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36393518_36393672_38_55
36393518_36394701_6_19
Title: Reverse an array in C Programming 
----------------------------------------

int main (int argc, char *argv []) {
    int N = (int) strtol (argv[1], NULL, 10);
    if (N < 0) {
        printf ("ERROR: Please provide an integer greater than or equal to 0\n");
        return 0;
    }
    if (N > SIZE) {
        printf ("ERROR: Please provide an integer less than or equal to 80\n");
        return 0;
    }
    char line [SIZE];
    int i;
    for (i = 0; i < N; i++) {
        get_input (line);
        reverse (line);
        printf ("%s\n", line);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char string [MAXC] = "";
    int i, len = 0;
    for (i = argc - 1; i && len + strlen (argv[i]) + 2 < MAXC; i--) {
        strcat (string, argv [i]);
        strcat (string, " ");
        len = strlen (string);
    }
    printf ("%s\n", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36397182_36397491_4_31
36397182_36398442_4_31
Title: C-get specific input from user 
----------------------------------------

int main (void) {
    char line [256];
    char cmd [32];
    char dir [32];
    int x;
    int y;
    if (fgets (line, sizeof line, stdin) == NULL) {
        return 1;
    }
    if (sscanf (line, "%32s%d%d%32s", cmd, &x, &y, dir) != 4) {
        return 1;
    }
    if (strcmp (cmd, "init") != 0) {
        return 1;
    }
    if (x < 0 || x > 99 || y < 0 || y > 99) {
        return 1;
    }
    if (strcmp (dir, "NORTH") != 0) {
        return 1;
    }
    printf ("Your command: %s %d %d %s\n", cmd, x, y, dir);
    return 0;
}
----------------------------------------

int main (void) {
    char input [256];
    printf ("Enter the command...\n");
    if (fgets (input, sizeof (input), stdin) != NULL) {
        char *tok;
        if ((tok = strtok (input, " ")) != NULL) {
            if (strcmp (tok, "init") != 0)
                ;
        }
        else
            ;
        if ((tok = strtok (NULL, " ")) != NULL) {
        }
        else
            ;
        if ((tok = strtok (NULL, " ")) != NULL) {
        }
        else
            ;
        if ((tok = strtok (NULL, " \n")) != NULL) {
        }
        else
            ;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36397182_36397491_4_31
36397182_36399272_8_64
Title: C-get specific input from user 
----------------------------------------

int main (void) {
    char line [256];
    char cmd [32];
    char dir [32];
    int x;
    int y;
    if (fgets (line, sizeof line, stdin) == NULL) {
        return 1;
    }
    if (sscanf (line, "%32s%d%d%32s", cmd, &x, &y, dir) != 4) {
        return 1;
    }
    if (strcmp (cmd, "init") != 0) {
        return 1;
    }
    if (x < 0 || x > 99 || y < 0 || y > 99) {
        return 1;
    }
    if (strcmp (dir, "NORTH") != 0) {
        return 1;
    }
    printf ("Your command: %s %d %d %s\n", cmd, x, y, dir);
    return 0;
}
----------------------------------------

int main (void) {
    enum {EAST, NORTH, WEST, SOUTH} dir;
    char *names [] = {"EAST", "NORTH", "WEST", "SOUTH"};
    char input [MAXC] = "";
    char *init = "init";
    int x, y;
    for (;;) {
        char *p, *ep = NULL;
        printf ("Enter the commmand: ");
        fgets (input, MAXC, stdin);
        if (strncmp (input, init, strlen (init))) {
            help ();
            continue;
        }
        if (!(p = strchr (input, ' ') + 1)) {
            help ();
            continue;
        }
        while (*p && *p != 'E' && *p != 'N' && *p != 'W' && *p != 'S')
            p++;
        if (!*p || !(ep = strchr (p, ' '))) {
            help ();
            continue;
        }
        *ep = 0;
        switch (*p) {
        case 'E' :
            if (strcmp (p, "EAST")) {
                help ();
                continue;
            }
            else
                dir = EAST;
            break;
        case 'N' :
            if (strcmp (p, "NORTH")) {
                help ();
                continue;
            }
            else
                dir = NORTH;
            break;
        case 'W' :
            if (strcmp (p, "WEST")) {
                help ();
                continue;
            }
            else
                dir = WEST;
            break;
        case 'S' :
            if (strcmp (p, "SOUTH")) {
                help ();
                continue;
            }
            else
                dir = SOUTH;
            break;
        default :
            help ();
            continue;
        }
        *ep = ' ';
        p = ep + 1;
        while (*p && (*p < '0' || '9' < *p))
            p++;
        if (!*p) {
            help ();
            continue;
        }
        x = *p++ - '0';
        while (*p && (*p < '0' || '9' < *p))
            p++;
        if (!*p) {
            help ();
            continue;
        }
        y = *p - '0';
        break;
    }
    printf ("\n direction '%s', x '%d', y '%d'\n\n", names [dir], x, y);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36397182_36398442_4_31
36397182_36399272_8_64
Title: C-get specific input from user 
----------------------------------------

int main (void) {
    char input [256];
    printf ("Enter the command...\n");
    if (fgets (input, sizeof (input), stdin) != NULL) {
        char *tok;
        if ((tok = strtok (input, " ")) != NULL) {
            if (strcmp (tok, "init") != 0)
                ;
        }
        else
            ;
        if ((tok = strtok (NULL, " ")) != NULL) {
        }
        else
            ;
        if ((tok = strtok (NULL, " ")) != NULL) {
        }
        else
            ;
        if ((tok = strtok (NULL, " \n")) != NULL) {
        }
        else
            ;
    }
}
----------------------------------------

int main (void) {
    enum {EAST, NORTH, WEST, SOUTH} dir;
    char *names [] = {"EAST", "NORTH", "WEST", "SOUTH"};
    char input [MAXC] = "";
    char *init = "init";
    int x, y;
    for (;;) {
        char *p, *ep = NULL;
        printf ("Enter the commmand: ");
        fgets (input, MAXC, stdin);
        if (strncmp (input, init, strlen (init))) {
            help ();
            continue;
        }
        if (!(p = strchr (input, ' ') + 1)) {
            help ();
            continue;
        }
        while (*p && *p != 'E' && *p != 'N' && *p != 'W' && *p != 'S')
            p++;
        if (!*p || !(ep = strchr (p, ' '))) {
            help ();
            continue;
        }
        *ep = 0;
        switch (*p) {
        case 'E' :
            if (strcmp (p, "EAST")) {
                help ();
                continue;
            }
            else
                dir = EAST;
            break;
        case 'N' :
            if (strcmp (p, "NORTH")) {
                help ();
                continue;
            }
            else
                dir = NORTH;
            break;
        case 'W' :
            if (strcmp (p, "WEST")) {
                help ();
                continue;
            }
            else
                dir = WEST;
            break;
        case 'S' :
            if (strcmp (p, "SOUTH")) {
                help ();
                continue;
            }
            else
                dir = SOUTH;
            break;
        default :
            help ();
            continue;
        }
        *ep = ' ';
        p = ep + 1;
        while (*p && (*p < '0' || '9' < *p))
            p++;
        if (!*p) {
            help ();
            continue;
        }
        x = *p++ - '0';
        while (*p && (*p < '0' || '9' < *p))
            p++;
        if (!*p) {
            help ();
            continue;
        }
        y = *p - '0';
        break;
    }
    printf ("\n direction '%s', x '%d', y '%d'\n\n", names [dir], x, y);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36406425_36406631_13_42
36406425_36407160_5_19
Title: "Add a 1 if user entered an ""*"" or add a 0 if user entered a "" "" to an array in C" 
----------------------------------------

int main (void) {
    int c = 0;
    char seq [SIZE + EXTRACHARS];
    printf ("Enter 10 * or ' ': ");
    fgets (seq, SIZE + EXTRACHARS, stdin);
    if (seq[strlen (seq) - 1] != '\n') {
        printf ("Buffer overflowed \n");
        clear_buf ();
    }
    else {
        while (c < SIZE) {
            if (seq[c] == '*') {
                printf ("1");
            }
            else if (seq[c] == ' ') {
                printf ("0");
            }
            ++c;
        }
        printf ("\n");
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    unsigned char arr [MAXC] = {0};
    int c = 0, i, idx = 0;
    while (idx < MAXC && (c = getchar ()) != EOF) {
        if (c == '*')
            arr[idx++] = 1u;
        if (c == ' ')
            arr[idx++] = 0u;
    }
    for (i = 0; i < idx; i++)
        printf (" arr[%d] : %u\n", i, arr[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36407670_36407881_3_19
36407670_36407936_3_17
Title: Printring string through loop 
----------------------------------------

int main () {
    char t [30] [30];
    int score1, score2;
    int i;
    printf ("Enter the National Teams\n");
    for (i = 1; i < 4; i++) {
        scanf ("%s", t [i]);
    }
    for (i = 1; i < 4; i++) {
        printf ("%s", t [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int i;
    char (*teamName) [10];
    for (i = 0; i < 3; i++) {
        scanf ("%s", & teamName [i]);
    }
    for (i = 0; i < 3; i++) {
        printf ("%s\n", teamName [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36408350_36408456_2_12
36408350_36408561_7_19
Title: C convert int to double in a function 
----------------------------------------

int main () {
    int a = 5, b = 2;
    double c;
    c = ((double) a) / b;
    printf ("%f\n", c);
    c = Divide (a);
    printf ("%f\n", c);
    return 0;
}
----------------------------------------

int main () {
    double a = 5.0, c;
    int b = 2;
    c = (double) a / b;
    printf ("%f\n", c);
    c = divide (a);
    printf ("%f\n", c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36416638_36416799_1_15
36416638_36416846_1_17
Title: C program - How to check array elements 
----------------------------------------

int repsEqual (int a [], int len, int n) {
    for (int i = 0; i < len; i++) {
        if (a[len - i - 1] == n % 10)
            n /= 10;
        else
            return 0;
    }
    if (n != 0)
        return 0;
    return 1;
}
----------------------------------------

int repsEqual (int a [], int len, int n) {
    int i;
    int temp;
    if (0 == len || NULL == a)
        return 0;
    temp = n;
    for (i = len - 1; i >= 0; --i) {
        if (a[i] != (temp % 10))
            return 0;
        temp = temp / 10;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36416638_36416799_1_15
36416638_36418081_3_22
Title: C program - How to check array elements 
----------------------------------------

int repsEqual (int a [], int len, int n) {
    for (int i = 0; i < len; i++) {
        if (a[len - i - 1] == n % 10)
            n /= 10;
        else
            return 0;
    }
    if (n != 0)
        return 0;
    return 1;
}
----------------------------------------

int repsEqual (int a [], int len, int n) {
    char str [100];
    sprintf (str, "%d", n);
    int i;
    int nonzeroIndex;
    for (i = 0; i < len; i++) {
        if (a[i] != 0)
            break;
    }
    nonzeroIndex = i;
    printf ("nonzeroIndex is %d\n", nonzeroIndex);
    for (i = nonzeroIndex; i < len; i++) {
        if (a[i] != str[i - nonzeroIndex] - 48) {
            printf ("diff at %d\n", i);
            return 0;
        }
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36416638_36416846_1_17
36416638_36418081_3_22
Title: C program - How to check array elements 
----------------------------------------

int repsEqual (int a [], int len, int n) {
    int i;
    int temp;
    if (0 == len || NULL == a)
        return 0;
    temp = n;
    for (i = len - 1; i >= 0; --i) {
        if (a[i] != (temp % 10))
            return 0;
        temp = temp / 10;
    }
    return 1;
}
----------------------------------------

int repsEqual (int a [], int len, int n) {
    char str [100];
    sprintf (str, "%d", n);
    int i;
    int nonzeroIndex;
    for (i = 0; i < len; i++) {
        if (a[i] != 0)
            break;
    }
    nonzeroIndex = i;
    printf ("nonzeroIndex is %d\n", nonzeroIndex);
    for (i = nonzeroIndex; i < len; i++) {
        if (a[i] != str[i - nonzeroIndex] - 48) {
            printf ("diff at %d\n", i);
            return 0;
        }
    }
    return 1;
}
----------------------------------------

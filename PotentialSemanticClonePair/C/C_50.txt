$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46012352_46012564_51_87
46012352_46012863_81_99
Title: Function about the product between 2 Matrix in C 
----------------------------------------

int main () {
    int i, j, h, k;
    int r1, r2, c1, c2;
    printf ("Inserire la dimensione R delle righe e C delle colonne:\n");
    scanf ("%d%d", & r1, & c1);
    int **matrix1 = (int **) malloc (r1 * sizeof (int *));
    printf ("\n**RIEMPIRE LA MATRICE 1 **\n");
    for (i = 0; i < r1; i++) {
        matrix1[i] = (int *) malloc (c1 * sizeof (int));
        for (j = 0; j < c1; j++) {
            scanf ("%d", & matrix1 [i] [j]);
        }
    }
    printf ("Inserire la dimensione R delle righe e C delle colonne:\n");
    scanf ("%d%d", & r2, & c2);
    int **matrix2 = (int **) malloc (r2 * sizeof (int *));
    printf ("\n**RIEMPIRE LA MATRICE 2 **\n");
    for (i = 0; i < r2; i++) {
        matrix2[i] = (int *) malloc (c2 * sizeof (int));
        for (j = 0; j < c2; j++) {
            scanf ("%d", & matrix2 [i] [j]);
        }
    }
    int **matrix3;
    matrix3 = (int **) malloc (r1 * sizeof (int *));
    for (i = 0; i < r1; i++) {
        matrix3[i] = (int *) malloc (c2 * sizeof (int));
    }
    if (r1 != c2) {
        printf ("PROD NON ESEGUIBILE");
        exit (1);
    }
    printf ("\n****PROD MATRIX*****\n");
    matrixprod (matrix3, matrix1, matrix2, r1, c1, r2, c2);
    printmatrix (matrix3, r1, c2);
    return 0;
}
----------------------------------------

int main (void) {
    int r1, r2, c1, c2;
    int **matrix1, **matrix2, **matrix3;
    if (!(matrix1 = read_matrix (&r1, &c1)) || !(matrix2 = read_matrix (&r2, &c2)))
        return 1;
    if (c1 != r2) {
        printf ("PROD NON ESEGUIBILE");
        exit (1);
    }
    printf ("\n****PROD MATRIX*****\n");
    matrix3 = matrixprod (matrix1, matrix2, r1, c1, r2, c2);
    if (matrix3) {
        printmatrix (matrix3, r1, c2);
        free_matrix (matrix3, r1);
    }
    free_matrix (matrix2, r2);
    free_matrix (matrix1, r1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46012352_46012564_51_87
46012352_46023360_18_36
Title: Function about the product between 2 Matrix in C 
----------------------------------------

int main () {
    int i, j, h, k;
    int r1, r2, c1, c2;
    printf ("Inserire la dimensione R delle righe e C delle colonne:\n");
    scanf ("%d%d", & r1, & c1);
    int **matrix1 = (int **) malloc (r1 * sizeof (int *));
    printf ("\n**RIEMPIRE LA MATRICE 1 **\n");
    for (i = 0; i < r1; i++) {
        matrix1[i] = (int *) malloc (c1 * sizeof (int));
        for (j = 0; j < c1; j++) {
            scanf ("%d", & matrix1 [i] [j]);
        }
    }
    printf ("Inserire la dimensione R delle righe e C delle colonne:\n");
    scanf ("%d%d", & r2, & c2);
    int **matrix2 = (int **) malloc (r2 * sizeof (int *));
    printf ("\n**RIEMPIRE LA MATRICE 2 **\n");
    for (i = 0; i < r2; i++) {
        matrix2[i] = (int *) malloc (c2 * sizeof (int));
        for (j = 0; j < c2; j++) {
            scanf ("%d", & matrix2 [i] [j]);
        }
    }
    int **matrix3;
    matrix3 = (int **) malloc (r1 * sizeof (int *));
    for (i = 0; i < r1; i++) {
        matrix3[i] = (int *) malloc (c2 * sizeof (int));
    }
    if (r1 != c2) {
        printf ("PROD NON ESEGUIBILE");
        exit (1);
    }
    printf ("\n****PROD MATRIX*****\n");
    matrixprod (matrix3, matrix1, matrix2, r1, c1, r2, c2);
    printmatrix (matrix3, r1, c2);
    return 0;
}
----------------------------------------

int main () {
    mtrx matrix_1;
    mtrx matrix_2;
    read_mtrx (& matrix_1);
    read_mtrx (& matrix_2);
    if (matrix_1.cols != matrix_2.rows)
        error_exit ("the number of columns of the 1st matrix must equal the number " "of rows of the 2nd matrix.");
    mtrx matrix_product = multiply_mtrxs (&matrix_1, &matrix_2);
    print_mtrx (& matrix_product);
    free_values_memory (& matrix_1);
    free_values_memory (& matrix_2);
    free_values_memory (& matrix_product);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46012352_46012564_6_14
46012352_46012863_51_59
Title: Function about the product between 2 Matrix in C 
----------------------------------------

void printmatrix (int **matrix, int r, int c) {
    int i, j;
    for (i = 0; i < r; i++) {
        printf ("\n");
        for (j = 0; j < c; j++) {
            printf ("-%d-", matrix [i] [j]);
        }
    }
}
----------------------------------------

void printmatrix (int **matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf (" %d", matrix [i] [j]);
        }
        printf ("\n");
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46012352_46012863_81_99
46012352_46023360_18_36
Title: Function about the product between 2 Matrix in C 
----------------------------------------

int main (void) {
    int r1, r2, c1, c2;
    int **matrix1, **matrix2, **matrix3;
    if (!(matrix1 = read_matrix (&r1, &c1)) || !(matrix2 = read_matrix (&r2, &c2)))
        return 1;
    if (c1 != r2) {
        printf ("PROD NON ESEGUIBILE");
        exit (1);
    }
    printf ("\n****PROD MATRIX*****\n");
    matrix3 = matrixprod (matrix1, matrix2, r1, c1, r2, c2);
    if (matrix3) {
        printmatrix (matrix3, r1, c2);
        free_matrix (matrix3, r1);
    }
    free_matrix (matrix2, r2);
    free_matrix (matrix1, r1);
    return 0;
}
----------------------------------------

int main () {
    mtrx matrix_1;
    mtrx matrix_2;
    read_mtrx (& matrix_1);
    read_mtrx (& matrix_2);
    if (matrix_1.cols != matrix_2.rows)
        error_exit ("the number of columns of the 1st matrix must equal the number " "of rows of the 2nd matrix.");
    mtrx matrix_product = multiply_mtrxs (&matrix_1, &matrix_2);
    print_mtrx (& matrix_product);
    free_values_memory (& matrix_1);
    free_values_memory (& matrix_2);
    free_values_memory (& matrix_product);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46016118_46016745_32_49
46016118_46016778_37_47
Title: C using enum to shorten code 
----------------------------------------

int main (void) {
    user u;
    u.empty = false;
    u.lineNumber = 1;
    u.errMessage = "no error";
    parseHelper (& u, password, "secret");
    parseHelper (& u, username, "me");
    parseHelper (& u, uid, "0");
    parseHelper (& u, gid, "1");
    parseHelper (& u, gecos, "Yours Truly");
    parseHelper (& u, dir, "/home/me");
    parseHelper (& u, shell, "/bin/sea");
    printf ("%s:%s:%s:%s:%s:%s:%s\n", u.u.f.username, u.u.f.password, u.u.f.uid, u.u.f.gid, u.u.f.gecos, u.u.f.dir, u.u.f.shell);
    return 0;
}
----------------------------------------

int main () {
    parseHelper (username);
    parseHelper (password);
    parseHelper (uid);
    parseHelper (gid);
    parseHelper (gecos);
    parseHelper (dir);
    parseHelper (shell);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46022677_46022735_3_16
46022677_46025092_4_22
Title: Variable Defined by Input 
----------------------------------------

int main (void) {
    int num;
    scanf ("%d", & num);
    for (int i = 2; i <= num; i++) {
        for (int j = 2; j <= i; j++) {
            if (i == j)
                printf ("%d\n", i);
            else if (i % j == 0)
                break;
        }
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int max;
    if (argc <= 1) {
        fprintf (stderr, "usage: %s max\n", argv [0]);
        exit (1);
    }
    max = atoi (argv[1]);
    for (int i = 2; i < max; i++) {
        for (int j = 2; j <= i; j++) {
            if (i == j)
                printf ("%d\n", i);
            else if (i % j == 0)
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46027254_46027503_1_28
46027254_46027640_1_19
Title: "I got a ""Warning: Array subscript have type 'char'"" on Code::Block IDE?" 
----------------------------------------

unsigned char fancyMostFrequentChar (unsigned char c, ... ) {
    unsigned char j = '\0';
    int max = 0;
    int fre [256] = {0};
    unsigned char temp;
    va_list argp;
    if (c == '\0')
        return '\0';
    va_start (argp, c);
    while ((temp = va_arg (argp, unsigned char)) != '\0') {
        ++fre[temp];
        if (fre[temp] > max) {
            max = fre[temp];
            j = temp;
        }
    }
    va_end (argp);
    return j;
}
----------------------------------------

char fancyMostFrequentChar (int c, ... ) {
    int fre [256] = {0};
    char temp, res = (char) c;
    if (res != '\0') {
        va_list argp;
        va_start (argp, c);
        ++fre[(unsigned char) res];
        while ((temp = va_arg (argp, char)) != '\0') {
            if (++ fre [(unsigned char) temp] > fre [(unsigned char) res]) {res = temp;
        }
        va_end (argp);
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46045275_46045329_6_14
46045275_46046273_6_14
Title: Linked list: how to make sorter checker in C? 
----------------------------------------

int isItSorted (Node *pHead) {
    while (pHead != NULL && pHead->pNext != NULL) {
        if (pHead->data > pHead->pNext->data)
            return 0;
        else
            pHead = pHead->pNext;
    }
    return 1;
}
----------------------------------------

int isItSorted (Node *pHead) {
    while (pHead != NULL) {
        if (pHead->next != NULL && pHead->data > pHead->pNext->data) {
            return 0;
        }
        pHead = pHead->pNext;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46059131_46059989_21_41
46059131_46060988_201_260
Title: Pointer within struct to dynamic array of structures C 
----------------------------------------

int main () {
    Detail_t data;
    data.power = data.t1 = data.dT = 1;
    Detail_t data2;
    data2.power = data2.t1 = data2.dT = 2;
    Base_t bases [10];
    int size = 1;
    bases[0].data = NULL;
    bases[0].data = (Detail_t *) realloc (bases[0].data, size * sizeof (Detail_t));
    if (bases[0].data != NULL) {
        bases[0].data[0] = data;
    }
    size = 2;
    bases[0].data = (Detail_t *) realloc (bases[0].data, size * sizeof (Detail_t));
    if (bases[0].data != NULL) {
        bases[0].data[1] = data2;
    }
    printf ("%d\n", bases [0].data [0].power);
    printf ("%d", bases [0].data [1].power);
    free (bases [0].data);
}
----------------------------------------

int main (int argC, char *argV []) {
    int rCode = SUCCESS;
    Base_t *baset_A = NULL;
    uint8_t uuid [16] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
    rCode = AllocBaseT (&baset_A, uuid);
    if (rCode) {
        fprintf (stderr, "AllocBaseT() reports: %d %s\n", rCode, strerror (rCode));
        goto CLEANUP;
    }
    rCode = AppendData (baset_A, 1, 1000, 1111);
    if (rCode) {
        fprintf (stderr, "AppendData() reports: %d %s\n", rCode, strerror (rCode));
        goto CLEANUP;
    }
    rCode = AppendData (baset_A, 2, 2000, 2222);
    if (rCode) {
        fprintf (stderr, "AppendData() reports: %d %s\n", rCode, strerror (rCode));
        goto CLEANUP;
    }
    rCode = AppendData (baset_A, 3, 3000, 3333);
    if (rCode) {
        fprintf (stderr, "AppendData() reports: %d %s\n", rCode, strerror (rCode));
        goto CLEANUP;
    }
    rCode = DumpBaseT (baset_A);
    if (rCode) {
        fprintf (stderr, "DumpBaseT() reports: %d %s\n", rCode, strerror (rCode));
        goto CLEANUP;
    }
CLEANUP :
    if (baset_A) {
        int rc = FreeBaseT (&baset_A);
        if (rc)
            fprintf (stderr, "FreeBaseT() reports: %d %s\n", rCode, strerror (rCode));
    }
    return (rCode);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46070363_46070434_1_15
46070363_46079879_1_14
Title: How to use strchr() multiple times to find the nth occurrence 
----------------------------------------

const char *nth_strchr (const char *s, int c, int n) {
    for (;;) {
        if (n <= 0)
            return NULL;
        const char *h = strchr (s, c);
        if (h == NULL)
            return NULL;
        if (--n == 0)
            return h;
        s = h + 1;
    }
    return NULL;
}
----------------------------------------

const char *nth_strchr (const char *s, int c, int n) {
    const char *nth = s;
    assert (c != '\0');
    for (int i = 0; i < n; i++) {
        if ((nth = strchr (nth, c)) == 0)
            break;
        nth++;
    }
    return nth;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46086370_46086438_31_41
46086370_46086534_28_40
Title: """Redefinition - Different Basic Types"" Error while working with pointers in C" 
----------------------------------------

void Reversed (char *name) {
    char temp [13];
    int count = 0;
    for (int i = strlen (name); i > 0; i--) {
        temp[count] = *(name + i);
        count++;
    }
    printf ("%s\n", temp);
}
----------------------------------------

void Reversed (char *name) {
    char temp [13];
    int count = 0;
    for (int i = strlen (name); i > 0; i--) {
        temp[count] = *(name + i);
        count++;
    }
    temp[strlen (name)] = '\0';
    printf ("%s\n", temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46089625_46089804_1_10
46089625_46089826_20_31
Title: Passing a structure to a function 
----------------------------------------

void inputstudent (struct student *s) {
    printf ("Enter the surname: ");
    scanf ("%s", s -> surname);
    printf ("Enter the other name: ");
    scanf ("%s", s -> oname);
    printf ("Enter the age: ");
    scanf ("%d", & s -> age);
    printf ("Enter the address: ");
    scanf ("%s", s -> address);
}
----------------------------------------

void inputstudent (struct student *pStudent) {
    printf ("Enter the surname: ");
    scanf ("%s", pStudent -> surname);
    printf ("Enter the other name: ");
    scanf ("%s", pStudent -> oname);
    printf ("Enter the age: ");
    scanf ("%d", & pStudent -> age);
    printf ("Enter the address: ");
    scanf ("%s", pStudent -> address);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46089625_46089826_20_31
46089625_46089859_22_33
Title: Passing a structure to a function 
----------------------------------------

void inputstudent (struct student *pStudent) {
    printf ("Enter the surname: ");
    scanf ("%s", pStudent -> surname);
    printf ("Enter the other name: ");
    scanf ("%s", pStudent -> oname);
    printf ("Enter the age: ");
    scanf ("%d", & pStudent -> age);
    printf ("Enter the address: ");
    scanf ("%s", pStudent -> address);
}
----------------------------------------

void inputstudent (struct student *s) {
    printf ("Enter the surname: ");
    scanf ("%s", s -> surname);
    printf ("Enter the other name: ");
    scanf ("%s", s -> oname);
    printf ("Enter the age: ");
    scanf ("%d", & s -> age);
    printf ("Enter the address: ");
    scanf ("%s", s -> address);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46113825_46114136_6_22
46113825_46114198_7_27
Title: Code crashing while allocating memory in the heap for holding the array of pointers to characters 
----------------------------------------

static void getList (char ***pppclist, int *n) {
    int i = 0;
    printf ("Enter the number of items in the List: ");
    scanf ("%d", n);
    *pppclist = (char **) malloc (*n * sizeof (char *));
    for (i = 0; i < *n; i++) {
        (*pppclist)[i] = (char *) malloc (MAX_STRING_SIZE * sizeof (char));
        printf ("Enter the %d items in the List: ", i);
        scanf ("%s", (* pppclist) [i]);
    }
}
----------------------------------------

static void getList (char ***pppclist) {
    int n = 0;
    int i = 0;
    printf ("Enter the number of items in the List: ");
    scanf ("%d", & n);
    *pppclist = (char **) malloc ((n + 1) * sizeof (char *));
    (*pppclist)[n] = NULL;
    for (i = 0; i < n; i++) {
        (*pppclist)[i] = (char *) malloc (MAX_STRING_SIZE * sizeof (char));
        printf ("Enter the %d items in the List: ", i);
        scanf ("%s", (* pppclist) [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46113825_46114136_6_22
46113825_46114301_6_23
Title: Code crashing while allocating memory in the heap for holding the array of pointers to characters 
----------------------------------------

static void getList (char ***pppclist, int *n) {
    int i = 0;
    printf ("Enter the number of items in the List: ");
    scanf ("%d", n);
    *pppclist = (char **) malloc (*n * sizeof (char *));
    for (i = 0; i < *n; i++) {
        (*pppclist)[i] = (char *) malloc (MAX_STRING_SIZE * sizeof (char));
        printf ("Enter the %d items in the List: ", i);
        scanf ("%s", (* pppclist) [i]);
    }
}
----------------------------------------

static int getList (char ***pppclist) {
    int n = 0;
    int i = 0;
    printf ("Enter the number of items in the List: ");
    scanf ("%d", & n);
    *pppclist = (char **) malloc (n * sizeof (char *));
    for (i = 0; i < n; i++) {
        (*pppclist)[i] = (char *) malloc (MAX_STRING_SIZE);
        printf ("Enter the %d items in the List: ", i);
        scanf ("%s", (* pppclist) [i]);
    }
    return n;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46113825_46114198_29_45
46113825_46114301_25_38
Title: Code crashing while allocating memory in the heap for holding the array of pointers to characters 
----------------------------------------

int main (int argc, char *argv []) {
    char **ppclist = NULL;
    int index;
    getList (& ppclist);
    index = 0;
    while (ppclist[index]) {
        printf ("The Entered List is:%s\n", ppclist [index]);
        index += 1;
    }
    return (0);
}
----------------------------------------

int main (void) {
    int i;
    char **ppclist = NULL;
    int n = getList (&ppclist);
    for (i = 0; i < n; ++i) {
        printf ("The Entered List is:%s\n", ppclist [i]);
        free (ppclist [i]);
    }
    free (ppclist);
    for (;;)
        ;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46113825_46114198_7_27
46113825_46114301_6_23
Title: Code crashing while allocating memory in the heap for holding the array of pointers to characters 
----------------------------------------

static void getList (char ***pppclist) {
    int n = 0;
    int i = 0;
    printf ("Enter the number of items in the List: ");
    scanf ("%d", & n);
    *pppclist = (char **) malloc ((n + 1) * sizeof (char *));
    (*pppclist)[n] = NULL;
    for (i = 0; i < n; i++) {
        (*pppclist)[i] = (char *) malloc (MAX_STRING_SIZE * sizeof (char));
        printf ("Enter the %d items in the List: ", i);
        scanf ("%s", (* pppclist) [i]);
    }
}
----------------------------------------

static int getList (char ***pppclist) {
    int n = 0;
    int i = 0;
    printf ("Enter the number of items in the List: ");
    scanf ("%d", & n);
    *pppclist = (char **) malloc (n * sizeof (char *));
    for (i = 0; i < n; i++) {
        (*pppclist)[i] = (char *) malloc (MAX_STRING_SIZE);
        printf ("Enter the %d items in the List: ", i);
        scanf ("%s", (* pppclist) [i]);
    }
    return n;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46128813_46129078_30_46
46128813_46129472_7_19
Title: Remove duplicates chars recursively 
----------------------------------------

void remove_duplicates (char *str) {
    if (*str != '\0') {
        if (check (over, *str) == 0) {
            int len = strLen (result);
            result[len++] = *str;
            result[len] = '\0';
            len = strLen (over);
            over[len++] = *str;
            over[len] = '\0';
        }
        remove_duplicates (str + 1);
    }
}
----------------------------------------

void remove_duplicates (char *str, char *presult) {
    if (*str != '\0') {
        if (arr[*str] == 0) {
            *presult = *str;
            arr[*str] = 1;
            remove_duplicates (str + 1, presult + 1);
        }
        remove_duplicates (str + 1, presult);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46130032_46130091_9_27
46130032_46130663_4_65
Title: "Array of arrays in C where the arrays are of different length" 
----------------------------------------

int main (void) {
    int i, j;
    struct z x [2];
    double a [2] = {1.0, 2.0};
    double b [4] = {1.0, 2.0, 3.0, 4.0};
    x[0].p = a;
    x[0].size = sizeof a / sizeof (double);
    x[1].p = b;
    x[1].size = sizeof b / sizeof (double);
    for (i = 0; i < 2; ++i) {
        for (j = 0; j < x[i].size; ++j) {
            printf ("x[%d][%d] %f\n", i, j, x [i].p [j]);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int array_1 [] = {1, 2, 3};
    int array_2 [] = {5, 6};
    int array_3 [] = {7, 8, 9, 10};
    int *jagged_array_1 [] = {array_1, array_2, array_3};
    size_t array_sizes [] = {sizeof array_1 / sizeof *array_1, sizeof array_2 / sizeof *array_2, sizeof array_3 / sizeof *array_3};
    for (size_t i = 0; i < 3; i++) {
        for (size_t j = 0; j < array_sizes[i]; j++) {
            printf ("%4d", jagged_array_1 [i] [j]);
        }
        putchar ('\n');
    }
    putchar ('\n');
    int jagged_array_2 [3] [5] = {{0}};
    jagged_array_2[0][0] = sizeof array_1 / sizeof *array_1;
    memcpy (& jagged_array_2 [0] [1], array_1, sizeof array_1);
    jagged_array_2[1][0] = sizeof array_2 / sizeof *array_2;
    memcpy (& jagged_array_2 [1] [1], array_2, sizeof array_2);
    jagged_array_2[2][0] = sizeof array_3 / sizeof *array_3;
    memcpy (& jagged_array_2 [2] [1], array_3, sizeof array_3);
    for (int m = 0; m < 3; m++) {
        for (int n = 0; n < jagged_array_2[m][0]; n++) {
            printf ("%4d", jagged_array_2 [m] [n + 1]);
        }
        putchar ('\n');
    }
    putchar ('\n');
    int jagged_array_3 [3] [5] = {{0}};
    memcpy (jagged_array_3 [0], array_1, sizeof array_1);
    jagged_array_3[0][sizeof array_1 / sizeof *array_1] = -1;
    memcpy (jagged_array_3 [1], array_2, sizeof array_2);
    jagged_array_3[1][sizeof array_2 / sizeof *array_2] = -1;
    memcpy (jagged_array_3 [2], array_3, sizeof array_3);
    jagged_array_3[2][sizeof array_3 / sizeof *array_3] = -1;
    for (size_t i = 0; i < 3; i++) {
        for (size_t j = 0; jagged_array_3[i][j] != -1; j++) {
            printf ("%4d", jagged_array_3 [i] [j]);
        }
        putchar ('\n');
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46137137_46137243_2_16
46137137_46137403_6_49
Title: How to take input from multiple line or different line in c programming? 
----------------------------------------

int main () {
    int t, count, i;
    char s [100];
    scanf ("%d\n", & t);
    while (t--) {
        gets (s);
        count = 1;
        i = 0;
        while (s[i] != '\0') {
            if (s[i] == ' ' && s[i + 1] != ' ')
                count++;
            i++;
        }
        printf ("%d\n", count);
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i, j;
    char c;
    FILE *fp;
    fp = fopen ("example.txt", "r");
    fscanf (fp, "%d", & i);
    j = i;
    int *count = (int) calloc (sizeof (int), i);
    while (i) {
        while (1) {
            fscanf (fp, "%d", & n);
            count[j - i]++;
            c = fgetc (fp);
            if (c == '\n' || c == -1) {
                break;
            }
        }
        i--;
    }
    fclose (fp);
    for (i = 0; i < j; i++)
        printf ("%d\n", count[i]);
    free (count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46137137_46137243_2_16
46137137_46137732_4_30
Title: How to take input from multiple line or different line in c programming? 
----------------------------------------

int main () {
    int t, count, i;
    char s [100];
    scanf ("%d\n", & t);
    while (t--) {
        gets (s);
        count = 1;
        i = 0;
        while (s[i] != '\0') {
            if (s[i] == ' ' && s[i + 1] != ' ')
                count++;
            i++;
        }
        printf ("%d\n", count);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buff [32];
    fgets (buff, sizeof buff, stdin);
    int number_of_lines;
    sscanf (buff, "%d", & number_of_lines);
    while (number_of_lines--) {
        int ch;
        int count_numbers = 0;
        while ((ch = getchar ()) != EOF && ch != '\n') {
            if (isspace (ch))
                continue;
            int i = 0;
            buff[i++] = ch;
            while ((ch = getchar ()) != EOF && !isspace (ch) && i < sizeof (buff) - 1)
                buff[i++] = ch;
            buff[i] = 0;
            ungetc (ch, stdin);
            int num, len;
            if (sscanf (buff, "%d%n", &num, &len) == 1 && !buff[len]) {
                ++count_numbers;
            }
        }
        printf ("%d\n", count_numbers);
        count_numbers = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46137137_46137403_6_49
46137137_46137732_4_30
Title: How to take input from multiple line or different line in c programming? 
----------------------------------------

int main () {
    int n, i, j;
    char c;
    FILE *fp;
    fp = fopen ("example.txt", "r");
    fscanf (fp, "%d", & i);
    j = i;
    int *count = (int) calloc (sizeof (int), i);
    while (i) {
        while (1) {
            fscanf (fp, "%d", & n);
            count[j - i]++;
            c = fgetc (fp);
            if (c == '\n' || c == -1) {
                break;
            }
        }
        i--;
    }
    fclose (fp);
    for (i = 0; i < j; i++)
        printf ("%d\n", count[i]);
    free (count);
    return 0;
}
----------------------------------------

int main (void) {
    char buff [32];
    fgets (buff, sizeof buff, stdin);
    int number_of_lines;
    sscanf (buff, "%d", & number_of_lines);
    while (number_of_lines--) {
        int ch;
        int count_numbers = 0;
        while ((ch = getchar ()) != EOF && ch != '\n') {
            if (isspace (ch))
                continue;
            int i = 0;
            buff[i++] = ch;
            while ((ch = getchar ()) != EOF && !isspace (ch) && i < sizeof (buff) - 1)
                buff[i++] = ch;
            buff[i] = 0;
            ungetc (ch, stdin);
            int num, len;
            if (sscanf (buff, "%d%n", &num, &len) == 1 && !buff[len]) {
                ++count_numbers;
            }
        }
        printf ("%d\n", count_numbers);
        count_numbers = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46141169_46141344_8_19
46141169_46141663_13_30
Title: Bit field structure arrays in C 
----------------------------------------

int main () {
    int n = 10;
    one xx [n];
    int i;
    for (i = 0; i < n; i++)
        xx[i].x = i;
    for (i = 0; i < n; i++)
        printf ("%d ", xx[i].x);
    return 0;
}
----------------------------------------

int main (void) {
    size_t n = 10;
    Define2BitWordArray (bits, n);
    memset (bits, 0, sizeof bits);
    for (size_t i = 0; i < n; i++) {
        Set2BitWord (bits, i, i);
    }
    for (size_t i = 0; i < n; i++) {
        printf ("%d ", Get2BitWord (bits, i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46179091_46179849_1_29
46179091_46201640_54_80
Title: Where to place printf to avoid multiple printouts in my rpn calculator? 
----------------------------------------

int main (void) {
    char line [MAX_BUFFER_SIZE];
    while (fgets (line, sizeof line, stdin) && line[0] != 'q') {
        double x, stack [MAX_STACK_SIZE];
        double t;
        int i, k = 0, num_operand = 0;
        const char *p = line;
        char buff [MAX_BUFFER_SIZE];
        int n;
        while (sscanf (p, "%s %n", buff, &n) == 1) {
            ...p += n;
        }
        if (num_operand == 1 && k != 0) {k = 0;
        printf ("%lf \n", t);
        fflush (stdout);
    }
}
----------------------------------------

int main (void) {
    while (true) {
        char *token;
        fputs (prompt, stdout);
        fflush (stdout);
        while (token = getToken ()) {
            double value = 0;
            if (IsNumber (token, &value)) {
                push (value);
            }
            else if (*token) {
                strlwr (token);
                struct command *op = bsearch (&token, op_table, sizeof (op_table) / sizeof (*op_table), sizeof (*op_table), cmp_charpp);
                if (op) {
                    op->func ();
                }
                else {
                    fprintf (stderr, "\ncommand '%s' not found!!\n", token);
                    curr_buff = buff;
                    *buff = 0;
                    break;
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46210513_46210658_4_28
46210513_53424155_4_14
Title: How to convert a string to hex and vice versa in c? 
----------------------------------------

int main (void) {
    char text [] = "thank you";
    int len = strlen (text);
    char hex [100], string [50];
    for (int i = 0, j = 0; i < len; ++i, j += 2)
        sprintf (hex +j, "%02x", text[i] & 0xff);
    printf ("'%s' in hex is %s.\n", text, hex);
    len = strlen (hex);
    for (int i = 0, j = 0; j < len; ++i, j += 2) {
        int val [1];
        sscanf (hex + j, "%2x", val);
        string[i] = val[0];
        string[i + 1] = '\0';
    }
    printf ("%s as a string is '%s'.\n", hex, string);
    return 0;
}
----------------------------------------

void main () {
    int i;
    char word [] = "KLNCE";
    char hex [20];
    for (i = 0;
    i < strlen (word);
    i ++) {char temp [5];
    sprintf (temp, "%X", word [i]);
    strcat (hex, temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46218851_46220999_6_35
46218851_46221098_5_22
Title: Char invalid conversion from 'char*' to 'char' [-fpermissive] 
----------------------------------------

int main () {
    char array [] = "5052.4318";
    char *text = array + 3;
    text = array;
    printf ("%s\n", text);
    int text_len = strlen (text);
    for (int i = 1; i <= text_len - 1; i++) {
        if (text[i] == '.') {
            char temp;
            temp = text[i - 1];
            text[i - 1] = text[i];
            text[i] = temp;
        }
    }
    printf ("%s\n", text);
    return 0;
}
----------------------------------------

int main () {
    char text [30] = "5052.4318", temp;
    int text_len = strlen (text), i;
    for (i = 0; i <= text_len - 1; i++) {
        if (text[i] == '.') {
            temp = text[i - 1];
            text[i - 1] = text[i];
            text[i] = temp;
        }
    }
    printf ("%s\n", text);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46242809_46243065_1_24
46242809_46243131_1_12
Title: C Program to count substrings 
----------------------------------------

int countSubstr (char string [], char substring []) {
    int subcount = 0;
    size_t sub_len = strlen (substring);
    if (!sub_len)
        return 0;
    for (size_t i = 0; string[i];) {
        size_t j = 0;
        size_t count = 0;
        while (string[i] && string[j] && string[i] == substring[j]) {
            count++;
            i++;
            j++;
        }
        if (count == sub_len) {
            subcount++;
            count = 0;
        }
        else {
            i = i - j + 1;
        }
    }
    return subcount;
}
----------------------------------------

int countSubstr (char string [], char substring []) {
    int len = strlen (string);
    int sublen = strlen (substring);
    int i, j, count = 0;
    for (i = 0; i <= len - sublen; i++) {
        for (j = 0; j < sublen && string[i + j] == substring[j]; j++)
            continue;
        if (j == sublen)
            count++;
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46252594_46252784_3_23
46252594_46252829_4_19
Title: Concatenate first characters from a command line argument in c 
----------------------------------------

int main (int argc, char *argv []) {
    char st [1000];
    size_t i = 0;
    for (int j = 1; j < argc; j++) {
        st[i++] = *argv[j];
        if (j + 1 != argc) {
            st[i++] = ',';
            st[i++] = ' ';
        }
    }
    st[i] = '\0';
    puts (st);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char st [1000] = "";
    --argc, ++argv;
    char *p = st;
    for (int i = 0; i < argc; i++) {
        if (i) {
            strcpy (p, ". ");
            p += 2;
        }
        *p++ = argv[i][0];
    }
    printf ("%s\n", st);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46252808_46254306_4_20
46252808_46254675_10_43
Title: Splitting Strings from file and putting them into array causes program crash 
----------------------------------------

int main (void) {
    FILE *inputfile = fopen ("file.txt", "r");
    char buf [1024];
    int i = 0;
    char fileName [25];
    char words [100] [100];
    char *token;
    for (i = 0; fgets (buf, sizeof (buf), inputfile);) {
        for (token = strtok (buf, " "); token != NULL; token = strtok (NULL, " ")) {
            strcpy (words [i ++], token);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *file;
    char *buf, *token;
    size_t length, read, size;
    assert (argc == 2);
    file = fopen (argv[1], "r");
    assert_msg (file != NULL) {fprintf (stderr, "Error ocurred: %s\n", strerror (errno))
    } token
    = NULL;
    length = read = size = 0;
    while ((read = getline (&token, &length, file)) != -1) {
        token[read - 1] = ' ';
        size += read;
        buf = realloc (buf, size);
        assert (buf != NULL);
        (void) strncat (buf, token, read);
    }
    printf ("%s\n", buf);
    fclose (file);
    free (buf);
    free (token);
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253569_3_24
46253532_46253625_3_29
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    char backspace = 8;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
            }
        }
        if (f == 0)
            printf ("%d,", x);
    }
    printf ("\b");
}
----------------------------------------

int main () {
    int a, b, i, x, c, first = 0, f = 1;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
            }
        }
        if (f == 0) {
            if (first == 0) {
                printf ("%d", x);
            }
            else {
                printf (",%d", x);
            }
            first ++
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253569_3_24
46253532_46253643_3_30
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    char backspace = 8;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
            }
        }
        if (f == 0)
            printf ("%d,", x);
    }
    printf ("\b");
}
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1, flag = 0;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
                break;
            }
        }
        if (f == 0) {
            if (flag == 0) {
                printf ("%d", x);
                flag = 1;
            }
            else
                printf (",%d", x);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253569_3_24
46253532_46253733_3_25
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    char backspace = 8;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
            }
        }
        if (f == 0)
            printf ("%d,", x);
    }
    printf ("\b");
}
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    const char *delim = "";
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
                break;
            }
        }
        if (f == 0) {
            printf ("%s%d", delim, x);
            delim = ", ";
        }
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253569_3_24
46253532_46253807_2_16
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    char backspace = 8;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
            }
        }
        if (f == 0)
            printf ("%d,", x);
    }
    printf ("\b");
}
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    scanf ("%d%d", & a, & b);
    while (a < b) {
        if ((a % 2) == 1) {
            printf ("%d", a);
            if ((a + 1) < b && (a + 2) < b)
                printf (",");
        }
        a = a + 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253625_3_29
46253532_46253733_3_25
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, first = 0, f = 1;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
            }
        }
        if (f == 0) {
            if (first == 0) {
                printf ("%d", x);
            }
            else {
                printf (",%d", x);
            }
            first ++
        }
    }
}
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    const char *delim = "";
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
                break;
            }
        }
        if (f == 0) {
            printf ("%s%d", delim, x);
            delim = ", ";
        }
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253625_3_29
46253532_46253807_2_16
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, first = 0, f = 1;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
            }
        }
        if (f == 0) {
            if (first == 0) {
                printf ("%d", x);
            }
            else {
                printf (",%d", x);
            }
            first ++
        }
    }
}
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    scanf ("%d%d", & a, & b);
    while (a < b) {
        if ((a % 2) == 1) {
            printf ("%d", a);
            if ((a + 1) < b && (a + 2) < b)
                printf (",");
        }
        a = a + 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253643_3_30
46253532_46253733_3_25
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1, flag = 0;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
                break;
            }
        }
        if (f == 0) {
            if (flag == 0) {
                printf ("%d", x);
                flag = 1;
            }
            else
                printf (",%d", x);
        }
    }
}
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    const char *delim = "";
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
                break;
            }
        }
        if (f == 0) {
            printf ("%s%d", delim, x);
            delim = ", ";
        }
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253643_3_30
46253532_46253807_2_16
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1, flag = 0;
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
                break;
            }
        }
        if (f == 0) {
            if (flag == 0) {
                printf ("%d", x);
                flag = 1;
            }
            else
                printf (",%d", x);
        }
    }
}
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    scanf ("%d%d", & a, & b);
    while (a < b) {
        if ((a % 2) == 1) {
            printf ("%d", a);
            if ((a + 1) < b && (a + 2) < b)
                printf (",");
        }
        a = a + 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46253532_46253733_3_25
46253532_46253807_2_16
Title: How to remove the last comma in comma separated prime numbers within a range? 
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    const char *delim = "";
    scanf ("%d%d", & a, & b);
    for (x = a; x <= b; (x++, f = 0)) {
        for (i = 2; i < x; i++) {
            if (x % i == 0) {
                f = 1;
                break;
            }
        }
        if (f == 0) {
            printf ("%s%d", delim, x);
            delim = ", ";
        }
    }
    putchar ('\n');
}
----------------------------------------

int main () {
    int a, b, i, x, c, f = 1;
    scanf ("%d%d", & a, & b);
    while (a < b) {
        if ((a % 2) == 1) {
            printf ("%d", a);
            if ((a + 1) < b && (a + 2) < b)
                printf (",");
        }
        a = a + 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46261724_46261903_3_19
46261724_46261932_2_17
Title: What is the error in the following factorial find C program? 
----------------------------------------

int main () {
    int num, temp, i;
    printf ("Enter a Num who's factorial is need to be find : ");
    scanf ("%d", & num);
    printf ("num = %d\n", num);
    temp = num;
    printf ("temp =  %d\n", temp);
    i = 1;
    while ((num - i) > 0) {
        temp = temp * (num - i);
        i++;
        printf (" i = %d\n ", i);
    }
    printf ("fact = %d \n ", temp);
    return 0;
}
----------------------------------------

int main () {
    int num, temp;
    printf ("Enter a Num who's factorial is need to be find : ");
    scanf ("%d", & num);
    printf ("num = %d\n", num);
    temp = 1;
    while (num > 0) {
        printf (" num= %d\n ", num);
        temp = temp * num;
        num--;
    }
    printf ("fact = %d \n ", temp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46261724_46261903_3_19
46261724_46262457_3_15
Title: What is the error in the following factorial find C program? 
----------------------------------------

int main () {
    int num, temp, i;
    printf ("Enter a Num who's factorial is need to be find : ");
    scanf ("%d", & num);
    printf ("num = %d\n", num);
    temp = num;
    printf ("temp =  %d\n", temp);
    i = 1;
    while ((num - i) > 0) {
        temp = temp * (num - i);
        i++;
        printf (" i = %d\n ", i);
    }
    printf ("fact = %d \n ", temp);
    return 0;
}
----------------------------------------

int main (void) {
    int num, res, i;
    printf ("Enter a number whose factorial to compute: ");
    if (scanf ("%d", &num) == 1) {
        res = 1;
        for (i = 1; i <= num; i++) {
            res = res * i;
        }
        printf ("%d! = %d\n", num, res);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46261724_46261932_2_17
46261724_46262457_3_15
Title: What is the error in the following factorial find C program? 
----------------------------------------

int main () {
    int num, temp;
    printf ("Enter a Num who's factorial is need to be find : ");
    scanf ("%d", & num);
    printf ("num = %d\n", num);
    temp = 1;
    while (num > 0) {
        printf (" num= %d\n ", num);
        temp = temp * num;
        num--;
    }
    printf ("fact = %d \n ", temp);
    return 0;
}
----------------------------------------

int main (void) {
    int num, res, i;
    printf ("Enter a number whose factorial to compute: ");
    if (scanf ("%d", &num) == 1) {
        res = 1;
        for (i = 1; i <= num; i++) {
            res = res * i;
        }
        printf ("%d! = %d\n", num, res);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46283541_46283860_13_32
46283541_46284191_4_43
Title: Comparing digits of two inputs to see if they are the same 
----------------------------------------

int main (void) {
    char num1 [32];
    char num2 [32];
    int count = 0;
    printf ("Digit 1\n>> ");
    if (scanf ("%5s", num1) != 1 || !is_numeric (num1))
        return (0);
    printf ("Digit 2\n>> ");
    if (scanf ("%5s", num2) != 1 || !is_numeric (num2))
        return (0);
    if (strlen (num1) != 5 || strlen (num2) != 5)
        return (0);
    for (int i = 0; i < 5; ++i)
        if (num1[i] == num2[i])
            ++count;
    printf ("%d\n", count);
    return (0);
}
----------------------------------------

int main (void) {
    char str1 [32];
    char str2 [32];
    unsigned int i1, i2;
    int i;
    int cnt = 0;
    printf ("Input first 5 digit number:\n");
    if (scanf (" %u", &i1) != 1) {
        printf ("input error\n");
        return 0;
    }
    snprintf (str1, 32, "%u", i1);
    if (strlen (str1) != 5) {
        printf ("input error - not 5 digits\n");
        return 0;
    }
    printf ("Input second 5 digit number:\n");
    if (scanf (" %u", &i2) != 1) {
        printf ("input error\n");
        return 0;
    }
    snprintf (str2, 32, "%u", i2);
    if (strlen (str2) != 5) {
        printf ("input error - not 5 digits\n");
        return 0;
    }
    for (i = 0; i < 5; ++i) {
        if (str1[i] == str2[i])
            ++cnt;
    }
    printf ("Matching digits %d\n", cnt);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46283897_46284355_4_12
46283897_46284436_3_12
Title: A recursive function that determines whether the digits of a number are in ascending order 
----------------------------------------

int main (int argc, char **args) {
    int num = 0;
    printf ("Insert a number:\n");
    scanf ("%d", & num);
    if (isAscending (num) == 0)
        printf ("Ascending\n");
    else
        printf ("Not ascending\n");
}
----------------------------------------

int main () {
    int result;
    result = isAscending (2589);
    if (result == 0) {
        printf ("The number is in ascending order!\n");
    }
    else {
        printf ("The number is not in ascending order!\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46283897_46284355_4_12
46283897_46307816_20_28
Title: A recursive function that determines whether the digits of a number are in ascending order 
----------------------------------------

int main (int argc, char **args) {
    int num = 0;
    printf ("Insert a number:\n");
    scanf ("%d", & num);
    if (isAscending (num) == 0)
        printf ("Ascending\n");
    else
        printf ("Not ascending\n");
}
----------------------------------------

int main (int argc, char **argv) {
    if (isAscending (atoi (argv[1]))) {
        printf ("The number is in ascending order!\n");
    }
    else {
        printf ("The number is not in ascending order!\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46283897_46284436_13_25
46283897_46307816_4_18
Title: A recursive function that determines whether the digits of a number are in ascending order 
----------------------------------------

int isAscending (int num) {
    int new = num / 10;
    int result = 0;
    if ((num % 10) == 0) {
        return 0;
    }
    else if ((num % 10) > (new % 10)) {
        return isAscending (num / 10);
    }
    else {
        return 1 + isAscending (num / 10);
    }
}
----------------------------------------

int isAscending (int num) {
    int quotient = num / 10;
    int remainder = num % 10;
    if (quotient != 0) {
        int result = isAscending (quotient);
        if (result == 0 || result >= remainder) {
            return 0;
        }
    }
    return remainder;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46283897_46284436_13_25
46283897_46309684_1_13
Title: A recursive function that determines whether the digits of a number are in ascending order 
----------------------------------------

int isAscending (int num) {
    int new = num / 10;
    int result = 0;
    if ((num % 10) == 0) {
        return 0;
    }
    else if ((num % 10) > (new % 10)) {
        return isAscending (num / 10);
    }
    else {
        return 1 + isAscending (num / 10);
    }
}
----------------------------------------

int isAscending (int num) {
    for (;;) {
        int new = num / 10;
        if (new == 0) {
            return 1;
        }
        if (num % 10 <= new % 10) {
            return 0;
        }
        num = new;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46283897_46284436_3_12
46283897_46307816_20_28
Title: A recursive function that determines whether the digits of a number are in ascending order 
----------------------------------------

int main () {
    int result;
    result = isAscending (2589);
    if (result == 0) {
        printf ("The number is in ascending order!\n");
    }
    else {
        printf ("The number is not in ascending order!\n");
    }
}
----------------------------------------

int main (int argc, char **argv) {
    if (isAscending (atoi (argv[1]))) {
        printf ("The number is in ascending order!\n");
    }
    else {
        printf ("The number is not in ascending order!\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46283897_46307816_4_18
46283897_46309684_1_13
Title: A recursive function that determines whether the digits of a number are in ascending order 
----------------------------------------

int isAscending (int num) {
    int quotient = num / 10;
    int remainder = num % 10;
    if (quotient != 0) {
        int result = isAscending (quotient);
        if (result == 0 || result >= remainder) {
            return 0;
        }
    }
    return remainder;
}
----------------------------------------

int isAscending (int num) {
    for (;;) {
        int new = num / 10;
        if (new == 0) {
            return 1;
        }
        if (num % 10 <= new % 10) {
            return 0;
        }
        num = new;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46284006_46284698_7_29
46284006_46327543_7_45
Title: simulation algorithm implementation in C/C++ 
----------------------------------------

int main (void) {
    t[0][0] = true;
    t[0][1] = true;
    int ip = 0;
    while (t[N - 1][0] == 0 && t[N - 1][1] == 0) {
        ip = !ip;
        for (int j = 1; j < N; j++) {
            if (t[j - 1][!ip]) {
                t[j][ip] = !t[j][!ip];
            }
            else {
                t[j][ip] = t[j][!ip];
            }
        }
    }
    int cpt1 = 0;
    for (int j = 0; j < N; j++) {
        cpt1 += t[j][1];
    }
    printf ("N=%d cpt=%d\n", N, cpt1);
    return 0;
}
----------------------------------------

int main (void) {
    int numLitLights = 0;
    t1[0] = 1;
    while (t1[7999] != 1) {
        for (int j = 0; j < 7999; j++) {
            if (t1[j]) {
                t2[j + 1] = (t1[j + 1]) ? 0 : 1;
            }
        }
        for (int j = 0; j < 8000; j++) {
            t1[j] = t2[j];
        }
    }
    for (int j = 0; j < 8000; j++) {
        if (t1[j]) {
            numLitLights++;
        }
    }
    printf ("number of lit lamps: %d\n", numLitLights);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46285537_46285565_1_13
46285537_46286105_1_14
Title: "Binary search in C always returns false even when value is contained in sorted array" 
----------------------------------------

bool search (int value, int values [], int n) {
    if (n % 2 == 0) {
        search_even (value, values, n);
    }
    else {
        search_odd (value, values, n);
    }
    return false;
}
----------------------------------------

bool search (int value, const int values [], int n) {
    if (n == 0)
        return false;
    if (value < values[n / 2]) {
        return search (value, values, n / 2);
    }
    if (value > values[n / 2]) {
        return search (value, values +n / 2 + 1, n -n / 2 - 1);
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46305396_46306184_16_32
46305396_46306338_6_21
Title: String - first and last name in alphabetical with capital letter 
----------------------------------------

void findMinMaxStr (char word [] [40], char *first, char *last, int size) {
    int k;
    *first = *last = '\0';
    if (size > 0) {
        strcpy (first, word [0]);
        strcpy (last, word [0]);
        for (k = 1; k < size; k++) {
            if (strcasecmp (last, word[k]) < 0) {
                strcpy (last, word [k]);
            }
            else if (strcasecmp (first, word[k]) > 0) {
                strcpy (first, word [k]);
            }
        }
    }
}
----------------------------------------

void findMinMaxStr (char word [] [N], size_t size, char **first, char **last) {
    *first = *last = word[0];
    for (size_t i = 0; i < size; i++) {
        if (strcmp (word[i], *first) < 0) {
            *first = word[i];
        }
        else if (strcmp (*last, word[i]) < 0) {
            *last = word[i];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46306197_46306487_1_16
46306197_46306583_27_38
Title: Singly Linked List deleting last element 
----------------------------------------

void delete_last (void) {
    if (head != NULL) {
        Node *prev = NULL;
        Node *temp = head;
        while (temp->next != NULL) {
            prev = temp;
            temp = temp->next;
        }
        free (temp);
        if (prev) {
            prev->next = NULL;
        }
        else {
            head = NULL;
        }
    }
}
----------------------------------------

void delete_last () {
    if (head) {
        Node **last = &head;
        while ((*last)->next)
            last = &(*last)->next;
        free (*last);
        *last = NULL;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46307479_46307650_4_18
46307479_46307767_4_18
Title: Program output is different from manual calculation why is this happening? C language 
----------------------------------------

void main () {
    float P, I, A;
    float T, R;
    p ("PRINCIPAL: ");
    s ("%f", & P);
    p ("RATE: ");
    s ("%f", & R);
    p ("TERM: ");
    s ("%f", & T);
    R = R / 100;
    I = P * R * T;
    A = P + I;
    p ("I: %f\nMA: %f", I, A);
    getch ();
}
----------------------------------------

int main () {
    int P;
    float T, R, I, A;
    p ("PRINCIPAL: ");
    s ("%i", & P);
    p ("RATE: ");
    s ("%f", & R);
    p ("TERM: ");
    s ("%f", & T);
    R = R / 100;
    I = P * R * T;
    A = P + I;
    p ("\nI: %f\nMA: %f", I, A);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46307546_46308481_4_22
46307546_46309486_6_32
Title: How to check if two arrays are mirror images of each other in C? 
----------------------------------------

int main (void) {
    int i, j, k, flag = 1;
    int array1 [] [size] = {{2, 5, 10}, {2, 1, 9}}, array2 [] [size] = {{10, 5, 2}, {9, 1, 2}};
    for (i = 0; i < size - 1; i++) {
        for (j = 0, k = size - 1; j < size; j++, k--) {
            if (array1[i][j] != array2[i][k]) {
                flag = 0;
                break;
            }
        }
    }
    if (flag)
        printf ("Mirror image to each other");
    else
        printf ("Not a mirror image to each other");
    return 0;
}
----------------------------------------

int main (void) {
    int array1 [ROWS] [COLS] = {{2, 5, 10}, {2, 1, 9}};
    int array2 [ROWS] [COLS] = {{10, 5, 2}, {9, 1, 2}};
    int xmirror = 1;
    int ymirror = 1;
    int xymirror = 1;
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (array1[i][j] != array2[i][COLS - 1 - j])
                xmirror = 0;
            if (array1[i][j] != array2[ROWS - 1 - i][j])
                ymirror = 0;
            if (array1[i][j] != array2[ROWS - 1 - i][COLS - 1 - j])
                xymirror = 0;
        }
    }
    if (xymirror)
        printf ("Mirror image to each other rowwise and columnwise\n");
    if (ymirror)
        printf ("Mirror image to each other rowwise\n");
    if (xmirror)
        printf ("Mirror image to each other columnwise\n");
    if (xmirror + ymirror + xymirror == 0)
        printf ("Not a mirror image of each other\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46315003_46315165_3_16
46315003_46318878_1_12
Title: Coding bat beginner recursion 
----------------------------------------

int count7 (int i) {
    int rem = i % 10;
    int quo = i / 10;
    if (rem == i) {
        if (rem == 7)
            return 1;
        else
            return 0;
    }
    else {
        return (rem == 7 ? 1 : 0) + count7 (quo);
    }
}
----------------------------------------

int count7 (int curNum) {
    int curModNum = n % 10;
    int curDivNum = n / 10;
    if (currentNum == EMPTY_NUM) {
        return EMPTY_NUM;
    }
    if (curNum == LUCKY_NUM) {
        return ADD_ONE;
    }
    return count7 (curDivNum) + (curModNum == LUCKY_NUM ? ADD_ONE : EMPTY_NUM);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46349336_46350098_3_18
46349336_46350578_3_30
Title: Please explain the output to this code: 
----------------------------------------

int main () {
    if (0xA)
        if (052)
            if ('\xeb')
                if ('\012')
                    printf ("Hello World!")
                else
                    ;
            else
                ;
        else
            ;
    else
        ;
}
----------------------------------------

int main (void) {
    if (0xA) {
        if (052) {
            if ('\xeb') {
                if ('\012') {
                    printf ("Hello World!")
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46372447_46372654_4_14
46372447_46372897_4_25
Title: C program to find total number of digits 
----------------------------------------

int main (void) {
    int c, digits = 0, sum = 0;
    while ((c = getchar ()) != '\n' && c != EOF) {
        if (isdigit (c)) {
            digits++;
            sum += c - '0';
        }
    }
    printf ("%d digits with sum %d\n", digits, sum);
    return 0;
}
----------------------------------------

int main () {
    char c [MAX_SIZE];
    int digit = 0;
    printf ("Enter a line of characters>");
    gets (c);
    for (int i = 0; i < MAX_SIZE; i++) {
        if (c[i] == '\n')
            break;
        if (c[i] >= '0' && c[i] <= '9') {
            digit++;
        }
    }
    printf ("%d\n", digit);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46372447_46372654_4_14
46372447_46376703_5_23
Title: C program to find total number of digits 
----------------------------------------

int main (void) {
    int c, digits = 0, sum = 0;
    while ((c = getchar ()) != '\n' && c != EOF) {
        if (isdigit (c)) {
            digits++;
            sum += c - '0';
        }
    }
    printf ("%d digits with sum %d\n", digits, sum);
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    system ("clear");
    unsigned int i, sum = 0, numberOfDigits;
    puts ("Enter a number");
    scanf ("%u", & i);
    numberOfDigits = (int) (log10 (x) + 1);
    system ("clear");
    while (i != 0) {
        sum += (i % 10);
        i /= 10;
    }
    fprintf (stdout, "The sum is %i\n", sum);
    fflush (stdin);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46372447_46372897_4_25
46372447_46376703_5_23
Title: C program to find total number of digits 
----------------------------------------

int main () {
    char c [MAX_SIZE];
    int digit = 0;
    printf ("Enter a line of characters>");
    gets (c);
    for (int i = 0; i < MAX_SIZE; i++) {
        if (c[i] == '\n')
            break;
        if (c[i] >= '0' && c[i] <= '9') {
            digit++;
        }
    }
    printf ("%d\n", digit);
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    system ("clear");
    unsigned int i, sum = 0, numberOfDigits;
    puts ("Enter a number");
    scanf ("%u", & i);
    numberOfDigits = (int) (log10 (x) + 1);
    system ("clear");
    while (i != 0) {
        sum += (i % 10);
        i /= 10;
    }
    fprintf (stdout, "The sum is %i\n", sum);
    fflush (stdin);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46379190_46379517_3_14
46379190_46380442_4_23
Title: Is there a variant of sscanf with pointer to input string instead of buffers? 
----------------------------------------

int main (int argc, char *argv []) {
    int index1 = -1;
    int end1 = -1;
    int index2 = -1;
    int end2 = -1;
    int index3 = -1;
    int end3 = -1;
    char *str = "abc, 123; xyz";
    sscanf (str, " %n%*[^,]%n, %n%*[^;]%n; %n%*s%n", & index1, & end1, & index2, & end2, & index3, & end3);
    printf ("'%.*s' '%.*s' '%.*s'", end1, str + index1, end2 - index2, str + index2, end3 - index3, str + index3);
    return 0;
}
----------------------------------------

int main (void) {
    char data [] = "The hills are alive with the sound of music";
    char *w [9];
    if (sscanf (data, "%ms %ms %ms %ms %ms %ms %ms %ms %ms", &w[0], &w[1], &w[2], &w[3], &w[4], &w[5], &w[6], &w[7], &w[8]) != 9) {
        fprintf (stderr, "Oops!\n");
        return 1;
    }
    printf ("Forwards: %s\n", data);
    printf ("Reversed:");
    for (int i = 8; i >= 0; i--)
        printf (" %s", w[i]);
    putchar ('\n');
    for (int i = 0; i < 9; i++)
        free (w[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46381474_46381760_7_17
46381474_46381814_2_33
Title: "I can't print my array outside the "" for loop""" 
----------------------------------------

int main () {
    abc ();
    printf ("1 to reset,0 to not");
    scanf ("%d", & y);
    if (y == 1) {
        abc ();
    }
    else {
        printf ("BYE!");
    }
}
----------------------------------------

int main () {
    int measurements [LENGTH];
    int x, i;
    for (x = 0; x < LENGTH; x++) {
        printf ("Enter number #%d: ", x + 1);
        scanf ("%d", & measurements [x]);
        if (measurements[x] == 0) {
            break;
        }
    }
    printf ("\nHere are your measurements:\n");
    for (i = 0; i < x; i++) {
        printf ("%d\n", measurements [i]);
    }
    for (i = 0; i < LENGHT; i++) {
        measurements[i] = 0;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46398773_46399146_24_34
46398773_46399317_25_40
Title: Why am I getting segmentation fault when reversed sorted array is given as input? 
----------------------------------------

void quick_sort (double *a, int lower, int upper) {
    int j;
    if (lower >= upper)
        return;
    else {
        j = partation (a, lower, upper);
        quick_sort (a, lower, j - 1);
        quick_sort (a, j + 1, upper);
    }
}
----------------------------------------

void quick_sort (double *a, int lower, int upper) {
    while (lower < upper) {
        int j = partition (a, lower, upper);
        if (j - lower < upper - j) {
            if (lower < j - 1) {
                quick_sort (a, lower, j - 1);
            }
            lower = j + 1;
        }
        else {
            if (j + 1 < upper) {
                quick_sort (a, j + 1, upper);
            }
            upper = j - 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46411156_46411399_14_31
46411156_46411521_15_32
Title: How to make a list for array elements? 
----------------------------------------

void main () {
    while (1) {
        int counter = 0;
        char choice;
        scanf ("%d", & choice);
        if (choice == 'e') {
            for (int i = 0; i < MAX; i++) {
                printf ("Enter A no\n");
                scanf ("%d", & a [counter] [i]);
            }
            counter++;
        }
        else if (choice == 'v')
            view (counter);
    }
}
----------------------------------------

int main () {
    s = 0;
    while (s < MAXRUN) {
        char choice;
        printf ("\nchoose (e)nter or (v)iew:");
        scanf (" %c", & choice);
        if (choice == 'e') {
            for (x = 0; x < MAX; x++) {
                printf ("Enter value: ");
                scanf ("%d", & a [s] [x]);
            }
            s++;
        }
        else if (choice == 'v') {
            view ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46411156_46411399_14_31
46411156_46412148_15_34
Title: How to make a list for array elements? 
----------------------------------------

void main () {
    while (1) {
        int counter = 0;
        char choice;
        scanf ("%d", & choice);
        if (choice == 'e') {
            for (int i = 0; i < MAX; i++) {
                printf ("Enter A no\n");
                scanf ("%d", & a [counter] [i]);
            }
            counter++;
        }
        else if (choice == 'v')
            view (counter);
    }
}
----------------------------------------

int main () {
    int run = 1, i, j;
    while (run) {
        char choice;
        scanf (" %c", & choice);
        if (choice == 'e') {
            for (i = 0; i < ROW; i++) {
                printf ("\nList of elements for array %d:", i);
                for (j = 0; j < COL; j++) {
                    printf ("\n");
                    printf ("\tEnter value: ");
                    scanf ("%d", & a [i] [j]);
                }
            }
        }
        else if (choice == 'v') {
            view ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46411156_46411521_15_32
46411156_46412148_15_34
Title: How to make a list for array elements? 
----------------------------------------

int main () {
    s = 0;
    while (s < MAXRUN) {
        char choice;
        printf ("\nchoose (e)nter or (v)iew:");
        scanf (" %c", & choice);
        if (choice == 'e') {
            for (x = 0; x < MAX; x++) {
                printf ("Enter value: ");
                scanf ("%d", & a [s] [x]);
            }
            s++;
        }
        else if (choice == 'v') {
            view ();
        }
    }
}
----------------------------------------

int main () {
    int run = 1, i, j;
    while (run) {
        char choice;
        scanf (" %c", & choice);
        if (choice == 'e') {
            for (i = 0; i < ROW; i++) {
                printf ("\nList of elements for array %d:", i);
                for (j = 0; j < COL; j++) {
                    printf ("\n");
                    printf ("\tEnter value: ");
                    scanf ("%d", & a [i] [j]);
                }
            }
        }
        else if (choice == 'v') {
            view ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46426177_46426388_6_21
46426177_46426542_6_21
Title: dynamically memory allocation of a matrix in an array of structure 
----------------------------------------

int main (int argc, char *argv []) {
    int i, j, Nrows =..., Ncols =...;
    libra *arra = calloc (Nframe, sizeof (libra));
    for (i = 0; i < Nframe; i++) {
        arra[i].doubmat = calloc (Nrows, sizeof (double *));
        if (arra[i].doubmat == NULL)
            return;
        for (j = 0; j < Nmol; j++) {
            arra[i].doubmat[j] = calloc (Ncols, sizeof (double));
            if (arra[i].doubmat[j] == NULL)
                return;
        }
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    libra *arra = calloc (Nframe, sizeof (libra));
    for (i = 0; i < Nfr; i++) {
        arra[i].doubmat = calloc (Nmol, sizeof (*arra[i].doubmat));
        for (j = 0; j < Nmol; j++)
            arra[i].doubmat[j] = calloc (Nmol, sizeof (**arra[i].doubmat));
    }
    for (i = 0; i < Nfr; i++) {
        arra[i].cont = calloc (Nmol, sizeof (*arra[i].cont));
        for (j = 0; j < Nmol; j++)
            arra[i].cont[j] = calloc (Nmol, sizeof (**arra[i].cont));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46461424_46461983_1_37
46461424_46461984_9_42
Title: Im trying to use a function to put every 3 characters of a text file into one pointer of arrays. 
----------------------------------------

int main (int ac, char **av) {
    int fd;
    char *str;
    int size;
    int i;
    struct stat sb;
    i = -1;
    if (ac != 2)
        return (84);
    if (!(fd = open (av[1], O_RDONLY)))
        return (84);
    if (stat (av[1], &sb) == -1)
        return (84);
    size = sb.st_size;
    if (!(str = malloc (sizeof (char) * (size + 1))))
        return (84);
    if (read (fd, str, size) == -1)
        return (84);
    str[size + 1] = 0;
    while (str[++i]) {
        printf ("%c", str [i]);
        if (str[i + 1]) {
            printf ("%c", str [i + 1]);
            if (str[i + 2])
                printf ("%c", str[i + 2]);
        }
        printf ("\n");
    }
    free (str);
    return (0);
}
----------------------------------------

int main (int argc, char const *argv []) {
    char *array [MAX_WORDS];
    char buffer [BUFFER_SIZE];
    int buf_pos = 0;
    FILE *fp = stdin;
    int word_count = 0;
    int ch;
    while (word_count < MAX_WORDS && (ch = fgetc (fp)) != EOF) {
        if (isspace (ch))
            continue;
        buffer[buf_pos++ % BUFFER_SIZE] = ch;
        if (buf_pos >= BUFFER_SIZE) {
            array[word_count] = calloc (1, sizeof (BUFFER_SIZE + 1));
            for (int i = 0; i < BUFFER_SIZE; ++i) {
                array[word_count][i] = buffer[(buf_pos + i) % BUFFER_SIZE];
            }
            ++word_count;
        }
    }
    if (0 < buf_pos && buf_pos < BUFFER_SIZE) {
        array[0] = malloc (sizeof (BUFFER_SIZE + 1));
        memcpy (array [0], buffer, buf_pos);
        array[word_count++][buf_pos] = 0;
    }
    fclose (fp);
    for (int i = 0; i < word_count; ++i) {
        printf ("%s\n", array [i]);
        free (array [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46465803_46466011_4_20
46465803_46466248_4_17
Title: how do i find on what place a certain letter is in a sentence? (c programming) 
----------------------------------------

int main () {
    int i;
    char text1 [] = "een stuk text";
    char charYouLookFor = 'k';
    for (i = 0; i < strlen (text1); i++) {
        if (text1[i] == charYouLookFor)
            break;
    }
    printf ("%d", i);
    return 0;
}
----------------------------------------

int main () {
    int i, y;
    char x;
    const char text [] = "een stuk text";
    char letter = 'k';
    const char * const found = strchr (text, letter);
    if (found != 0)
        printf ("%d\n", (int) (found - text));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46469391_46469779_3_25
46469391_46469880_3_19
Title: How to write a series using C for loop? 
----------------------------------------

int main () {
    int n, t = 1, firstPart, sum = 0, i;
    printf ("Enter an integer number:");
    scanf ("%d", & n);
    printf ("The serie is: \n");
    for (i = 1; i <= n; i++) {
        if (i % 2 == 0) {
            firstPart = 1;
        }
        else {
            firstPart = -1;
        }
        t = firstPart * (i * i);
        printf (" %d\t ", t);
        sum = sum + t;
    }
    printf ("\nThe value of the series is: %d\n", sum);
    return (0);
}
----------------------------------------

int main () {
    int n, i, sum = 0, nextTerm, t;
    printf ("Enter an integer number:");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        if (t % 2 == 0) {
            nextTerm = 1;
        }
        else {
            nextTerm = -1;
        }
        t = nextTerm * (i * i);
        sum = sum + t;
    }
    printf ("The value of the series is: %d\n", sum);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46469391_46469779_3_25
46469391_46470590_3_17
Title: How to write a series using C for loop? 
----------------------------------------

int main () {
    int n, t = 1, firstPart, sum = 0, i;
    printf ("Enter an integer number:");
    scanf ("%d", & n);
    printf ("The serie is: \n");
    for (i = 1; i <= n; i++) {
        if (i % 2 == 0) {
            firstPart = 1;
        }
        else {
            firstPart = -1;
        }
        t = firstPart * (i * i);
        printf (" %d\t ", t);
        sum = sum + t;
    }
    printf ("\nThe value of the series is: %d\n", sum);
    return (0);
}
----------------------------------------

int main () {
    int n, nextTerm, sum = 0, i;
    printf ("Enter an integer number:");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        if ((i + 1) % 2 == 0)
            nextTerm = 1;
        else
            nextTerm = -1;
        sum = sum + (nextTerm * i * i);
    }
    printf ("The value of the series is: %d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46469391_46469880_3_19
46469391_46470590_3_17
Title: How to write a series using C for loop? 
----------------------------------------

int main () {
    int n, i, sum = 0, nextTerm, t;
    printf ("Enter an integer number:");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        if (t % 2 == 0) {
            nextTerm = 1;
        }
        else {
            nextTerm = -1;
        }
        t = nextTerm * (i * i);
        sum = sum + t;
    }
    printf ("The value of the series is: %d\n", sum);
    return (0);
}
----------------------------------------

int main () {
    int n, nextTerm, sum = 0, i;
    printf ("Enter an integer number:");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        if ((i + 1) % 2 == 0)
            nextTerm = 1;
        else
            nextTerm = -1;
        sum = sum + (nextTerm * i * i);
    }
    printf ("The value of the series is: %d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46495028_46495762_3_12
46495028_46496714_3_17
Title: how to use recursion to count down after counting up 
----------------------------------------

void count (int n) {
    if (n > 10) {
        printf ("\n");
        return;
    }
    printf ("%d ", n);
    count (n + 1);
    printf ("%d ", n);
}
----------------------------------------

void count (unsigned int n) {
    static unsigned int m;
    printf ("%u ", m);
    if (n != m) {
        ++m;
        count (n);
        --m;
        printf ("%u ", m);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46499205_46499326_11_36
46499205_46499401_31_58
Title: To read a line from STDIN to extract the numeric tokens only using C 
----------------------------------------

int main (void) {
    char input [100];
    int tokens [20], counter = 0;
    fgets (input, sizeof (input), stdin);
    input[strcspn (input, "\n")] = 0;
    char *pch = strtok (input, " ");
    while (pch != NULL) {
        int isNumber = 1;
        for (size_t i = 0; i < strlen (pch); ++i)
            if (!isdigit (pch[i]))
                isNumber = 0;
        if (isNumber)
            tokens[counter++] = atoi (pch);
        pch = strtok (NULL, " ");
    }
    qsort (tokens, counter, sizeof (int), compare);
    for (int i = 0; i < counter; ++i)
        printf ("%d ", tokens[i]);
    if (!counter)
        printf ("NONE FOUND");
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    char inText [] = "hello hi 123  789 45 hi";
    char *pch;
    char *strArray [1024];
    char *ResText = RemoveCharac (inText);
    int i = 0, j;
    printf ("The result is %s\n", ResText);
    pch = strtok (ResText, " ,.-");
    while (pch != NULL) {
        strArray[i] = malloc (strlen (pch) +1);
        strcpy (strArray [i], pch);
        printf ("%s ", pch);
        pch = strtok (NULL, " ,.-");
        i++;
    }
    printf ("\n");
    qsort (strArray, i, sizeof (char *), CompareElements);
    for (j = 0;
    j < i;
    j ++) {printf ("\t %s", strArray [j]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4650489_4650524_5_9
4650489_4650694_3_14
Title: Packing Floats into a long long 
----------------------------------------

uint64_t pack (float a, float b) {
    union converter ca = {
        .f = a
    };
    union converter cb = {
        .f = b
    };
    return ((uint64_t) cb.i << 32) + ca.i;
}
----------------------------------------

long long pack (float lo, float hi) {
    assert (sizeof (float) == 4);
    assert (sizeof (long long) == 8);
    assert (CHAR_BIT == 8);
    uint32_t target;
    memcpy (& target, & lo, sizeof (target));
    long long result = target;
    memcpy (& target, & hi, sizeof (target));
    result += ((long long) target) << 32;
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46509473_46510737_4_107
46509473_46631176_4_34
Title: MPI send receive 
----------------------------------------

int main (int argc, char *argv []) {
    int numtasks, rank, dest, source, rc, count, tag = 1;
    MPI_Status Stat;
    printf ("(INF) will MPI_Init()...\n");
    MPI_Init (& argc, & argv);
    printf ("(INF)      MPI_Init() done.\n");
    MPI_Comm_size (MPI_COMM_WORLD, & numtasks);
    MPI_Comm_rank (MPI_COMM_WORLD, & rank);
    printf ("(INF) I am MPI[%d of %d]\n", rank, numtasks);
    if (rank == 0) {
        dest = 1;
        source = 1;
        rc = MPI_Send (&outmsg, 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
        rc = MPI_Recv (&inmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
        printf ("(INF) I am MPI[%d of %d] having just completed an MPI_Send( ->MPI[%d] ) + MPI_Recv( <-MPI[%d] ). Last RetCODE == %d.\n", rank, numtasks, dest, source, rc);
    }
    else if (rank == 1) {
        dest = 0;
        source = 0;
        rc = MPI_Recv (&inmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
        rc = MPI_Send (&outmsg, 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
        printf ("(INF) I am MPI[%d of %d] having just completed an MPI_Recv( <-MPI[%d] ) + MPI_Send( ->MPI[%d] ). Last RetCODE == %d\n", rank, numtasks, source, dest, rc);
    }
    else if (rank == 2) {
        dest = 3;
        source = 3;
        rc = MPI_Recv (&inmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
        rc = MPI_Send (&outmsg, 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
        printf ("(INF) I am MPI[%d of %d] having just completed an MPI_Recv( <-MPI[%d] ) + MPI_Send( ->MPI[%d] ). Last RetCODE == %d\n", rank, numtasks, source, dest, rc);
    }
    else if (rank == 3) {
        dest = 2;
        source = 2;
        rc = MPI_Send (&outmsg, 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
        rc = MPI_Recv (&inmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
        printf ("(INF) I am MPI[%d of %d] having just completed an MPI_Send( ->MPI[%d] ) + MPI_Recv( <-MPI[%d] ). Last RetCODE == %d\n", rank, numtasks, dest, source, rc);
    }
    else {
        printf ("(INF) I am MPI[%d of %d] will NOP...\n", rank, numtasks);
    }
    rc = MPI_Get_count (&Stat, MPI_CHAR, &count);
    printf ("Task %d: Received %d char(s) from task %d with tag %d\n", rank, count, Stat.MPI_SOURCE, Stat.MPI_TAG);
    printf ("(INF) I am MPI[%d of %d]: will MPI_Finalize()...\n", rank, numtasks);
    MPI_Finalize ();
    printf ("(INF) I am MPI[%d of %d]:      MPI_Finalize() done, will exit()...\n", rank, numtasks);
}
----------------------------------------

int main (argc, argv)
    int argc;
    char *argv [];
{
    int numtasks, rank, dest, source, rc, count, tag = 1;
    char inmsg, outmsg = 'x';
    MPI_Status Stat;
    MPI_Init (& argc, & argv);
    MPI_Comm_size (MPI_COMM_WORLD, & numtasks);
    MPI_Comm_rank (MPI_COMM_WORLD, & rank);
    if (rank % 2 == 0) {
        dest = (rank + 1) % numtasks;
        source = (rank + 1) % numtasks;
        rc = MPI_Send (&outmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD);
        rc = MPI_Recv (&inmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
    }
    else {
        dest = (rank - 1 + numtasks) % numtasks;
        source = (rank - 1 + numtasks) % numtasks;
        rc = MPI_Recv (&inmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
        rc = MPI_Send (&outmsg, 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
    }
    {rc = MPI_Get_count (& Stat, MPI_CHAR, & count);
    printf ("Task %d: Received %d char(s) from task %d with a tag %d \n", rank, count, Stat.MPI_SOURCE, Stat.MPI_TAG);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46512633_46512691_37_45
46512633_46513581_51_61
Title: Adding 2 matrices using pointers 
----------------------------------------

int **add_mat (int a [] [2], int b [] [2], int m, int n) {
    int **c = get (n, m);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            c[i][j] = a[i][j] + b[i][j];
        }
    }
    return c;
}
----------------------------------------

int **add_mat (const int * const *a, const int * const *b, size_t m, size_t n) {
    int **c = create_mat (m, n);
    if (c) {
        for (size_t i = 0; i < m; ++i) {
            for (size_t j = 0; j < n; ++j) {
                c[i][j] = a[i][j] + b[i][j];
            }
        }
    }
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46512633_46512691_47_64
46512633_46513581_63_91
Title: Adding 2 matrices using pointers 
----------------------------------------

int main () {
    int n = 2, m = 2;
    int a [n] [m];
    read_mat (a, n, m);
    int b [n] [m];
    read_mat (b, n, m);
    int **c;
    c = add_mat (a, b, n, m);
    print (c, n, m);
    free2Darray (c, n);
    return 0;
}
----------------------------------------

int main () {
    size_t m = 3;
    size_t n = 3;
    int **a = create_mat (m, n);
    int **b = create_mat (m, n);
    if (!a || !b) {
        printf ("error when allocating matrix\n");
    }
    else {
        read_mat (a, m, n);
        read_mat (b, m, n);
        int **c = add_mat (a, b, m, n);
        if (!c) {
            printf ("error when allocating matrix\n");
        }
        else {
            print_mat (c, m, n);
            free_mat (c, m);
        }
    }
    free_mat (a, m);
    free_mat (b, m);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46523664_46523991_3_30
46523664_46525172_3_28
Title: "Hi I am trying to write a program that shows whether a year is a leap or not and if it is what the sum of its digits is" 
----------------------------------------

int main () {
    int year, sum = 0, r;
    int year_val;
    printf ("Enter a year to check if it is a leap year\n");
    scanf ("%d", & year);
    year_val = year;
    if (year % 400 == 0) {
        for (; year != 0; year = year / 10) {
            r = year % 10;
            sum = sum + r;
        }
        printf ("%d is a leap year and the sum is %d.\n", year_val, sum);
    }
    else if (year % 100 == 0)
        printf ("%d is not a leap year.\n", year);
    else if (year % 4 == 0) {
        for (; year != 0; year = year / 10) {
            r = year % 10;
            sum = sum + r;
        }
        printf ("%d is a leap year and the sum is %d.\n", year_val, sum);
    }
    else
        printf ("%d is not a leap year.\n", year);
    return 0;
}
----------------------------------------

int main (void) {
    int year, sum = 0, y, r;
    printf ("Enter a year to check if it is a leap year\n");
    scanf ("%d", & year);
    if (year % 400 == 0) {
        for (y = year; y != 0; y = y / 10) {
            r = y % 10;
            sum = sum + r;
        }
        printf ("%d is a leap year and the sum is %d.\n", year, sum);
    }
    else if (year % 100 == 0) {
        printf ("%d is not a leap year.\n", year);
    }
    else if (year % 4 == 0) {
        for (y = year; y != 0; y = y / 10) {
            r = year % 10;
            sum = sum + r;
        }
        printf ("%d is a leap year and the sum is %d.\n", year, sum);
    }
    else {
        printf ("%d is not a leap year.\n", year);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46523664_46525172_3_28
46523664_46525420_2_29
Title: "Hi I am trying to write a program that shows whether a year is a leap or not and if it is what the sum of its digits is" 
----------------------------------------

int main (void) {
    int year, sum = 0, y, r;
    printf ("Enter a year to check if it is a leap year\n");
    scanf ("%d", & year);
    if (year % 400 == 0) {
        for (y = year; y != 0; y = y / 10) {
            r = y % 10;
            sum = sum + r;
        }
        printf ("%d is a leap year and the sum is %d.\n", year, sum);
    }
    else if (year % 100 == 0) {
        printf ("%d is not a leap year.\n", year);
    }
    else if (year % 4 == 0) {
        for (y = year; y != 0; y = y / 10) {
            r = year % 10;
            sum = sum + r;
        }
        printf ("%d is a leap year and the sum is %d.\n", year, sum);
    }
    else {
        printf ("%d is not a leap year.\n", year);
    }
    return 0;
}
----------------------------------------

int main () {
    int year, sum = 0, r;
    printf ("Enter a year to check if it is a leap year\n");
    scanf ("%d", & year);
    int temp = year;
    if (year % 400 == 0) {
        for (; year != 0; year = year / 10) {
            r = year % 10;
            sum = sum + r;
        }
        printf ("%d is a leap year and the sum is %d.\n", temp, sum);
    }
    else if (year % 100 == 0)
        printf ("%d is not a leap year.\n", year);
    else if (year % 4 == 0) {
        for (; year != 0; year = year / 10) {
            r = year % 10;
            sum = sum + r;
        }
        printf ("%d is a leap year and the sum is %d.\n", temp, sum);
    }
    else
        printf ("%d is not a leap year.\n", year);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46524726_46525410_1_16
46524726_46525713_6_53
Title: C - realloc() pointer then set value inside function 
----------------------------------------

void read_file (char *path, char **bufptr) {
    FILE *fp = fopen (path, "r");
    if (fp == NULL) {
        perror ("Failed to open file");
        exit (1);
    }
    fseek (fp, 0, SEEK_END);
    long length = ftell (fp);
    rewind (fp);
    *bufptr = realloc (*bufptr, length +1);
    fread (* bufptr, length, 1, fp);
    (*bufptr)[length] = 0;
}
----------------------------------------

long read_file (const char *path, char **bufptr) {
    char *buffer;
    int res;
    size_t read;
    FILE *fp;
    if (path == NULL || bufptr == NULL) {
        perror ("Invalid parameters");
        return -6;
    }
    fp = fopen (path, "rb");
    if (fp == NULL) {
        perror ("Failed to open file");
        return -1;
    }
    res = fseek (fp, 0, SEEK_END);
    if (res != 0) {
        perror ("Failed to seek file");
        fclose (fp);
        return -2;
    }
    long length = ftell (fp);
    if (length <= 0) {
        perror ("Failed ftell");
        fclose (fp);
        return -3;
    }
    rewind (fp);
    buffer = malloc (length +1);
    if (buffer == NULL) {
        perror ("Out of memory");
        fclose (fp);
        return -4;
    }
    read = fread (buffer, 1, length, fp);
    fclose (fp);
    if ((long) read != length) {
        perror ("Failed to read whole file");
        free (buffer);
        return -5;
    }
    buffer[length] = 0;
    *bufptr = buffer;
    return length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46525788_46525987_4_28
46525788_46526213_5_18
Title: Declaring and copying an array of char strings in c 
----------------------------------------

void charConv (char *example []) {
    for (int i = 0; i < 6; i++) {
        example[i] = malloc (4);
    }
    char *y [] = {"cat", "dog", "ate", "RIP", "CSS", "sun"};
    printf ("flag\n");
    for (int i = 0; i < 6; i++) {
        printf ("%s\t", y [i]);
        strcpy (example [i], y [i]);
        printf ("%s\n", example [i]);
    }
}
----------------------------------------

void charConv (char *example [], int num) {
    int i;
    for (i = 0; i < num; i++) {
        example[i] = (char *) malloc (sizeof (char) * 4);
    }
    const char *y [] = {"cat", "dog", "ate", "RIP", "CSS", "sun"};
    for (i = 0; i < num; i++) {
        strcpy (example [i], y [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46527537_46528055_2_34
46527537_46529836_2_26
Title: Finding pairs in an array 
----------------------------------------

main () {
    int arr [10], i, j, pairs = 0, count = 0, prev_element = 0;
    int n;
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%d", & arr [i]);
    }
    prev_element = arr[0];
    count = 1;
    for (i = 1; i < n; i++) {
        if (prev_element == arr[i]) {
            count++;
        }
        else {
            if (count >= 2)
                pairs += count / 2;
            else {
                prev_element = arr[i];
                count = 1;
            }
        }
    }
    printf ("%d", pairs);
}
----------------------------------------

main () {
    int arr [10], check [10], i, j, pairs = 0;
    int n;
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%d", & arr [i]);
        check[i] = 0;
    }
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (arr[i] == arr[j] && check[j] == 0 && check[i] == 0) {
                pairs++;
                check[j] = 1;
                check[i] = 1;
            }
        }
    }
    printf ("%d", pairs);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46530998_46531278_6_47
46530998_46533886_23_35
Title: How to reformat code to output properly? 
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        fprintf (stderr, "error\n");
        return 1;
    }
    char *ptr = argv[1];
    int count [256] = {0};
    while (*ptr) {
        if (!isdigit (*ptr)) {
            count[(unsigned char) *ptr]++;
            ptr++;
        }
        else {
            printf ("error\n");
            return -1;
        }
    }
    int i;
    size_t compCount = 0;
    for (i = 0; i != 256; i++) {
        if (count[i]) {
            compCount += 2;
        }
    }
    int j;
    if (compCount > strlen (argv[1])) {
        printf ("%s\n", argv [1]);
    }
    else {
        for (j = 0; j != 256; j++) {
            if (count[j]) {
                printf ("%c%d", j, count [j]);
            }
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        fprintf (stderr, "usage\n");
        return 1;
    }
    const char *src = argv[1];
    char *dst = malloc (strlen (src) *2 + 1);
    encode (dst, src);
    printf ("%s\n", dst);
    free (dst);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46533435_46533486_1_13
46533435_46548522_25_39
Title: struct problems with malloc 
----------------------------------------

int main (int argc, char const *argv []) {
    struct Person person;
    strcpy (person.name, "Max");
    person.age = 14;
    strcpy (person.job, "firefighter");
    strcpy (person.mainstreet.street, "Fressnitz");
    callbyReference (& person);
    return 0;
}
----------------------------------------

int main (int argc, char const *argv []) {
    struct Person *person;
    person = (struct Person *) malloc (sizeof (struct Person));
    strcpy (person -> name, "Max");
    person->age = 14;
    strcpy (person -> job, "firefighter");
    strcpy (person -> mainstreet.street, "Fressnitz");
    callbyReference (person);
    free (person);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46535359_46535653_1_22
46535359_46541207_5_38
Title: """Guess The Number"" In C But If Statements Don't Work Right" 
----------------------------------------

int main (void) {
    srand (time (NULL));
    int correctnum = rand ();
    int guess;
    int done = 0;
    while (!done) {
        printf ("Enter a number:");
        scanf ("%i", & guess);
        if (guess > correctnum) {
            printf ("Please enter another number, lower this time!");
        }
        else if (guess < correctnum) {
            printf ("Please enter another number, higher this time!");
        }
        else {
            printf ("You are a WINNER!\n");
            printf ("You guessed the number right and it was %i!\n", correctnum);
            done = 1;
        }
    }
}
----------------------------------------

void main () {
    srand (time (NULL));
    int guess;
    int correctnum;
    correctnum = rand () % 100;
#it's better to get a number between 1~100
    int done = 1;
    printf ("guess the number:\t");
    scanf ("%i", & guess);
    while (done) {
        if (guess < correctnum) {
            printf ("Please enter another number, higher this time:\t");
            scanf ("%i", & guess);
        }
        else if (guess > correctnum) {
            printf ("Please enter another number, lower this time:\t");
            scanf ("%i", & guess);
        }
        else if (guess == correctnum) {
            printf ("well done! if you want to play again, input 1, else input 0:\t");
            scanf ("%i", & done);
            if (done == 1) {
                correctnum = rand () % 100;
                printf ("guess the number:\t");
                scanf ("%i", & guess);
            }
        }
    }
    printf ("Hope you had a good time playing the game! See you soon!\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46547309_46548431_11_24
46547309_46550231_10_29
Title: Program stops working and an error message is displayed when i run it 
----------------------------------------

int main () {
    struct student stu2;
    printf ("2nd student name is:  %s \n", stu1.name);
    printf ("second student roll no:  %d \n ", stu1.roll);
    printf ("enter second student data  ");
    scanf ("%d", & stu2.roll);
    printf ("enter second student name  ");
    scanf ("%s", stu2.name);
    printf ("2nd student name is:  %s \n", stu2.name);
    printf ("second student roll no:  %d \n ", stu2.roll);
    return 0;
}
----------------------------------------

int main () {
    studentT stu1, stu2;
    stu1.roll = 100;
    stu1.name = "ram";
    printf ("2nd student name is:  %s \n", stu1.name);
    printf ("second student roll no:  %d \n ", stu1.roll);
    printf ("enter second student data  ");
    scanf ("%d", & stu2.roll);
    printf ("enter second student name  ");
    scanf ("%s", & stu2.name);
    printf ("2nd student name is:  %s \n", stu2.name);
    printf ("second student roll no:  %d \n ", stu2.roll);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46550204_46550786_7_17
46550204_46550833_67_90
Title: Multidimensional manipulation in C by Column 
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    int BASE = 0;
    if (argc > 1) {
        BASE = atoi (argv[1]);
    }
    for (j = 0; j < N; j++) {
        i = (N - (BASE - j)) % N;
        fprintf (stderr, "%d\n", a [i]);
    }
}
----------------------------------------

int main (void) {
    int arr [3] [3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    printf ("Original array\n");
    print_array (3, 3, arr);
    printf ("Column 2 up\n");
    rotate_column_up (2, 3, 3, arr);
    print_array (3, 3, arr);
    printf ("Row 2 rigth\n");
    rotate_row_rigth (2, 3, 3, arr);
    print_array (3, 3, arr);
    printf ("Row 2 left\n");
    rotate_row_left (2, 3, 3, arr);
    print_array (3, 3, arr);
    printf ("Column 2 down\n");
    rotate_column_down (2, 3, 3, arr);
    print_array (3, 3, arr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46551339_46551647_14_37
46551339_46552230_29_46
Title: extract string and integers from text file and put them into array C language 
----------------------------------------

int main () {
    FILE *f = fopen ("file.txt", "r");
    int number;
    int res;
    while ((res = fscanf (f, "%d,", &number)) != EOF) {
        if (res == 1) {
            printf ("number - %d\n", number);
        }
        else {
            char buffer [100];
            if (fscanf (f, "%99[^,]", buffer) == 1) {
                printf ("string - %s\n", buffer);
            }
            if (!skip (f))
                break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int intArray [16] = {0};
    char *stringArray [16] = {NULL};
    readDataByDelimiter (DATAFILE, stringArray, intArray, 16);
    printf ("numbers: \n");
    for (int i = 0; intArray[i]; i++) {
        printf ("%d ", intArray [i]);
    }
    printf ("\nstrings: \n");
    for (int i = 0; stringArray[i]; i++) {
        printf ("%s ", stringArray [i]);
        free (stringArray [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46551339_46551647_14_37
46551339_46552744_10_66
Title: extract string and integers from text file and put them into array C language 
----------------------------------------

int main () {
    FILE *f = fopen ("file.txt", "r");
    int number;
    int res;
    while ((res = fscanf (f, "%d,", &number)) != EOF) {
        if (res == 1) {
            printf ("number - %d\n", number);
        }
        else {
            char buffer [100];
            if (fscanf (f, "%99[^,]", buffer) == 1) {
                printf ("string - %s\n", buffer);
            }
            if (!skip (f))
                break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int iValues [100];
    char sValues [100] [SIZE + 1];
    size_t iCount = 0;
    size_t sCount = 0;
    int r = 1;
    char buf [SIZE + 1] = {0};
    while (strcmp (buf, "end") && r == 1 && iCount < 100 && sCount < 100) {
        if ((r = scanf (FMT (SIZE) "%*c", buf)) == 1) {
            char *chk = 0;
            int tmp = (int) strtol (buf, &chk, 0);
            if (!isspace (*chk) && *chk != 0) {
                strcpy (sValues [sCount ++], buf);
            }
            else {
                iValues[iCount++] = tmp;
            }
        }
    }
    for (size_t i = 0; i < iCount; i++)
        printf ("iValues[%zu] = %d\n", i, iValues[i]);
    for (size_t i = 0; i < sCount; i++)
        printf ("stringValues[%zu] = %s\n", i, sValues[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46551339_46552230_29_46
46551339_46552744_10_66
Title: extract string and integers from text file and put them into array C language 
----------------------------------------

int main () {
    int intArray [16] = {0};
    char *stringArray [16] = {NULL};
    readDataByDelimiter (DATAFILE, stringArray, intArray, 16);
    printf ("numbers: \n");
    for (int i = 0; intArray[i]; i++) {
        printf ("%d ", intArray [i]);
    }
    printf ("\nstrings: \n");
    for (int i = 0; stringArray[i]; i++) {
        printf ("%s ", stringArray [i]);
        free (stringArray [i]);
    }
}
----------------------------------------

int main (void) {
    int iValues [100];
    char sValues [100] [SIZE + 1];
    size_t iCount = 0;
    size_t sCount = 0;
    int r = 1;
    char buf [SIZE + 1] = {0};
    while (strcmp (buf, "end") && r == 1 && iCount < 100 && sCount < 100) {
        if ((r = scanf (FMT (SIZE) "%*c", buf)) == 1) {
            char *chk = 0;
            int tmp = (int) strtol (buf, &chk, 0);
            if (!isspace (*chk) && *chk != 0) {
                strcpy (sValues [sCount ++], buf);
            }
            else {
                iValues[iCount++] = tmp;
            }
        }
    }
    for (size_t i = 0; i < iCount; i++)
        printf ("iValues[%zu] = %d\n", i, iValues[i]);
    for (size_t i = 0; i < sCount; i++)
        printf ("stringValues[%zu] = %s\n", i, sValues[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46576494_46579419_1_13
46576494_46588358_4_23
Title: Parsing item list line by line then character by character 
----------------------------------------

void ParseScriptFile (FILE *File) {
    char Line [1024];
    int ItemID;
    char name [40];
    while (fgets (Line, sizeof (Line), File)) {
        sscanf (Line, "ItemID = %d", & ItemID);
        sscanf (Line, "Name = %[^n]s", name);
    }
    printf ("ItemId= %d\n", ItemID);
    printf ("Name= %s", name);
    fclose (File);
}
----------------------------------------

static void ParseScriptFile (FILE *File) {
    char Line [1024];
    while (fgets (Line, sizeof (Line), File)) {
        if (Line[0] == '#' || Line[0] == '\n')
            continue;
        char *comment_start = strchr (Line, '#');
        if (comment_start != NULL)
            *comment_start = '\0';
        char name [64];
        char value [1024];
        if (sscanf (Line, " %63s = %1023[^\n]", name, value) == 2)
            printf ("Name = [%s] Value = [%s]\n", name, value);
        else
            printf ("Mal-formed line: [%s]\n", Line);
    }
    fclose (File);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46577193_46577286_3_17
46577193_46577343_1_16
Title: Simple if character does not equal 
----------------------------------------

bool encode (char *dst, const char *src) {
    int i = 0;
    char ch;
    while (src[i] != '\0') {
        ch = src[i];
        if (!isdigit (ch)) {
            *dst = 0;
            return false;
        }
        i++;
    }
    return true;
}
----------------------------------------

void encode (char *dst, const char *src) {
    while (1) {
        char ch = *src;
        if (!ch || (ch - '0' >= 0 && ch - '0' <= 9)) {
            *dst = 0;
            return;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46581731_46583966_5_15
46581731_46584824_4_20
Title: C string is being printed out of bounds 
----------------------------------------

int main () {
    char stringone [200] = "who cares if aaa one more light goes out aaa in the sky of a million aaa stars, aaa well i do if the star is you";
    char breaker [10] = "aaa";
    char *token = strtok (stringone, breaker);
    while (token != NULL) {
        printf ("\n %s", token);
        token = strtok (NULL, breaker);
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char *stringone = "who cares if aaa one more light goes out aaa " "in the sky of a million aaa stars, aaa well i" " do if the star is you \0";
    const char *breaker = "aaa";
    const char *p;
    while ((p = strstr (stringone, breaker)) != NULL) {
        printf ("%.*s\n", (int) (p - stringone), stringone);
        stringone = p + strlen (breaker);
    }
    printf ("%s\n", stringone);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46586177_46586433_1_17
46586177_46586572_3_29
Title: C - nested for loop patern 
----------------------------------------

int main () {
    int a, b, c, n;
    scanf ("%d", & n);
    for (a = n; a > 0; a--) {
        for (b = n; b >= a; b--) {
            printf (" ");
        }
        for (c = 1; c <= a; c++) {
            printf ("*");
        }
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    const char c = '5';
    while (1) {
        printf ("Enter a non-negative number (0 - exit): ");
        unsigned int n;
        if (scanf ("%u", &n) != 1 || n == 0)
            break;
        putchar ('\n');
        for (unsigned int i = 0; i < n; i++) {
            unsigned int j = i + 1;
            printf ("%*c", (int) j, c);
            while (j++ < n)
                putchar (c);
            putchar ('\n');
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46610667_46610815_1_13
46610667_46610831_4_19
Title: "How to prevent ""str\0ing"" from escaping during copy function in C?" 
----------------------------------------

int main (void) {
    char a [] = "str\\0ing";
    int len = strlen (a);
    char b [len + 1];
    for (int i = 0; i < len + 1; i++) {
        b[i] = a[i];
    }
    printf ("%s\n", b);
    return 0;
}
----------------------------------------

int main () {
    char a [] = "str\0ing";
    int length = sizeof a / sizeof (char);
    char b [length];
    for (int i = 0; i < length; i++) {
        b[i] = a[i];
    }
    assert (b [0] == 's');
    assert (b [1] == 't');
    assert (b [2] == 'r');
    assert (b [3] == '\0');
    assert (b [4] == 'i');
    assert (b [5] == 'n');
    assert (b [6] == 'g');
    printf ("It works\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46614296_46614458_4_23
46614296_46614828_4_25
Title: palindrome program (not working) i dont know why 
----------------------------------------

int main (void) {
    char arr [100], arr1 [100];
    int i;
    printf ("type in a string\n\n");
    gets (arr);
    int len = strlen (arr);
    strcpy (arr1, arr);
    strrev (arr);
    for (i = 0; i < len; i++) {
        if (arr1[i] != arr[i]) {
            printf ("Not palindrome");
            return 1;
        }
    }
    printf ("Palindrome");
    return 0;
}
----------------------------------------

int main (void) {
    char arr [100] = "";
    int first = 0;
    int last = 0;
    printf ("type in a string\n\n");
    if (!fgets (arr, sizeof arr, stdin)) {
        printf ("fgets problem\n");
        return 0;
    }
    arr[strcspn (arr, "\n")] = '\0';
    for (first = 0, last = strlen (arr) - 1; first <= last; first++, last--) {
        if (arr[first] != arr[last]) {
            printf ("%s is not a palindrome\n", arr);
            return 0;
        }
    }
    printf ("%s is a palindrome\n", arr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46616044_46616122_5_75
46616044_46616248_1_64
Title: Segmentation fault when two matrices size are over 800*800 
----------------------------------------

int benchmark (void) {
    int N;
    int r, c;
    int random;
    int a = rand () % 20;
    printf ("Enter the size(N*N) of the matrixs(Maximum 1,000,000)\n");
    scanf ("%d", & N);
    if (N > 1000000) {
        fprintf (stderr, "Size of matrix is too large!\n");
        return 0;
    }
    int **xMatrix = NULL;
    int **yMatrix = NULL;
    int **resultMatrix = NULL;
    xMatrix = (int **) malloc (N * sizeof (int *));
    yMatrix = (int **) malloc (N * sizeof (int *));
    resultMatrix = (int **) malloc (N * sizeof (int *));
    for (r = 0; r < N; r++) {
        xMatrix[r] = (int *) malloc (N * sizeof (int));
        yMatrix[r] = (int *) malloc (N * sizeof (int));
        resultMatrix[r] = (int *) malloc (N * sizeof (int));
    }
    clock_t t;
    t = clock ();
    for (r = 0; r < N; r++) {
        for (c = 0; c < N; c++) {
            random = rand () % 100;
            xMatrix[r][c] = a * random;
        }
    }
    for (r = 0; r < N; r++) {
        for (c = 0; c < N; c++) {
            int random = rand () % 100;
            yMatrix[r][c] = random;
        }
    }
    for (r = 0; r < N; r++) {
        for (c = 0; c < N; c++) {
            resultMatrix[r][c] = xMatrix[r][c] + yMatrix[r][c];
        }
    }
    t = clock () - t;
    double timeTaken = ((double) t) / CLOCKS_PER_SEC;
    printf ("\n -> Total time : %f seconds\n", timeTaken);
    printf ("\n -> Vector length : %d", N * N);
    for (r = 0; r < N; r++) {
        free (xMatrix [r]);
        free (yMatrix [r]);
        free (resultMatrix [r]);
    }
    free (xMatrix);
    free (yMatrix);
    free (resultMatrix);
}
----------------------------------------

int benchmark (void) {
    int N;
    int r, c;
    int random;
    int a = rand () % 20;
    printf ("Enter the size(N*N) of the matrices (Maximum 1,000,000)\n");
    if (scanf ("%d", &N) != 1) {
        fprintf (stderr, "Input error!\n");
        return 0;
    }
    if (N > 1000000) {
        fprintf (stderr, "Matrix size is too large!\n");
        return 0;
    }
    int (*xMatrix) [N] = malloc (N * sizeof (*xMatrix));
    int (*yMatrix) [N] = malloc (N * sizeof (*yMatrix));
    int (*resultMatrix) [N] = malloc (N * sizeof (*resultMatrix));
    if (xMatrix == NULL || yMatrix == NULL || resultMatrix == NULL) {
        fprintf (stderr, "Memory allocation failed!\n");
        free (xMatrix);
        free (yMatrix);
        free (resultMatrix);
        return 0;
    }
    clock_t t = clock ();
    for (r = 0; r < N; r++) {
        for (c = 0; c < N; c++) {
            random = rand () % 100;
            xMatrix[r][c] = a * random;
        }
    }
    for (r = 0; r < N; r++) {
        for (c = 0; c < N; c++) {
            random = rand () % 100;
            yMatrix[r][c] = random;
        }
    }
    for (r = 0; r < N; r++) {
        for (c = 0; c < N; c++) {
            resultMatrix[r][c] = xMatrix[r][c] + yMatrix[r][c];
        }
    }
    t = clock () - t;
    double timeTaken = ((double) t) / CLOCKS_PER_SEC;
    printf ("\n -> Total time : %f seconds\n", timeTaken);
    printf ("\n -> Vector length : %lld", (long long) N * N);
    free (xMatrix);
    free (yMatrix);
    free (resultMatrix);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46616865_46617484_1_25
46616865_46617812_120_135
Title: How to free Structure containing dynamically allocated double pointer to another structure type? 
----------------------------------------

void freeGraph (_GRAPH_ *graph) {
    for (int i = 0; i < graph->vc; i++) {
        printf ("\nLoop: %d\n", i);
        if (graph->node[i]->adjacent != NULL) {
            free (graph -> node [i] -> adjacent);
        }
        free (graph -> node [i]);
    }
    free (graph -> node);
    for (int i = 0; i < graph->vc; i++)
        if (graph->AM[i] != NULL)
            free (graph->AM[i]);
    free (graph -> AM);
    free (graph -> name);
}
----------------------------------------

static void freeGraph (Graph *graph) {
    for (int i = 0; i < graph->vc; i++) {
        free (graph -> node [i] -> adjacent);
        free (graph -> node [i]);
    }
    free (graph -> node);
    for (int i = 0; i < graph->vc; i++)
        free (graph->AM[i]);
    free (graph -> AM);
    free (graph -> name);
    free (graph);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46621212_46621257_29_43
46621212_46621654_4_32
Title: Program in C to Check Whether a Number can be express as Sum of Two Prime Numbers. I am getting repeated results 
----------------------------------------

int main () {
    printf ("Enter your desired number");
    int a;
    scanf ("%d", & a);
    int i;
    for (i = 2; i < (a / 2); i++) {
        if (prime (i) == 2 && prime (a -i) == 2) {
            printf ("The sum of %d and %d is %d\n", i, a - i, a);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j, x;
    cout << "Enter your number: ";
    cin >> x;
    for (i = 2; i < x; i++) {
        int square_root = sqrt (i);
        for (j = 2; j <= square_root; j++) {
            if (i % j == 0)
                break;
        }
        if (j > square_root) {
            primes.insert (i);
        }
    }
    for (i = 2; i <= x / 2; i++) {
        if (primes.find (i) != primes.end () && primes.find (x -i) != primes.end ()) {
            cout << "The sum of " << i << " and " << (x - i) << " is " << x << endl;
        }
    }
}
----------------------------------------

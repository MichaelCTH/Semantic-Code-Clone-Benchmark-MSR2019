$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43853141_43853859_21_34
43853141_43854013_4_26
Title: How to convert an integer array to a string without the use of a library 
----------------------------------------

int main () {
    int ADCvalue [20] = {10, 40, 50, 90, 100, 200, 300, 240, 260, 10, 40, 50, 90, 100, 200, 300, 240, 260, 300, 20};
    char buffer [500] = {'\0'};
    char *dest = buffer;
    for (int i = 0; i < 20; i++) {
        if (i > 0)
            *dest++ = ',';
        dest = writeIntValue (ADCvalue[i], dest);
    }
    return 0;
}
----------------------------------------

int main (void) {
    short int ADCvalue [] = {10, 40, 50, 90, 100, 200, 300, 240, 260, 10, 40, 50, 90, 100, 200, 300, 240, 260, 300, 20};
    size_t sz = sizeof (ADCvalue) / sizeof (*ADCvalue);
    unsigned char *arr = malloc (sz *2);
    if (arr == NULL) {
        perror ("malloc");
        exit (EXIT_FAILURE);
    }
    for (size_t i = 0; i < sz; i++) {
        arr[i * 2 + 0] = (unsigned char) (ADCvalue[i] >> 8);
        arr[i * 2 + 1] = (unsigned char) (ADCvalue[i] & 0xFF);
    }
    for (size_t i = 0; i < sz; i++) {
        printf ("%d\n", (arr [i * 2] << 8) | (arr [i * 2 + 1]));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43855743_43857274_1_14
43855743_43858516_4_78
Title: If statement inside of a while loop that fails to execute and exit program 
----------------------------------------

int main () {
    int i;
    char loop;
    for (i = 0; i < 3; i++) {
        if (i != 0) {
            printf ("Do you want to evaluate another teacher? (y/n) : \n");
            scanf (" %c", & loop);
            if (loop != 'y')
                break;
        }
    }
}
----------------------------------------

int main () {
    int i = 0;
    char loop;
    int count = 0;
    char name [30];
    printf ("Enter your name : ");
    scanf ("%s", & name);
    printf ("\n");
    do {
        int num1, num2, num3, num4, num5, num6, num7, num8;
        int result;
        int input;
        char teacher [30];
        printf ("Which teacher do you want to evaluate : ");
        scanf ("%s/n", & teacher);
        printf ("\n");
        printf ("Answer with 1 for Never upto 7 for Frequently\n");
        printf ("\n");
        printf ("How often does the teacher indicate where the class is going? \n ");
        scanf ("%d", & num1);
        printf ("How often does the teacher explain material clearly? \n ");
        scanf ("%d", & num2);
        printf ("How often is the teacher available outside of class? \n ");
        scanf ("%d", & num3);
        printf ("How often does the teacher provide helpful comments on papers and exams? \n ");
        scanf ("%d", & num4);
        printf ("How often does the teacher stimulate interest in material? \n ");
        scanf ("%d", & num5);
        printf ("How often does the teacher adjust the pace of class to the students' level of understanding? \n ");
        scanf ("%d", & num6);
        printf ("How often does the teacher effectively encourage students to ask questions and give answers? \n ");
        scanf ("%d", & num7);
        printf ("How is the teacher tolerant of different opinions expressed in class? \n ");
        scanf ("%d", & num8);
        printf ("******************************************************************************\n");
        printf ("******************************************************************************\n");
        printf ("Student's name : %s.\n", name);
        printf ("Teacher's name : %s.\n", teacher);
        printf ("How often does the teacher indicate where the class is going: %d\n", num1);
        printf ("How often does the teacher explain material clearly : %d\n", num2);
        printf ("How often is the teacher available outside of class : %d\n", num3);
        printf ("How often does the teacher provide helpful comments on papers and exams: %d\n", num4);
        printf ("How often does the teacher stimulate interest in material: %d\n", num5);
        printf ("How often does the teacher adjust the pace of class to the students' level of understanding: %d\n", num6);
        printf ("How often does the teacher effectively encourage students to ask questions and give answers: %d\n", num7);
        printf ("How is the teacher tolerant of different opinions expressed in class: %d\n", num8);
        printf ("******************************************************************************\n");
        printf ("******************************************************************************\n");
        count++;
        if (count < 3) {
            printf ("Do you want to evaluate another teacher? (y/n) : ");
            printf ("\n");
            scanf ("%s", & loop);
        }
    }
    while (loop == 'y' && count < 3);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43862475_43862827_4_32
43862475_43863807_48_68
Title: Merging two index into one in array in C 
----------------------------------------

int main (void) {
    unsigned char array [255] = {'F', 'F', 'E', '2', 'A', 'A', 'C', 'C',};
    int len = 8;
    for (int i = 0, j = 0; i < len; i++) {
        if (isxdigit (array[i])) {
            if (isdigit (array[i])) {
                array[i] -= '0';
            }
            else {
                array[i] -= isupper (array[i]) ? 'A' : 'a';
                array[i] += 10;
            }
        }
        else {
            fprintf (stderr, "invalid data %c\n", array [i]);
            return -1;
        }
    }
    for (int i = 0, j = 0; i < len; i += 2) {
        array[j++] = (array[i] << 4) | array[i + 1];
    }
    len = len / 2;
    for (int i = 0; i < len; i++) {
        printf ("%02hhX", array [i]);
    }
    printf ("\n");
}
----------------------------------------

int main (void) {
    unsigned char array [255];
    int i, len, c;
    while (scanf ("%254s", array) == 1) {
        len = xconvert (array, array, strlen ((char *) array));
        if (len >= 0) {
            printf ("converted array: \"");
            for (i = 0; i < len; i++) {
                c = array[i];
                if (isprint (c)) {
                    putchar (c);
                }
                else {
                    printf ("\\x%02X", c);
                }
            }
            printf ("\"\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43871450_43871679_1_16
43871450_43871849_1_14
Title: "Queue in C bad printing" 
----------------------------------------

void push (int x) {
    Element *pNewItem = (Element *) malloc (sizeof (Element));
    pNewItem->value = x;
    pNewItem->next = NULL;
    if (last == NULL) {
        first = last = pNewItem;
    }
    else {
        last = last->next = pNewItem;
    }
}
----------------------------------------

void push (int x) {
    Element *pNewItem = (Element *) malloc (sizeof (Element));
    pNewItem->value = x;
    if (first == NULL && last == NULL) {
        first = last = pNewItem;
    }
    else {
        last->next = pNewItem;
        last = pNewItem;
        last.next = NULL;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43903249_43906200_4_17
43903249_43909227_6_34
Title: Skipping specific lines and storing variables specific variables in C 
----------------------------------------

int main (int argc, const char *argv []) {
    char str [100];
    FILE *pointer_file = fopen ("test", "r");
    while (fgets (str, sizeof str, pointer_file) != NULL)
        if (str[0] != '\t') {
            fputs (strtok (str, " \t\n"), stdout);
            fputs ("\n", stdout);
        }
    fclose (pointer_file);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char line [MAX] = "";
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (line, MAX, fp)) {
        size_t len = strlen (line);
        if (line[len - 1] == '\n')
            line[--len] = 0;
        if (*line == '\t') {
            printf ("\t%s - begins with tab\n", line + 1);
            continue;
        }
        printf ("%s - no tab\n", line);
    }
    if (fp != stdin)
        fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43903249_43906200_4_17
43903249_43911299_2_26
Title: Skipping specific lines and storing variables specific variables in C 
----------------------------------------

int main (int argc, const char *argv []) {
    char str [100];
    FILE *pointer_file = fopen ("test", "r");
    while (fgets (str, sizeof str, pointer_file) != NULL)
        if (str[0] != '\t') {
            fputs (strtok (str, " \t\n"), stdout);
            fputs ("\n", stdout);
        }
    fclose (pointer_file);
    return 0;
}
----------------------------------------

int main (void) {
    int ch, state;
    for (state = 0;;) {
        ch = getc (stdin);
        if (ch == EOF)
            break;
        switch (state) {
        case 0 :
            if (ch == '\t') {
                state = 2;
                continue;
            }
            if (ch == '\n') {
                continue;
            }
            state = 1;
            break;
        case 1 :
            if (ch == ' ') {
                ch = '\n';
                state = 2;
                break;
            }
            if (ch == '\n') {
                state = 0;
                break;
            }
            break;
        case 2 :
            if (ch == '\n') {
                state = 0;
                continue;
            }
            continue;
        }
        putc (ch, stdout);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43903249_43909227_6_34
43903249_43911299_2_26
Title: Skipping specific lines and storing variables specific variables in C 
----------------------------------------

int main (int argc, char **argv) {
    char line [MAX] = "";
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (line, MAX, fp)) {
        size_t len = strlen (line);
        if (line[len - 1] == '\n')
            line[--len] = 0;
        if (*line == '\t') {
            printf ("\t%s - begins with tab\n", line + 1);
            continue;
        }
        printf ("%s - no tab\n", line);
    }
    if (fp != stdin)
        fclose (fp);
    return 0;
}
----------------------------------------

int main (void) {
    int ch, state;
    for (state = 0;;) {
        ch = getc (stdin);
        if (ch == EOF)
            break;
        switch (state) {
        case 0 :
            if (ch == '\t') {
                state = 2;
                continue;
            }
            if (ch == '\n') {
                continue;
            }
            state = 1;
            break;
        case 1 :
            if (ch == ' ') {
                ch = '\n';
                state = 2;
                break;
            }
            if (ch == '\n') {
                state = 0;
                break;
            }
            break;
        case 2 :
            if (ch == '\n') {
                state = 0;
                continue;
            }
            continue;
        }
        putc (ch, stdout);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43909040_43909466_5_33
43909040_43910181_8_43
Title: Loop and sum giving unexpexted result 
----------------------------------------

int main () {
    int i, s1, s2, j, a [5] [5];
    srand (time (NULL));
    printf ("The matrix is:\n");
    for (i = 0; i < 5; i++) {
        printf ("\n\n");
        for (j = 0; j < 5; j++) {
            a[i][j] = rand () % 100;
            printf ("%d ", a [i] [j]);
        }
    }
    s1 = s2 = 0;
    for (i = 0; i < 5; i++) {
        s1 += a[i][i];
        s2 += a[i][4 - i];
    }
    printf ("\n\nThe sum 1:%d\nThe sum 2:%d\n", s1, s2);
    if (s1 == s2) {
        printf ("They are the same\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int a [N] [N];
    srand ((unsigned int) time (NULL));
    printf ("The matrix is:\n");
    for (size_t i = 0; i < N; i++) {
        printf ("\n\n");
        for (size_t j = 0; j < N; j++) {
            *(*(a + i) + j) = rand () % VALUE_MAX;
            printf ("%d ", * (* (a + i) + j));
        }
    }
    long long int s1 = 0ll;
    long long int s2 = 0ll;
    for (size_t i = 0; i < N; i++) {
        s1 += a[i][i];
        s2 += a[i][N - i - 1];
    }
    printf ("\n\nThe sum 1: %lld\nThe sum 2: %lld\n", s1, s2);
    if (s1 == s2) {
        puts ("They are the same");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43909693_43910094_3_19
43909693_43910240_4_19
Title: To check number alphabets in a string 
----------------------------------------

int main () {
    int i, k = 0;
    char array [100];
    scanf ("%s", array);
    for (i = 0; array[i] != '\0'; i++) {
        if (array[i] >= 'a' && array[i] <= 'z') {
            k = k + 1;
            printf ("%d", k);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 0, k = 0;
    char array [100];
    fgets (array, sizeof (array), stdin);
    while (array[i]) {
        if (array[i] >= 'a' && array[i] <= 'z') {
            k = k + 1;
            printf ("%d", k);
        }
        i = i + 1;
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43913064_43913347_1_17
43913064_43913353_1_12
Title: C/C++ How to hand over a const function pointer or a simple pointer in one function call 
----------------------------------------

void func1 (const int *value, bool change) {
    const int *valueToUse;
    int changedValue;
    if (change) {
        changedValue = (*value) + 1;
        valueToUse = &changedValue;
    }
    else {
        valueToUse = value;
    }
    func2 (valueToUse);
}
----------------------------------------

void func1 (const int *value, bool change) {
    if (change) {
        int changedValue = *value + 1;
        func2 (& changedValue);
    }
    else {
        func2 (value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43913064_43913347_1_17
43913064_43913398_1_16
Title: C/C++ How to hand over a const function pointer or a simple pointer in one function call 
----------------------------------------

void func1 (const int *value, bool change) {
    const int *valueToUse;
    int changedValue;
    if (change) {
        changedValue = (*value) + 1;
        valueToUse = &changedValue;
    }
    else {
        valueToUse = value;
    }
    func2 (valueToUse);
}
----------------------------------------

void func1 (const int *value, int change) {
    int *valueToUse;
    if (change) {
        (*(int*) value)++;
        valueToUse = (int *) value;
    }
    else {
        valueToUse = (int *) value;
    }
    func2 (valueToUse);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43913064_43913353_1_12
43913064_43913398_1_16
Title: C/C++ How to hand over a const function pointer or a simple pointer in one function call 
----------------------------------------

void func1 (const int *value, bool change) {
    if (change) {
        int changedValue = *value + 1;
        func2 (& changedValue);
    }
    else {
        func2 (value);
    }
}
----------------------------------------

void func1 (const int *value, int change) {
    int *valueToUse;
    if (change) {
        (*(int*) value)++;
        valueToUse = (int *) value;
    }
    else {
        valueToUse = (int *) value;
    }
    func2 (valueToUse);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4392665_32497247_149_204
4392665_39372065_5_19
Title: "Converting string to float (without atof) in C" 
----------------------------------------

int main () {
    const struct TestCase {
        const char *str;
        const float ret;
        int last_err_code;
    } test_cases [] = {{"abc", 0, 1}, {"123+.456", 0, 1}, {"++123.456", 0, 1}, {".", 0, 2}, {".123", 0, 2}, {"123.", 0, 2}, {"123..456", 0, 3}, {"123.4.56", 0, 3}, {"1111111111111111111111111111111.456", 0, 4}, {"", 0, 0}, {"123.456", 123.456, 0}, {"1.12345678901234567890", 1.12345678, 0},};
    int errors = 0;
    for (int iii = 0; iii < sizeof (test_cases) / sizeof (TestCase); iii++) {
        const TestCase & tc = test_cases [iii];
        last_err_code = 0;
        const float actual_ret = str_to_float (tc.str);
        if (tc.ret != actual_ret || last_err_code != tc.last_err_code) {
            errors++;
            cout << "Case #" << iii << ": FAILED" << endl;
            cout << "\tExpected ret=" << tc.ret << endl;
            cout << "\tAcutal   ret=" << actual_ret << endl;
            cout << "\tExpected last_err_code=" << tc.last_err_code << endl;
            cout << "\tAcutal   last_err_code=" << last_err_code << endl;
        }
    }
    if (errors == 0)
        cout << "All test passed!" << endl;
    else
        cout << "There are " << errors << " cases failed." << endl;
    return 0;
}
----------------------------------------

void main (int argc, char **argv) {
    float res;
    char str [10];
    if (argc < 2) {
        printf ("Supply a floating point Data\n");
        return;
    }
    printf ("argv[1] = %s\n", argv [1]);
    res = myAtoF (argv[1]);
    printf ("Res = %f\n", res);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4392665_32497247_149_204
4392665_49227578_7_16
Title: "Converting string to float (without atof) in C" 
----------------------------------------

int main () {
    const struct TestCase {
        const char *str;
        const float ret;
        int last_err_code;
    } test_cases [] = {{"abc", 0, 1}, {"123+.456", 0, 1}, {"++123.456", 0, 1}, {".", 0, 2}, {".123", 0, 2}, {"123.", 0, 2}, {"123..456", 0, 3}, {"123.4.56", 0, 3}, {"1111111111111111111111111111111.456", 0, 4}, {"", 0, 0}, {"123.456", 123.456, 0}, {"1.12345678901234567890", 1.12345678, 0},};
    int errors = 0;
    for (int iii = 0; iii < sizeof (test_cases) / sizeof (TestCase); iii++) {
        const TestCase & tc = test_cases [iii];
        last_err_code = 0;
        const float actual_ret = str_to_float (tc.str);
        if (tc.ret != actual_ret || last_err_code != tc.last_err_code) {
            errors++;
            cout << "Case #" << iii << ": FAILED" << endl;
            cout << "\tExpected ret=" << tc.ret << endl;
            cout << "\tAcutal   ret=" << actual_ret << endl;
            cout << "\tExpected last_err_code=" << tc.last_err_code << endl;
            cout << "\tAcutal   last_err_code=" << last_err_code << endl;
        }
    }
    if (errors == 0)
        cout << "All test passed!" << endl;
    else
        cout << "There are " << errors << " cases failed." << endl;
    return 0;
}
----------------------------------------

int main (void) {
    double res;
    char str [15];
    printf ("enter a number in the form of a  string:\n");
    gets (str);
    res = myatof (str);
    printf ("Float representation of above number  is %f\n", res);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4392665_39372065_5_19
4392665_49227578_7_16
Title: "Converting string to float (without atof) in C" 
----------------------------------------

void main (int argc, char **argv) {
    float res;
    char str [10];
    if (argc < 2) {
        printf ("Supply a floating point Data\n");
        return;
    }
    printf ("argv[1] = %s\n", argv [1]);
    res = myAtoF (argv[1]);
    printf ("Res = %f\n", res);
}
----------------------------------------

int main (void) {
    double res;
    char str [15];
    printf ("enter a number in the form of a  string:\n");
    gets (str);
    res = myatof (str);
    printf ("Float representation of above number  is %f\n", res);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4392665_4392847_1_11
4392665_46530956_1_22
Title: "Converting string to float (without atof) in C" 
----------------------------------------

float str2float (char *s) {
    float result = 0;
    int decimalCount = 0, i = 0, decimalPointLoc = strlen (s);
    for (; s[i] != '\0'; i++) {
        if (s[i] == '.')
            decimalPointLoc = i;
        if (i < decimalPointLoc) {
            result *= 10;
            result += (int) (s[i] + '0');
        }
        else {
            result += (float) (s[i] + '0') / (pow (i -decimalPointLoc, 10));
        }
    }
    return result;
}
----------------------------------------

float str2float (const char *str) {
    unsigned char abc;
    float ret = 0, fac = 1;
    for (abc = 9; abc & 1; str++) {
        abc = *str == '-' ? (abc & 6 ? abc & 14 : (abc & 47) | 36) : *str == '+' ? (abc & 6 ? abc & 14 : (abc & 15) | 4) : *str > 47 && *str < 58 ? abc | 18 : (abc & 8) && *str == '.' ? (abc & 39) | 2 : !(abc & 2) && (*str == ' ' || *str == '\t') ? (abc & 47) | 1 : abc & 46;
        if (abc & 16) {
            ret = abc & 8 ? *str - 48 + ret * 10 : (*str - 48) / (fac *= 10) + ret;
        }
    }
    return abc & 32 ? -ret : ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43944007_43944708_1_19
43944007_43963501_38_58
Title: Remove value from a List 
----------------------------------------

void removeFromList (struct clientList *list, int socket) {
    struct listElement *aux, prev;
    if (list->head == 0)
        return;
    aux = list->head;
    prev = aux;
    while (aux != 0) {
        if (aux->socket == socket) {
            prev->next = aux->next;
            free (aux);
            break;
        }
        prev = aux;
        aux = aux->next;
    }
}
----------------------------------------

int removeFromList (struct clientList *list, SOCKET socket) {
    int success;
    struct listElement **current = &list->head;
    while (*current != NULL && (*current)->socket != socket) {
        current = &(*current)->next;
    }
    if ((success = *current != NULL)) {
        struct listElement *tmp = *current;
        *current = (*current)->next;
        free (tmp);
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43952311_43952496_1_31
43952311_43952635_5_33
Title: C - If statement not working 
----------------------------------------

int main () {
    int a [10], i, prime = 0, c = 0;
    printf ("Enter 10 numbers:\n");
    for (i = 0; i < 10; i++) {
        scanf (" %d", & a [i]);
    }
    printf ("Prime numbers are:");
    for (i = 0; i < 10; i++) {
        if (a[i] < 2)
            continue;
        prime = 1;
        for (c = 2; c * c <= a[i]; c++) {
            if (a[i] % c == 0) {
                prime = 0;
                break;
            }
        }
        if (prime == 1)
            printf ("%d, ", a[i]);
    }
}
----------------------------------------

int main (void) {
    unsigned int a [N];
    printf ("Enter %zu numbers: ", (size_t) N);
    for (size_t i = 0; i < N; i++) {
        scanf ("%u", & a [i]);
    }
    printf ("Prime numbers are: ");
    for (size_t i = 0; i < N; i++) {
        int prime = a[i] == 2 || a[i] % 2 == 1 && a[i] != 1;
        for (unsigned int j = 3; prime && j <= a[i] / j; j += 2) {
            prime = a[i] % j != 0;
        }
        if (prime)
            printf ("%u, ", a[i]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43952311_43952496_1_31
43952311_43955741_6_56
Title: C - If statement not working 
----------------------------------------

int main () {
    int a [10], i, prime = 0, c = 0;
    printf ("Enter 10 numbers:\n");
    for (i = 0; i < 10; i++) {
        scanf (" %d", & a [i]);
    }
    printf ("Prime numbers are:");
    for (i = 0; i < 10; i++) {
        if (a[i] < 2)
            continue;
        prime = 1;
        for (c = 2; c * c <= a[i]; c++) {
            if (a[i] % c == 0) {
                prime = 0;
                break;
            }
        }
        if (prime == 1)
            printf ("%d, ", a[i]);
    }
}
----------------------------------------

int main (void) {
    int a [ARRAY_LEN];
    int prime = 0;
    printf ("Enter 10 numbers:\n");
    for (int i = 0; i < ARRAY_LEN; i++) {
        if (1 != scanf (" %d", &a[i])) {
            perror ("scanf failed");
            exit (EXIT_FAILURE);
        }
    }
    printf ("Prime numbers are: ");
    for (int i = 0; i < ARRAY_LEN; i++) {
        prime = 1;
        if (a[i] < 2) {
            prime = 0;
        }
        else {
            for (int c = 2; c < a[i]; c++) {
                if (a[i] % c == 0) {
                    prime = 0;
                    break;
                }
            }
        }
        if (prime == 1)
            printf ("%d, ", a[i]);
    }
    puts ("");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43952311_43952635_5_33
43952311_43955741_6_56
Title: C - If statement not working 
----------------------------------------

int main (void) {
    unsigned int a [N];
    printf ("Enter %zu numbers: ", (size_t) N);
    for (size_t i = 0; i < N; i++) {
        scanf ("%u", & a [i]);
    }
    printf ("Prime numbers are: ");
    for (size_t i = 0; i < N; i++) {
        int prime = a[i] == 2 || a[i] % 2 == 1 && a[i] != 1;
        for (unsigned int j = 3; prime && j <= a[i] / j; j += 2) {
            prime = a[i] % j != 0;
        }
        if (prime)
            printf ("%u, ", a[i]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    int a [ARRAY_LEN];
    int prime = 0;
    printf ("Enter 10 numbers:\n");
    for (int i = 0; i < ARRAY_LEN; i++) {
        if (1 != scanf (" %d", &a[i])) {
            perror ("scanf failed");
            exit (EXIT_FAILURE);
        }
    }
    printf ("Prime numbers are: ");
    for (int i = 0; i < ARRAY_LEN; i++) {
        prime = 1;
        if (a[i] < 2) {
            prime = 0;
        }
        else {
            for (int c = 2; c < a[i]; c++) {
                if (a[i] % c == 0) {
                    prime = 0;
                    break;
                }
            }
        }
        if (prime == 1)
            printf ("%d, ", a[i]);
    }
    puts ("");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43958519_43958836_3_30
43958519_43958873_6_44
Title: Can't break a while loop. Reading undefined array size 
----------------------------------------

int main (void) {
    int n [100], i, j;
    char x [100];
    do {
        for (i = 0; i < 100; ++i) {
            int ch;
            while ((ch = getchar ()) != EOF && ch != '\n') {
                if (ch == '-' || '0' <= ch && ch <= '9') {
                    ungetc (ch, stdin);
                    break;
                }
            }
            if (ch == EOF || ch == '\n')
                break;
            if (2 != scanf ("%d %c", &n[i], &x[i])) {
                fprintf (stderr, "invalid format.\n");
                i = 0;
                break;
            }
        }
        for (j = 0; j < i; ++j) {
            printf ("(%d, %c)", n [j], x [j]);
        }
        printf ("\n");
    }
    while (i != 0);
}
----------------------------------------

int main () {
    char line [4096];
    fgets (line, sizeof (line), stdin);
    GArray *numbers = g_array_new (FALSE, TRUE, sizeof (int));
    GArray *letters = g_array_new (FALSE, TRUE, sizeof (char));
    const char sep [] = " \t\n";
    gboolean expect_letter = FALSE;
    for (char *token = strtok (line, sep); token != NULL; token = strtok (NULL, sep)) {
        if (expect_letter) {
            g_array_append_val (letters, token [0]);
            expect_letter = FALSE;
        }
        else {
            int num = atoi (token);
            g_array_append_val (numbers, num);
            expect_letter = TRUE;
        }
    }
    for (guint i = 0; i < letters->len; i++) {
        printf ("%d%c\n", g_array_index (numbers, int, i), g_array_index (letters, char, i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43969126_43969332_3_32
43969126_43969372_3_37
Title: C: 2d char array issue 
----------------------------------------

int main (void) {
    int i, j, n, simbolo;
    printf ("Inserire un numero: ");
    scanf ("%d", & n);
    char mat [n] [n + 2];
    simbolo = n + 1;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n + 2; j++) {
            mat[i][j] = ' ';
        }
    }
    mat[n - 3][0] = '*';
    mat[n - 2][1] = '*';
    mat[n - 1][2] = '*';
    for (i = 0; i < n; i++) {
        if (i < (n - 1))
            mat[i][simbolo] = '*';
        printf ("%.*s\n", n + 2, mat [i]);
        simbolo--;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, j, n, simbolo;
    printf ("Inserire un numero: ");
    scanf ("%d", & n);
    char mat [n + 1] [n + 2];
    simbolo = n + 2;
    for (i = 0; i < n + 1; i++) {
        for (j = 0; j < n + 2; j++) {
            mat[i][j] = '-';
            mat[n - 2][0] = '*';
            mat[n - 1][1] = '*';
            mat[n][2] = '*';
        }
    }
    for (i = 0; i < n + 1; i++) {
        mat[i + 1][simbolo - 1] = '*';
        for (int y = 0; y < n + 2; y++) {
            printf ("%c", mat [i] [y]);
        }
        printf ("\n");
        simbolo--;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43969126_43969332_3_32
43969126_43969433_4_40
Title: C: 2d char array issue 
----------------------------------------

int main (void) {
    int i, j, n, simbolo;
    printf ("Inserire un numero: ");
    scanf ("%d", & n);
    char mat [n] [n + 2];
    simbolo = n + 1;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n + 2; j++) {
            mat[i][j] = ' ';
        }
    }
    mat[n - 3][0] = '*';
    mat[n - 2][1] = '*';
    mat[n - 1][2] = '*';
    for (i = 0; i < n; i++) {
        if (i < (n - 1))
            mat[i][simbolo] = '*';
        printf ("%.*s\n", n + 2, mat [i]);
        simbolo--;
    }
    return 0;
}
----------------------------------------

int main (void) {
    printf ("n: ");
    int n = 0;
    if (scanf ("%d", &n) != 1) {
        fprintf (stderr, "ERROR: couldn't read 'n'\n");
        return EXIT_FAILURE;
    }
    char mat [n] [n + 2];
    int i;
    int j;
    for (i = 0; i < n; i++)
        for (j = 0; j < n + 2; j++)
            mat[i][j] = ' ';
    mat[n - 3][0] = '*';
    mat[n - 2][1] = '*';
    j = n + 1;
    for (i = 0; j >= 2; i++, j--)
        mat[i][j] = '*';
    for (i = 0; i < n; i++) {
        for (j = 0; j < n + 2; j++)
            printf ("%c", mat[i][j]);
        printf ("\n");
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43969126_43969372_3_37
43969126_43969433_4_40
Title: C: 2d char array issue 
----------------------------------------

int main (void) {
    int i, j, n, simbolo;
    printf ("Inserire un numero: ");
    scanf ("%d", & n);
    char mat [n + 1] [n + 2];
    simbolo = n + 2;
    for (i = 0; i < n + 1; i++) {
        for (j = 0; j < n + 2; j++) {
            mat[i][j] = '-';
            mat[n - 2][0] = '*';
            mat[n - 1][1] = '*';
            mat[n][2] = '*';
        }
    }
    for (i = 0; i < n + 1; i++) {
        mat[i + 1][simbolo - 1] = '*';
        for (int y = 0; y < n + 2; y++) {
            printf ("%c", mat [i] [y]);
        }
        printf ("\n");
        simbolo--;
    }
    return 0;
}
----------------------------------------

int main (void) {
    printf ("n: ");
    int n = 0;
    if (scanf ("%d", &n) != 1) {
        fprintf (stderr, "ERROR: couldn't read 'n'\n");
        return EXIT_FAILURE;
    }
    char mat [n] [n + 2];
    int i;
    int j;
    for (i = 0; i < n; i++)
        for (j = 0; j < n + 2; j++)
            mat[i][j] = ' ';
    mat[n - 3][0] = '*';
    mat[n - 2][1] = '*';
    j = n + 1;
    for (i = 0; j >= 2; i++, j--)
        mat[i][j] = '*';
    for (i = 0; i < n; i++) {
        for (j = 0; j < n + 2; j++)
            printf ("%c", mat[i][j]);
        printf ("\n");
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43977377_43978470_5_33
43977377_43978717_4_24
Title: C programming segmentation error 
----------------------------------------

int main (void) {
    while (1) {
        unsigned long long fib [N] = {0, 1};
        unsigned int n;
        printf ("Enter a sequantial number of a fibonacci number (0 - exit): ");
        if (scanf ("%u", &n) != 1 || n == 0)
            break;
        unsigned int i = 2;
        for (; i < N && i <= n && fib[i - 1] <= fib[i - 2] + fib[i - 1]; i++) {
            fib[i] = fib[i - 2] + fib[i - 1];
        }
        if (n < i) {
            printf ("#%u: %llu %llu\n", n, fib [n], fib [n] % 10);
        }
        else {
            puts ("Too big fibonacci number");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    long i, j, fib [FIBONACCI_LIMIT];
    fib[0] = 0;
    fib[1] = 1;
    if (scanf ("%li", &j) != 1) {
        fprintf (stderr, "Invalid input\n");
        return 1;
    }
    if (j < 0 || j >= FIBONACCI_LIMIT) {
        fprintf (stderr, "Number must be in range 0 <= n < %li\n", FIBONACCI_LIMIT);
        return 2;
    }
    for (i = 2; i != 1000; i++) {
        fib[i] = (fib[i - 2] + fib[i - 1]) % 10;
    }
    printf ("%li\n", fib [j]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43982636_43983808_1_17
43982636_44005993_1_29
Title: Incorrect remove from List using while() in C 
----------------------------------------

struct listElement *removeFromList (struct clientList *list, SOCKET socket) {
    struct listElement **currentElement = &list->head;
    while (*currentElement != 0 && (*currentElement)->socket != socket) {
        currentElement = &(*currentElement)->next;
    }
    if (*currentElement != 0) {
        struct listElement *tmp = *currentElement;
        *currentElement = (*currentElement)->next;
        free (tmp);
    }
    return *currentElement;
}
----------------------------------------

struct listElement *removeFromList (struct clientList *list, SOCKET socket) {
    struct listElement *currentElement = list->head;
    struct listElement *prevElement = NULL;
    struct listElement *returnPointer = NULL;
    while (currentElement != 0 && currentElement->socket != socket) {
        prevElement = currentElement;
        currentElement = currentElement->next;
    }
    if (currentElement != 0) {
        struct listElement *tmp = currentElement;
        if (prevElement == 0) {
            list->head = currentElement->next;
            returnPointer = list->head;
            free (currentElement);
        }
        else {
            prevElement->next = currentElement->next;
            returnPointer = prevElement->next;
            free (tmp);
        }
    }
    return returnPointer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43992349_43992478_4_15
43992349_43992482_3_17
Title: c program to calculate multiples in interval 
----------------------------------------

int main () {
    int n1, n2;
    n1 = 21;
    n2 = 210;
    while (n1 <= n2) {
        if (n1 % 7 == 0)
            printf ("%d ", n1);
        n1 = n1 + 1;
    }
}
----------------------------------------

int main (void) {
    int i, j, sum = 0;
    for (i = 21; i <= 210; i++) {
        if ((i % 7) == 0) {
            sum += i;
        }
    }
    printf ("total sum = %d \n", sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44013113_44013194_1_11
44013113_44013354_1_11
Title: Why is my printf() statement being run twice? 
----------------------------------------

int main () {
    int ch;
    for (ch = ' '; ch != 'q';) {
        printf ("Enter a character: ");
        ch = getchar ();
        getchar ();
    }
    printf ("You entered a q!\n");
    return 0;
}
----------------------------------------

int main () {
    int ch;
    for (ch = ' '; ch != 'q';) {
        printf ("Enter a character: ");
        ch = getfirstchar ();
    }
    printf ("You entered a q!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44021697_44021784_8_19
44021697_44022048_3_20
Title: Correct way to write a pattern in C language 
----------------------------------------

int main (void) {
    int array [SIZE] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int iter = 3;
    for (int i = 0; i < iter; ++i)
        if (i % 2)
            print_arr (array, SIZE);
        else
            print_rev_arr (array, SIZE);
    return 0;
}
----------------------------------------

int main (void) {
    int lines, flag = 1, val;
    for (lines = 0; lines < 3; lines++) {
        if (flag == 1)
            for (val = 1; val <= 10; val++)
                printf ("%d ", val);
        else
            for (val = 10; val > 0; val--)
                printf ("%d ", val);
        printf ("\n");
        flag = -flag;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44021697_44021784_8_19
44021697_44022069_6_19
Title: Correct way to write a pattern in C language 
----------------------------------------

int main (void) {
    int array [SIZE] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int iter = 3;
    for (int i = 0; i < iter; ++i)
        if (i % 2)
            print_arr (array, SIZE);
        else
            print_rev_arr (array, SIZE);
    return 0;
}
----------------------------------------

int main (void) {
    for (int i = 0; i < ITER; ++i) {
        if (i % 2)
            for (int j = 1; j <= LEN; ++j)
                printf ("%d ", j);
        else
            for (int j = LEN; j > 0; --j)
                printf ("%d ", j);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44021697_44021784_8_19
44021697_44023261_3_15
Title: Correct way to write a pattern in C language 
----------------------------------------

int main (void) {
    int array [SIZE] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int iter = 3;
    for (int i = 0; i < iter; ++i)
        if (i % 2)
            print_arr (array, SIZE);
        else
            print_rev_arr (array, SIZE);
    return 0;
}
----------------------------------------

int main (void) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 10; ++j) {
            const int v = (i % 2) ? 10 - j : j + 1;
            printf ("%d ", v);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44021697_44022048_3_20
44021697_44022069_6_19
Title: Correct way to write a pattern in C language 
----------------------------------------

int main (void) {
    int lines, flag = 1, val;
    for (lines = 0; lines < 3; lines++) {
        if (flag == 1)
            for (val = 1; val <= 10; val++)
                printf ("%d ", val);
        else
            for (val = 10; val > 0; val--)
                printf ("%d ", val);
        printf ("\n");
        flag = -flag;
    }
    return 0;
}
----------------------------------------

int main (void) {
    for (int i = 0; i < ITER; ++i) {
        if (i % 2)
            for (int j = 1; j <= LEN; ++j)
                printf ("%d ", j);
        else
            for (int j = LEN; j > 0; --j)
                printf ("%d ", j);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44021697_44022048_3_20
44021697_44023261_3_15
Title: Correct way to write a pattern in C language 
----------------------------------------

int main (void) {
    int lines, flag = 1, val;
    for (lines = 0; lines < 3; lines++) {
        if (flag == 1)
            for (val = 1; val <= 10; val++)
                printf ("%d ", val);
        else
            for (val = 10; val > 0; val--)
                printf ("%d ", val);
        printf ("\n");
        flag = -flag;
    }
    return 0;
}
----------------------------------------

int main (void) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 10; ++j) {
            const int v = (i % 2) ? 10 - j : j + 1;
            printf ("%d ", v);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44021697_44022069_6_19
44021697_44023261_3_15
Title: Correct way to write a pattern in C language 
----------------------------------------

int main (void) {
    for (int i = 0; i < ITER; ++i) {
        if (i % 2)
            for (int j = 1; j <= LEN; ++j)
                printf ("%d ", j);
        else
            for (int j = LEN; j > 0; --j)
                printf ("%d ", j);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 10; ++j) {
            const int v = (i % 2) ? 10 - j : j + 1;
            printf ("%d ", v);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44050708_44051121_45_61
44050708_44052376_46_67
Title: How can I get a 0 on the output? 
----------------------------------------

int main (void) {
    LInt l = NULL;
    l = push (l, 2);
    l = push (l, 2);
    output (l);
    putchar ('\n');
    remreps (l);
    output (l);
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    LInt *l = NULL;
    l = push (l, 2);
    l = push (l, 2);
    l = push (l, 3);
    l = push (l, 3);
    l = push (l, 3);
    l = push (l, 4);
    l = push (l, 4);
    output (l);
    putchar ('\n');
    remreps (l);
    output (l);
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44058408_44058551_7_22
44058408_44058793_4_14
Title: C - output reverse of main arguments 
----------------------------------------

int main (int argc, char *argcv []) {
    char args [argc - 2];
    int i = argc - 1;
    while (i > 0) {
        char *rev = myReverse (argcv[i--]);
        if (ptr != NULL) {
            puts (rev);
            free (rev);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    for (int i = argc; i-- > 1;) {
        size_t n = strlen (argv[i]);
        while (n != 0)
            putchar (argv[i][--n]);
        putchar (' ');
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44058637_44058802_1_18
44058637_44058813_23_46
Title: Inconsistent output of quick sort 
----------------------------------------

int partition (int *A, int start, int end) {
    int i = start - 1;
    int j = end + 1;
    int pivot = start;
    while (1) {
        while (A[++i] < A[pivot])
            ;
        while (A[--j] > A[pivot])
            ;
        if (i >= j) {
            return j;
        }
    }
    return j;
}
----------------------------------------

static int partition (int *A, int start, int end) {
    int pivot = A[start];
    int i = start;
    int j = end + 1;
    while (i < j) {
        do {
            i++;
        }
        while (pivot > A[i]);
        do {
            j--;
        }
        while (pivot < A[j]);
        swap (& A [i], & A [j]);
    }
    swap (& A [i], & A [j]);
    swap (& A [start], & A [j]);
    return j;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44066291_44066606_4_23
44066291_44066893_4_17
Title: C - argv stores random values instead of given ones 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc > 3) {
        switch (*argv[1]) {
        case '+' :
            printf ("answer: %d\n", atoi (argv[2]) + atoi (argv[3]));
            break;
        default :
            printf ("ERROR: operand %c invalid\n", *argv[1]);
        }
    }
    else {
        printf ("ERROR: you must enter operator, plus two operands. e.g.:\n");
        printf ("%s + 3 2\n", argv [0]);
        return 1;
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc != 4) {
        printf ("Error message");
        printf ("USAGE: ./a.out <operand> <number1> <number2>");
        return 0;
    }
    switch (*argv[1]) {
    case '+' :
        printf ("%d", (atoi (argv[2]) + atoi (argv[3])));
        break;
    default :
        printf ("Enter valid operand");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44099273_44099491_2_41
44099273_44099723_5_49
Title: what is wrong in this c program?(if else calcus) 
----------------------------------------

int main () {
    char edu, gen;
    int exi;
    float yos;
    printf ("This program finds out the salary of an employee\nnow if you are graduate then enter g and if you post graduate then enter p here :-  ");
    scanf ("%c", & edu);
    puts ("now enter the yers of service of an employee here :- ");
    scanf ("\n%f", & yos);
    puts ("now if you are female then enter f and if you are male then enter m here :- ");
    scanf ("\n%c", & gen);
    puts ("salary of an employee is ");
    if (gen == 'm' && edu == 'p' && yos >= 10)
        printf ("1500");
    else if (gen == 'm' && edu == 'g' && yos >= 10)
        puts ("1000");
    else if (gen == 'm' && edu == 'p' && yos < 10)
        puts ("10000");
    else if (gen == 'm' && edu == 'g' && yos < 10)
        puts ("7000");
    else if (gen == 'f') {
        if (edu == 'p' && yos >= 10)
            puts ("12000");
        else if (edu == 'g' && yos >= 10)
            puts ("9000");
        else if (yos < 10 && edu == 'p')
            puts ("10000");
        else if (edu == 'g' && yos < 10)
            puts ("6000");
        else
            puts ("i dont know!!!!! ");
    }
    puts ("\nnow enter any digit to exit\n");
    scanf ("%d", & exi);
    printf ("you enterd %d , thus good bye", exi);
    return 0;
}
----------------------------------------

int main () {
    char gen;
    char edu [3];
    int exi;
    float yos;
    printf ("This program finds out the salary of an employee\nnow if you are graduate then enter g and if you post graduate then enter pg here :-  ");
    scanf ("%s", edu);
    printf ("now enter the yers of service of an employee here :- ");
    scanf ("%f", & yos);
    printf ("now if you are female then enter f and if you are male then enter m here :- ");
    scanf (" %c", & gen);
    printf ("salary of an employee is ");
    if (gen == 'm') {
        if ((strcmp (edu, "pg") == 0) && yos >= 10)
            printf ("1500");
        else if ((strcmp (edu, "g") == 0) && yos >= 10)
            printf ("1000");
        else if ((strcmp (edu, "pg") == 0) && yos < 10)
            printf ("10000");
        else if ((strcmp (edu, "g") == 0) && yos < 10)
            printf ("7000");
    }
    else {
        if ((strcmp (edu, "pg") == 0) && yos >= 10)
            printf ("12000");
        else if ((strcmp (edu, "g") == 0) && yos >= 10)
            printf ("9000");
        else if (yos < 10 && (strcmp (edu, "pg") == 0))
            printf ("10000");
        else if ((strcmp (edu, "g") == 0) && yos < 10)
            printf ("6000");
        else
            printf ("i dont know!!!!! ");
    }
    printf ("\nnow enter any digit to exit\n");
    scanf ("%d", & exi);
    printf ("you enterd %d , thus good bye", exi);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44101115_44101812_39_50
44101115_44123307_14_36
Title: printf a selected numbers in an array 
----------------------------------------

int main () {
    int ar1 [N], mx, ar2 [N], ar3 [N], i;
    input (ar1);
    max (& mx);
    input2 (ar2, mx);
    input3 (ar3, ar1, ar2);
    int a_size = sizeof (ar3) / sizeof (ar3[0]);
    a_size = compact (ar3, a_size);
    print (ar3, a_size, "\nAnswer:", "a");
    printf ("array1 = %d %d %d %d %d %d %d\n", ar1 [0], ar1 [1], ar1 [2], ar1 [3], ar1 [4], ar1 [5], ar1 [6]);
    printf ("array2 = %d %d %d %d %d %d %d\n", ar2 [0], ar2 [1], ar2 [2], ar2 [3], ar2 [4], ar2 [5], ar2 [6]);
}
----------------------------------------

int main (void) {
    int ar1 [N];
    int mx;
    int ar2 [N];
    int ar3 [N];
    srand ((unsigned) time (0));
    input (ar1);
    max ((unsigned *) & mx);
    input2 (ar2, mx);
    input3 (ar3, ar1, ar2);
    printf ("array1 = %d %d %d %d %d %d %d\n", ar1 [0], ar1 [1], ar1 [2], ar1 [3], ar1 [4], ar1 [5], ar1 [6]);
    printf ("array2 = %d %d %d %d %d %d %d\n", ar2 [0], ar2 [1], ar2 [2], ar2 [3], ar2 [4], ar2 [5], ar2 [6]);
    printf ("array3 = %d %d %d %d %d %d %d\n", ar3 [0], ar3 [1], ar3 [2], ar3 [3], ar3 [4], ar3 [5], ar3 [6]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44114652_44116440_3_29
44114652_44118417_12_22
Title: C - How to arrange the first number of a couple in ascending order? 
----------------------------------------

int main (void) {
    const size_t n = 4;
    int a [2 * n] = {4, -6, 2, 10, 3, 0, 1, 9};
    for (size_t i = 0; i < 2 * n; i++)
        printf ("%d ", a[i]);
    putchar ('\n');
    for (size_t m = n, last = n; !(m < 2); m = last) {
        for (size_t i = last = 1; i < m; i++) {
            if (a[2 * i] < a[2 * (i - 1)]) {
                int tmp [2] = {a[2 * i], a[2 * i + 1]};
                a[2 * i] = a[2 * (i - 1)];
                a[2 * i + 1] = a[2 * (i - 1) + 1];
                a[2 * (i - 1)] = tmp[0];
                a[2 * (i - 1) + 1] = tmp[1];
                last = i;
            }
        }
    }
    for (size_t i = 0; i < 2 * n; i++)
        printf ("%d ", a[i]);
    putchar ('\n');
}
----------------------------------------

int main () {
    int n;
    printf ("Enter the number of pairs, n:\n");
    scanf ("%d", & n);
    num_pair array [n];
    create_num_pair_array (array, n);
    sort_pairs (array, n);
    print_num_pairs (array, n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44115777_44116361_1_29
44115777_44154735_182_200
Title: LinkedList - Type in C - Accessing Functions 
----------------------------------------

int print_list (LinkedList *list) {
    if (DEBUG)
        printf ("%s:%d called \n", __FUNCTION__, __LINE__);
    if (list->size <= 0)
        return -1;
    printf ("List.size = %d \n", list -> size);
    Node *startN = list->first;
    while (startN != NULL) {
        printf ("Node#%d.string = '%s', .next = '%d' \n", startN -> key, startN -> string, startN -> next -> key);
        startN = startN->next;
    }
    return 0;
}
----------------------------------------

int print_list (LinkedList *list) {
    printf ("----------------------\n");
    if (list->size <= 0)
        return ERROR;
    printf ("List.size = %d \n", list -> size);
    Node *startN = list->first;
    do {
        printf ("Node#%d.string = '%s', .next = '%p' \n", startN -> key, startN -> string, startN -> next);
        startN = startN->next;
    }
    while (startN != NULL);
    return OK;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44138053_44138161_4_20
44138053_44138417_4_21
Title: Splitting an Int to 3 bytes and back in C 
----------------------------------------

int main (void) {
    int a = 626;
    uint8_t msb = (a >> 16) & 0xff;
    uint8_t msb1 = (a >> 8) & 0xff;
    uint8_t lsb = a & 0xff;
    printf ("MSB: %u, MSB1: %u, LSB: %u\n", msb, msb1, lsb);
    uint32_t b = msb;
    b = (b << 8) | msb1;
    b = (b << 8) | lsb;
    printf ("Final: %d\n", b);
    return 0;
}
----------------------------------------

int main () {
    uint32_t a = 626;
    uint8_t bytes [4];
    bytes[0] = a & 0xff;
    bytes[1] = (a >> 8) & 0xff;
    bytes[2] = (a >> 16) & 0xff;
    bytes[3] = (a >> 24) & 0xff;
    printf ("Bytes: %u, %u, %u, %u\n", bytes [0], bytes [1], bytes [2], bytes [3]);
    uint32_t b = (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0];
    printf ("Final: %u\n", b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44148165_44148447_2_24
44148165_44148458_3_26
Title: Making rectangle based on input 
----------------------------------------

int main () {
    int width;
    int breadth;
    scanf ("%d", & width);
    scanf ("%d", & breadth);
    if (width == 1 && breadth == 1) {
        printf ("#\n");
    }
    else {
        for (int i = 0; i < breadth; i++) {
            for (int j = 0; j < width; j++) {
                if (i == 0 || j == 0)
                    printf ("#");
                else if (i == (breadth - 1) || j == (width - 1))
                    printf ("#");
                else
                    printf (".");
            }
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int width;
    int breadth;
    scanf ("%d %d", & width, & breadth);
    if (width == 1 && breadth == 1)
        printf ("#\n");
    else {
        for (int i = 0; i < breadth; i++) {
            for (int j = 0; j < width; j++)
                if (j == 0 || j == width - 1 || i == 0 || i == breadth - 1)
                    printf ("#");
                else
                    printf (".");
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44148165_44148447_2_24
44148165_44149918_1_24
Title: Making rectangle based on input 
----------------------------------------

int main () {
    int width;
    int breadth;
    scanf ("%d", & width);
    scanf ("%d", & breadth);
    if (width == 1 && breadth == 1) {
        printf ("#\n");
    }
    else {
        for (int i = 0; i < breadth; i++) {
            for (int j = 0; j < width; j++) {
                if (i == 0 || j == 0)
                    printf ("#");
                else if (i == (breadth - 1) || j == (width - 1))
                    printf ("#");
                else
                    printf (".");
            }
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int width;
    int breadth;
    scanf ("%d", & width);
    scanf ("%d", & breadth);
    for (int i = 0; i < width; i++) {
        for (int j = 0; j < breadth; j++) {
            if ((i == 0) || i == (width - 1)) {
                printf ("#");
            }
            else if ((j == 0) || (j == (breadth - 1))) {
                printf ("#");
            }
            else {
                printf (".");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44148165_44148458_3_26
44148165_44149918_1_24
Title: Making rectangle based on input 
----------------------------------------

int main () {
    int width;
    int breadth;
    scanf ("%d %d", & width, & breadth);
    if (width == 1 && breadth == 1)
        printf ("#\n");
    else {
        for (int i = 0; i < breadth; i++) {
            for (int j = 0; j < width; j++)
                if (j == 0 || j == width - 1 || i == 0 || i == breadth - 1)
                    printf ("#");
                else
                    printf (".");
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int width;
    int breadth;
    scanf ("%d", & width);
    scanf ("%d", & breadth);
    for (int i = 0; i < width; i++) {
        for (int j = 0; j < breadth; j++) {
            if ((i == 0) || i == (width - 1)) {
                printf ("#");
            }
            else if ((j == 0) || (j == (breadth - 1))) {
                printf ("#");
            }
            else {
                printf (".");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44149429_44149993_2_17
44149429_44150151_3_28
Title: my code fails in one test case. am i doing wrong? 
----------------------------------------

int main (void) {
    int n;
    double p = 1;
    scanf ("%d", & n);
    if (n > 0) {
        for (int i = 0; i < n; i++, p *= 2)
            printf ("%.0lf,", p);
        printf ("%.0lf", p);
    }
    else if (n == 0)
        printf ("1");
    else {
        for (int i = 0; i > n; i--, p /= 2)
            printf ("%.0lf,", p);
        printf ("%.0lf", p);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n;
    double p = 1.0;
    long long llp = 1;
    scanf ("%d", & n);
    if (n > 0) {
        for (int i = 0; i <= n; i++) {
            printf ("%lld", llp);
            if (i < n)
                printf (",");
            llp *= 2;
        }
    }
    else if (n < 0) {
        for (int i = n; i <= 0; i++) {
            printf ("%.5lf", p);
            if (i < 0)
                printf (",");
            p *= 0.5;
        }
    }
    else
        printf ("1");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44166213_44166639_16_26
44166213_44167575_18_30
Title: "3 monkeys printing values have to be synced with semaphores" 
----------------------------------------

void *Monkey2 () {
    int i;
    sem_wait (& s1);
    printf ("2");
    sem_post (& s2);
    sem_post (& s2);
    sem_wait (& s1);
    printf ("2");
    sem_post (& s2);
}
----------------------------------------

void *Monkey2 () {
    while (1) {
        sleep (1);
        sem_wait (& s2);
        for (int i = 0; i < 2; ++i) {
            sleep (1);
            sem_wait (& s1);
            printf ("2\n");
            sem_post (& s1);
        }
        sem_post (& s2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44166213_44166639_1_15
44166213_44167575_5_17
Title: "3 monkeys printing values have to be synced with semaphores" 
----------------------------------------

void *Monkey1 (void *param) {
    int i;
    for (i = 0; i < 2; i++) {
        printf ("1");
    }
    sem_post (& s1);
    sem_wait (& s2);
    for (i = 0; i < 2; i++) {
        printf ("1");
    }
    sem_post (& s1);
    sem_post (& s1);
}
----------------------------------------

void *Monkey1 (void *param) {
    while (1) {
        sleep (1);
        for (int j = 0; j < 2; j++) {
            sleep (1);
            sem_wait (& s1);
            for (int i = 0; i < 2; i++) {
                printf ("1\n");
            }
            sem_post (& s1);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44166213_44167514_17_27
44166213_44167575_18_30
Title: "3 monkeys printing values have to be synced with semaphores" 
----------------------------------------

void *Monkey2 () {
    sem_wait (& s1);
    printf ("2");
    sem_post (& s1);
    sem_wait (& s1);
    printf ("2");
    sem_post (& s2);
    sem_wait (& s2);
    sem_post (& s1);
}
----------------------------------------

void *Monkey2 () {
    while (1) {
        sleep (1);
        sem_wait (& s2);
        for (int i = 0; i < 2; ++i) {
            sleep (1);
            sem_wait (& s1);
            printf ("2\n");
            sem_post (& s1);
        }
        sem_post (& s2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44166213_44167514_1_15
44166213_44167575_5_17
Title: "3 monkeys printing values have to be synced with semaphores" 
----------------------------------------

void *Monkey1 (void *param) {
    int i;
    for (i = 0; i < 2; i++) {
        printf ("1");
    }
    sem_post (& s1);
    sem_wait (& s1);
    for (i = 0; i < 2; i++) {
        printf ("1");
    }
    sem_post (& s1);
    sem_wait (& s1);
}
----------------------------------------

void *Monkey1 (void *param) {
    while (1) {
        sleep (1);
        for (int j = 0; j < 2; j++) {
            sleep (1);
            sem_wait (& s1);
            for (int i = 0; i < 2; i++) {
                printf ("1\n");
            }
            sem_post (& s1);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44177610_44177846_1_15
44177610_44177870_1_16
Title: "Invalid read of size 8  at 0x400886: set_random_fill (app.c:60)" 
----------------------------------------

set *set_allocate (int numbers_amount) {
    set *allocatable_set = malloc (sizeof (set));
    if (allocatable_set == NULL) {
        return (NULL);
    }
    allocatable_set->size = numbers_amount;
    allocatable_set->array = calloc ((unsigned long) numbers_amount, sizeof (int));
    return (allocatable_set);
}
----------------------------------------

set *set_allocate (int numbers_amount) {
    set *allocatable_set = malloc (sizeof (set));
    if (allocatable_set != NULL) {
        allocatable_set->size = numbers_amount;
        allocatable_set->array = calloc ((unsigned long) numbers_amount, sizeof (int));
        if (allocatable_set->array == NULL) {
            free (allocatable_set);
            allocatable_set = NULL;
        }
    }
    return allocatable_set;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44196705_44196935_2_27
44196705_44199270_2_30
Title: C Programming sum of all integer numbers between two integers 
----------------------------------------

int main (void) {
    int a = 0;
    int b = 0;
    int correctInput = 0;
    int total_sum = 0;
    do {
        printf ("Type the first number : \n");
        scanf ("%d", & a);
        printf ("Type the second number : \n");
        scanf ("%d", & b);
        if (a < b)
            correctInput = 1;
        else
            printf ("The second number should be bigger than the first one.\n");
    }
    while (correctInput == 0);
    while (a <= b) {
        total_sum += a;
        a++;
    }
    printf ("Result : %d \n", total_sum);
    return 0;
}
----------------------------------------

int main (void) {
    int a = 0;
    int b = 0;
    int sum;
    while (1) {
        printf ("Type the first number : ");
        scanf ("%d", & a);
        printf ("Type the second number : ");
        scanf ("%d", & b);
        if (a > b) {
            printf ("The second number should be bigger than the first one.\n");
        }
        else {
            break;
        }
    }
    sum = ((b * (b + 1)) - (a * (a - 1))) / 2;
    printf ("Result : %d ", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44212095_44212703_35_55
44212095_44215142_6_42
Title: how do I correct this code to check for anagrams? 
----------------------------------------

int main (void) {
    const char *a = "stack";
    const char *b = "kcats";
    printf ("anagram: %d\n", anagram (a, b));
    b = "cats";
    printf ("anagram: %d\n", anagram (a, b));
    b = "kcbts";
    printf ("anagram: %d\n", anagram (a, b));
    a = "aabbcdddd";
    b = "aaddddbbc";
    printf ("anagram: %d\n", anagram (a, b));
    a = "aabbcddcd";
    b = "aadddddbc";
    printf ("anagram: %d\n", anagram (a, b));
    return EXIT_SUCCESS;
}
----------------------------------------

int main (int argc, char **argv) {
    char *sub = argc > 1 ? argv[1] : "anagram", *ana = argc > 2 ? argv[2] : "nag a ram", *sp = sub, *ap = ana;
    int subf [MAXF] = {0}, anaf [MAXF] = {0};
    while (*sp) {
        if ('a' <= *sp && *sp <= 'z')
            subf[*sp - 'a']++;
        else if ('A' <= *sp && *sp <= 'Z')
            subf[*sp - 'A' + 26]++;
        else if ('0' <= *sp && *sp <= '9')
            subf[*sp - '0' + 52]++;
        sp++;
    }
    while (*ap) {
        if ('a' <= *ap && *ap <= 'z')
            anaf[*ap - 'a']++;
        else if ('A' <= *ap && *ap <= 'Z')
            anaf[*ap - 'A' + 26]++;
        else if ('0' <= *ap && *ap <= '9')
            anaf[*ap - '0' + 52]++;
        ap++;
    }
    if (memcmp (subf, anaf, MAXF * sizeof *subf) == 0)
        printf ("'%s' is an anagram of '%s'\n", ana, sub);
    else
        printf ("'%s' is NOT an anagram of '%s'\n", ana, sub);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4421639_4477386_79_114
4421639_4489237_86_96
Title: Randomly permute N first elements of a singly linked list 
----------------------------------------

int main (int argc, char *argv []) {
    srand (time (NULL));
    printf ("Original Linked List\n");
    int i;
    node *x = (node *) malloc (sizeof (node));
    node *root = x;
    x->value = 0;
    for (i = 1; i < N; ++i) {
        node *xx;
        xx = (node *) malloc (sizeof (node));
        xx->value = i;
        xx->next = 0;
        x->next = xx;
        x = xx;
    }
    x = root;
    do {
        printf ("%d, ", x -> value);
        x = x->next;
    }
    while (x);
    x = root;
    node *left, *right;
    mergeRandomize (& x);
    if (!x) {
        printf ("Error.\n");
        return -1;
    }
    printf ("\nNow randomized:\n");
    do {
        printf ("%d, ", x -> value);
        x = x->next;
    }
    while (x);
    printf ("\n");
    return 0;
}
----------------------------------------

int main (int len, char *str []) {
    if (len > 1) {
        node *l;
        len--;
        str++;
        l = array_to_list (len, str);
        randomize_list (& l, len);
        dump_list (l);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44218094_44219198_12_21
44218094_44221705_57_75
Title: Returning a locally defined array of strings from a function produces memory error 
----------------------------------------

int main () {
    char *t [] = {"apple", "pineapple", "orange", "apple", "banana", "grape"};
    char **result = foo (t, sizeof (t) / sizeof (char *));
    char **tmp;
    for (tmp = result; *tmp; ++tmp)
        printf ("%s\n", *tmp);
    free (result);
    return 0;
}
----------------------------------------

int main (void) {
    int i, n = 0;
    char *t [] = {"apple", "pineapple", "orange", "apple", "banana", "grape"}, **result = foo (t, sizeof t / sizeof *t, &n);
    if (!result) {
        fprintf (stderr, "foo() error: result is NULL.\n");
        return 1;
    }
    for (i = 0; i < n; i++)
        printf ("%s\n", result[i]);
    free (result);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44218094_44219198_24_83
44218094_44221705_5_55
Title: Returning a locally defined array of strings from a function produces memory error 
----------------------------------------

char **foo (char **stringPtrs, size_t size) {
    size_t currentLength;
    size_t shortestaLength = strlen (stringPtrs[0]);
    size_t numOfShortest = 0;
    for (size_t i = 0; i < size; i++) {
        currentLength = strlen (stringPtrs[i]);
        if (shortestaLength > currentLength)
            shortestaLength = currentLength;
    }
    for (size_t i = 0; i < size; i++) {
        currentLength = strlen (stringPtrs[i]);
        if (shortestaLength == currentLength)
            numOfShortest++;
    }
    char **shortestPtrs = NULL;
    shortestPtrs = calloc (numOfShortest +1, sizeof (char *));
    if (!shortestPtrs) {
        perror ("calloc failed");
        exit (EXIT_FAILURE);
    }
    size_t shortestIndex = 0;
    for (size_t i = 0; i < size; i++) {
        currentLength = strlen (stringPtrs[i]);
        if (shortestaLength == currentLength) {
            shortestPtrs[shortestIndex] = stringPtrs[i];
            shortestIndex++;
        }
    }
    return shortestPtrs;
}
----------------------------------------

char **foo (char **t, int size, int *num_of_shortest) {
    if (!t || !*t || size < 1 || !num_of_shortest) {
        fprintf (stderr, "foo() error: invalid paramater.\n");
        return NULL;
    }
    char **array_of_shortests = NULL;
    int i, ndx = 0, current_length, shortest_length = strlen (t[0]);
    *num_of_shortest = 0;
    for (i = 0; i < size; i++) {
        current_length = strlen (t[i]);
        if (current_length < shortest_length)
            shortest_length = current_length;
    }
    for (i = 0; i < size; i++) {
        current_length = strlen (t[i]);
        if (shortest_length == current_length)
            (*num_of_shortest)++;
    }
    if (!(array_of_shortests = malloc (sizeof *array_of_shortests * *num_of_shortest)))
        return NULL;
    for (i = 0; i < size; i++) {
        current_length = strlen (t[i]);
        if (current_length == shortest_length)
            array_of_shortests[ndx++] = t[i];
    }
    return array_of_shortests;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44219657_44220000_6_24
44219657_44220668_10_29
Title: C - Recursion with strings 
----------------------------------------

int main () {
    char str [SIZE];
    char *pstart = NULL;
    char *pmiddle = NULL;
    char *end = NULL;
    int flag [1];
    *flag = 0;
    printf ("Enter a String-->:");
    fgets (str, SIZE, stdin);
    pstart = &str[0];
    pmiddle = &str[(strlen (str) - 1) / 2];
    end = pmiddle;
    printf ("  %d \n", CheckString (pstart, pmiddle, end, flag));
    return 0;
}
----------------------------------------

int main () {
    char str [SIZE];
    for (;;) {
        printf ("Enter a String-->:");
        if (fgets (str, SIZE, stdin) == NULL)
            break;
        size_t length = strcspn (str, "\n");
        str[length] = '\0';
        if (length == 0)
            continue;
        printf ("%s\n", CheckString (str, str + length / 2) ? "True" : "False");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44224358_44224434_1_13
44224358_44224435_1_11
Title: Running thread simultaneously with program in C 
----------------------------------------

void *LEDReadingsTimer (void *args) {
    struct params *pars = args;
    while (timer != 0) {
        delay (2000);
        LEDReadings (pars -> buffer, pars -> clientSocket);
        printf ("Data Sent to Android!\n");
    }
    return 0;
}
----------------------------------------

void *LEDReadingsTimer (void *args) {
    struct LEDReadingsTimerArgs *lrtArgs = args;
    while (timer != 0) {
        delay (2000);
        LEDReadings (lrtArgs -> buffer, lrtArgs -> clientSocket);
        printf ("Data Sent to Android!\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44229392_44229553_1_17
44229392_44229822_7_37
Title: Reverse of a Integer with integer overflow condition 
----------------------------------------

long long reverse (long long x) {
    long long reversednum = 0;
    int sign = 1;
    if (x < 0)
        sign = -1;
    x = abs (x);
    while (x) {
        reversednum = reversednum * 10;
        reversednum = reversednum + (x % 10);
        x = x / 10;
    }
    return (reversednum < LLONG_MAX || reversednum > LLONG_MIN) ? reversednum * sign : 0;
}
----------------------------------------

long long reverse (long long x) {
    long long reversednum = 0;
    long long int_max = INT_MAX;
    long long int_min = INT_MIN;
    int sign = 1;
    if (x < 0) {
        sign = -1;
        x = -x;
    }
    while (x) {
        reversednum = reversednum * 10;
        reversednum = reversednum + (x % 10);
        x = x / 10;
    }
    return (reversednum < int_max && reversednum > int_min) ? reversednum * sign : 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44230075_44230318_10_54
44230075_44230587_6_35
Title: how to record multiple max values from a 2D array in C using stdio.h 
----------------------------------------

int main () {
    int max = 0, week, i, j, day;
    int table [y] [x] = {{32, 31, 30, 31, 32, 33, 32}, {33, 32, 34, 35, 34, 36, 36}, {34, 34, 36, 36, 37, 38, 38}, {38, 37, 36, 35, 34, 33, 32}};
    dayRecord *list = NULL;
    for (i = 0; i < y; i++) {
        for (j = 0; j < x; j++) {
            if (max < table[i][j]) {
                max = table[i][j];
                dayRecord *d = malloc (sizeof (dayRecord));
                d->day = j + 1;
                d->week = i + 1;
                d->next = NULL;
                list = d;
            }
            else if (max == table[i][j]) {
                dayRecord *d = malloc (sizeof (dayRecord));
                d->day = j + 1;
                d->week = i + 1;
                d->next = list;
                list = d;
            }
        }
    }
    while (list->next != NULL) {
        int day = list->day;
        int week = list->week;
        list = list->next;
        switch (day) {
            {
            case 1 :
                printf ("The highesest tempreture %d was recorded on Monday of week %d\n", max, week);
                break;
            }
            {
            case 2 :
                printf ("The highesest tempreture %d was recorded on Tuesday of week %d\n", max, week);
                break;
            }
            {
            case 3 :
                printf ("The highesest tempreture %d was recorded on Wednesday of week %d\n", max, week);
                break;
            }
            {
            case 4 :
                printf ("The highesest tempreture %d was recorded on Thursday of week %d\n", max, week);
                break;
            }
            {
            case 5 :
                printf ("The highesest tempreture %d was recorded on Friday of week %d\n", max, week);
                break;
            }
            {
            case 6 :
                printf ("The highesest tempreture %d was recorded on Saturday of week %d\n", max, week);
                break;
            }
            {
            case 7 :
                printf ("The highesest tempreture %d was recorded on Sunday of week %d\n", max, week);
                break;
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int max, week, day;
    int table [NWEEKS] [WEEKDAYS] = {{32, 31, 30, 31, 32, 33, 32}, {33, 32, 34, 35, 34, 36, 36}, {34, 34, 36, 36, 37, 38, 38}, {38, 37, 36, 35, 34, 33, 32}};
    const char *dayname [WEEKDAYS] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
    max = table[0][0];
    for (week = 0; week < NWEEKS; week++) {
        for (day = 0; day < WEEKDAYS; day++) {
            if (max < table[week][day]) {
                max = table[week][day];
            }
        }
    }
    printf ("The highest temperature is %d\n", max);
    for (week = 0; week < NWEEKS; week++) {
        for (day = 0; day < WEEKDAYS; day++) {
            if (table[week][day] == max) {
                printf ("It was recorded on %s of week %d\n", dayname [day], week + 1);
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44249243_44249540_4_30
44249243_44250461_10_54
Title: How to copy the string which has termination characters into another string in C? 
----------------------------------------

int main () {
    char s [11];
    scanf ("%s", s);
    char token [2] = "-";
    int count = 0;
    char year [5], month [3], day [3];
    char *split;
    split = strtok (s, token);
    while (split != NULL) {
        if (count == 0) {
            strcpy (year, split);
        }
        else if (count == 1) {
            strcpy (month, split);
        }
        else {
            strcpy (day, split);
        }
        split = strtok (NULL, token);
        count++;
    }
    printf ("\n%s", month);
    return 0;
}
----------------------------------------

int main (argc, argv)
    int argc;
    char *argv [];
{
    int nummatch = 4;
    char year_cp [5], mon_cp [3], date_cp [3];
    regex_t dateregx;
    regmatch_t pmatch [nummatch];
    int i, rv;
    const char *pattern = "^([[:digit:]]{4})[^[:digit:]]?([[:digit:]]{2})[^[:digit:]]?([[:digit:]]{2})";
    char dateline [80] = "2017-05/29";
    char tmpvalue [256];
    if (regcomp (&dateregx, pattern, REG_EXTENDED) != 0) {
        fprintf (stderr, "Pattern failed to compile.\n");
        return -1;
    }
    if (regexec (&dateregx, dateline, nummatch, pmatch, 0) != 0) {
        fprintf (stderr, "dateline <%s> does not match pattern <%s>\n", dateline, pattern);
        return -1;
    }
    for (i = 0; i < nummatch && pmatch[i].rm_so != -1; i++) {
        memset (tmpvalue, 0, 256);
        strncpy (tmpvalue, & dateline [pmatch [i].rm_so], pmatch [i].rm_eo - pmatch [i].rm_so);
        printf ("matched pmatch[%d].rm_so: %d    pmatch[%d].rm_eo: %d  -   \"%s\"\n", i, (int) pmatch [i].rm_so, i, (int) pmatch [i].rm_eo, tmpvalue);
        if (i == 1) {
            strcpy (year_cp, tmpvalue);
        }
        else if (i == 2) {
            strcpy (mon_cp, tmpvalue);
        }
        else if (i == 3) {
            strcpy (date_cp, tmpvalue);
        }
    }
    printf ("Year: %s\tMonth: %s\tDay: %s\n", year_cp, mon_cp, date_cp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4426306_4426359_1_10
4426306_4426661_56_67
Title: Palindrome Using a stack 
----------------------------------------

char pop (Stack **head) {
    Stack *temp;
    char val;
    temp = *head;
    if (!temp)
        return 0;
    val = temp->name;
    *head = (*head)->next;
    free (temp);
    return val;
}
----------------------------------------

char pop (Stack **head) {
    Stack *temp;
    char val;
    temp = *head;
    val = temp->name;
    *head = (*head)->next;
    free (temp);
    return val;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44263264_44263810_4_40
44263264_44266152_14_39
Title: how to find max number among results 
----------------------------------------

int main () {
    int i;
    int max;
    int sum = 0;
    int aryNum [5];
    int aryRem [5];
    printf ("give 5 integers \n");
    for (i = 0; i < 5; i++) {
        scanf ("%d", & aryNum [i]);
    }
    printf ("division remainder is: ");
    for (i = 0; i < 5; i++) {
        aryRem[i] = aryNum[i] % 10;
        printf ("%d ", aryRem [i]);
    }
    printf ("\n");
    max = aryRem[0];
    sum = max;
    for (i = 1; i < 5; i++) {
        if (max < aryRem[i]) {
            max = aryRem[i];
        }
        sum += aryRem[i];
    }
    printf ("the sum of the remains is: %d\n", sum);
    printf ("maximum remains is: %d\n", max);
    system ("pause");
    return 0;
}
----------------------------------------

int main (void) {
    srand (time (NULL));
    int n = 5;
    printf ("give 5 integers\n");
    int *integers = rands_range (n, 10, 100);
    print (stdout, n, integers);
    putchar ('\n');
    printf ("division remainder is: ");
    int *rems = map (n, integers, rem10);
    print (stdout, n, rems);
    putchar ('\n');
    int sum = fold (n, rems, 0, add);
    printf ("the sum of the remains is: %d\n", sum);
    putchar ('\n');
    int max = fold (n, rems, *rems, greater);
    printf ("the max of the remains is:  %d\n", max);
    putchar ('\n');
    free (integers);
    free (rems);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44266715_44267184_5_21
44266715_44278450_4_16
Title: why Power int on C is incorrect? 
----------------------------------------

int main (void) {
    double P, x;
    int n;
    printf ("Calculons le polynome P(x)\n");
    printf ("Entrer la valeur de x: ");
    n = scanf ("%lf", &x);
    if (n == 1) {
        P = pow (x, 2.0);
        printf ("%.2f\n", P);
    }
    else {
        fprintf (stderr, "Entrée invalide\n");
        exit (EXIT_FAILURE);
    }
    return 0;
}
----------------------------------------

int main () {
    double P;
    int x;
    printf ("Calculons le polynome P(x)\n");
    printf ("Entrer la valeur de x :");
    scanf ("%d", & x);
    P = pow (x, 2);
    printf ("%f", P);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44275216_44275261_3_25
44275216_44275582_1_17
Title: How to sum two arrays in another array in C? 
----------------------------------------

int main () {
    int v1 [3], v2 [3], v3 [3], i;
    for (i = 0; i < 3; i++) {
        printf ("Type a number : \n");
        scanf ("%d", & v1 [i]);
    }
    for (i = 0; i < 3; i++) {
        printf ("Type a number : \n");
        scanf ("%d", & v2 [i]);
    }
    for (i = 0; i < 3; i++) {
        v3[i] = v1[i] + v2[i];
        printf ("Total : %d\n", v3 [i]);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    int v1 [3], v2 [3], v3 [3];
    for (int i = 0; i < 3; i++) {
        printf ("Type a number for v1 :\t");
        scanf ("%d", & v1 [i]);
        printf ("Type a number for v2 :\t");
        scanf ("%d", & v2 [i]);
        v3[i] = v1[i] + v2[i];
    }
    printf ("\nResult Arr :\n");
    for (int i = 0; i < 3; i++)
        printf ("%d\n", v3[i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44300610_44300939_3_15
44300610_44312138_3_34
Title: "Program to count blanks tabs and newlines" 
----------------------------------------

int main () {
    int nl = 0, nb = 0, nt = 0;
    int c;
    while ((c = getchar ()) != EOF) {
        if (c == '\n')
            nl++;
        if (c == '\t')
            nt++;
        if (c == ' ')
            nb++;
    }
    printf ("lines = %d, blanks= %d, tabs=%d ", nl, nb, nt);
    return 0;
}
----------------------------------------

int main (void) {
    double nl = 0.0;
    double nb = 0.0;
    double nt = 0.0;
    int c;
    while ((c = getchar ()) != EOF) {
        switch (c) {
        case '\n' :
            nl += 1.0;
            break;
        case ' ' :
            nb += 1.0;
            break;
        case '\t' :
            nt += 1.0;
            break;
        default :
            break;
        }
    }
    printf ("lines = %f, blanks= %f, tabs=%f ", nl, nb, nt);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44305180_44305382_3_15
44305180_44306094_21_35
Title: Returns a value as an output parameter 
----------------------------------------

int rootnumber (double a, double b, double c) {
    double formula = (b * b) - (4 * (a) *(c));
    if (formula > 0) {
        return 2;
    }
    else if (formula < 0) {
        return 0;
    }
    else {
        return 1;
    }
}
----------------------------------------

int rootnumber (double a, double b, double c) {
    int formula = (b * b) - (4 * a * c);
    if (formula < 0)
        return 0;
    if (formula == 0)
        return 1;
    else
        return 2;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44312720_44312965_4_30
44312720_44314443_5_20
Title: How to allocate a large memory in C 
----------------------------------------

int main (void) {
    size_t mem_size = 1024 * 1024 * 1024;
    printf ("MEMSIZE: %lu\n", mem_size);
    printf ("SIZE OF: void*:%lu\n", sizeof (void *));
    printf ("SIZE OF: char*:%lun", sizeof (char *));
    void *based = malloc (mem_size);
    int stage = 65536;
    int initialized = 0;
    if (based) {
        printf ("Allocated %zu Bytes from %p to %p\n", mem_size, based, based + mem_size);
    }
    else {
        printf ("Error in allocation.\n");
        return 1;
    }
    int n = 0;
    while (initialized < mem_size) {
        n++;
        memset ((char *) based + initialized, '$', stage);
        initialized += stage;
    }
    free (based);
    return 0;
}
----------------------------------------

int main (int arc, char **argv) {
    char *c = malloc (sizeof (char) * 1024 * 1024 * 1024 * 5);
    if (c) {
        printf ("allocated memory\n");
        memset (c, 1, sizeof (char) * 1024 * 1024 * 1024 * 5);
        free (c);
    }
    else {
        printf ("Out of memory\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44312720_44312965_4_30
44312720_44320136_1_21
Title: How to allocate a large memory in C 
----------------------------------------

int main (void) {
    size_t mem_size = 1024 * 1024 * 1024;
    printf ("MEMSIZE: %lu\n", mem_size);
    printf ("SIZE OF: void*:%lu\n", sizeof (void *));
    printf ("SIZE OF: char*:%lun", sizeof (char *));
    void *based = malloc (mem_size);
    int stage = 65536;
    int initialized = 0;
    if (based) {
        printf ("Allocated %zu Bytes from %p to %p\n", mem_size, based, based + mem_size);
    }
    else {
        printf ("Error in allocation.\n");
        return 1;
    }
    int n = 0;
    while (initialized < mem_size) {
        n++;
        memset ((char *) based + initialized, '$', stage);
        initialized += stage;
    }
    free (based);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    size_t mem_size = 1024 * 1024 * 1024;
    char *based = malloc (mem_size);
    if (based) {
        printf ("Allocated %zu Bytes from %lx to %lx\n", mem_size, based, based + mem_size);
    }
    else {
        printf ("Allocation Error.\n");
        return 1;
    }
    size_t stage = 65536;
    size_t initialized = 0;
    while (initialized < mem_size) {memset (based + initialized, '$', stage);
    initialized += stage;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44312720_44314443_5_20
44312720_44320136_1_21
Title: How to allocate a large memory in C 
----------------------------------------

int main (int arc, char **argv) {
    char *c = malloc (sizeof (char) * 1024 * 1024 * 1024 * 5);
    if (c) {
        printf ("allocated memory\n");
        memset (c, 1, sizeof (char) * 1024 * 1024 * 1024 * 5);
        free (c);
    }
    else {
        printf ("Out of memory\n");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    size_t mem_size = 1024 * 1024 * 1024;
    char *based = malloc (mem_size);
    if (based) {
        printf ("Allocated %zu Bytes from %lx to %lx\n", mem_size, based, based + mem_size);
    }
    else {
        printf ("Allocation Error.\n");
        return 1;
    }
    size_t stage = 65536;
    size_t initialized = 0;
    while (initialized < mem_size) {memset (based + initialized, '$', stage);
    initialized += stage;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44320451_44320603_2_19
44320451_44320717_22_51
Title: Scan String Input for each testcase in C 
----------------------------------------

int main () {
    int n;
    char str [100] [100];
    scanf ("%d\n", & n);
    for (int i = 0; i < n; i++) {
        scanf ("%s", str [i]);
    }
    for (int i = 0; i < n; i++)
        printf ("%s\n", str[i]);
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    int counter;
    scanf ("%d\n", & n);
    strs = (char **) calloc (n, sizeof (char *));
    if (strs == 0) {
        printf ("outer allocation failed!")
        return -1;
    }
    for (counter = 0; counter < n; counter++) {
        strs[counter] = (char *) malloc (MAX * sizeof (char));
        if (strs[counter] == 0) {
            printf ("allocate buffer %d failed!", counter)
            releaseMemory ();
            return -1;
        }
        scanf ("%s", & strs [counter]);
    }
    getchar ();
    releaseMemory ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44320451_44320603_2_19
44320451_44320779_4_22
Title: Scan String Input for each testcase in C 
----------------------------------------

int main () {
    int n;
    char str [100] [100];
    scanf ("%d\n", & n);
    for (int i = 0; i < n; i++) {
        scanf ("%s", str [i]);
    }
    for (int i = 0; i < n; i++)
        printf ("%s\n", str[i]);
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    char str [100];
    char **strArray;
    scanf ("%d", & n);
    strArray = (char **) malloc (n);
    for (i = 0; i < n; i++) {
        (strArray)[i] = (char *) malloc (sizeof (char) * 100);
        scanf ("%s", (strArray) [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%s\n", (strArray) [i]);
        free ((strArray) [i]);
    }
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44320451_44320717_22_51
44320451_44320779_4_22
Title: Scan String Input for each testcase in C 
----------------------------------------

int main () {
    int counter;
    scanf ("%d\n", & n);
    strs = (char **) calloc (n, sizeof (char *));
    if (strs == 0) {
        printf ("outer allocation failed!")
        return -1;
    }
    for (counter = 0; counter < n; counter++) {
        strs[counter] = (char *) malloc (MAX * sizeof (char));
        if (strs[counter] == 0) {
            printf ("allocate buffer %d failed!", counter)
            releaseMemory ();
            return -1;
        }
        scanf ("%s", & strs [counter]);
    }
    getchar ();
    releaseMemory ();
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    char str [100];
    char **strArray;
    scanf ("%d", & n);
    strArray = (char **) malloc (n);
    for (i = 0; i < n; i++) {
        (strArray)[i] = (char *) malloc (sizeof (char) * 100);
        scanf ("%s", (strArray) [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%s\n", (strArray) [i]);
        free ((strArray) [i]);
    }
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44325146_44325304_3_17
44325146_44325991_10_34
Title: Printing 0110 as palindrome 
----------------------------------------

int main () {
    char buffer [64];
    printf ("Enter a number to check if it is a palindrome or not\n");
    scanf ("%63s", buffer);
    size_t dim = strlen (buffer);
    for (size_t i = 0; i < (dim / 2); i++) {
        if (buffer[i] != buffer[dim - i - 1]) {
            printf ("%s is not a palindrome number.\n", buffer);
            return 0;
        }
    }
    printf ("%s is a palindrome number.\n", buffer);
    return 0;
}
----------------------------------------

int main () {
    int palindrome = 1;
    char *inp = (char *) malloc (100 * sizeof (char *));
    printf ("Enter a number to check if it is a palindrome or not\n");
    scanf ("%s", inp);
    int len = get_len (inp);
    int i;
    for (i = 0; i < len / 2; i++) {
        if (inp[i] != inp[len - i]) {
            palindrome = 0;
            break;
        }
    }
    if (palindrome)
        printf ("%s is a palindrome number.\n", inp);
    else
        printf ("%s is not a palindrome number.\n", inp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44333129_44333459_3_32
44333129_44333502_4_18
Title: While with multiple conditions 
----------------------------------------

int main (void) {
    char input [99] = "";
    int choice = 0;
    do {
        printf ("Enter 0 to quit\n");
        if (fgets (input, sizeof input, stdin)) {
            if (1 == sscanf (input, "%d", &choice)) {
                if (choice == 1 || choice == 2 || choice == 3) {
                    printf ("error\n");
                }
                else {
                    printf ("you entered %d\n", choice);
                }
            }
            else {
                if (0 == strcmp (input, "*\n")) {
                    printf ("error\n");
                }
                choice = -1;
            }
        }
        else {
            break;
        }
    }
    while (choice != 0);
    return 0;
}
----------------------------------------

int main (void) {
    char choice [201];
    do {
        scanf ("%200s", choice);
        if (strcmp (choice, "1") == 0 || strcmp (choice, "2") == 0 || strcmp (choice, "3") == 0)
            printf ("error");
    }
    while (strcmp (choice, "0") != 0);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44333129_44333459_3_32
44333129_44350375_4_33
Title: While with multiple conditions 
----------------------------------------

int main (void) {
    char input [99] = "";
    int choice = 0;
    do {
        printf ("Enter 0 to quit\n");
        if (fgets (input, sizeof input, stdin)) {
            if (1 == sscanf (input, "%d", &choice)) {
                if (choice == 1 || choice == 2 || choice == 3) {
                    printf ("error\n");
                }
                else {
                    printf ("you entered %d\n", choice);
                }
            }
            else {
                if (0 == strcmp (input, "*\n")) {
                    printf ("error\n");
                }
                choice = -1;
            }
        }
        else {
            break;
        }
    }
    while (choice != 0);
    return 0;
}
----------------------------------------

int main (void) {
    char choice;
    do {
        printf ("enter 0:");
        if (1 != scanf (" %c", &choice)) {
            perror ("scanf failed");
            exit (EXIT_FAILURE);
        }
        if (choice != '1' && choice != '2' && choice != '*') {
            printf ("error\n");
        }
    }
    while (choice != '0');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44333129_44333502_4_18
44333129_44350375_4_33
Title: While with multiple conditions 
----------------------------------------

int main (void) {
    char choice [201];
    do {
        scanf ("%200s", choice);
        if (strcmp (choice, "1") == 0 || strcmp (choice, "2") == 0 || strcmp (choice, "3") == 0)
            printf ("error");
    }
    while (strcmp (choice, "0") != 0);
    return 0;
}
----------------------------------------

int main (void) {
    char choice;
    do {
        printf ("enter 0:");
        if (1 != scanf (" %c", &choice)) {
            perror ("scanf failed");
            exit (EXIT_FAILURE);
        }
        if (choice != '1' && choice != '2' && choice != '*') {
            printf ("error\n");
        }
    }
    while (choice != '0');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44339223_44339703_15_52
44339223_44343489_14_39
Title: Difficulty splitting strings read from a file in C 
----------------------------------------

int main (void) {
    char buffer [4096], *curr = buffer;
    size_t len, buf_size = sizeof buffer;
    FILE *fp = fopen ("dic.txt", "r");
    while (fgets (curr, buf_size, fp)) {
        if (*curr == '\n' || !isupper (*curr)) {
            continue;
        }
        len = strlen (curr);
        curr += len;
        buf_size -= len;
        while (1) {
            curr = fgets (curr, buf_size, fp);
            if (!curr || *curr == '\n') {
                char *word, *defs;
                char *p = strchr (buffer, '.');
                if (p)
                    *p++ = 0;
                word = buffer;
                defs = p;
                func (word, defs);
                break;
            }
            len = strlen (curr);
            curr += len;
            buf_size -= len;
            assert (buf_size >= 2 || (fprintf (stderr, "small buffer\n"), 0));
        }
        curr = buffer;
        buf_size = sizeof buffer;
    }
    fclose (fp);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    defn *defs = NULL;
    size_t n = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    if (!(defs = readdict (fp, &n))) {
        fprintf (stderr, "readdict() error: no words read from file.\n");
        return 1;
    }
    if (fp != stdin)
        fclose (fp);
    for (size_t i = 0; i < n; i++) {
        printf ("\nword: %s\n\ndefinition: %s\n", defs [i].word, defs [i].def);
        free (defs [i].def);
    }
    free (defs);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44343053_44343075_4_15
44343053_44343126_4_17
Title: Print word by word (new lines) using String 
----------------------------------------

int main () {
    char str [] = "Hello! A_word and Another_word";
    unsigned int str_size = strlen (str);
    for (int i = 0; i < str_size; i++) {
        if (str[i] == ' ')
            printf ("\n");
        else
            printf ("%c", str[i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char str [] = "Hello! A_word and Another_word";
    char *token;
    char *saveptr = str;
    while (1) {
        token = strtok_r (saveptr, " ", &saveptr);
        if (token == NULL) {
            break;
        }
        printf ("%s\n", token);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44347555_44347587_1_12
44347555_44347730_4_23
Title: C - How to make sure that an array contains 8 integers with the value 0 or 1? 
----------------------------------------

int main (void) {
    int byte [8] = {0};
    printf ("Please enter 1 byte as a binary sequence: ");
    for (int i = 0; i < 8; i++) {
        byte[i] = getchar () - '0';
        if (byte[i] != 0 && byte[i] != 1)
            ;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char onezero [9] = "";
    int valid = 0;
    do {
        printf ("Please enter 1 byte as a binary sequence: ");
        if ((1 == (valid = scanf (" %8[01]", onezero))) && (8 == strlen (onezero))) {
            printf ("input was %s\n", onezero);
        }
        else {
            if (valid == EOF) {
                break;
            }
            while (getchar () != '\n') {
            }
            valid = 0;
        }
    }
    while (!valid);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44349064_44349093_15_26
44349064_44349340_33_62
Title: How to rearrange a two dimensional array 
----------------------------------------

int transpose (int *mtx, int width, int height) {
    int *tmtx = malloc (width *height * sizeof (int));
    if (!tmtx)
        return -1;
    for (y = 0; y < width; y++)
        for (x = 0; x < height; x++)
            tmtx[y * height + x] = mtx[x * width + y];
    mempy (mtx, tmtx, width * height * sizeof (int));
    free (tmtx);
}
----------------------------------------

static void transpose (int rows, int cols) {
    assert (rows * cols < 1000000);
    int src [rows] [cols];
    int dst [rows] [cols];
    Sequence2D dst2D = {0, 0, cols, rows};
    Sequence2D src2D = {0, 0, rows, cols};
    int cells = rows * cols;
    for (int i = 0; i < cells; i++) {
        src[src2D.idx_slow][src2D.idx_fast] = i;
        next2D (& src2D);
    }
    dump2D ("Source", rows, cols, src);
    for (int i = 0; i < cells; i++) {
        dst[dst2D.idx_fast][dst2D.idx_slow] = src[src2D.idx_slow][src2D.idx_fast];
        printf ("dst[%d][%d] = src[%d][%d] = %d\n", dst2D.idx_fast, dst2D.idx_slow, src2D.idx_slow, src2D.idx_fast, dst [dst2D.idx_fast] [dst2D.idx_slow]);
        next2D (& dst2D);
        next2D (& src2D);
    }
    dump2D ("Target", rows, cols, dst);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44352599_44352747_1_37
44352599_44353210_3_25
Title: "program that determines if array is ascending descending or random(C language)" 
----------------------------------------

int UpOrDown (int *arr, int size) {
    int i = 0;
    int j = 0;
    int flag = 0;
    if (arr[0] < arr[1]) {
        for (i = 1; i < size; i++) {
            if (arr[i] > arr[i + 1])
                flag = 1;
            else {
                flag = 0;
                break;
            }
        }
    }
    else {
        for (i = 1; i < size; i++) {
            if (arr[i] < arr[i + 1])
                flag = -1;
            else {
                flag = 0;
                break;
            }
        }
    }
    return flag;
}
----------------------------------------

int UpOrDown (const int a [], size_t n) {
    int ordered = !(n < 2 || a[0] == a[1]);
    if (ordered) {
        ordered = a[0] < a[1];
        size_t i = 2;
        while (i < n && ordered == a[i - 1] < a[i])
            i++;
        if (i != n) {
            ordered = 0;
        }
        else {
            ordered = ordered == 0 ? -1 : 1;
        }
    }
    return ordered;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44352599_44352747_1_37
44352599_44353743_3_16
Title: "program that determines if array is ascending descending or random(C language)" 
----------------------------------------

int UpOrDown (int *arr, int size) {
    int i = 0;
    int j = 0;
    int flag = 0;
    if (arr[0] < arr[1]) {
        for (i = 1; i < size; i++) {
            if (arr[i] > arr[i + 1])
                flag = 1;
            else {
                flag = 0;
                break;
            }
        }
    }
    else {
        for (i = 1; i < size; i++) {
            if (arr[i] < arr[i + 1])
                flag = -1;
            else {
                flag = 0;
                break;
            }
        }
    }
    return flag;
}
----------------------------------------

int UpOrDown (int *arr, int size) {
    int rising = 0, falling = 0;
    for (int i = 1; i < size; i++) {
        if (arr[i] > arr[i - 1]) {
            rising = 1;
        }
        else if (arr[i] < arr[i - 1]) {
            falling = 1;
        }
    }
    return rising - falling;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44352599_44353210_27_40
44352599_44353743_18_33
Title: "program that determines if array is ascending descending or random(C language)" 
----------------------------------------

int main (void) {
    int a [] = {1};
    int b [] = {1, 1};
    int c [] = {1, 2};
    int d [] = {2, 1};
    int e [] = {1, 2, 2};
    printf ("a: %d\n", UpOrDown (a, sizeof (a) / sizeof (* a)));
    printf ("b: %d\n", UpOrDown (b, sizeof (b) / sizeof (* b)));
    printf ("c: %d\n", UpOrDown (c, sizeof (c) / sizeof (* c)));
    printf ("d: %d\n", UpOrDown (d, sizeof (d) / sizeof (* d)));
    printf ("e: %d\n", UpOrDown (e, sizeof (e) / sizeof (* e)));
}
----------------------------------------

int main (void) {
    int arr1 [1] = {1};
    int arr2 [2] = {1, 2};
    int arr3 [2] = {2, 1};
    int arr4 [3] = {1, 2, 1};
    int arr5 [3] = {2, 1, 2};
    printf ("%d\n", UpOrDown (arr1, 1));
    printf ("%d\n", UpOrDown (arr2, 2));
    printf ("%d\n", UpOrDown (arr3, 2));
    printf ("%d\n", UpOrDown (arr4, 3));
    printf ("%d\n", UpOrDown (arr5, 3));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44352599_44353210_3_25
44352599_44353743_3_16
Title: "program that determines if array is ascending descending or random(C language)" 
----------------------------------------

int UpOrDown (const int a [], size_t n) {
    int ordered = !(n < 2 || a[0] == a[1]);
    if (ordered) {
        ordered = a[0] < a[1];
        size_t i = 2;
        while (i < n && ordered == a[i - 1] < a[i])
            i++;
        if (i != n) {
            ordered = 0;
        }
        else {
            ordered = ordered == 0 ? -1 : 1;
        }
    }
    return ordered;
}
----------------------------------------

int UpOrDown (int *arr, int size) {
    int rising = 0, falling = 0;
    for (int i = 1; i < size; i++) {
        if (arr[i] > arr[i - 1]) {
            rising = 1;
        }
        else if (arr[i] < arr[i - 1]) {
            falling = 1;
        }
    }
    return rising - falling;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44358701_44358787_3_34
44358701_44359013_1_19
Title: fgets() doesn't function as expected 
----------------------------------------

int main () {
    int N, i, radius, diameter, count = 0;
    char str [20];
    printf ("Get the num : ");
    char buffer [64];
    fgets (buffer, 64, stdin);
    N = strtoul (buffer, NULL, 10);
    char color [N] [20];
    printf ("%d\n", sizeof (color));
    printf ("Enter the mesage\n");
    for (i = 0; i < N; i++) {
        fgets (color [i], 20, stdin);
        if (color[i][strlen (color[i]) - 1] == '\n') {
            color[i][strlen (color[i]) - 1] = '\0';
        }
        else {
            while ((getchar ()) != '\n')
                ;
        }
    }
    for (i = 0; i < N; i++) {
        printf ("%s\n", color [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int N, i, radius, diameter, count = 0;
    char str [20];
    char color [N] [20];
    printf ("Get the num : ");
    char buffer [64];
    fgets (buffer, 64, stdin);
    N = atoi (buffer);
    printf ("Enter the mesage\n");
    for (i = 0; i < N; i++) {
        fgets (color [i], 20, stdin);
    }
    for (i = 0; i < N; i++) {
        printf ("%s", color [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44381848_44382771_4_43
44381848_44383190_3_31
Title: Find the longest arithmetic progression from an array 
----------------------------------------

int main () {
    int array [100], i, num, diff = 0, lastdiff = 0, first = 1;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    printf ("\n Numbers in a.p: ");
    for (i = 1; i < num; i++) {
        lastdiff = diff;
        diff = array[i] - array[i - 1];
        if (diff == lastdiff) {
            if (first == 1) {
                first = 0;
                printf ("(%d, %d", array [i - 2], array [i - 1]);
            }
            printf (", %d", array [i]);
        }
        else {
            first = 1;
        }
    }
    printf (")\n Ratio:%d", diff);
    return 0;
}
----------------------------------------

int main (void) {
    int a [] = {5, 1, 2, 4, 6, 8, 12}, n = sizeof a / sizeof *a, startidx = 0, maxlen = 0;
    for (int d = 1; d < n; d++) {
        int idx = -1, len = 1;
        for (int i = 1; i < n; i++)
            if (a[i - 1] + d == a[i]) {
                if (idx < 0)
                    idx = i - 1;
                len++;
            }
        if (idx >= 0 && len > maxlen) {
            maxlen = len;
            startidx = idx;
        }
    }
    printf ("longest progression: '%d' elements.\n", maxlen);
    for (int i = 0; i < maxlen; i++)
        printf (i ? ", %d" : "%d", a[startidx + i]);
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44381848_44382771_4_43
44381848_44383242_3_42
Title: Find the longest arithmetic progression from an array 
----------------------------------------

int main () {
    int array [100], i, num, diff = 0, lastdiff = 0, first = 1;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    printf ("\n Numbers in a.p: ");
    for (i = 1; i < num; i++) {
        lastdiff = diff;
        diff = array[i] - array[i - 1];
        if (diff == lastdiff) {
            if (first == 1) {
                first = 0;
                printf ("(%d, %d", array [i - 2], array [i - 1]);
            }
            printf (", %d", array [i]);
        }
        else {
            first = 1;
        }
    }
    printf (")\n Ratio:%d", diff);
    return 0;
}
----------------------------------------

int main (void) {
    int array [100], i, num, diff;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    int j, len, longest_len = 2, longest_i = 0;
    for (i = 0; i < num - longest_len; i += len - 1) {
        diff = array[i + 1] - array[i];
        for (j = i + 2; j < num && array[j - 1] + diff == array[j]; ++j)
            ;
        len = j - i;
        if (longest_len < len) {
            longest_len = len;
            longest_i = i;
        }
    }
    printf ("\n Numbers in a.p: ");
    diff = array[longest_i + 1] - array[longest_i];
    printf ("[ ");
    for (i = 0; i < longest_len; ++i) {
        printf ("%d", array [longest_i + i]);
        if (i == longest_len - 1)
            printf (" ]\n");
        else
            printf (", ");
    }
    printf ("\n Common difference:%d", diff);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44381848_44382771_4_43
44381848_44383706_3_48
Title: Find the longest arithmetic progression from an array 
----------------------------------------

int main () {
    int array [100], i, num, diff = 0, lastdiff = 0, first = 1;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    printf ("\n Numbers in a.p: ");
    for (i = 1; i < num; i++) {
        lastdiff = diff;
        diff = array[i] - array[i - 1];
        if (diff == lastdiff) {
            if (first == 1) {
                first = 0;
                printf ("(%d, %d", array [i - 2], array [i - 1]);
            }
            printf (", %d", array [i]);
        }
        else {
            first = 1;
        }
    }
    printf (")\n Ratio:%d", diff);
    return 0;
}
----------------------------------------

int main () {
    int array [100], i, num, diff, resDiff, startIndx, resStartIndx, countCur, countPre;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    startIndx = 0, resStartIndx = 0, countPre = 0, resDiff = 0;
    for (i = 0; i < num;) {
        countCur = 0;
        startIndx = i;
        countCur++;
        if (++i < num) {
            diff = array[i] - array[startIndx];
            countCur++;
            i++;
            while ((i < num) && (diff == (array[i] - array[i - 1]))) {
                countCur++;
                i++;
            }
            if (countCur > countPre) {
                resStartIndx = startIndx;
                countPre = countCur;
                resDiff = diff;
            }
        }
    }
    countPre += resStartIndx;
    printf ("\n Numbers in a.p: ");
    for (i = resStartIndx; i < countPre; i++) {
        printf ("%d, ", array [i]);
    }
    printf ("\n Common difference:%d", resDiff);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44381848_44383190_3_31
44381848_44383242_3_42
Title: Find the longest arithmetic progression from an array 
----------------------------------------

int main (void) {
    int a [] = {5, 1, 2, 4, 6, 8, 12}, n = sizeof a / sizeof *a, startidx = 0, maxlen = 0;
    for (int d = 1; d < n; d++) {
        int idx = -1, len = 1;
        for (int i = 1; i < n; i++)
            if (a[i - 1] + d == a[i]) {
                if (idx < 0)
                    idx = i - 1;
                len++;
            }
        if (idx >= 0 && len > maxlen) {
            maxlen = len;
            startidx = idx;
        }
    }
    printf ("longest progression: '%d' elements.\n", maxlen);
    for (int i = 0; i < maxlen; i++)
        printf (i ? ", %d" : "%d", a[startidx + i]);
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    int array [100], i, num, diff;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    int j, len, longest_len = 2, longest_i = 0;
    for (i = 0; i < num - longest_len; i += len - 1) {
        diff = array[i + 1] - array[i];
        for (j = i + 2; j < num && array[j - 1] + diff == array[j]; ++j)
            ;
        len = j - i;
        if (longest_len < len) {
            longest_len = len;
            longest_i = i;
        }
    }
    printf ("\n Numbers in a.p: ");
    diff = array[longest_i + 1] - array[longest_i];
    printf ("[ ");
    for (i = 0; i < longest_len; ++i) {
        printf ("%d", array [longest_i + i]);
        if (i == longest_len - 1)
            printf (" ]\n");
        else
            printf (", ");
    }
    printf ("\n Common difference:%d", diff);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44381848_44383190_3_31
44381848_44383706_3_48
Title: Find the longest arithmetic progression from an array 
----------------------------------------

int main (void) {
    int a [] = {5, 1, 2, 4, 6, 8, 12}, n = sizeof a / sizeof *a, startidx = 0, maxlen = 0;
    for (int d = 1; d < n; d++) {
        int idx = -1, len = 1;
        for (int i = 1; i < n; i++)
            if (a[i - 1] + d == a[i]) {
                if (idx < 0)
                    idx = i - 1;
                len++;
            }
        if (idx >= 0 && len > maxlen) {
            maxlen = len;
            startidx = idx;
        }
    }
    printf ("longest progression: '%d' elements.\n", maxlen);
    for (int i = 0; i < maxlen; i++)
        printf (i ? ", %d" : "%d", a[startidx + i]);
    putchar ('\n');
    return 0;
}
----------------------------------------

int main () {
    int array [100], i, num, diff, resDiff, startIndx, resStartIndx, countCur, countPre;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    startIndx = 0, resStartIndx = 0, countPre = 0, resDiff = 0;
    for (i = 0; i < num;) {
        countCur = 0;
        startIndx = i;
        countCur++;
        if (++i < num) {
            diff = array[i] - array[startIndx];
            countCur++;
            i++;
            while ((i < num) && (diff == (array[i] - array[i - 1]))) {
                countCur++;
                i++;
            }
            if (countCur > countPre) {
                resStartIndx = startIndx;
                countPre = countCur;
                resDiff = diff;
            }
        }
    }
    countPre += resStartIndx;
    printf ("\n Numbers in a.p: ");
    for (i = resStartIndx; i < countPre; i++) {
        printf ("%d, ", array [i]);
    }
    printf ("\n Common difference:%d", resDiff);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44381848_44383242_3_42
44381848_44383706_3_48
Title: Find the longest arithmetic progression from an array 
----------------------------------------

int main (void) {
    int array [100], i, num, diff;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    int j, len, longest_len = 2, longest_i = 0;
    for (i = 0; i < num - longest_len; i += len - 1) {
        diff = array[i + 1] - array[i];
        for (j = i + 2; j < num && array[j - 1] + diff == array[j]; ++j)
            ;
        len = j - i;
        if (longest_len < len) {
            longest_len = len;
            longest_i = i;
        }
    }
    printf ("\n Numbers in a.p: ");
    diff = array[longest_i + 1] - array[longest_i];
    printf ("[ ");
    for (i = 0; i < longest_len; ++i) {
        printf ("%d", array [longest_i + i]);
        if (i == longest_len - 1)
            printf (" ]\n");
        else
            printf (", ");
    }
    printf ("\n Common difference:%d", diff);
}
----------------------------------------

int main () {
    int array [100], i, num, diff, resDiff, startIndx, resStartIndx, countCur, countPre;
    printf ("Enter the size of an array \n");
    scanf ("%d", & num);
    printf ("Enter the elements of the array \n");
    for (i = 0; i < num; i++) {
        scanf ("%d", & array [i]);
    }
    startIndx = 0, resStartIndx = 0, countPre = 0, resDiff = 0;
    for (i = 0; i < num;) {
        countCur = 0;
        startIndx = i;
        countCur++;
        if (++i < num) {
            diff = array[i] - array[startIndx];
            countCur++;
            i++;
            while ((i < num) && (diff == (array[i] - array[i - 1]))) {
                countCur++;
                i++;
            }
            if (countCur > countPre) {
                resStartIndx = startIndx;
                countPre = countCur;
                resDiff = diff;
            }
        }
    }
    countPre += resStartIndx;
    printf ("\n Numbers in a.p: ");
    for (i = resStartIndx; i < countPre; i++) {
        printf ("%d, ", array [i]);
    }
    printf ("\n Common difference:%d", resDiff);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44386613_44428221_7_42
44386613_44561512_71_81
Title: Operands mismatch for mul when inserting asm into c 
----------------------------------------

int main () {
    asm ("mov $0, %%rbx\n"
        "mov $1, %%rcx\n"
        "mov $0, %%rdx\n"
        "potega: \n"
        "inc %%rbx\n"
        "shl $1, %%cl\n"
        "cmp len1, %%ebx \n"
        "jl potega\n"
        "mov $0, %%rbx\n"
        "petla:\n"
        "mov (%0, %%rbx, 1), %%al\n"
        "sub $48, %%al\n"
        "mul %%cl\n"
        "shr $1, %%cl\n"
        "add %%al, %%dl\n"
        "inc %%rbx\n"
        "cmp len, %%ebx\n"
        "jl petla\n"
        "movl %%edx, result\n"
        :
        : "r" (&str), "r" (&result)
        : "%rax", "%rbx", "%rcx", "%rdx"
    ) printf ("Wynik: %d\n", result);
    return 0;
}
----------------------------------------

int main () {
    TestOne ("x");
    TestOne ("");
    TestOne ("5");
    TestOne ("54");
    TestOne ("543");
    TestOne ("5432");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44387826_44387955_1_51
44387826_44389589_1_36
Title: My increment doesn't work (c) 
----------------------------------------

int main () {
    int nej;
    int nerr = 0;
    while (true) {
        printf ("1-Triangulo \n");
        printf ("2-Division \n");
        printf ("3-Menu \n");
        printf ("4-Bosque \n");
        printf ("0-Salir \n");
        scanf ("%d", & nej);
        if (nej == 1) {
            triangulo ();
        }
        if (nej == 2) {
            division ();
        }
        if (nej == 3) {
            menu ();
        }
        if (nej == 4) {
            arboles ();
        }
        if (nej == 0) {
            exit (1);
        }
        while (nej < 0 || nej > 4) {
            nerr++;
            if (nerr == 4) {exit (1);
        }
    }
}
----------------------------------------

int main () {
    int nej;
    int nerr = 0;
    while (nerr < 4) {
        printf ("1-Triangulo \n");
        printf ("2-Division \n");
        printf ("3-Menu \n");
        printf ("4-Bosque \n");
        printf ("0-Salir \n");
        scanf ("%d", & nej);
        switch (nej) {
        case 1 :
            triangulo ();
            break;
        case 2 :
            division ();
            break;
        case 3 :
            menu ();
            break;
        case 4 :
            arboles ();
            break;
        case 0 :
            exit (1);
            break;
        default :
            nerr++;
        }
        if ((nej >= 0) && (nej <= 4)) {
            nerr = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44389901_44390069_1_18
44389901_44391012_7_38
Title: reversing an array using pointer c 
----------------------------------------

int main (void) {
    int arrSize;
    int *arr;
    int i;
    input_integer (& arr, & arrSize);
    printf ("inputted data : ");
    for (i = 0; i < arrSize; i++) {
        printf ("%d, ", * (arr + i));
    }
    inverse_reorder (arr, arrSize);
    printf ("reversed data : ");
    for (i = 0; i < arrSize; i++) {
        printf ("%d, ", * (arr + i));
    }
    return 0;
}
----------------------------------------

int main (void) {
    int *a;
    size_t n;
    input_integer (& a, & n);
    if (n) {
        printf ("inputted data : ");
        for (size_t i = 0; i < n; i++) {
            printf ("%d, ", * (a + i));
        }
        putchar ('\n');
        inverse_reorder (a, n);
        printf ("reversed data : ");
        for (size_t i = 0; i < n; i++) {
            printf ("%d, ", * (a + i));
        }
        putchar ('\n');
        free (a);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44389901_44390069_20_32
44389901_44391012_40_54
Title: reversing an array using pointer c 
----------------------------------------

void input_integer (int **arr, int *arrSize) {
    printf ("Array size = ? ");
    scanf ("%d", arrSize);
    *arr = malloc (*arrSize * sizeof (int));
    if (*arr == NULL) {
        perror ("malloc failed");
        exit (1);
    }
    int i;
    for (i = 0; i < *arrSize; i++) {
        scanf ("%d", * arr + i);
    }
}
----------------------------------------

void input_integer (int **a, size_t *n) {
    *a = NULL;
    *n = 0;
    printf ("Array size = ? ");
    if (scanf ("%zu", n) == 1 && *n != 0) {
        *a = malloc (*n * sizeof (int));
        printf ("enter %zu integers: ", * n);
        for (size_t i = 0; i < *n; i++)
            scanf ("%d", *a + i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44399439_44399879_5_33
44399439_44400069_4_26
Title: Is this program for binary to decimal is correct? 
----------------------------------------

int main () {
    long long int bin;
    int dec = 0, i;
    printf ("Enter a number in base 2: ");
    if (scanf ("%lld", &bin) != 1) {
        printf ("Error reading your input.");
        return -1;
    }
    for (i = 0; bin != 0; i++) {
        if (bin % 10 == 0 || bin % 10 == 1) {
            dec += (bin % 10) << i;
            bin /= 10;
        }
        else {
            printf ("Invalid Binary number!!\n");
            return 0;
        }
    }
    printf ("That number in base 10 is: %d\n", dec);
    return 0;
}
----------------------------------------

int main (void) {
    unsigned long long n = 0;
    int c;
    fputs ("enter a number in base 2: ", stdout);
    while ((c = getchar ()) != EOF && c != '\n') {
        if (n >= (ULLONG_MAX >> 1) + 1) {
            fprintf (stderr, "binary number is too large\n");
            return 1;
        }
        n <<= 1;
        if (c == '0')
            n += 0;
        else if (c == '1')
            n += 1;
        else {
            fprintf (stderr, "bad binary digit '%c'\n", c);
            return 1;
        }
    }
    printf ("that number in base 10 is %llu\n", n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44404831_44404986_6_15
44404831_44405024_1_10
Title: Passing a function pointer as parameter to fopen 
----------------------------------------

char *time_stamp () {
    time_t rawtime;
    struct tm *timeinfo;
    time (& rawtime);
    timeinfo = localtime (&rawtime);
    char *buf = malloc (80);
    strftime (buf, 80, "myFile_%F.txt", timeinfo);
    return buf;
}
----------------------------------------

const char *time_stamp () {
    time_t rawtime;
    struct tm *timeinfo;
    static char buffer [80];
    time (& rawtime);
    timeinfo = localtime (&rawtime);
    strftime (buffer, 80, "myFile_%F.txt", timeinfo);
    return buffer;
}
----------------------------------------

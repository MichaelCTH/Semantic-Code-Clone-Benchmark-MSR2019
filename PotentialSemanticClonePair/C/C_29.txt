$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32275765_32275820_1_17
32275765_32275889_1_10
Title: C - Dereferencing void pointer 
----------------------------------------

void ft_swap (void *a, void *b, size_t nbytes) {
    unsigned char *cpa;
    unsigned char *cpb;
    size_t i;
    unsigned char c;
    cpa = (unsigned char *) a;
    cpb = (unsigned char *) b;
    for (i = 0; i < nbytes; ++i) {
        c = cpa[i];
        cpa[i] = cpb[i];
        cpb[i] = c;
    }
}
----------------------------------------

void ft_swap (void *a, void *b, size_t nbytes) {
    unsigned char *cur_a = (unsigned char *) a;
    unsigned char *cur_b = (unsigned char *) b;
    for (size_t i = 0; i < nbytes; ++i) {
        unsigned char tmp = cur_a[i];
        cur_a[i] = cur_b[i];
        cur_b[i] = tmp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32275765_32275820_1_17
32275765_32276125_1_18
Title: C - Dereferencing void pointer 
----------------------------------------

void ft_swap (void *a, void *b, size_t nbytes) {
    unsigned char *cpa;
    unsigned char *cpb;
    size_t i;
    unsigned char c;
    cpa = (unsigned char *) a;
    cpb = (unsigned char *) b;
    for (i = 0; i < nbytes; ++i) {
        c = cpa[i];
        cpa[i] = cpb[i];
        cpb[i] = c;
    }
}
----------------------------------------

void ft_swap (void *a, void *b, size_t nbytes) {
    unsigned char cur_a;
    unsigned char cur_b;
    size_t i;
    i = 0;
    while (i < nbytes) {
        cur_a = *((unsigned char *) a + i);
        cur_b = *((unsigned char *) b + i);
        *a = cur_b;
        *b = cur_a;
        i++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32275765_32275889_1_10
32275765_32276125_1_18
Title: C - Dereferencing void pointer 
----------------------------------------

void ft_swap (void *a, void *b, size_t nbytes) {
    unsigned char *cur_a = (unsigned char *) a;
    unsigned char *cur_b = (unsigned char *) b;
    for (size_t i = 0; i < nbytes; ++i) {
        unsigned char tmp = cur_a[i];
        cur_a[i] = cur_b[i];
        cur_b[i] = tmp;
    }
}
----------------------------------------

void ft_swap (void *a, void *b, size_t nbytes) {
    unsigned char cur_a;
    unsigned char cur_b;
    size_t i;
    i = 0;
    while (i < nbytes) {
        cur_a = *((unsigned char *) a + i);
        cur_b = *((unsigned char *) b + i);
        *a = cur_b;
        *b = cur_a;
        i++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32276121_32276927_21_47
32276121_32277226_10_52
Title: C Implementation of Lists 
----------------------------------------

int main () {
    int t = 0;
    NODEType *curr = NULL;
    while (1) {
        scanf ("%d", & t);
        NODEType *n = (NODEType *) malloc (sizeof (NODEType));
        n->a = t;
        n->next = NULL;
        if (head == NULL) {
            head = n;
            curr = n;
        }
        else {
            curr->next = n;
            curr = n;
        }
        if (t == -1)
            printtraverse ();
    }
    return 0;
}
----------------------------------------

int main () {
    node *list = NULL;
    node **pp = &list;
    int i;
    while (scanf ("%i", &i) == 1 && i >= 0) {
        *pp = malloc (sizeof **pp);
        if (*pp == NULL) {
            perror ("Failed to allocate node");
            exit (EXIT_FAILURE);
        }
        (*pp)->n = i;
        pp = &(*pp)->next;
    }
    *pp = NULL;
    const node *pointer = list;
    for (i = 1; pointer; ++i) {
        printf ("Item %i %p: %i\n", i, pointer, pointer -> n);
        pointer = pointer->next;
    }
    while (list) {
        void *victim = list;
        list = list->next;
        free (victim);
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32276121_32276927_21_47
32276121_32283580_10_59
Title: C Implementation of Lists 
----------------------------------------

int main () {
    int t = 0;
    NODEType *curr = NULL;
    while (1) {
        scanf ("%d", & t);
        NODEType *n = (NODEType *) malloc (sizeof (NODEType));
        n->a = t;
        n->next = NULL;
        if (head == NULL) {
            head = n;
            curr = n;
        }
        else {
            curr->next = n;
            curr = n;
        }
        if (t == -1)
            printtraverse ();
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    node *list = NULL;
    node *old_node = NULL;
    node *new_node = NULL;
    while (scanf ("%i", &i) == 1 && i >= 0) {
        if (old_node == NULL) {
            new_node = (node *) malloc (sizeof (node));
            new_node->n = i;
            new_node->next = NULL;
            list = new_node;
            old_node = new_node;
        }
        else {
            new_node = (node *) malloc (sizeof (node));
            new_node->n = i;
            new_node->next = NULL;
            old_node->next = new_node;
            old_node = new_node;
        }
    }
    node *pointer = list;
    int count = 1;
    while (pointer != NULL) {
        printf ("Node %i : %i\n", count, pointer -> n);
        free (pointer);
        pointer = pointer->next;
        count++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32276121_32277226_10_52
32276121_32283580_10_59
Title: C Implementation of Lists 
----------------------------------------

int main () {
    node *list = NULL;
    node **pp = &list;
    int i;
    while (scanf ("%i", &i) == 1 && i >= 0) {
        *pp = malloc (sizeof **pp);
        if (*pp == NULL) {
            perror ("Failed to allocate node");
            exit (EXIT_FAILURE);
        }
        (*pp)->n = i;
        pp = &(*pp)->next;
    }
    *pp = NULL;
    const node *pointer = list;
    for (i = 1; pointer; ++i) {
        printf ("Item %i %p: %i\n", i, pointer, pointer -> n);
        pointer = pointer->next;
    }
    while (list) {
        void *victim = list;
        list = list->next;
        free (victim);
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    int i;
    node *list = NULL;
    node *old_node = NULL;
    node *new_node = NULL;
    while (scanf ("%i", &i) == 1 && i >= 0) {
        if (old_node == NULL) {
            new_node = (node *) malloc (sizeof (node));
            new_node->n = i;
            new_node->next = NULL;
            list = new_node;
            old_node = new_node;
        }
        else {
            new_node = (node *) malloc (sizeof (node));
            new_node->n = i;
            new_node->next = NULL;
            old_node->next = new_node;
            old_node = new_node;
        }
    }
    node *pointer = list;
    int count = 1;
    while (pointer != NULL) {
        printf ("Node %i : %i\n", count, pointer -> n);
        free (pointer);
        pointer = pointer->next;
        count++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32284887_32285298_5_92
32284887_52954834_8_49
Title: Stuck on using multiple pipes in C 
----------------------------------------

int main (int argc, char **argv) {
    int pid;
    int pipe1 [2];
    int pipe2 [2];
    if (pipe (pipe1) == -1) {
        perror ("bad pipe1");
        exit (1);
    }
    if ((pid = fork ()) == -1) {
        perror ("bad fork1");
        exit (1);
    }
    else if (pid == 0) {
        dup2 (pipe1 [1], 1);
        close (pipe1 [0]);
        close (pipe1 [1]);
        execlp (argv [1], argv [1], NULL);
        perror ("bad exec ps");
        _exit (1);
    }
    if (pipe (pipe2) == -1) {
        perror ("bad pipe2");
        exit (1);
    }
    if ((pid = fork ()) == -1) {
        perror ("bad fork2");
        exit (1);
    }
    else if (pid == 0) {
        dup2 (pipe1 [0], 0);
        dup2 (pipe2 [1], 1);
        close (pipe1 [0]);
        close (pipe1 [1]);
        close (pipe2 [0]);
        close (pipe2 [1]);
        execlp (argv [2], argv [2], NULL);
        perror ("bad exec grep root");
        _exit (1);
    }
    close (pipe1 [0]);
    close (pipe1 [1]);
    if ((pid = fork ()) == -1) {
        perror ("bad fork3");
        exit (1);
    }
    else if (pid == 0) {
        dup2 (pipe2 [0], 0);
        close (pipe2 [0]);
        close (pipe2 [1]);
        execlp (argv [3], argv [3], NULL);
        perror ("bad exec grep sbin");
        _exit (1);
    }
    return 0;
}
----------------------------------------

int main () {
    int p [2], p1 [2];
    int x, y, z;
    pipe (p);
    x = fork ();
    if (x > 0) {
        close (p [0]);
        dup2 (p [1], 1);
        execlp ("ls", "ls", "-l", NULL);
        close (p [1]);
    }
    else {
        pipe (p1);
        z = fork ();
        if (z > 0) {
            close (p [1]);
            close (p1 [0]);
            dup2 (p [0], 0);
            dup2 (p1 [1], 1);
            execlp ("grep", "grep", "sthg", NULL);
            close (p [0]);
            close (p1 [1]);
        }
        else {
            close (p [0]);
            close (p [1]);
            close (p1 [1]);
            dup2 (p1 [0], 0);
            execlp ("wc", "wc", "-l", NULL);
            close (p1 [0]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32295236_32295959_4_14
32295236_32296020_3_22
Title: "Sort Array wrong Output" 
----------------------------------------

void main () {
    int a [] = {1, 4, 2, 3, 6, 4, 5, 8, 6};
    int i;
    for (i = 0; i < sizeof (a) / sizeof (a[0]) - 1; ++i) {
        if (is_valid (i, a, sizeof (a) / sizeof (a[0])))
            printf ("%d ", a[i]);
    }
    printf ("%d ", a [i]);
}
----------------------------------------

int main () {
    int a [] = {10, 2, 6, 3, 5, 9, 8, 4, 7};
    int l = sizeof a / sizeof a[0];
    int i, j;
    int check = 1;
    for (i = 0; i < l; i++) {
        check = 1;
        for (j = i + 1; j < l; j++) {
            if (a[i] >= a[j]) {
                check = 0;
            }
        }
        if (check)
            printf ("%d", a[i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32295236_32295959_4_14
32295236_32296127_23_47
Title: "Sort Array wrong Output" 
----------------------------------------

void main () {
    int a [] = {1, 4, 2, 3, 6, 4, 5, 8, 6};
    int i;
    for (i = 0; i < sizeof (a) / sizeof (a[0]) - 1; ++i) {
        if (is_valid (i, a, sizeof (a) / sizeof (a[0])))
            printf ("%d ", a[i]);
    }
    printf ("%d ", a [i]);
}
----------------------------------------

int main (void) {
    int a [] = {10, 2, 6, 3, -1, 5, 9, 8, 4, 7};
    int i, j, p, n = sizeof (a) / sizeof (a[0]);
    p = a[0];
    i = 0;
    for (j = i + 1; j < n; j++) {
        if (a[j] < p) {
            i = j;
            p = a[i];
        }
    }
    printf ("%d ", p);
    i = find_next (a, n, i +1, p);
    while (i < n) {
        p = a[i];
        printf ("%d ", p);
        i = find_next (a, n, i +1, p);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32295236_32296020_3_22
32295236_32296127_23_47
Title: "Sort Array wrong Output" 
----------------------------------------

int main () {
    int a [] = {10, 2, 6, 3, 5, 9, 8, 4, 7};
    int l = sizeof a / sizeof a[0];
    int i, j;
    int check = 1;
    for (i = 0; i < l; i++) {
        check = 1;
        for (j = i + 1; j < l; j++) {
            if (a[i] >= a[j]) {
                check = 0;
            }
        }
        if (check)
            printf ("%d", a[i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int a [] = {10, 2, 6, 3, -1, 5, 9, 8, 4, 7};
    int i, j, p, n = sizeof (a) / sizeof (a[0]);
    p = a[0];
    i = 0;
    for (j = i + 1; j < n; j++) {
        if (a[j] < p) {
            i = j;
            p = a[i];
        }
    }
    printf ("%d ", p);
    i = find_next (a, n, i +1, p);
    while (i < n) {
        p = a[i];
        printf ("%d ", p);
        i = find_next (a, n, i +1, p);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32295658_32296614_1_27
32295658_32297682_21_53
Title: need help rehashing a hashtable in c 
----------------------------------------

static hashtab_ptr rehash (hashtab_ptr ht) {
    hashtab_ptr prevtable = ht;
    hashtab_ptr newht;
    htentry_ptr p;
    unsigned int i;
    unsigned int newidx;
    printf ("\nrehashing");
    newht->idx = prevtable->idx + 1;
    newht->size = getsize (prevtable);
    newht->num_entries = 0;
    newht->hash = prevtable->hash;
    newht->cmp = prevtable->cmp;
    newht->max_loadfactor = prevtable->max_loadfactor;
    newht->table = calloc (newht->size, sizeof (htentry_t));
    for (i = 0; i < ht->size; i++) {
        for (p = ht -> table [i];
        p;
        p = p -> next_ptr) {ht_insert (newht, p -> key, p -> value);
    }
    return newht;
}
----------------------------------------

static void rehash (struct hashtable *ht) {
    struct hashentry **newtab;
    struct hashentry **pp, **qq, *this;
    unsigned int newsize, oldidx, newidx;
    newsize = ht->size * 2;
    fprintf (stderr, "new table size %u\n", newsize);
    newtab = malloc (newsize * sizeof *newtab);
    for (newidx = 0; newidx < newsize; newidx++) {
        newtab[newidx] = NULL;
    }
    for (oldidx = 0; oldidx < ht->size; oldidx++) {
        for (pp = &ht->table[oldidx]; *pp;) {
            this = *pp;
            *pp = this->next;
            this->next = NULL;
            newidx = ht->hash (this->key, newsize);
            for (qq = &newtab[newidx]; *qq; qq = &(*qq)->next) {
            }
            *qq = this;
        }
    }
    free (ht -> table);
    ht->table = newtab;
    ht->size = newsize;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32295658_32296614_1_27
32295658_32320931_1_44
Title: need help rehashing a hashtable in c 
----------------------------------------

static hashtab_ptr rehash (hashtab_ptr ht) {
    hashtab_ptr prevtable = ht;
    hashtab_ptr newht;
    htentry_ptr p;
    unsigned int i;
    unsigned int newidx;
    printf ("\nrehashing");
    newht->idx = prevtable->idx + 1;
    newht->size = getsize (prevtable);
    newht->num_entries = 0;
    newht->hash = prevtable->hash;
    newht->cmp = prevtable->cmp;
    newht->max_loadfactor = prevtable->max_loadfactor;
    newht->table = calloc (newht->size, sizeof (htentry_t));
    for (i = 0; i < ht->size; i++) {
        for (p = ht -> table [i];
        p;
        p = p -> next_ptr) {ht_insert (newht, p -> key, p -> value);
    }
    return newht;
}
----------------------------------------

static void rehash (hashtab_ptr ht) {
    unsigned int old_size, new_size;
    unsigned int newindex;
    unsigned int i;
    htentry_ptr q, p;
    htentry_ptr *new_table;
    old_size = ht->size;
    new_size = getsize (ht);
    new_table = malloc (sizeof (htentry_t) * new_size);
    for (i = 0; i < new_size; i++) {
        new_table[i] = NULL;
    }
    printf ("\n*****rehashing******\n");
    ht->size = new_size;
    printf ("%s %d\n", "new size:", new_size);
    for (i = 0; i < old_size; i++) {
        p = ht->table[i];
        while (p) {
            q = p->next_ptr;
            newindex = ht->hash (p->key, new_size);
            if (new_table[newindex]) {
                p->next_ptr = new_table[newindex];
                new_table[newindex] = p;
            }
            else {
                new_table[newindex] = p;
                new_table[newindex]->next_ptr = NULL;
            }
            p = q;
        }
    }
    free (ht -> table);
    ht->table = new_table;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32295658_32297682_21_53
32295658_32320931_1_44
Title: need help rehashing a hashtable in c 
----------------------------------------

static void rehash (struct hashtable *ht) {
    struct hashentry **newtab;
    struct hashentry **pp, **qq, *this;
    unsigned int newsize, oldidx, newidx;
    newsize = ht->size * 2;
    fprintf (stderr, "new table size %u\n", newsize);
    newtab = malloc (newsize * sizeof *newtab);
    for (newidx = 0; newidx < newsize; newidx++) {
        newtab[newidx] = NULL;
    }
    for (oldidx = 0; oldidx < ht->size; oldidx++) {
        for (pp = &ht->table[oldidx]; *pp;) {
            this = *pp;
            *pp = this->next;
            this->next = NULL;
            newidx = ht->hash (this->key, newsize);
            for (qq = &newtab[newidx]; *qq; qq = &(*qq)->next) {
            }
            *qq = this;
        }
    }
    free (ht -> table);
    ht->table = newtab;
    ht->size = newsize;
}
----------------------------------------

static void rehash (hashtab_ptr ht) {
    unsigned int old_size, new_size;
    unsigned int newindex;
    unsigned int i;
    htentry_ptr q, p;
    htentry_ptr *new_table;
    old_size = ht->size;
    new_size = getsize (ht);
    new_table = malloc (sizeof (htentry_t) * new_size);
    for (i = 0; i < new_size; i++) {
        new_table[i] = NULL;
    }
    printf ("\n*****rehashing******\n");
    ht->size = new_size;
    printf ("%s %d\n", "new size:", new_size);
    for (i = 0; i < old_size; i++) {
        p = ht->table[i];
        while (p) {
            q = p->next_ptr;
            newindex = ht->hash (p->key, new_size);
            if (new_table[newindex]) {
                p->next_ptr = new_table[newindex];
                new_table[newindex] = p;
            }
            else {
                new_table[newindex] = p;
                new_table[newindex]->next_ptr = NULL;
            }
            p = q;
        }
    }
    free (ht -> table);
    ht->table = new_table;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32300071_32300366_55_78
32300071_32300661_59_76
Title: My Circular Queue implementation is not working properly 
----------------------------------------

void enqueue (int item) {
    if (front == 0 && rear == SIZE - 1)
        printf ("\n Queue OverFlow Occured");
    else if (front == -1 && rear == -1) {
        front = rear = 0;
        queue[rear] = item;
    }
    else if (rear == SIZE - 1 && front != 0) {
        rear = 0;
        queue[rear] = item;
    }
    else {
        rear++;
        queue[rear] = item;
    }
}
----------------------------------------

void enqueue (int item) {
    int temp = (rear + 1) % SIZE;
    if (temp == front) {
        printf ("\n Queue OverFlow Occured");
        return;
    }
    else if (front == -1) {
        front = rear = 0;
        queue[rear] = item;
        return;
    }
    else {
        rear = (rear + 1) % SIZE;
        queue[rear % SIZE] = item;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32300071_32300366_55_78
32300071_32300733_5_16
Title: My Circular Queue implementation is not working properly 
----------------------------------------

void enqueue (int item) {
    if (front == 0 && rear == SIZE - 1)
        printf ("\n Queue OverFlow Occured");
    else if (front == -1 && rear == -1) {
        front = rear = 0;
        queue[rear] = item;
    }
    else if (rear == SIZE - 1 && front != 0) {
        rear = 0;
        queue[rear] = item;
    }
    else {
        rear++;
        queue[rear] = item;
    }
}
----------------------------------------

void enqueue (int item) {
    if (size >= SIZE) {
        printf ("Queue is full");
        return;
    }
    queue[write] = item;
    write = (write + 1) % SIZE;
    size++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32300071_32300366_79_103
32300071_32300733_18_28
Title: My Circular Queue implementation is not working properly 
----------------------------------------

int dequeue () {
    int item = NULL;
    if (front == -1 && rear == -1) {
        printf ("\nQueue is empty. Dequeue not possible.\n");
    }
    else {
        item = queue[front];
        queue[front] = NULL;
        if (front == rear) {
            front = -1;
            rear = -1;
        }
        else {
            front = front + 1;
        }
    }
    return (item);
}
----------------------------------------

int dequeue () {
    if (size == 0) {
        printf ("Queue is empty");
        return 0;
    }
    read %= SIZE;
    size--;
    return queue[read++];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32300071_32300661_59_76
32300071_32300733_5_16
Title: My Circular Queue implementation is not working properly 
----------------------------------------

void enqueue (int item) {
    int temp = (rear + 1) % SIZE;
    if (temp == front) {
        printf ("\n Queue OverFlow Occured");
        return;
    }
    else if (front == -1) {
        front = rear = 0;
        queue[rear] = item;
        return;
    }
    else {
        rear = (rear + 1) % SIZE;
        queue[rear % SIZE] = item;
    }
}
----------------------------------------

void enqueue (int item) {
    if (size >= SIZE) {
        printf ("Queue is full");
        return;
    }
    queue[write] = item;
    write = (write + 1) % SIZE;
    size++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32300071_32300661_77_96
32300071_32300733_18_28
Title: My Circular Queue implementation is not working properly 
----------------------------------------

int dequeue () {
    int item = NULL;
    if (front == rear) {
        printf ("\nQueue is empty. Dequeue not possible.\n");
    }
    else {
        item = queue[front];
        queue[front] = NULL;
        front++;
        if (front > rear) {
            front = -1;
            rear = -1;
        }
    }
    return (item);
}
----------------------------------------

int dequeue () {
    if (size == 0) {
        printf ("Queue is empty");
        return 0;
    }
    read %= SIZE;
    size--;
    return queue[read++];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32301640_32305930_1_46
32301640_32361479_99_129
Title: What is wrong with my addition of polynomials c code? 
----------------------------------------

int main (int argc, char **argv) {
    poly_t polyA;
    poly_t polyB;
    poly_t polyC;
    init_poly (& polyA);
    init_poly (& polyB);
    init_poly (& polyC);
    printf ("Polynomial 1\n\n");
    if (input_poly (&polyA) == -1) {
        goto error;
    }
    printf ("\n");
    printf ("Polynomial 2\n\n");
    if (input_poly (&polyB) == -1) {
        goto error;
    }
    printf ("\n\n");
    if ((add_to_poly (&polyC, &polyA) == -1 || add_to_poly (&polyC, &polyB) == -1)) {
        goto error;
    }
    printf ("Polynomial 1=");
    display_poly (& polyA);
    printf ("\n");
    printf ("\nPolynomial 2=");
    display_poly (& polyB);
    printf ("\n");
    printf ("\nSum of the two polynomials is=");
    display_poly (& polyC);
    printf ("\n");
error :
    destroy_poly (&polyA);
    destroy_poly (& polyB);
    destroy_poly (& polyC);
    return 0;
}
----------------------------------------

void main () {
    system ("clear");
    headA = (poly *) malloc (sizeof (poly));
    headB = (poly *) malloc (sizeof (poly));
    headC = (poly *) malloc (sizeof (poly));
    lastA = (poly *) malloc (sizeof (poly));
    lastB = (poly *) malloc (sizeof (poly));
    lastC = (poly *) malloc (sizeof (poly));
    if (headA == NULL || headB == NULL || headC == NULL || lastA == NULL || lastB == NULL || lastC == NULL) {
        printf ("Allocation failure!!!");
        return;
    }
    headA = headB = headC = lastA = lastB = lastC = NULL;
    printf ("Polynomial 1\n\n");
    input (& headA, & lastA);
    printf ("\nPolynomial 2\n\n");
    input (& headB, & lastB);
    printf ("\n\nPolynomial 1=");
    display (headA);
    printf ("\nPolynomial 2=");
    display (headB);
    printf ("\nSum of the two polynomials is=");
    display (headC);
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32302058_32302303_1_19
32302058_32302434_1_20
Title: Removing single dot path names in URL in C 
----------------------------------------

void fixurl (char *theUrl) {
    char *source, *dest;
    source = dest = theUrl;
    while (*source) {
        if (source[0] == '/' && source[1] == '.' && source[2] == '/') {
            source += 2;
        }
        else {
            *dest = *source;
            source++;
            dest++;
        }
    }
    *dest = 0;
}
----------------------------------------

static long fixurl (char *u) {
    char u1 [10000];
    int currentIndex = 0;
    if (*u == '\0') {
        return 0;
    }
    for (; *(u + 1) != '\0'; u++) {
        if (*u == '/') {
            if (*(u + 1) == '/') {
                continue;
            }
            else if ((*(u + 1) == '.') && (*(u + 2) == '.')) {
                u++;
                continue;
            }
        }
        u1[currentIndex] = *u;
    }
    strcpy (u, u1);
    return currentIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32302058_32302303_1_19
32302058_32302715_5_30
Title: Removing single dot path names in URL in C 
----------------------------------------

void fixurl (char *theUrl) {
    char *source, *dest;
    source = dest = theUrl;
    while (*source) {
        if (source[0] == '/' && source[1] == '.' && source[2] == '/') {
            source += 2;
        }
        else {
            *dest = *source;
            source++;
            dest++;
        }
    }
    *dest = 0;
}
----------------------------------------

long fixurl (char *rawURL) {
    char cookedURL [10000] = {'\0'};
    int currentIndex = 0;
    cookedURL[currentIndex] = rawURL[0];
    rawURL++;
    for (; *rawURL; rawURL++) {
        if (('/' != cookedURL[currentIndex]) || ('.' != *rawURL)) {
            currentIndex++;
            cookedURL[currentIndex] = *rawURL;
        }
    }
    strcpy (rawURL, cookedURL);
    return currentIndex + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32302058_32302434_1_20
32302058_32302715_5_30
Title: Removing single dot path names in URL in C 
----------------------------------------

static long fixurl (char *u) {
    char u1 [10000];
    int currentIndex = 0;
    if (*u == '\0') {
        return 0;
    }
    for (; *(u + 1) != '\0'; u++) {
        if (*u == '/') {
            if (*(u + 1) == '/') {
                continue;
            }
            else if ((*(u + 1) == '.') && (*(u + 2) == '.')) {
                u++;
                continue;
            }
        }
        u1[currentIndex] = *u;
    }
    strcpy (u, u1);
    return currentIndex;
}
----------------------------------------

long fixurl (char *rawURL) {
    char cookedURL [10000] = {'\0'};
    int currentIndex = 0;
    cookedURL[currentIndex] = rawURL[0];
    rawURL++;
    for (; *rawURL; rawURL++) {
        if (('/' != cookedURL[currentIndex]) || ('.' != *rawURL)) {
            currentIndex++;
            cookedURL[currentIndex] = *rawURL;
        }
    }
    strcpy (rawURL, cookedURL);
    return currentIndex + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37336675_5_36
32303244_37378620_1_24
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int s = 0;
    int hash = 0;
    int ht;
    int h;
    do {
        printf ("Height: ");
        ht = GetInt ();
        for (h = ht; h > 0; h--) {
            printf ("\n");
            hash = ht - (h - 1);
            s = ht - hash;
            int i;
            for (i = 0; i <= s; i++) {
                printf (" ");
            }
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
            printf ("  ");
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
        }
        return 0;
    }
    while (ht > 0 || ht < 23);
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int dashes;
    do {
        printf ("Height:");
        height = GetInt ();
    }
    while (height <= 0 || height >= 23);
    for (int i = 1; i <= height; i++) {
        for (spaces = (height - i); spaces >= 0; spaces--) {
            printf (" ");
        }
        for (dashes = 1; dashes <= (i + 1); dashes++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37336675_5_36
32303244_38125851_5_38
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int s = 0;
    int hash = 0;
    int ht;
    int h;
    do {
        printf ("Height: ");
        ht = GetInt ();
        for (h = ht; h > 0; h--) {
            printf ("\n");
            hash = ht - (h - 1);
            s = ht - hash;
            int i;
            for (i = 0; i <= s; i++) {
                printf (" ");
            }
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
            printf ("  ");
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
        }
        return 0;
    }
    while (ht > 0 || ht < 23);
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int all_row;
    int space;
    int hash;
    do {
        printf ("Please choose a number from 0 to 23:");
        height = GetInt ();
    }
    while ((height < 0) || (height > 23));
    for (all_row = 1; all_row <= height; all_row++) {
        for (space = (height - all_row); space > 0; space--) {
            printf (" ");
        }
        for (hash = 1; hash <= (all_row + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37336675_5_36
32303244_40426703_3_29
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int s = 0;
    int hash = 0;
    int ht;
    int h;
    do {
        printf ("Height: ");
        ht = GetInt ();
        for (h = ht; h > 0; h--) {
            printf ("\n");
            hash = ht - (h - 1);
            s = ht - hash;
            int i;
            for (i = 0; i <= s; i++) {
                printf (" ");
            }
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
            printf ("  ");
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
        }
        return 0;
    }
    while (ht > 0 || ht < 23);
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int c = 0;
    do {
        printf ("Height?\n");
        height = GetInt ();
    }
    while (height < 0 || height > 23);
    for (int a = height; a > 0; a--) {
        for (int b = 0; b < a - 1; b++) {
            printf (" ");
        }
        printf ("#");
        c++;
        for (int d = 0; d < c; d++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37336675_5_36
32303244_51142237_4_32
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int s = 0;
    int hash = 0;
    int ht;
    int h;
    do {
        printf ("Height: ");
        ht = GetInt ();
        for (h = ht; h > 0; h--) {
            printf ("\n");
            hash = ht - (h - 1);
            s = ht - hash;
            int i;
            for (i = 0; i <= s; i++) {
                printf (" ");
            }
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
            printf ("  ");
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
        }
        return 0;
    }
    while (ht > 0 || ht < 23);
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int hash;
    do {
        height = get_int ("Height: ");
    }
    while (height < 0 || height > 23);
    for (int i = 0; i < height; i++) {
        for (spaces = (height - i); spaces >= 2; spaces--) {
            printf (" ");
        }
        for (hash = 0; hash <= (i + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37336732_6_33
32303244_37378620_1_24
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int s = 0;
    int hash = 0;
    int ht;
    int h;
    do {
        printf ("Height: ");
        ht = GetInt ();
        for (h = ht; h > 0; h--) {
            printf ("\n");
            hash = ht - (h - 1);
            s = ht - hash;
            int i;
            for (i = 0; i <= s; i++) {
                printf (" ");
            }
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
        }
        return 0;
    }
    while (ht > 0 || ht < 23);
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int dashes;
    do {
        printf ("Height:");
        height = GetInt ();
    }
    while (height <= 0 || height >= 23);
    for (int i = 1; i <= height; i++) {
        for (spaces = (height - i); spaces >= 0; spaces--) {
            printf (" ");
        }
        for (dashes = 1; dashes <= (i + 1); dashes++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37336732_6_33
32303244_38125851_5_38
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int s = 0;
    int hash = 0;
    int ht;
    int h;
    do {
        printf ("Height: ");
        ht = GetInt ();
        for (h = ht; h > 0; h--) {
            printf ("\n");
            hash = ht - (h - 1);
            s = ht - hash;
            int i;
            for (i = 0; i <= s; i++) {
                printf (" ");
            }
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
        }
        return 0;
    }
    while (ht > 0 || ht < 23);
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int all_row;
    int space;
    int hash;
    do {
        printf ("Please choose a number from 0 to 23:");
        height = GetInt ();
    }
    while ((height < 0) || (height > 23));
    for (all_row = 1; all_row <= height; all_row++) {
        for (space = (height - all_row); space > 0; space--) {
            printf (" ");
        }
        for (hash = 1; hash <= (all_row + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37336732_6_33
32303244_40426703_3_29
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int s = 0;
    int hash = 0;
    int ht;
    int h;
    do {
        printf ("Height: ");
        ht = GetInt ();
        for (h = ht; h > 0; h--) {
            printf ("\n");
            hash = ht - (h - 1);
            s = ht - hash;
            int i;
            for (i = 0; i <= s; i++) {
                printf (" ");
            }
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
        }
        return 0;
    }
    while (ht > 0 || ht < 23);
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int c = 0;
    do {
        printf ("Height?\n");
        height = GetInt ();
    }
    while (height < 0 || height > 23);
    for (int a = height; a > 0; a--) {
        for (int b = 0; b < a - 1; b++) {
            printf (" ");
        }
        printf ("#");
        c++;
        for (int d = 0; d < c; d++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37336732_6_33
32303244_51142237_4_32
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int s = 0;
    int hash = 0;
    int ht;
    int h;
    do {
        printf ("Height: ");
        ht = GetInt ();
        for (h = ht; h > 0; h--) {
            printf ("\n");
            hash = ht - (h - 1);
            s = ht - hash;
            int i;
            for (i = 0; i <= s; i++) {
                printf (" ");
            }
            for (i = 0; i <= hash; i++) {
                printf ("#");
            }
        }
        return 0;
    }
    while (ht > 0 || ht < 23);
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int hash;
    do {
        height = get_int ("Height: ");
    }
    while (height < 0 || height > 23);
    for (int i = 0; i < height; i++) {
        for (spaces = (height - i); spaces >= 2; spaces--) {
            printf (" ");
        }
        for (hash = 0; hash <= (i + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37378620_1_24
32303244_38125851_5_38
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int dashes;
    do {
        printf ("Height:");
        height = GetInt ();
    }
    while (height <= 0 || height >= 23);
    for (int i = 1; i <= height; i++) {
        for (spaces = (height - i); spaces >= 0; spaces--) {
            printf (" ");
        }
        for (dashes = 1; dashes <= (i + 1); dashes++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int all_row;
    int space;
    int hash;
    do {
        printf ("Please choose a number from 0 to 23:");
        height = GetInt ();
    }
    while ((height < 0) || (height > 23));
    for (all_row = 1; all_row <= height; all_row++) {
        for (space = (height - all_row); space > 0; space--) {
            printf (" ");
        }
        for (hash = 1; hash <= (all_row + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37378620_1_24
32303244_40426703_3_29
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int dashes;
    do {
        printf ("Height:");
        height = GetInt ();
    }
    while (height <= 0 || height >= 23);
    for (int i = 1; i <= height; i++) {
        for (spaces = (height - i); spaces >= 0; spaces--) {
            printf (" ");
        }
        for (dashes = 1; dashes <= (i + 1); dashes++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int c = 0;
    do {
        printf ("Height?\n");
        height = GetInt ();
    }
    while (height < 0 || height > 23);
    for (int a = height; a > 0; a--) {
        for (int b = 0; b < a - 1; b++) {
            printf (" ");
        }
        printf ("#");
        c++;
        for (int d = 0; d < c; d++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_37378620_1_24
32303244_51142237_4_32
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int dashes;
    do {
        printf ("Height:");
        height = GetInt ();
    }
    while (height <= 0 || height >= 23);
    for (int i = 1; i <= height; i++) {
        for (spaces = (height - i); spaces >= 0; spaces--) {
            printf (" ");
        }
        for (dashes = 1; dashes <= (i + 1); dashes++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int hash;
    do {
        height = get_int ("Height: ");
    }
    while (height < 0 || height > 23);
    for (int i = 0; i < height; i++) {
        for (spaces = (height - i); spaces >= 2; spaces--) {
            printf (" ");
        }
        for (hash = 0; hash <= (i + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_38125851_5_38
32303244_40426703_3_29
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int height;
    int all_row;
    int space;
    int hash;
    do {
        printf ("Please choose a number from 0 to 23:");
        height = GetInt ();
    }
    while ((height < 0) || (height > 23));
    for (all_row = 1; all_row <= height; all_row++) {
        for (space = (height - all_row); space > 0; space--) {
            printf (" ");
        }
        for (hash = 1; hash <= (all_row + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int c = 0;
    do {
        printf ("Height?\n");
        height = GetInt ();
    }
    while (height < 0 || height > 23);
    for (int a = height; a > 0; a--) {
        for (int b = 0; b < a - 1; b++) {
            printf (" ");
        }
        printf ("#");
        c++;
        for (int d = 0; d < c; d++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_38125851_5_38
32303244_51142237_4_32
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int height;
    int all_row;
    int space;
    int hash;
    do {
        printf ("Please choose a number from 0 to 23:");
        height = GetInt ();
    }
    while ((height < 0) || (height > 23));
    for (all_row = 1; all_row <= height; all_row++) {
        for (space = (height - all_row); space > 0; space--) {
            printf (" ");
        }
        for (hash = 1; hash <= (all_row + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int hash;
    do {
        height = get_int ("Height: ");
    }
    while (height < 0 || height > 23);
    for (int i = 0; i < height; i++) {
        for (spaces = (height - i); spaces >= 2; spaces--) {
            printf (" ");
        }
        for (hash = 0; hash <= (i + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32303244_40426703_3_29
32303244_51142237_4_32
Title: How to make the pyramid (CS50 Mario Program) formed by this code to be right aligned? 
----------------------------------------

int main (void) {
    int height;
    int c = 0;
    do {
        printf ("Height?\n");
        height = GetInt ();
    }
    while (height < 0 || height > 23);
    for (int a = height; a > 0; a--) {
        for (int b = 0; b < a - 1; b++) {
            printf (" ");
        }
        printf ("#");
        c++;
        for (int d = 0; d < c; d++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    int height;
    int spaces;
    int hash;
    do {
        height = get_int ("Height: ");
    }
    while (height < 0 || height > 23);
    for (int i = 0; i < height; i++) {
        for (spaces = (height - i); spaces >= 2; spaces--) {
            printf (" ");
        }
        for (hash = 0; hash <= (i + 1); hash++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3230761_23885569_4_16
3230761_41163280_5_68
Title: How to change Keyboard Layout (a X11 API solution) 
----------------------------------------

int main () {
    Display *_display;
    char *displayName = "";
    _display = XOpenDisplay (displayName);
    XkbDescRec *_kbdDescPtr = XkbAllocKeyboard ();
    XkbGetNames (_display, XkbSymbolsNameMask, _kbdDescPtr);
    Atom symName = _kbdDescPtr->names->symbols;
    char *layoutString = XGetAtomName (_display, symName);
    XCloseDisplay (_display);
    printf ("%s\n", layoutString);
}
----------------------------------------

int main () {
    Display *_display;
    char *displayName = "";
    _display = XOpenDisplay (displayName);
    int _deviceId = XkbUseCoreKbd;
    int i = 0;
    int _groupCount = 0;
    XkbDescRec *kbdDescPtr = XkbAllocKeyboard ();
    if (kbdDescPtr == NULL) {
        printf ("%s\n", "Failed to get keyboard description.");
        return False;
    }
    kbdDescPtr->dpy = _display;
    if (_deviceId != XkbUseCoreKbd) {
        kbdDescPtr->device_spec = _deviceId;
    }
    XkbGetControls (_display, XkbAllControlsMask, kbdDescPtr);
    XkbGetNames (_display, XkbSymbolsNameMask, kbdDescPtr);
    XkbGetNames (_display, XkbGroupNamesMask, kbdDescPtr);
    Atom *groupSource = kbdDescPtr->names->groups;
    if (kbdDescPtr->ctrls != NULL) {
        _groupCount = kbdDescPtr->ctrls->num_groups;
    }
    else {
        _groupCount = 0;
        while (_groupCount < XkbNumKbdGroups && groupSource[_groupCount] != 0) {
            _groupCount++;
        }
    }
    Atom *tmpGroupSource = kbdDescPtr->names->groups;
    Atom curGroupAtom;
    char *groupName;
    for (i = 0; i < _groupCount; i++) {
        if ((curGroupAtom = tmpGroupSource[i]) != None) {
            char *groupNameC = XGetAtomName (_display, curGroupAtom);
            if (groupNameC == NULL) {
                continue;
            }
            else {
                groupName = groupNameC;
                char *temp = "English";
                if (strncmp (temp, groupName, 7) == 0) {
                    printf ("%s\n", groupName);
                    printf ("%d\n", i);
                    XkbLockGroup (_display, _deviceId, i);
                    XFree (groupNameC);
                    XCloseDisplay (_display);
                }
                return 0;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32321997_32322837_28_34
32321997_32324355_1_31
Title: Inplace string replacement in C 
----------------------------------------

void inplace (char *str, const char pattern, const char *replacement, size_t mlen) {
    if (pattern == 0)
        return;
    if (mlen == 0)
        return;
    if (*replacement == 0)
        return;
    inplace_help (str, str, pattern, replacement, strlen (replacement), mlen - 1);
}
----------------------------------------

int inplace (char *str, const char *pattern, const char *replacement, size_t mlen) {
    char *left = str + mlen;
    char *right = left;
    while (left > str) {
        if (!*--left)
            right = str + mlen;
        *--right = *left;
    }
    size_t patlen = strlen (pattern);
    size_t replen = strlen (replacement);
    for (;;) {
        if (0 == strncmp (pattern, right, patlen)) {
            right += patlen;
            if (right - left < replen)
                return -1;
            memcpy (left, replacement, replen);
            left += replen;
        }
        else {
            if (!(*left++ = *right++))
                break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32323535_32323644_2_59
32323535_32323699_3_38
Title: How to simplify statement with the sprintf? 
----------------------------------------

void decode (unsigned char *msg) {
    int on = 0;
    if (strstr (msg, "DO1=1") == msg) {
        LATGbits.LATG1 = 1;
        on = 1;
    }
    else if (strstr (msg, "DO2=1") == msg) {
        LATGbits.LATG0 = 0;
        on = 1;
    }
    else if (strstr (msg, "DO3=1") == msg) {
        LATGbits.LATG13 = 0;
        on = 1;
    }
    else if (strstr (msg, "DO4=1") == msg) {
        LATGbits.LATG14 = 0;
        on = 1;
    }
    else if (strstr (msg, "DO5=1") == msg) {
        LATGbits.LATG12 = 0;
        on = 1;
    }
    else if (strstr (msg, "DO1=0") == msg) {
        LATGbits.LATG1 = 0;
    }
    else if (strstr (msg, "DO2=0") == msg) {
        LATGbits.LATG0 = 1;
    }
    else if (strstr (msg, "DO3=0") == msg) {
        LATGbits.LATG13 = 1;
    }
    else if (strstr (msg, "DO4=0") == msg) {
        LATGbits.LATG14 = 1;
    }
    else if (strstr (msg, "DO5=0") == msg) {
        LATGbits.LATG12 = 1;
    }
    if (on) {
        sprintf (text, "OK");
        sendString (text);
    }
}
----------------------------------------

void decode (unsigned char *msg) {
    msg[0] = toupper (msg[0]);
    msg[1] = toupper (msg[1]);
    if ((msg[0] != 'D') && (msg[1] != 'O'))
        return;
    if ((msg[2] < '1') || (msg[2] > '5'))
        return;
    if (msg[3] != '=')
        return;
    if ((msg[4] != '0') && (msg[4] != '1'))
        return;
    if (msg[4] == '0') {
        switch (msg[2]) {
        case '1' :
            LATGbits.LATG1 = 0;
            break;
        case '2' :
            LATGbits.LATG0 = 1;
            break;
        case '3' :
            LATGbits.LATG13 = 1;
            break;
        case '4' :
            LATGbits.LATG14 = 1;
            break;
        case '5' :
            LATGbits.LATG12 = 1;
            break;
        }
        return;
    }
    switch (msg[2]) {
    case '1' :
        LATGbits.LATG1 = 1;
        break;
    case '2' :
        LATGbits.LATG0 = 0;
        break;
    case '3' :
        LATGbits.LATG13 = 0;
        break;
    case '4' :
        LATGbits.LATG14 = 0;
        break;
    case '5' :
        LATGbits.LATG12 = 0;
        break;
    default :
        return;
    }
    sendString ("OK");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32383918_32385554_4_31
32383918_32388933_3_66
Title: How to make reiterations using yes/no prompt? 
----------------------------------------

int main (void) {
    int validate;
    char menu_choice [5];
    char *yes = "yes";
    char *no = "no";
    validate = 0;
    do {
        printf ("Would you like another go?(yes/no):\t");
        if (scanf (" %s", menu_choice) == 1) {
            if ((strcasecmp (menu_choice, yes) == 0)) {
                printf ("You choosed Yes\n\n\n");
                validate = 1;
            }
            else if ((strcasecmp (menu_choice, no) == 0)) {
                printf ("You choosed No\n\n\n");
                validate = 2;
            }
            else {
                printf ("Wrong Input.\n\n\n");
                validate = 0;
            }
        }
    }
    while (validate == 0 || validate == 1);
    printf ("Goodbye\n");
    return 0;
}
----------------------------------------

int main (void) {
    int days;
    int validate = 0;
    char menu_choice;
    printf (" \n");
    printf ("\t**-**-**-**Welcome to the LIGHT RAY!**-**-**-**\n");
    printf (" \n");
    printf ("\tCome one come all \n");
    printf ("\tget an idea of how unbelieveably fast light is!\n");
    do {
        printf ("\tTake a trip on the LIGHT RAY?(y/n):\t");
        if (scanf (" %c", &menu_choice) == 1) {
            if ((menu_choice == 'y') || (menu_choice == 'Y')) {
                printf ("\tAhh... Good choice!\n\n");
                printf (" \n");
                printf (" \n");
                printf ("\tHow many days would you like to travel?\t");
                scanf ("%d", & days);
                printf ("processing...\n");
                sleep (2);
                printf ("Initializing warp drive...\n");
                sleep (1);
                printf ("3\n");
                sleep (1);
                printf ("2\n");
                sleep (1);
                printf ("1\n");
                sleep (1);
                printf ("SHROOOOM!\n\n");
                sleep (1);
                long long day_time = days * 86400;
                long long distance = day_time * 186000;
                printf ("Congratulations, you managed not to get trapped in the space time continuum and manage to travel %lld miles! \n\n", distance);
                validate = 1;
            }
            else if ((menu_choice == 'n') || (menu_choice == 'N')) {
                printf ("\n");
                printf ("\tStep aside you're holding up the line!!!\n\n\n");
                validate = 2;
            }
            else {
                printf ("\n");
                printf ("\tWHAT did you just call my mother!.\n\n\n");
                validate = 0;
            }
        }
    }
    while (validate == 0 || validate == 1);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32386044_32386157_3_18
32386044_32388700_3_19
Title: Function that find the smallest int (C) 
----------------------------------------

int smallest () {
    int tyy;
    for (tyy = 0; tyy < 11; tyy++) {
        int small = INT_MAX;
        int numbers;
        printf ("input numbers");
        scanf ("%d", & numbers);
        int blockloop;
        while ((blockloop = getchar ()) != EOF && blockloop != '\n')
            ;
        if (numbers < small) {
            small = numbers;
            printf ("\n", numbers);
        }
    }
    return 0;
}
----------------------------------------

int smallest (void) {
    int tty, small = INT_MAX, numbers, blockloop;
    for (tty = 0; tty < 11; ++tty) {
        printf ("Input numbers:\n");
        scanf ("%d", & numbers);
        while ((blockloop = getchar ()) != EOF && blockloop != '\n') {
            scanf ("%d", & numbers);
        }
        if (numbers < small) {
            small = numbers;
        }
    }
    printf ("Smallest: %d\n", small);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32389074_32389374_1_21
32389074_32394673_1_20
Title: Dereferencing a pointer to a null pointer? 
----------------------------------------

void add (struct node **headRef, int value) {
    struct node *new_node = malloc (sizeof *new_node);
    new_node->value = value;
    new_node->next = NULL;
    if (*headRef == NULL)
        *headRef = new_node;
    else
        for (struct node *ptr = *headRef;; ptr = ptr->next) {
            if (ptr->next == NULL) {
                ptr->next = new_node;
                break;
            }
        }
}
----------------------------------------

void add (struct node **headRef, int value) {
    struct node *node = *headRef;
    struct node *new_node = malloc (sizeof (struct node));
    new_node->value = value;
    new_node->next = NULL;
    if (node == NULL) {
        *headRef = new_node;
    }
    else {
        while (node->next != NULL) {
            node = node->next;
        }
        node->next = new_node;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32410654_32410836_3_17
32410654_32410857_3_24
Title: Maximum And Minimum With Pointer 
----------------------------------------

int main () {
    int i, min, max, arr [3] = {10, 20, 40};
    max = arr[0];
    min = arr[0];
    for (i = 0; i < 3; i++) {
        if (arr[i] >= max)
            max = arr[i];
        if (arr[i] <= min)
            min = arr[i];
    }
    printf ("The Maximum Number Is %d\n ", max);
    printf ("The Minimum Number Is %d ", min);
    return 0;
}
----------------------------------------

int main (void) {
    int i = 0, min, max, arr [3] = {20, 40, 10};
    int *ptr_arr;
    ptr_arr = &arr[0];
    min = max = arr[0];
    for (i = 0; i < 3; i++) {
        if (max < ptr_arr[i]) {
            max = ptr_arr[i];
        }
        if (min > ptr_arr[i]) {
            min = ptr_arr[i];
        }
    }
    printf ("The Maximum Number Is %d\n ", max);
    printf ("The Minimum Number Is %d ", min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32413667_35599584_1_17
32413667_42088647_1_27
Title: Replace all occurrences of a substring in a string in C 
----------------------------------------

char *replace_str (char *str, char *orig, char *rep) {
    static char buffer [4096];
    char *p;
    int i = 0;
    while (str[i]) {
        if (!(p = strstr (str +i, orig)))
            return str;
        strncpy (buffer + strlen (buffer), str + i, (p - str) - i);
        buffer[p - str] = '\0';
        strcat (buffer, rep);
        printf ("STR:%s\n", buffer);
        i = (p - str) + strlen (orig);
    }
    return buffer;
}
----------------------------------------

char *replace_str (char *str, char *orig, char *rep) {
    static char buffer [1024];
    char *p;
    int i = 0;
    if (!(p = strstr (str +i, orig))) {
        return str;
    }
    while (str[i]) {
        if (!(p = strstr (str +i, orig))) {
            strcat (buffer, str + i);
            break;
        }
        strncpy (buffer + strlen (buffer), str + i, (p - str) - i);
        buffer[p - str] = '\0';
        strcat (buffer, rep);
        i = (p - str) + strlen (orig);
    }
    return buffer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32428769_32429318_5_54
32428769_32429513_19_55
Title: split string at different types of characters into separate strings 
----------------------------------------

static void split_string (const char *buffer, size_t buflen) {
    const char *s = buffer;
    char out [2 * buflen];
    char *ptr [buflen];
    char **p = ptr;
    char *o = out;
    int n = 0;
    int c;
    printf ("Whole string: <<%s>>\n", buffer);
    while ((c = (unsigned char) *s++) != '\0') {
        if (isdigit (c)) {
            *p++ = o;
            *o++ = c;
            while (isdigit ((unsigned char) *s))
                *o++ = *s++;
            *o++ = '\0';
            n++;
        }
        else if (isalpha (c)) {
            *p++ = o;
            *o++ = c;
            while (isalpha ((unsigned char) *s))
                *o++ = *s++;
            *o++ = '\0';
            n++;
        }
        else if (ispunct (c)) {
            *p++ = o;
            *o++ = c;
            while (ispunct ((unsigned char) *s))
                *o++ = *s++;
            *o++ = '\0';
            n++;
        }
        else if (!isspace (c)) {
            printf ("Hmmm: don't know how to classify %d (%c)\n", c, c);
        }
    }
    for (int i = 0; i < n; i++)
        printf ("Fragment[%2d] = %s\n", i, ptr[i]);
}
----------------------------------------

void split_string (char *input, void (*process) (char *, int, int)) {
    int current_pos = 0, next_length;
    while (input[current_pos]) {
        next_length = strspn (input +current_pos, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
        if (next_length) {
            process (input, current_pos, next_length);
            current_pos += next_length;
            continue;
        }
        next_length = strspn (input +current_pos, "0123456789");
        if (next_length) {
            process (input, current_pos, next_length);
            current_pos += next_length;
            continue;
        }
        next_length = strspn (input +current_pos, " ");
        current_pos += next_length;
        next_length = strcspn (input +current_pos, " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
        if (next_length) {
            process (input, current_pos, next_length);
            current_pos += next_length;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32445572_32446677_1_21
32445572_32466346_6_24
Title: How to convert int to char type and use it to stop loop? 
----------------------------------------

int main () {
    char str [255];
    int K;
    int M;
    for (;;) {
        printf ("Enter the value of K: \n");
        scanf ("%s", & str);
        if (str[0] == 'q' || str[0] == 'Q')
            break;
        sscanf (str, "%d", & K);
        printf ("Enter the value of M: \n");
        scanf ("%s", & str);
        if (str[0] == 'q' || str[0] == 'Q')
            break;
        sscanf (str, "%d", & M);
        printf ("The Hash address of %d and %d is %d", K, M, K % M);
    }
    return system ("pause");
}
----------------------------------------

int main (int argc, char *argv []) {
    int K, M;
    int ok = 0;
    do {
        K = getint ("\nEnter the value of K ( or q to quit)\n", &ok);
        if (ok == -1) {
            break;
        }
        M = getint ("\nEnter the value of M ( or q to quit)\n", &ok);
        if (ok == -1) {
            break;
        }
        printf ("\nThe Hash address of %d and %d is %d\n", K, M, K % M);
    }
    while (ok != -1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32485865_32485963_6_16
32485865_32486035_1_10
Title: Does calling main from main spawn a new process? 
----------------------------------------

int main () {
    if (start) {
        printf ("in first call to main, pid=%d\n", getpid ());
        start = 0;
        return main ();
    }
    else {
        printf ("in second call to main, pid=%d\n", getpid ());
        return 1;
    }
}
----------------------------------------

int main () {
    static int i = 2;
    if (i > 0) {
        int pid1 = getpid ();
        printf ("Main: %d\n", pid1);
        i--;
        main ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3249611_3249706_3_14
3249611_3249788_1_14
Title: write program to perform sum = 1+ (1+2) + (1+2+3) + ... + (1+2...+n) 
----------------------------------------

int main () {
    int i, t, n, sum;
    printf ("Please enter an integer, n = ");
    scanf ("%d", & n);
    t = sum = 0;
    for (i = 1; i <= n; ++i) {
        t += i;
        sum += t;
    }
    printf ("sum = %d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int total = 1;
    int sumtotal = 0;
    int n = 5;
    for (int i = 1; i <= n; i++) {
        total += i;
        sumtotal += total;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32532350_32540842_13_32
32532350_32540842_6_50
Title: Using fgets( ) - the most memory efficient way 
----------------------------------------

int main (void) {
    char line [LINE_MAX];
    FILE *fp = NULL;
    if (NULL == (fp = fopen ("file.txt", "r"))) {
        perror ("fopen for file.txt for read failed");
        exit (EXIT_FAILURE);
    }
    while (fgets (line, LINE_MAX, fp)) {
        printf ("%s\n", line);
    }
    fclose (fp);
    return (0);
}
----------------------------------------

int main (void) {
    int main (void) {
        char line [LINE_MAX];
        FILE *fp = NULL;
        if (NULL == (fp = fopen ("file.txt", "r"))) {
            perror ("fopen for file.txt for read failed");
            exit (EXIT_FAILURE);
        }
        while (fgets (line, LINE_MAX, fp)) {
            printf ("%s\n", line);
        }
        fclose (fp);
        return (0);
    } char line [LINE_MAX];
    FILE *fp = NULL;
    if (NULL == (fp = fopen ("file.txt", "r"))) {
        perror ("fopen for file.txt for read failed");
        exit (EXIT_FAILURE);
    }
    while (fgets (line, LINE_MAX, fp)) {
        printf ("%s", line);
    }
    fclose (fp);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32542067_32542299_5_34
32542067_32542311_3_31
Title: Two different methods for reversing an array of strings in c 
----------------------------------------

int main () {
    char *states [100], *temp [100];
    int i, j = 0, n;
    printf ("no of states");
    scanf ("%d", & j);
    n = j;
    printf ("enter the states\n");
    for (i = 0; i < j; i++) {
        states[i] = malloc (100);
        scanf ("%99s", states [i]);
    }
    for (i = 0, j = n - 1; i < j; j--, i++) {
        temp[i] = malloc (100);
        strcpy (temp [i], states [i]);
        strcpy (states [i], states [j]);
        strcpy (states [j], temp [i]);
    }
    j = n;
    for (i = 0; i < j; i++) {
        printf ("%s\n", states [i]);
        free (states [i]);
        free (temp [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    char states [20] [20], temp [20] [20];
    int i, j = 0, n;
    printf ("no of states");
    scanf ("%d", & j);
    n = j;
    printf ("enter the states");
    for (i = 0; i < j; i++) {
        scanf ("%s", states [i]);
    }
    for (i = 0; i < j; i++) {
        printf ("%s,", states [i]);
    }
    for (i = 0; i < j; i++) {
        strcpy (temp [n - i - 1], states [i]);
    }
    for (i = 0; i < j; i++) {
        strcpy (states [i], temp [i]);
    }
    printf ("\nReversed States: ");
    for (i = 0; i < j; i++) {
        printf ("%s,", states [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32544645_32544910_6_20
32544645_32544914_6_23
Title: Equations In While Loops 
----------------------------------------

int main () {
    int time = 1;
    double distance = 0;
    printf ("What is the height?\n");
    double height;
    scanf ("%lf", & height);
    printf ("Time\tHeight\n");
    while (height > (distance = 0.5 * GRAVITY * pow (time, 2)))
        printf ("%d\t%012lf\n", time++, height -distance);
    printf ("Impacted after %lf seconds\n", sqrt (height / (0.5 * GRAVITY)));
    return 0;
}
----------------------------------------

int main () {
    int time = 0;
    int height;
    double distance;
    printf ("What is the height?\n");
    scanf ("%d", & height);
    printf ("Time\tHeight\n");
    while (height > 0) {
        printf ("%d\t%d\n", time ++, height);
        distance = .5 * GRAVITY * pow (time, 2);
        height -= distance;
    }
    printf ("%d\t0\n", time);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32546632_32546668_6_22
32546632_32546737_4_29
Title: How to count words and punctuation in a string C program? 
----------------------------------------

int main () {
    int word;
    int countword = 0;
    int countpunct = 0;
    printf ("\nEnter the String: ");
    while ((word = getchar ()) != EOF && word != '\n') {
        if (word == ' ')
            countword++;
        if (word == '.' || word == '?' || word == '!' || word == '(' || word == ')' || word == '*' || word == '&') {
            countpunct++;
        }
    }
    printf ("\nThe number of words is %d.", countword);
    printf ("\nThe number of punctuation marsks is %d.", countpunct);
}
----------------------------------------

int main () {
    char input [255];
    int wcount, pcount, i;
    wcount = pcount = 0;
    printf ("\nEnter the String: ");
    fgets (input, 255, stdin);
    for (i = 0; i < strlen (input); i++) {
        switch (input[i]) {
        case ' ' :
            if (i > 0)
                wcount++;
            break;
        case '.' :
        case '?' :
        case '!' :
        case '(' :
        case ')' :
        case '*' :
        case '&' :
            pcount++;
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550298_20_50
32550201_32550309_22_53
Title: Leap year C program 
----------------------------------------

int main () {
    int y, ch;
    node *head = NULL;
    node **tail = &head;
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y);
            *tail = (node *) malloc (sizeof (node));
            (*tail)->year = y;
            (*tail)->next = NULL;
            tail = &(*tail)->next;
            leapYear (y);
            break;
        case 2 :
            while (head != NULL) {
                node *next = head->next;
                leapYear (head -> year);
                free (head);
                head = next;
            }
            exit (0);
        }
    }
    while (1);
}
----------------------------------------

int main () {
    int ch, i = 0;
    years_t y [100];
    int continue_loop = 1;
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y [i].year);
            y[i].isleap = leapYear (y[i].year);
            i++;
            break;
        case 2 :
            continue_loop = 0;
            break;
        }
    }
    while (continue_loop);
    for (ch = 0; ch < i; ch++) {
        printf ("%d %s\n", y [ch].year, (y [ch].isleap == 0) ? "Leap Year" : "Not Leap Year");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550298_20_50
32550201_32550469_15_57
Title: Leap year C program 
----------------------------------------

int main () {
    int y, ch;
    node *head = NULL;
    node **tail = &head;
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y);
            *tail = (node *) malloc (sizeof (node));
            (*tail)->year = y;
            (*tail)->next = NULL;
            tail = &(*tail)->next;
            leapYear (y);
            break;
        case 2 :
            while (head != NULL) {
                node *next = head->next;
                leapYear (head -> year);
                free (head);
                head = next;
            }
            exit (0);
        }
    }
    while (1);
}
----------------------------------------

int main () {
    int y, ch, i;
    int cnt = 0;
    int *leapyr_ptr;
    int *temp;
    leapyr_ptr = (int *) malloc (cnt);
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y);
            cnt++;
            leapyr_ptr = (int *) realloc (leapyr_ptr, cnt);
            temp = leapyr_ptr;
            i = 0;
            i = 0;
            while (i < cnt - 1) {
                temp++;
                i++;
            }
            *temp = y;
            leapYear (y);
            break;
        case 2 :
            temp = leapyr_ptr;
            i = 0;
            while (i < cnt) {
                leapYear (*temp);
                temp++;
                i++;
            }
            exit (0);
        }
    }
    while (1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550298_20_50
32550201_32550485_13_65
Title: Leap year C program 
----------------------------------------

int main () {
    int y, ch;
    node *head = NULL;
    node **tail = &head;
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y);
            *tail = (node *) malloc (sizeof (node));
            (*tail)->year = y;
            (*tail)->next = NULL;
            tail = &(*tail)->next;
            leapYear (y);
            break;
        case 2 :
            while (head != NULL) {
                node *next = head->next;
                leapYear (head -> year);
                free (head);
                head = next;
            }
            exit (0);
        }
    }
    while (1);
}
----------------------------------------

int main () {
    int *years, size = 10, counter = 0, i, input, ch;
    years = malloc (sizeof (int) * size);
    if (years == NULL) {
        printf ("malloc failed to allocate memory");
        return -1;
    }
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & input);
            if (counter == size) {
                int *temp = years;
                size += 10;
                years = realloc (years, size * sizeof (int));
                if (years == NULL) {
                    printf ("reallocing memory failed");
                    years = temp;
                    ch = 2;
                    break;
                }
            }
            years[counter] = input;
            counter++;
            leapYear (input);
        }
    }
    while (ch != 2);
    printf ("\n\n");
    for (i = 0; i < counter; i++)
        leapYear (years[i]);
    free (years);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550298_20_50
32550201_35382886_4_36
Title: Leap year C program 
----------------------------------------

int main () {
    int y, ch;
    node *head = NULL;
    node **tail = &head;
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y);
            *tail = (node *) malloc (sizeof (node));
            (*tail)->year = y;
            (*tail)->next = NULL;
            tail = &(*tail)->next;
            leapYear (y);
            break;
        case 2 :
            while (head != NULL) {
                node *next = head->next;
                leapYear (head -> year);
                free (head);
                head = next;
            }
            exit (0);
        }
    }
    while (1);
}
----------------------------------------

int main () {
    int year, A, B, C;
    printf ("Enter the value of year :");
    scanf ("%d", & year);
    A = year % 4;
    B = year % 100;
    C = year % 400;
    if (((A == 0) && (B != 0)) || (C == 0)) {
        printf ("The year is Leap year");
    }
    else {
        printf ("The year is't Leap year");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550309_22_53
32550201_32550469_15_57
Title: Leap year C program 
----------------------------------------

int main () {
    int ch, i = 0;
    years_t y [100];
    int continue_loop = 1;
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y [i].year);
            y[i].isleap = leapYear (y[i].year);
            i++;
            break;
        case 2 :
            continue_loop = 0;
            break;
        }
    }
    while (continue_loop);
    for (ch = 0; ch < i; ch++) {
        printf ("%d %s\n", y [ch].year, (y [ch].isleap == 0) ? "Leap Year" : "Not Leap Year");
    }
    return 0;
}
----------------------------------------

int main () {
    int y, ch, i;
    int cnt = 0;
    int *leapyr_ptr;
    int *temp;
    leapyr_ptr = (int *) malloc (cnt);
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y);
            cnt++;
            leapyr_ptr = (int *) realloc (leapyr_ptr, cnt);
            temp = leapyr_ptr;
            i = 0;
            i = 0;
            while (i < cnt - 1) {
                temp++;
                i++;
            }
            *temp = y;
            leapYear (y);
            break;
        case 2 :
            temp = leapyr_ptr;
            i = 0;
            while (i < cnt) {
                leapYear (*temp);
                temp++;
                i++;
            }
            exit (0);
        }
    }
    while (1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550309_22_53
32550201_32550485_13_65
Title: Leap year C program 
----------------------------------------

int main () {
    int ch, i = 0;
    years_t y [100];
    int continue_loop = 1;
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y [i].year);
            y[i].isleap = leapYear (y[i].year);
            i++;
            break;
        case 2 :
            continue_loop = 0;
            break;
        }
    }
    while (continue_loop);
    for (ch = 0; ch < i; ch++) {
        printf ("%d %s\n", y [ch].year, (y [ch].isleap == 0) ? "Leap Year" : "Not Leap Year");
    }
    return 0;
}
----------------------------------------

int main () {
    int *years, size = 10, counter = 0, i, input, ch;
    years = malloc (sizeof (int) * size);
    if (years == NULL) {
        printf ("malloc failed to allocate memory");
        return -1;
    }
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & input);
            if (counter == size) {
                int *temp = years;
                size += 10;
                years = realloc (years, size * sizeof (int));
                if (years == NULL) {
                    printf ("reallocing memory failed");
                    years = temp;
                    ch = 2;
                    break;
                }
            }
            years[counter] = input;
            counter++;
            leapYear (input);
        }
    }
    while (ch != 2);
    printf ("\n\n");
    for (i = 0; i < counter; i++)
        leapYear (years[i]);
    free (years);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550309_22_53
32550201_35382886_4_36
Title: Leap year C program 
----------------------------------------

int main () {
    int ch, i = 0;
    years_t y [100];
    int continue_loop = 1;
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y [i].year);
            y[i].isleap = leapYear (y[i].year);
            i++;
            break;
        case 2 :
            continue_loop = 0;
            break;
        }
    }
    while (continue_loop);
    for (ch = 0; ch < i; ch++) {
        printf ("%d %s\n", y [ch].year, (y [ch].isleap == 0) ? "Leap Year" : "Not Leap Year");
    }
    return 0;
}
----------------------------------------

int main () {
    int year, A, B, C;
    printf ("Enter the value of year :");
    scanf ("%d", & year);
    A = year % 4;
    B = year % 100;
    C = year % 400;
    if (((A == 0) && (B != 0)) || (C == 0)) {
        printf ("The year is Leap year");
    }
    else {
        printf ("The year is't Leap year");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550469_15_57
32550201_32550485_13_65
Title: Leap year C program 
----------------------------------------

int main () {
    int y, ch, i;
    int cnt = 0;
    int *leapyr_ptr;
    int *temp;
    leapyr_ptr = (int *) malloc (cnt);
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y);
            cnt++;
            leapyr_ptr = (int *) realloc (leapyr_ptr, cnt);
            temp = leapyr_ptr;
            i = 0;
            i = 0;
            while (i < cnt - 1) {
                temp++;
                i++;
            }
            *temp = y;
            leapYear (y);
            break;
        case 2 :
            temp = leapyr_ptr;
            i = 0;
            while (i < cnt) {
                leapYear (*temp);
                temp++;
                i++;
            }
            exit (0);
        }
    }
    while (1);
}
----------------------------------------

int main () {
    int *years, size = 10, counter = 0, i, input, ch;
    years = malloc (sizeof (int) * size);
    if (years == NULL) {
        printf ("malloc failed to allocate memory");
        return -1;
    }
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & input);
            if (counter == size) {
                int *temp = years;
                size += 10;
                years = realloc (years, size * sizeof (int));
                if (years == NULL) {
                    printf ("reallocing memory failed");
                    years = temp;
                    ch = 2;
                    break;
                }
            }
            years[counter] = input;
            counter++;
            leapYear (input);
        }
    }
    while (ch != 2);
    printf ("\n\n");
    for (i = 0; i < counter; i++)
        leapYear (years[i]);
    free (years);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550469_15_57
32550201_35382886_4_36
Title: Leap year C program 
----------------------------------------

int main () {
    int y, ch, i;
    int cnt = 0;
    int *leapyr_ptr;
    int *temp;
    leapyr_ptr = (int *) malloc (cnt);
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & y);
            cnt++;
            leapyr_ptr = (int *) realloc (leapyr_ptr, cnt);
            temp = leapyr_ptr;
            i = 0;
            i = 0;
            while (i < cnt - 1) {
                temp++;
                i++;
            }
            *temp = y;
            leapYear (y);
            break;
        case 2 :
            temp = leapyr_ptr;
            i = 0;
            while (i < cnt) {
                leapYear (*temp);
                temp++;
                i++;
            }
            exit (0);
        }
    }
    while (1);
}
----------------------------------------

int main () {
    int year, A, B, C;
    printf ("Enter the value of year :");
    scanf ("%d", & year);
    A = year % 4;
    B = year % 100;
    C = year % 400;
    if (((A == 0) && (B != 0)) || (C == 0)) {
        printf ("The year is Leap year");
    }
    else {
        printf ("The year is't Leap year");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32550201_32550485_13_65
32550201_35382886_4_36
Title: Leap year C program 
----------------------------------------

int main () {
    int *years, size = 10, counter = 0, i, input, ch;
    years = malloc (sizeof (int) * size);
    if (years == NULL) {
        printf ("malloc failed to allocate memory");
        return -1;
    }
    do {
        printf ("Enter your choice \n 1. Enter a year\n 2. Exit\n ");
        scanf ("%d", & ch);
        switch (ch) {
        case 1 :
            printf ("Enter a year: ");
            scanf ("%d", & input);
            if (counter == size) {
                int *temp = years;
                size += 10;
                years = realloc (years, size * sizeof (int));
                if (years == NULL) {
                    printf ("reallocing memory failed");
                    years = temp;
                    ch = 2;
                    break;
                }
            }
            years[counter] = input;
            counter++;
            leapYear (input);
        }
    }
    while (ch != 2);
    printf ("\n\n");
    for (i = 0; i < counter; i++)
        leapYear (years[i]);
    free (years);
}
----------------------------------------

int main () {
    int year, A, B, C;
    printf ("Enter the value of year :");
    scanf ("%d", & year);
    A = year % 4;
    B = year % 100;
    C = year % 400;
    if (((A == 0) && (B != 0)) || (C == 0)) {
        printf ("The year is Leap year");
    }
    else {
        printf ("The year is't Leap year");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32555077_32555135_4_17
32555077_32556548_5_19
Title: Add a number to an ascii string in C language 
----------------------------------------

int main (int argc, char *argv []) {
    char stringline [200];
    int lengthofstr;
    int i;
    scanf ("%199s", & stringline);
    lengthofstr = strlen (stringline);
    for (i = 0; i < lengthofstr; i++) {
        stringline[i] = (stringline[i] + 1);
    }
    printf ("%s", stringline);
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    int idx = 0;
    char result [MAXC] = {0};
    while ((c = getchar ()) != '\n' && c != EOF && idx < MAXC) {
        if (('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z'))
            c++;
        result[idx++] = c;
    }
    printf ("\n result: %s\n\n", result);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32557307_32557560_7_31
32557307_32558300_7_22
Title: Calculation of time in C 
----------------------------------------

int main (void) {
    int a;
    int years;
    int days;
    int weeks;
    int rest;
    printf ("Enter the time in days: ");
    scanf ("%d", & a);
    years = a / DAYS_PER_YEAR;
    rest = (a - years * DAYS_PER_YEAR);
    weeks = rest / DAYS_PER_WEEK;
    rest = (rest - weeks * DAYS_PER_WEEK);
    days = rest;
    printf ("%d days is %d years, %d weeks and %d days.\n", a, years, weeks, days);
    return 0;
}
----------------------------------------

int main (void) {
    int a, years, weeks, days, remains;
    printf ("Enter the time in days: ");
    scanf ("%d", & a);
    years = a / DAYS_PER_YEAR;
    remains = a % DAYS_PER_YEAR;
    weeks = remains / DAYS_PER_WEEK;
    days = remains % DAYS_PER_WEEK;
    printf ("%d days is %d years, %d weeks and %d days\n", a, years, weeks, days);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32557551_32557714_3_21
32557551_32557792_3_27
Title: parse integers and print out characters 
----------------------------------------

int main () {
    int n, i;
    int new_arr [10], arr [10];
    n = 4;
    printf ("Enter elements\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & arr [i]);
    }
    for (i = 0; i < n - 1; i++) {
        new_arr[i] = arr[i] + arr[i + 1];
    }
    for (i = 0; i < n - 1; i++) {
        printf ("%c", new_arr [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int idx, n, n1;
    idx = n = n1 = 0;
    while (scanf ("%d", &n) == 1) {
        if (idx == 0) {
            n1 = n;
            idx = 1;
        }
        else {
            int sum = n1 + n;
            if (' ' <= sum && sum <= '~')
                printf (" sum = (%2d + %2d) = %3d  =>  %c\n", n1, n, sum, sum);
            else
                printf (" sum = (%2d + %2d) = %3d  => (out of ASCII range)\n", n1, n, sum);
            idx = 0;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32568176_32568681_5_26
32568176_32569834_5_61
Title: How to read parts of a formatted text? 
----------------------------------------

int main (void) {
    const char *text = "<![LOG[\"The text to display in the log.\"]LOG]!><time=\"12:48:39.0+120\" date=\"9-14-2015\" component=\"mycomponent\" context=\"\" type=\"0\" thread=\"0\" file=\"myfile.cpp\"><![CDATA[";
    const char *start = text;
    const char *end;
    while (start = strchr (start, '"')) {
        ++start;
        end = strchr (start, '"');
        size_t len = end - start;
        char *pickup = malloc (len +1);
        memcpy (pickup, start, len);
        pickup[len] = '\0';
        if (len)
            puts (pickup);
        else
            puts ("\"\"");
        free (pickup);
        start = end + 1;
    }
    return 0;
}
----------------------------------------

int main (void) {
    FILE *input;
    fopen_s (& input, "myfile.cpp", "r");
    char c;
    int printState = 0, startPrinting = 0;
    bool empty = true;
    while ((c = getc (input)) != EOF) {
        if (c == '"')
            printState++;
        if (printState == 2) {
            if (empty == true) {
                printf ("\"\" (empty)\n");
                printState = 0;
                startPrinting = 0;
            }
            else {
                printf ("\n");
                printState = 0;
                startPrinting = 0;
                empty = true;
            }
        }
        if (startPrinting == 1) {
            printf ("%c", c);
            empty = false;
        }
        if (printState == 1) {
            startPrinting = 1;
        }
    }
    fclose (input);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32568176_32568681_5_26
32568176_32590818_7_83
Title: How to read parts of a formatted text? 
----------------------------------------

int main (void) {
    const char *text = "<![LOG[\"The text to display in the log.\"]LOG]!><time=\"12:48:39.0+120\" date=\"9-14-2015\" component=\"mycomponent\" context=\"\" type=\"0\" thread=\"0\" file=\"myfile.cpp\"><![CDATA[";
    const char *start = text;
    const char *end;
    while (start = strchr (start, '"')) {
        ++start;
        end = strchr (start, '"');
        size_t len = end - start;
        char *pickup = malloc (len +1);
        memcpy (pickup, start, len);
        pickup[len] = '\0';
        if (len)
            puts (pickup);
        else
            puts ("\"\"");
        free (pickup);
        start = end + 1;
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    const char *text = "<![LOG[\"The text to display in the log.\"]LOG]!>" "<time=\"12:48:39.0+120\" date=\"9-14-2015\" " "component=\"mycomponent\" context=\"\" type=\"0\" " "thread=\"0\" file=\"myfile.cpp\"><![CDATA[";
    const char *ptn = "<!\\[LOG\\[\"(.*)\"\\]LOG\\]!>" "<time=\"(.*)\" *date=\"(.*)\" *component=\"(.*)\" *" "context=\"(.*)\" *type=\"(.*)\" *thread=\"(.*)\" *" "file=\"(.*)\"><![CDATA[";
    regex_t regex;
    if (regcomp (&regex, ptn, REG_EXTENDED) != 0) {
        fprintf (stderr, "regcomp failed on %s\n", ptn);
        exit (0);
    }
    fprintf (stdout, "number of subexpressions: %zu\n", regex.re_nsub);
    size_t matchCount = regex.re_nsub + 1;
    regmatch_t pmatch [matchCount];
    int ret = 0;
    if ((ret = regexec (&regex, text, matchCount, pmatch, 0)) != 0) {
        fprintf (stdout, "%s does not match %s, return code %d\n", text, ptn, ret);
    }
    else {
        fprintf (stdout, "%s matches %s\n", text, ptn);
        for (size_t i = 0; i < matchCount; i++) {
            if (pmatch[i].rm_so >= 0) {
                fprintf (stdout, "match %zu (start: %3lu; end: %3lu): %*.*s\n", i, (unsigned long) pmatch [i].rm_so, (unsigned long) pmatch [i].rm_eo, (int) (pmatch [i].rm_eo - pmatch [i].rm_so), (int) (pmatch [i].rm_eo - pmatch [i].rm_so), text + pmatch [i].rm_so);
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32568176_32569834_5_61
32568176_32590818_7_83
Title: How to read parts of a formatted text? 
----------------------------------------

int main (void) {
    FILE *input;
    fopen_s (& input, "myfile.cpp", "r");
    char c;
    int printState = 0, startPrinting = 0;
    bool empty = true;
    while ((c = getc (input)) != EOF) {
        if (c == '"')
            printState++;
        if (printState == 2) {
            if (empty == true) {
                printf ("\"\" (empty)\n");
                printState = 0;
                startPrinting = 0;
            }
            else {
                printf ("\n");
                printState = 0;
                startPrinting = 0;
                empty = true;
            }
        }
        if (startPrinting == 1) {
            printf ("%c", c);
            empty = false;
        }
        if (printState == 1) {
            startPrinting = 1;
        }
    }
    fclose (input);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    const char *text = "<![LOG[\"The text to display in the log.\"]LOG]!>" "<time=\"12:48:39.0+120\" date=\"9-14-2015\" " "component=\"mycomponent\" context=\"\" type=\"0\" " "thread=\"0\" file=\"myfile.cpp\"><![CDATA[";
    const char *ptn = "<!\\[LOG\\[\"(.*)\"\\]LOG\\]!>" "<time=\"(.*)\" *date=\"(.*)\" *component=\"(.*)\" *" "context=\"(.*)\" *type=\"(.*)\" *thread=\"(.*)\" *" "file=\"(.*)\"><![CDATA[";
    regex_t regex;
    if (regcomp (&regex, ptn, REG_EXTENDED) != 0) {
        fprintf (stderr, "regcomp failed on %s\n", ptn);
        exit (0);
    }
    fprintf (stdout, "number of subexpressions: %zu\n", regex.re_nsub);
    size_t matchCount = regex.re_nsub + 1;
    regmatch_t pmatch [matchCount];
    int ret = 0;
    if ((ret = regexec (&regex, text, matchCount, pmatch, 0)) != 0) {
        fprintf (stdout, "%s does not match %s, return code %d\n", text, ptn, ret);
    }
    else {
        fprintf (stdout, "%s matches %s\n", text, ptn);
        for (size_t i = 0; i < matchCount; i++) {
            if (pmatch[i].rm_so >= 0) {
                fprintf (stdout, "match %zu (start: %3lu; end: %3lu): %*.*s\n", i, (unsigned long) pmatch [i].rm_so, (unsigned long) pmatch [i].rm_eo, (int) (pmatch [i].rm_eo - pmatch [i].rm_so), (int) (pmatch [i].rm_eo - pmatch [i].rm_so), text + pmatch [i].rm_so);
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32573382_32573522_6_20
32573382_32579385_1_19
Title: How to take ints from user using fgets in C? 
----------------------------------------

int main (int argc, char *argv []) {
    int height;
    int width;
    int depth;
    scanf ("%10d", & height);
    scanf ("%10d", & width);
    scanf ("%10d", & depth);
    printf ("\nThe volumn is %d\n", volumn (height, width, depth));
    return 0;
}
----------------------------------------

int main (void) {
    int height;
    int width;
    int depth;
    if (1 != (scanf ("%d", & height))) {perror ("scanf for height failed: );
        exit( EXIT_FAILURE );
    }

    // implied else, scanf successful

    similar statements for the other two inputs

    printf (" \ nThe volumn is % d \ n ", volumn (height, width, depth));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32573382_32573522_6_20
32573382_40957702_8_26
Title: How to take ints from user using fgets in C? 
----------------------------------------

int main (int argc, char *argv []) {
    int height;
    int width;
    int depth;
    scanf ("%10d", & height);
    scanf ("%10d", & width);
    scanf ("%10d", & depth);
    printf ("\nThe volumn is %d\n", volumn (height, width, depth));
    return 0;
}
----------------------------------------

int main () {
    char height [10];
    char width [10];
    char depth [10];
    printf ("Please enter size of object:\n");
    fgets (height, 10, stdin);
    fgets (width, 10, stdin);
    fgets (depth, 10, stdin);
    int valheight = atoi (height);
    int valwidth = atoi (width);
    int valdepth = atoi (depth);
    printf ("\nThe volumn is %i\n", volumn (valheight, valwidth, valdepth));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32573382_32579385_1_19
32573382_40957702_8_26
Title: How to take ints from user using fgets in C? 
----------------------------------------

int main (void) {
    int height;
    int width;
    int depth;
    if (1 != (scanf ("%d", & height))) {perror ("scanf for height failed: );
        exit( EXIT_FAILURE );
    }

    // implied else, scanf successful

    similar statements for the other two inputs

    printf (" \ nThe volumn is % d \ n ", volumn (height, width, depth));
    return 0;
}
----------------------------------------

int main () {
    char height [10];
    char width [10];
    char depth [10];
    printf ("Please enter size of object:\n");
    fgets (height, 10, stdin);
    fgets (width, 10, stdin);
    fgets (depth, 10, stdin);
    int valheight = atoi (height);
    int valwidth = atoi (width);
    int valdepth = atoi (depth);
    printf ("\nThe volumn is %i\n", volumn (valheight, valwidth, valdepth));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586145_3_37
32585741_32586167_2_22
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main () {
    int i, j;
    int n = 9;
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= 5; j++) {
            if (i % 2 == 0) {
                if (j == 1) {
                    printf (" %d", i + 1);
                }
                else
                    printf (" %d", i);
            }
            else {
                if (j == 5) {
                    printf (" %d", i + 1);
                    break;
                }
                else {
                    printf (" %d", i);
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, j;
    for (i = 1; i < 6; i++) {
        if (i % 2 == 0) {
            printf ("%d", i + 1);
            for (j = 0; j < 4; j++) {
                printf ("%d", i);
            }
        }
        else {
            for (j = 0; j < 4; j++) {
                printf ("%d", i);
            }
            printf ("%d", i + 1);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586145_3_37
32585741_32586226_4_43
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main () {
    int i, j;
    int n = 9;
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= 5; j++) {
            if (i % 2 == 0) {
                if (j == 1) {
                    printf (" %d", i + 1);
                }
                else
                    printf (" %d", i);
            }
            else {
                if (j == 5) {
                    printf (" %d", i + 1);
                    break;
                }
                else {
                    printf (" %d", i);
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int row, col;
    int matrix [MAX_ROW] [MAX_COL];
    for (row = 0; row < MAX_ROW; row++) {
        for (col = 0; col < MAX_COL; col++) {
            if (col == MAX_COL - 1) {
                if (row % 2)
                    matrix[row][col] = row + 1;
                else
                    matrix[row][col] = row + 2;
            }
            else if (col == 0) {
                if (row % 2)
                    matrix[row][col] = row + 2;
                else
                    matrix[row][col] = row + 1;
            }
            else {
                matrix[row][col] = row + 1;
            }
        }
    }
    for (row = 0; row < MAX_ROW; row++) {
        for (col = 0; col < MAX_COL; col++) {
            printf ("%d ", matrix [row] [col]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586145_3_37
32585741_32586603_5_18
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main () {
    int i, j;
    int n = 9;
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= 5; j++) {
            if (i % 2 == 0) {
                if (j == 1) {
                    printf (" %d", i + 1);
                }
                else
                    printf (" %d", i);
            }
            else {
                if (j == 5) {
                    printf (" %d", i + 1);
                    break;
                }
                else {
                    printf (" %d", i);
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int dimension = 5;
    for (int i = 1; i <= dimension; i++) {
        for (int j = 1; j <= dimension; j++)
        std :
        : cout << i + (j == 1 + ((dimension - 1) * (i % 2))) ? (i % 2) * 1 : 0;
    std :
        : cout << "\n";
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586145_3_37
32585741_33658314_3_27
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main () {
    int i, j;
    int n = 9;
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= 5; j++) {
            if (i % 2 == 0) {
                if (j == 1) {
                    printf (" %d", i + 1);
                }
                else
                    printf (" %d", i);
            }
            else {
                if (j == 5) {
                    printf (" %d", i + 1);
                    break;
                }
                else {
                    printf (" %d", i);
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    for (i = 1; i <= 5; i++) {
        int special = i + 1;
        if (i % 2 == 1) {
            for (j = 1; j <= 4; j++) {
                printf ("%d ", i);
            }
            printf ("%d\n", special);
        }
        else if (i % 2 == 0) {
            printf ("%d ", special);
            for (j = 1; j <= 4; j++) {
                printf ("%d ", i);
            }
            printf ("\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586167_2_22
32585741_32586226_4_43
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main (void) {
    int i, j;
    for (i = 1; i < 6; i++) {
        if (i % 2 == 0) {
            printf ("%d", i + 1);
            for (j = 0; j < 4; j++) {
                printf ("%d", i);
            }
        }
        else {
            for (j = 0; j < 4; j++) {
                printf ("%d", i);
            }
            printf ("%d", i + 1);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int row, col;
    int matrix [MAX_ROW] [MAX_COL];
    for (row = 0; row < MAX_ROW; row++) {
        for (col = 0; col < MAX_COL; col++) {
            if (col == MAX_COL - 1) {
                if (row % 2)
                    matrix[row][col] = row + 1;
                else
                    matrix[row][col] = row + 2;
            }
            else if (col == 0) {
                if (row % 2)
                    matrix[row][col] = row + 2;
                else
                    matrix[row][col] = row + 1;
            }
            else {
                matrix[row][col] = row + 1;
            }
        }
    }
    for (row = 0; row < MAX_ROW; row++) {
        for (col = 0; col < MAX_COL; col++) {
            printf ("%d ", matrix [row] [col]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586167_2_22
32585741_32586603_5_18
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main (void) {
    int i, j;
    for (i = 1; i < 6; i++) {
        if (i % 2 == 0) {
            printf ("%d", i + 1);
            for (j = 0; j < 4; j++) {
                printf ("%d", i);
            }
        }
        else {
            for (j = 0; j < 4; j++) {
                printf ("%d", i);
            }
            printf ("%d", i + 1);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int dimension = 5;
    for (int i = 1; i <= dimension; i++) {
        for (int j = 1; j <= dimension; j++)
        std :
        : cout << i + (j == 1 + ((dimension - 1) * (i % 2))) ? (i % 2) * 1 : 0;
    std :
        : cout << "\n";
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586167_2_22
32585741_33658314_3_27
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main (void) {
    int i, j;
    for (i = 1; i < 6; i++) {
        if (i % 2 == 0) {
            printf ("%d", i + 1);
            for (j = 0; j < 4; j++) {
                printf ("%d", i);
            }
        }
        else {
            for (j = 0; j < 4; j++) {
                printf ("%d", i);
            }
            printf ("%d", i + 1);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    for (i = 1; i <= 5; i++) {
        int special = i + 1;
        if (i % 2 == 1) {
            for (j = 1; j <= 4; j++) {
                printf ("%d ", i);
            }
            printf ("%d\n", special);
        }
        else if (i % 2 == 0) {
            printf ("%d ", special);
            for (j = 1; j <= 4; j++) {
                printf ("%d ", i);
            }
            printf ("\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586226_4_43
32585741_32586603_5_18
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main () {
    int row, col;
    int matrix [MAX_ROW] [MAX_COL];
    for (row = 0; row < MAX_ROW; row++) {
        for (col = 0; col < MAX_COL; col++) {
            if (col == MAX_COL - 1) {
                if (row % 2)
                    matrix[row][col] = row + 1;
                else
                    matrix[row][col] = row + 2;
            }
            else if (col == 0) {
                if (row % 2)
                    matrix[row][col] = row + 2;
                else
                    matrix[row][col] = row + 1;
            }
            else {
                matrix[row][col] = row + 1;
            }
        }
    }
    for (row = 0; row < MAX_ROW; row++) {
        for (col = 0; col < MAX_COL; col++) {
            printf ("%d ", matrix [row] [col]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int dimension = 5;
    for (int i = 1; i <= dimension; i++) {
        for (int j = 1; j <= dimension; j++)
        std :
        : cout << i + (j == 1 + ((dimension - 1) * (i % 2))) ? (i % 2) * 1 : 0;
    std :
        : cout << "\n";
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586226_4_43
32585741_33658314_3_27
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main () {
    int row, col;
    int matrix [MAX_ROW] [MAX_COL];
    for (row = 0; row < MAX_ROW; row++) {
        for (col = 0; col < MAX_COL; col++) {
            if (col == MAX_COL - 1) {
                if (row % 2)
                    matrix[row][col] = row + 1;
                else
                    matrix[row][col] = row + 2;
            }
            else if (col == 0) {
                if (row % 2)
                    matrix[row][col] = row + 2;
                else
                    matrix[row][col] = row + 1;
            }
            else {
                matrix[row][col] = row + 1;
            }
        }
    }
    for (row = 0; row < MAX_ROW; row++) {
        for (col = 0; col < MAX_COL; col++) {
            printf ("%d ", matrix [row] [col]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    for (i = 1; i <= 5; i++) {
        int special = i + 1;
        if (i % 2 == 1) {
            for (j = 1; j <= 4; j++) {
                printf ("%d ", i);
            }
            printf ("%d\n", special);
        }
        else if (i % 2 == 0) {
            printf ("%d ", special);
            for (j = 1; j <= 4; j++) {
                printf ("%d ", i);
            }
            printf ("\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32585741_32586603_5_18
32585741_33658314_3_27
Title: How to print a rectangle of the following pattern 
----------------------------------------

int main () {
    int dimension = 5;
    for (int i = 1; i <= dimension; i++) {
        for (int j = 1; j <= dimension; j++)
        std :
        : cout << i + (j == 1 + ((dimension - 1) * (i % 2))) ? (i % 2) * 1 : 0;
    std :
        : cout << "\n";
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    for (i = 1; i <= 5; i++) {
        int special = i + 1;
        if (i % 2 == 1) {
            for (j = 1; j <= 4; j++) {
                printf ("%d ", i);
            }
            printf ("%d\n", special);
        }
        else if (i % 2 == 0) {
            printf ("%d ", special);
            for (j = 1; j <= 4; j++) {
                printf ("%d ", i);
            }
            printf ("\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32593272_32593537_1_13
32593272_32593630_3_15
Title: Pattern Program in C 
----------------------------------------

int main () {
    int i = 2;
    int shift = 0;
    printf ("2\n");
    for (int len = 2; len < 6; len++) {
        for (int j = i; j < i + len; j++) {
            printf ("%d\t", j + shift);
        }
        printf ("\n");
        shift++;
    }
}
----------------------------------------

int main () {
    int someBase = 2;
    int someLimit = 5;
    printf ("%d\n", someBase);
    for (int i = 1; i < someLimit; i++) {
        for (int j = 0; j < i + 1; j++)
            printf ("%d ", i +j + someBase - 1);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32593628_32617284_19_90
32593628_32629696_1_44
Title: Why are some of the bits in my Postgres VarBit (C-language function) being zeroed for specific input? 
----------------------------------------

Datum pg_morton_encode_integer (PG_FUNCTION_ARGS) {
    ArrayType *input_vector;
    int32 *toencode;
    int i, n, rlen, len;
    int16 num_bits_per;
    VarBit *temp, *result;
    int mask;
    int ipad;
    char tempvalue;
    int bit;
    int dim;
    int num_bits;
    int num_bytes;
    if (PG_ARGISNULL (0)) {
        ereport (ERROR, (errmsg ("First operand must be non-null")));
    }
    if (PG_ARGISNULL (1)) {
        ereport (ERROR, (errmsg ("Second operand must be non-null")));
    }
    input_vector = PG_GETARG_ARRAYTYPE_P (0);
    n = (ARR_DIMS (input_vector))[0];
    toencode = (int32 *) ARR_DATA_PTR (input_vector);
    num_bits_per = PG_GETARG_INT16 (1);
    len = n * num_bits_per;
    len = ROUNDUP_MULT_IS_POW_2 (len, CHAR_BIT);
    rlen = VARBITTOTALLEN (len);
    result = palloc0 (rlen);
    SET_VARSIZE (temp, rlen);
    VARBITLEN (temp) = len;
    num_bits = num_bits_per * n;
    num_bytes = (num_bits / 8) + (num_bits % 8 == 0 ? 0 : 1);
    for (bit = 0; bit < num_bits_per; ++bit)
        for (dim = 0; dim < n; ++dim) {
            tempvalue = VARBITS (temp)[num_bytes - 1 - MC_SEGMENT (bit, dim, n)];
            tempvalue |= (char) (((toencode[dim] & (1 << bit)) >> bit) << MC_SEGMENTBIT (bit, dim, n));
            VARBITS (temp) [num_bytes - 1 - MC_SEGMENT (bit, dim, n)] = tempvalue;
        }
    if (len == num_bits) {
        result = temp;
    }
    else {
        result = bitsubstring (temp, len -num_bits + 1, num_bits, false);
        pfree (temp);
    }
    PG_RETURN_VARBIT_P (result);
}
----------------------------------------

Datum pg_morton_encode_integer (PG_FUNCTION_ARGS) {
    ArrayType *input_vector;
    int32 *toencode;
    int16 num_bits_per;
    VarBit *result;
    int n, rlen, num_bits;
    int bit, dim;
    int in_bitpos, out_bitnum, out_bytenum, out_bitpos;
    bits8 in_bitval;
    input_vector = PG_GETARG_ARRAYTYPE_P (0);
    n = (ARR_DIMS (input_vector))[0];
    toencode = (int32 *) ARR_DATA_PTR (input_vector);
    num_bits_per = PG_GETARG_INT16 (1);
    num_bits = n * num_bits_per;
    rlen = VARBITTOTALLEN (num_bits);
    result = palloc0 (rlen);
    SET_VARSIZE (result, rlen);
    VARBITLEN (result) = num_bits;
    for (bit = 0; bit < num_bits_per; ++bit) {
        in_bitpos = num_bits_per - 1 - bit;
        for (dim = 0; dim < n; ++dim) {
            in_bitval = (toencode[n - dim - 1] & (1 << in_bitpos)) >> in_bitpos;
            out_bitnum = bit * n + dim;
            out_bytenum = out_bitnum / CHAR_BIT;
            out_bitpos = CHAR_BIT - 1 - (out_bitnum % CHAR_BIT);
            VARBITS (result)[out_bytenum] |= in_bitval << out_bitpos;
        }
    }
    PG_RETURN_VARBIT_P (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32600152_32600337_5_24
32600152_32600780_25_37
Title: memory leakage on asprintf using inside a loop in C 
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    int number_of_chunks = 12;
    char *final_string = NULL;
    char *tmp = NULL;
    for (i = 0; i < number_of_chunks; i++) {
        char *chunk = some_hash_table.pop (i);
        asprintf (& final_string, "%s%s", (tmp == NULL ? "" : tmp), chunk);
        if (tmp)
            free (tmp);
        tmp = final_string;
    }
    printf ("%s\n", final_string);
    free (final_string);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    struct append_t app = {NULL};
    for (int i = 1; i < argc; i++) {
        append (& app, argv [i]);
    }
    if (app.str)
        puts (app.str);
    free (app.str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32621162_32621200_1_13
32621162_32621256_3_19
Title: Triangle x's project in C 
----------------------------------------

int main (void) {
    int num;
    printf ("Please input the number of stairs\n");
    scanf ("%i", & num);
    for (int i = 1; i <= num; ++i) {
        for (int c = 1; c <= i; ++c)
            printf ("x");
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int rows, columns, num;
    printf ("Please input the number of stairs\n");
    scanf ("%i", & num);
    for (rows = 1; rows <= num; rows++) {
        for (columns = 1; columns <= rows; columns++) {
            printf ("x");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32622281_32622423_1_20
32622281_32622452_1_26
Title: Deleting a Node That Contains a String from a Linked List in C 
----------------------------------------

struct node *list_delete (const char *name, struct node *list) {
    struct node *prev = NULL;
    struct node *head = list;
    while (list) {
        if (!strcmp (list->name, name))
            break;
        prev = list;
        list = list->next;
    }
    if (!list)
        return head;
    if (!prev) {
        head = list->next;
        free (list);
        return head;
    }
    prev->next = list->next;
    free (list);
    return head;
}
----------------------------------------

struct node *list_delete (const char *name, struct node *list) {
    struct node *cur = NULL, *nxt = NULL;
    if (list) {
        cur = list;
        nxt = list->next;
        while (nxt) {
            if (strcmp (name, nxt->name) == 0) {
                cur->next = nxt->next;
                nxt->next = NULL;
                free (nxt);
                return list;
            }
            nxt = nxt->next;
            cur = cur->next;
        }
        if (strcmp (name, cur->name) == 0) {
            free (cur);
            return NULL;
        }
    }
    return NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3263972_3264084_3_16
3263972_3264093_6_17
Title: Can't a function return a string without pointers? 
----------------------------------------

void main (void) {
    char str [30], str2 [30];
    printf ("Enter a sentence:");
    gets (str);
    if (check (str2, str)) {
        printf ("check succeeded %s\n", str2);
    }
    getch ();
}
----------------------------------------

void main (void) {
    char str2 [30];
    char *str;
    str = malloc (30);
    printf ("Enter a sentence:");
    gets (str);
    check (str);
    strcpy (str2, str);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3263972_3264084_3_16
3263972_3264217_6_17
Title: Can't a function return a string without pointers? 
----------------------------------------

void main (void) {
    char str [30], str2 [30];
    printf ("Enter a sentence:");
    gets (str);
    if (check (str2, str)) {
        printf ("check succeeded %s\n", str2);
    }
    getch ();
}
----------------------------------------

int main (void) {
    char str [30], str2 [30];
    char *p;
    p = str;
    printf ("Enter a sentence:");
    fgets (str, sizeof str, stdin);
    strcpy (str2, check (& p));
    printf ("You said: %s\n", str2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3263972_3264093_6_17
3263972_3264217_6_17
Title: Can't a function return a string without pointers? 
----------------------------------------

void main (void) {
    char str2 [30];
    char *str;
    str = malloc (30);
    printf ("Enter a sentence:");
    gets (str);
    check (str);
    strcpy (str2, str);
    getch ();
}
----------------------------------------

int main (void) {
    char str [30], str2 [30];
    char *p;
    p = str;
    printf ("Enter a sentence:");
    fgets (str, sizeof str, stdin);
    strcpy (str2, check (& p));
    printf ("You said: %s\n", str2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32644056_32644534_4_14
32644056_32644716_24_56
Title: Best Way to Simulate Logic Gates in C? 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc >= 3) {
        int i = 0;
        printf ("1st i/p = %s\n2nd i/p = %s\n", argv [1], argv [2]);
        for (i = 0; argv[1][i] != '\0'; i++) {
            argv[1][i] = argv[1][i] & argv[2][i];
        }
        printf ("Answer: %s\n", argv [1]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 3) {
        fprintf (stderr, "error: insufficient input. usage: %s b1 b1\n", argv [0]);
        return 1;
    }
    unsigned long b1 = strtoul (argv[1], NULL, 2);
    unsigned long b2 = strtoul (argv[2], NULL, 2);
    unsigned long result = b1 & b2;
    unsigned char msb, msbmax, width, sepwidth;
    msb = msbmax = width = sepwidth = 0;
    msbmax = (msb = msbfls (b1)) > msbmax ? msb : msbmax;
    msbmax = (msb = msbfls (b2)) > msbmax ? msb : msbmax;
    msbmax = (msb = msbfls (result)) > msbmax ? msb : msbmax;
    msbmax = msbmax ? msbmax : 1;
    width = (msbmax / CHAR_BIT + 1) * CHAR_BIT;
    sepwidth = width > CHAR_BIT ? CHAR_BIT : CHAR_BIT / 2;
    printf ("\n Input 1 : %s\n", binstrfmt (b1, width, sepwidth, '-'));
    printf (" Input 2 : %s\n", binstrfmt (b2, width, sepwidth, '-'));
    printf (" Result  : %s\n\n", binstrfmt (result, width, sepwidth, '-'));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32659336_32659379_3_28
32659336_32660446_1_15
Title: Getting the exponent from a floating point in C 
----------------------------------------

int get_exp (float f) {
    int i;
    union {
        float f;
        struct {
            unsigned int sign : 1;
            unsigned int exponent : 8;
            unsigned int mantissa : 23;
        } s;
        unsigned char c [sizeof (float)];
    } u;
    u.f = f;
    for (i = 0; i < sizeof (float); i++)
        fprintf (stderr, "%02x%s", u.c[i], (i + 1 < sizeof (float)) ? " " : "\n");
    return (int) u.s.exponent + EXPONENT_BIAS;
}
----------------------------------------

int get_exp (float x) {
    assert (sizeof x == sizeof (uint32_t));
    union {
        float x;
        uint32_t u32;
    } u = {x};
    if (x == 0.0)
        return 0;
    int expo = (int) (u.u32 >> EXPOSHIFT) & EXPOMASK;
    if (expo == EXPOMASK)
        return INT_MAX;
    if (expo == 0)
        return get_exp (x *(1L << EXPOSHIFT)) - EXPOSHIFT;
    return expo - EXPOBIAS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32664691_32664791_3_22
32664691_32664975_11_28
Title: C - Next 10 prime numbers 
----------------------------------------

int main () {
    int n, i, count, primenumber = 1;
    printf ("Insert a number:\n");
    scanf ("%d", & n);
    for (count = 0, n++; count < 10; n++) {
        primenumber = 1;
        for (i = 2; i < n; i++) {
            if (n % i == 0) {
                primenumber = 0;
                break;
            }
        }
        if (primenumber) {
            count++;
            printf ("%d\n", n);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n, count;
    printf ("Insert a number:\n");
    scanf ("%d", & n);
    count = 0;
    n++;
    for (; count < 10; n++) {
        if (isPrime (n)) {
            printf ("%d\n", n);
            count++;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32664691_32664791_3_22
32664691_32665177_3_27
Title: C - Next 10 prime numbers 
----------------------------------------

int main () {
    int n, i, count, primenumber = 1;
    printf ("Insert a number:\n");
    scanf ("%d", & n);
    for (count = 0, n++; count < 10; n++) {
        primenumber = 1;
        for (i = 2; i < n; i++) {
            if (n % i == 0) {
                primenumber = 0;
                break;
            }
        }
        if (primenumber) {
            count++;
            printf ("%d\n", n);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i, count = 1, primenumber = 1, root;
    printf ("Insert a number:\n");
    scanf ("%d", & n);
    n++;
    while (count != 11) {
        root = sqrt (n);
        primenumber = 1;
        for (i = 2; i <= root; i++) {
            if (n % i == 0) {
                primenumber = 0;
                break;
            }
        }
        if (primenumber == 1) {
            printf ("%d \t", n);
            count++;
        }
        n++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32664691_32664975_11_28
32664691_32665177_3_27
Title: C - Next 10 prime numbers 
----------------------------------------

int main () {
    int n, count;
    printf ("Insert a number:\n");
    scanf ("%d", & n);
    count = 0;
    n++;
    for (; count < 10; n++) {
        if (isPrime (n)) {
            printf ("%d\n", n);
            count++;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i, count = 1, primenumber = 1, root;
    printf ("Insert a number:\n");
    scanf ("%d", & n);
    n++;
    while (count != 11) {
        root = sqrt (n);
        primenumber = 1;
        for (i = 2; i <= root; i++) {
            if (n % i == 0) {
                primenumber = 0;
                break;
            }
        }
        if (primenumber == 1) {
            printf ("%d \t", n);
            count++;
        }
        n++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32676767_32676960_5_27
32676767_32702010_7_51
Title: EOF AND GETCHAR to end loop 
----------------------------------------

int main () {
    char *word;
    int i;
    int n;
    printf ("enter ur palindrome");
    scanf ("%[^\n]", word);
    n = strlen (word);
    for (i = 0; i < n; i++) {
        if (word[i] != word[n - 1 - i]) {
            break;
        }
    }
    if (i == n) {
        printf ("This is a palindrome");
    }
    else {
        printf ("This is not a palindrome");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int d;
    int n;
    char i [MAX_LENGTH];
    printf ("enter ur palindrome\n");
    if (NULL != fgets (i, MAX_LENGTH, stdin)) {
        if (strlen ("\n") < strlen (i)) {
            char *newline = strstr (i, "\n");
            if (newline) {
                *newline = '\0';
            }
            d = strlen (i);
            for (n = 0; (d - n) >= n; n++) {
                if (i[0 + n] != i[d - n]) {
                    printf ("this is not a palindrome");
                    break;
                }
            }
            if ((d - n) < n) {
                printf ("this is a palindrome");
            }
        }
        else {
            printf ("nothing entered\n");
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32680420_32680454_9_28
32680420_32681250_4_18
Title: Check if the number is even or odd 
----------------------------------------

int main () {
    char nstr [100] = {0};
    int n;
    char *e;
    printf ("Input an integer\n");
    scanf ("%99s", nstr);
    n = (int) strtol (nstr, &e, 10);
    if (nstr[0] == '\0' || *e != '\0') {
        print ("error");
        return 0;
    }
    n % 2 == 0 ? printf ("Even\n") : printf ("Odd\n");
    return 0;
}
----------------------------------------

int main () {
    int n;
    printf ("Please enter your number\n");
    scanf ("%d", & n);
    if (n % 2 == 0)
        printf ("The number is even\n");
    else
        printf ("The number is odd\n");
    System ("pause");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32685947_32686049_26_76
32685947_32686193_9_49
Title: Storing tokens into an array to later pass as parameters 
----------------------------------------

int main (void) {
    const char *params = "dummy";
    FILE *fp;
    char buffer [100];
    list_node *head = NULL;
    list_node **tail = &head;
    unsigned int count = 0;
    unsigned int i;
    char **array;
    fp = stdin;
    printf ("Here is filename...");
    printf ("%s\n", params);
    fseek (fp, 0, SEEK_END);
    rewind (fp);
    if (fgets (buffer, sizeof (buffer), fp) != NULL) {
        char *p, *b;
        b = buffer;
        printf ("parsing %s", buffer);
        while ((p = strsep (&b, ",")) != NULL) {
            printf ("param: %s\n", p);
            *tail = create_node (p);
            tail = &(*tail)->next;
            count++;
        }
    }
    array = malloc (sizeof (char *) * count);
    if (array == NULL)
        return 1;
    for (i = 0; i < count && head != NULL; i++) {
        list_node *next = head->next;
        array[i] = head->str;
        free (head);
        head = next;
    }
    for (i = 0; i < count; i++) {
        printf ("array[%u] = %s\n", i, array [i]);
    }
    for (i = 0; i < count; i++)
        free (array[i]);
    free (array);
    return 0;
}
----------------------------------------

int main (void) {
    const char *params = "dummy";
    FILE *fp;
    char buffer [100];
    char *array [ARRAY_SIZE];
    int array_count = 0;
    int i;
    fp = stdin;
    printf ("Here is filename...");
    printf ("%s\n", params);
    fseek (fp, 0, SEEK_END);
    rewind (fp);
    if (fgets (buffer, sizeof (buffer), fp) != NULL) {
        char *p, *b;
        b = buffer;
        printf ("parsing %s", buffer);
        while ((p = strsep (&b, ",")) != NULL) {
            printf ("param: %s\n", p);
            if (array_count < ARRAY_SIZE) {
                array[array_count] = malloc (sizeof (char) * (strlen (p) + 1));
                strcpy (array [array_count], p);
                array_count++;
            }
        }
    }
    for (i = 0; i < array_count; i++) {
        printf ("array[%u] = %s\n", i, array [i]);
    }
    for (i = 0; i < array_count; i++)
        free (array[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32700670_32701442_4_31
32700670_32701500_1_13
Title: "looping ""enter student id:"" statement" 
----------------------------------------

int main () {
    int id = 0;
    int pin = 0;
    int count1 = 0;
    for (;;) {
        printf ("enter student id: ");
        scanf ("%i", & id);
        while (id != 0) {
            id /= 10;
            count1++;
        }
        if (count1 != 7 && count1 != 8) {
            printf ("the student id should be in 7 or 8 digits\n");
            count1 = 0;
        }
        else
            break;
    }
    printf ("enter student pin: ");
    scanf ("%i", & pin);
    return 0;
}
----------------------------------------

int main (void) {
    int value;
    int count;
    value = 0;
    count = 0;
    if ((scanf ("%d%n", &value, &count) == 1) && (count == 7))
        fprintf (stderr, "ok, value is `%d'\n", value);
    else
        fprintf (stderr, "wrong length: %d\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32731466_32731514_59_78
32731466_32731579_3_51
Title: Why is my program adding an extra day to a non leap year? 
----------------------------------------

int main (void) {
    int month, day, year, day_number = 0;
    printf ("Enter a date in the form (01/02/1996): ");
    scanf ("%d/%d/%d", & month, & day, & year);
    if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {
        day_number = get_leap_year_day (month, day);
    }
    else {
        day_number = get_non_leap_year_day (month, day);
    }
    printf ("day %d\n", day_number);
    return 0;
}
----------------------------------------

int main (void) {
    int month, day, year, day_number = 0;
    printf ("Enter a date in the form (01/02/1996): ");
    scanf ("%d/%d/%d", & month, & day, & year);
    switch (month) {
    case 1 :
        day_number = day;
        break;
    case 2 :
        day_number = 31 + day;
        break;
    case 3 :
        day_number = 59 + day;
        break;
    case 4 :
        day_number = 90 + day;
        break;
    case 5 :
        day_number = 120 + day;
        break;
    case 6 :
        day_number = 151 + day;
        break;
    case 7 :
        day_number = 181 + day;
        break;
    case 8 :
        day_number = 212 + day;
        break;
    case 9 :
        day_number = 243 + day;
        break;
    case 10 :
        day_number = 273 + day;
        break;
    case 11 :
        day_number = 304 + day;
        break;
    case 12 :
        day_number = 334 + day;
        break;
    }
    if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {
        if (month > 2)
            ++day_number;
    }
    printf ("day %d\n", day_number);
    return 0;
}
----------------------------------------

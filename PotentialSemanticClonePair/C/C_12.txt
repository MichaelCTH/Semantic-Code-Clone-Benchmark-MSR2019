$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21469156_21469284_1_14
21469156_21469325_2_16
Title: How do I return different strings from each call on a function in C? 
----------------------------------------

char *getStr (int aNumber) {
    char *str = malloc (15);
    if (!str)
        return NULL;
    if (aNumber == 0)
        strcpy (str, "this");
    else if (aNumber == 1)
        strcpy (str, "that");
    else
        strcpy (str, "nope");
    return str;
}
----------------------------------------

char *getStr (int aNumber) {
    char *str = malloc (STRLEN);
    if (!str)
        return NULL;
    if (aNumber == 0)
        snprintf (str, STRLEN, "this");
    else if (aNumber == 1)
        str = snprintf (str, STRLEN, "that");
    else
        snprintf (str, STRLEN, "nope");
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21469156_21469306_1_20
21469156_21469325_2_16
Title: How do I return different strings from each call on a function in C? 
----------------------------------------

char *getStr (int aNumber) {
    char *str = malloc (15);
    if (!str)
        return NULL;
    if (aNumber == 0)
        str = "this";
    else if (aNumber == 1)
        str = "that";
    else
        str = "nope";
    return reg;
}
----------------------------------------

char *getStr (int aNumber) {
    char *str = malloc (STRLEN);
    if (!str)
        return NULL;
    if (aNumber == 0)
        snprintf (str, STRLEN, "this");
    else if (aNumber == 1)
        str = snprintf (str, STRLEN, "that");
    else
        snprintf (str, STRLEN, "nope");
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21503709_21503908_4_23
21503709_21510151_10_63
Title: Reading in line by line in c? 
----------------------------------------

int main () {
    FILE *f;
    size_t len;
    char *line;
    f = fopen ("inputfile.txt", "r");
    if (f == NULL)
        return 0;
    while (line = fgetln (f, &len)) {
        fwrite (line, len, 1, stdout);
    }
    if (!feof (f))
        err (1, "fgetln");
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    if (NULL == (fp = fopen ("data.txt", "r"))) {
        perror ("file open");
        return -1;
    }
    int numOfGame;
    fscanf (fp, "%d", & numOfGame);
    char gameName [numOfGame] [64];
    int i;
    for (i = 0; i < numOfGame; ++i) {
        fscanf (fp, "%63s", gameName [i]);
    }
    int numOfGamer;
    fscanf (fp, "%d%*c", & numOfGamer);
    Player players [numOfGamer];
    char line_buf [128];
    int j;
    for (i = 0; i < numOfGamer; ++i) {
        fgets (line_buf, sizeof (line_buf), fp);
        char *p = strchr (line_buf, ' ');
        p = strchr (p +1, ' ');
        *p = '\0';
        players[i].name = strdup (line_buf);
        players[i].rank = calloc (numOfGamer, sizeof (int));
        for (j = 0; j < numOfGame; ++j) {
            sscanf (++ p, "%d", & players [i].rank [j]);
            p = strchr (p +1, ' ');
        }
    }
    fclose (fp);
    printf ("name\t\t");
    for (i = 0; i < numOfGame; ++i) {
        printf ("%s\t", gameName [i]);
    }
    printf ("\n");
    for (i = 0; i < numOfGamer; ++i) {
        printf ("%s\t", players [i].name);
        for (j = 0; j < numOfGame; ++j) {
            printf ("%d\t", players [i].rank [j]);
        }
        printf ("\n");
    }
    for (i = 0; i < numOfGamer; ++i) {
        free (players [i].name);
        free (players [i].rank);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21513043_21513600_4_34
21513043_21513700_4_31
Title: counting the number of sentences in a paragraph in c 
----------------------------------------

void main (void) {
    int count = 0;
    int words = 1;
    int sentences = 1;
    char ch;
    bool if_flag;
    while ((ch = getch ()) != '\n') {
        count++;
        if_flag = true;
        while (ch == ' ' && if_flag) {
            words++;
            if_flag = false;
        }
        if_flag = true;
        while (ch == '.' && if_flag) {
            sentences++;
            if_flag = false;
        }
    }
    printf ("The number of characters are %d", count);
    printf ("\nThe number of words are %d", words);
    printf ("\nThe number of sentences are %d", sentences);
    getch ();
}
----------------------------------------

int main (void) {
    int sentence = 0, characters = 0, words = 0, c = 0, inside_word = 0, temp = 0;
    while ((c = getchar ()) != '\n') {
        while (c == '.') {
            sentence++;
            temp = c;
            c = 0;
        }
        while (isalnum (c)) {
            inside_word = 1;
            characters++;
            c = 0;
        }
        while ((isspace (c) || temp == '.') && inside_word == 1) {
            words++;
            inside_word = 0;
            temp = 0;
            c = 0;
        }
    }
    printf (" %d   %d   %d", characters, words, sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21513043_21513600_4_34
21513043_21513838_4_40
Title: counting the number of sentences in a paragraph in c 
----------------------------------------

void main (void) {
    int count = 0;
    int words = 1;
    int sentences = 1;
    char ch;
    bool if_flag;
    while ((ch = getch ()) != '\n') {
        count++;
        if_flag = true;
        while (ch == ' ' && if_flag) {
            words++;
            if_flag = false;
        }
        if_flag = true;
        while (ch == '.' && if_flag) {
            sentences++;
            if_flag = false;
        }
    }
    printf ("The number of characters are %d", count);
    printf ("\nThe number of words are %d", words);
    printf ("\nThe number of sentences are %d", sentences);
    getch ();
}
----------------------------------------

void main (void) {
    clrscr ();
    int count = 0;
    int words = 0;
    int sentences = 0;
    char ch;
    ch = getch ();
    while (ch != '\n') {
        while (ch != '.' && ch != '\n') {
            while (ch != ' ' && ch != '\n' && ch != '.') {
                count++;
                ch = getch ();
                printf ("%c", ch);
            }
            words++;
            while (ch == ' ') {
                ch = getch ();
                printf ("%c", ch);
            }
        }
        sentences++;
        while (ch == '.' && ch == ' ') {
            ch = getch ();
            printf ("%c", ch);
        }
    }
    printf ("The number of characters are %d", count);
    printf ("\nThe number of words are %d", words);
    printf ("\nThe number of sentences are %d", sentences);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21513043_21513700_4_31
21513043_21513838_4_40
Title: counting the number of sentences in a paragraph in c 
----------------------------------------

int main (void) {
    int sentence = 0, characters = 0, words = 0, c = 0, inside_word = 0, temp = 0;
    while ((c = getchar ()) != '\n') {
        while (c == '.') {
            sentence++;
            temp = c;
            c = 0;
        }
        while (isalnum (c)) {
            inside_word = 1;
            characters++;
            c = 0;
        }
        while ((isspace (c) || temp == '.') && inside_word == 1) {
            words++;
            inside_word = 0;
            temp = 0;
            c = 0;
        }
    }
    printf (" %d   %d   %d", characters, words, sentence);
    return 0;
}
----------------------------------------

void main (void) {
    clrscr ();
    int count = 0;
    int words = 0;
    int sentences = 0;
    char ch;
    ch = getch ();
    while (ch != '\n') {
        while (ch != '.' && ch != '\n') {
            while (ch != ' ' && ch != '\n' && ch != '.') {
                count++;
                ch = getch ();
                printf ("%c", ch);
            }
            words++;
            while (ch == ' ') {
                ch = getch ();
                printf ("%c", ch);
            }
        }
        sentences++;
        while (ch == '.' && ch == ' ') {
            ch = getch ();
            printf ("%c", ch);
        }
    }
    printf ("The number of characters are %d", count);
    printf ("\nThe number of words are %d", words);
    printf ("\nThe number of sentences are %d", sentences);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21513049_21513164_1_16
21513049_21513432_1_23
Title: if condition in a for loop 
----------------------------------------

int main () {
    int Frow = 5;
    int Rowi = 1;
    int i;
    int red = 2;
    i = (Rowi < Frow) ? Rowi : Frow;
    while ((Rowi < Frow && i < Frow) || (Rowi >= Frow && i > Rowi)) {
        printf ("%i\n", i);
        if (Rowi < Frow)
            i++;
        else
            i--;
    }
    return 0;
}
----------------------------------------

int main () {
    int Frow = 5;
    int Rowi = 1;
    int i;
    int red = 2;
    if (Rowi < Frow) {
        for (i = Rowi; i < Frow; i++) {
            printf ("%i\n", i);
        }
    }
    else {
        for (i = Frow; i > Rowi; i--) {
            printf ("%i\n", i);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21534834_21534923_1_23
21534834_21534988_1_17
Title: Constructing pointer linked list in C 
----------------------------------------

void AddEnd (int val, struct liste **l) {
    struct liste *aux;
    struct liste *n;
    n = (struct liste *) malloc (sizeof (struct liste));
    n->a = val;
    n->next = NULL;
    aux = *l;
    if (aux == NULL) {
        *l = n;
    }
    else {
        while (aux->next != NULL)
            aux = aux->next;
        aux->next = n;
    }
}
----------------------------------------

void AddEnd (int val, struct liste **l) {
    struct liste *n = (struct liste *) malloc (sizeof (struct liste));
    n->a = val;
    n->next = NULL;
    if (*l == NULL) {
        *l = n;
    }
    else {
        struct liste *aux = *l;
        while (aux->next != NULL)
            aux = aux->next;
        aux->next = n;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21540001_21540091_10_26
21540001_21540671_3_18
Title: Want to create a file with write mode in C 
----------------------------------------

int main (void) {
    char *envFile = getenv ("FILENAME");
    int fdEnv = -1;
    fdEnv = open (envFile, O_CREAT | O_RDWR | O_APPEND, 0644);
    printf ("%d\n", fdEnv);
    int i = 0;
    while (environ[i]) {
        printf ("%s\n", environ [i]);
        write (fdEnv, environ [i], strlen (environ [i]));
        char lf = '\n';
        write (fdEnv, & lf, 1);
        i++;
    }
    close (fdEnv);
    return 0;
}
----------------------------------------

int main () {
    char **env;
    char * filename = getenv ("FILENAME") const char * mode = "a";
    FILE *file = fopen (filename, mode);
    for (env = environ; *env; ++env)
        fprintf (file, "%s\n", *env);
    fclose (file);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21541901_21542781_1_11
21541901_21546547_1_11
Title: A char copying function 
----------------------------------------

char *strCopy (char *s) {
    int length = strLength (s) + 1;
    char *copy = malloc (length);
    if (copy != NULL) {
        while (length > 0) {
            length--;
            copy[length] = s[length];
        }
    }
    return copy;
}
----------------------------------------

char *strCopy (char *s) {
    char *copy = (char *) malloc (strLength (s) +1);
    int index = 0;
    while (s[index] != '\0') {
        copy[index] = s[index];
        index++;
    }
    return copy;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21552796_21553363_4_22
21552796_21554014_4_14
Title: "In C how to release global static pointer?" 
----------------------------------------

void testCode () {
    TestStruct ts;
    {
        if (!refCount++)
            test = malloc (10 * sizeof (char));
    }
    ts.member1 = test;
    {
        if (!--refCount)
            free (test);
    }
}
----------------------------------------

void testCode (void) {
    TestStruct ts;
    while (!test) {
        char *tmp = malloc (10 * sizeof (char));
        if (!atomic_compare_exchange (&test, tmp, 0))
            free (tmp);
    }
    ...
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21558141_21558394_2_24
21558141_21558401_2_22
Title: Comparing an integer with an element of an integer array 
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    int i;
    scanf ("%d", & x);
    for (i = 0; i < 3; ++i) {
        if (c[i] == x) {
            printf ("Done");
            return 0;
        }
    }
    printf ("Fail");
    return 0;
}
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x, i;
    scanf ("%d", & x);
    for (i = 0; i < 3; i++)
        if (c[i] == x) {
            printf ("Done");
            break;
        }
    if (i == 3)
        printf ("Fail");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21558141_21558394_2_24
21558141_21558413_2_17
Title: Comparing an integer with an element of an integer array 
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    int i;
    scanf ("%d", & x);
    for (i = 0; i < 3; ++i) {
        if (c[i] == x) {
            printf ("Done");
            return 0;
        }
    }
    printf ("Fail");
    return 0;
}
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    scanf ("%d", & x);
    int i = 0;
    for (i = 0; i < 3; i++) {
        if (c[i] == x)
            printf ("Done");
        else
            printf ("Fail");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21558141_21558394_2_24
21558141_33658573_2_22
Title: Comparing an integer with an element of an integer array 
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    int i;
    scanf ("%d", & x);
    for (i = 0; i < 3; ++i) {
        if (c[i] == x) {
            printf ("Done");
            return 0;
        }
    }
    printf ("Fail");
    return 0;
}
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    scanf ("%d", & x);
    int i = 0;
    while (c[i] != x && i < 3) {
        i++;
    }
    if (i == 3) {
        printf ("FAIL");
    }
    else {
        printf ("DONE");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21558141_21558401_2_22
21558141_21558413_2_17
Title: Comparing an integer with an element of an integer array 
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x, i;
    scanf ("%d", & x);
    for (i = 0; i < 3; i++)
        if (c[i] == x) {
            printf ("Done");
            break;
        }
    if (i == 3)
        printf ("Fail");
    return 0;
}
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    scanf ("%d", & x);
    int i = 0;
    for (i = 0; i < 3; i++) {
        if (c[i] == x)
            printf ("Done");
        else
            printf ("Fail");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21558141_21558401_2_22
21558141_33658573_2_22
Title: Comparing an integer with an element of an integer array 
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x, i;
    scanf ("%d", & x);
    for (i = 0; i < 3; i++)
        if (c[i] == x) {
            printf ("Done");
            break;
        }
    if (i == 3)
        printf ("Fail");
    return 0;
}
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    scanf ("%d", & x);
    int i = 0;
    while (c[i] != x && i < 3) {
        i++;
    }
    if (i == 3) {
        printf ("FAIL");
    }
    else {
        printf ("DONE");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21558141_21558413_2_17
21558141_33658573_2_22
Title: Comparing an integer with an element of an integer array 
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    scanf ("%d", & x);
    int i = 0;
    for (i = 0; i < 3; i++) {
        if (c[i] == x)
            printf ("Done");
        else
            printf ("Fail");
    }
    return 0;
}
----------------------------------------

int main () {
    int c [] = {0, 1, 2};
    int x;
    scanf ("%d", & x);
    int i = 0;
    while (c[i] != x && i < 3) {
        i++;
    }
    if (i == 3) {
        printf ("FAIL");
    }
    else {
        printf ("DONE");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21578244_21578271_3_14
21578244_21578576_9_27
Title: Copying Ascii Value to int 
----------------------------------------

int main (void) {
    const unsigned char t [4] = {'a', 'b', 'c', 'd'};
    unsigned int m = 0;
    for (int p = 0; p < 4; p++) {
        m = (m << 8) | t[p];
        printf ("%c", t [p]);
    }
    printf ("\n%x", m);
    return 0;
}
----------------------------------------

int main () {
    blob b;
    b.t[0] = 'a';
    b.t[1] = 'b';
    b.t[2] = 'c';
    b.t[3] = 'd';
    unsigned int m = b.m;
    printf ("%u\n", m);
    unsigned int n = m;
    blob c;
    c.m = n;
    int i;
    for (i = 0; i < 4; i++)
        printf ("%c\n", c.t[i]);
    printf ("%lu\n", sizeof (c));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21583672_21583775_12_24
21583672_21583836_7_27
Title: the pointer passing returns unexpected error 
----------------------------------------

int main (void) {
    unsigned char z [UARTBUFFERSIZE];
    DDRC = 0xFF;
    uartinit ();
    while (1) {
        uartrecieve (z);
        if (strcmp (z, "on") == 0)...
    }
}
----------------------------------------

int main (void) {
    unsigned char *z;
    DDRC = 0xFF;
    uartinit ();
    while (1) {
        uartrecieve (& z);
        if (strcmp (z, "on") == 0) {
            PORTC = 0xff;
            _delay_ms (6000);
        }
        else {
            PORTC = 0x03;
            _delay_ms (6000);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21598540_21619405_30_71
21598540_21638108_60_74
Title: MENU selection Using Arrow keys (example : up and down) in C 
----------------------------------------

int main () {
    int x, i = 2;
    disp (1);
    gotoxy (1, i);
    while ((x = bioskey (0)) != 75) {
        gotoxy (1, i);
        if (x == 20480) {
            if (i <= 3) {
                i = i + 1;
                disp (i - 1);
                gotoxy (1, i);
            }
            else {
            }
        }
        else if (x == 18432) {
            if (i == 2) {
            }
            else {
                i = i - 1;
                disp (i - 1);
                gotoxy (1, i);
            }
        }
        else if (x == 7181) {
            clrscr ();
            if (i == 2) {
                printf ("ONE");
            }
            else if (i == 3) {
                printf ("TWO");
            }
            else {
                printf ("Thank You");
                getch ();
                return 0;
            }
        }
        else {
            disp (i - 1);
            gotoxy (1, i);
        }
    }
    return 0;
}
----------------------------------------

void main () {
    int key;
    printf ("Press F10 key to Quit\n");
    while (1) {
        key = bioskey (1);
        if (key > 0) {
            if (handle_keyevents () < 0)
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21612476_21612516_3_39
21612476_21615988_3_35
Title: Reading a whole line before printing result 
----------------------------------------

int main (void) {
    int c;
    int is_ok;
    c = getchar ();
    while (c != EOF) {
        is_ok = 1;
        while (c != '\n') {
            if (c >= 'a' && c <= 'z') {
            }
            else if (c == ',' || c == '.' || c == '/') {
            }
            else if (c == ']' || c == '[') {
            }
            else {
                is_ok = 0;
                break;
            }
            c = getchar ();
        }
        if (is_ok) {
            printf ("OK!\n");
        }
        else {
            printf ("ERROR!\n");
        }
        c = getchar ();
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buff [1000];
    char *p = buff;
    char c;
    int flgError = 0;
    gets (buff);
    printf ("You entered '%s'\n", buff);
    while (*p) {
        c = *p++;
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c == ',' || c == '.' || c == '/') || (c == ']' || c == '[') || (c == '\n')) {
        }
        else {
            printf ("bad char=%c\n", c);
            flgError = 1;
        }
    }
    if (flgError)
        printf ("Error\n");
    else
        printf ("OK\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21617817_21618188_1_30
21617817_21625560_13_31
Title: Segmentation fault error in BST 
----------------------------------------

static int insert (struct node *newnode, char *word) {
    struct node *temp = NULL;
    if (!(newnode)) {
        temp = (struct node *) malloc (sizeof (struct node));
        temp->left = NULL;
        temp->right = NULL;
        temp->word = malloc (strlen (word) +1);
        strcpy (temp -> word, word);
        newnode = temp;
        return 0;
    }
    if (newnode->word == NULL) {
        newnode->word = malloc (strlen (word) +1);
        strcpy (newnode -> word, word);
        return 1;
    }
    if (strcmp (word, (newnode)->word) < 0) {
        insert ((newnode) -> left, word);
    }
    else if (strcmp (word, (newnode)->word) > 0) {
        insert ((newnode) -> right, word);
    }
    return 1;
}
----------------------------------------

static int insert (struct node **newnode, char *word) {
    struct node *temp = NULL;
    int cmp;
    if (!*newnode) {
        temp = (struct node *) malloc (sizeof (struct node));
        temp->left = NULL;
        temp->right = NULL;
        temp->word = strdup (word);
        *newnode = temp;
        return 0;
    }
    if ((cmp = strcmp (word, (*newnode)->word)) < 0)
        return insert (&(*newnode)->left, word);
    if (cmp > 0)
        return insert (&(*newnode)->right, word);
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21627554_21627767_28_49
21627554_21628392_19_34
Title: how to store multiple arrays and make array of pointers to them 
----------------------------------------

int main (int argc, char *argv []) {
    int m, n, **p, k, i, j;
    m = 3;
    n = 5;
    printf ("m is %d and n is %d\n", m, n);
    p = array (m, n);
    printf ("the numbers are:\n");
    for (j = 0; j < n; j++)
        for (i = 0; i < m; i++)
            printf ("%d\n", p[j][i]);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int m, n, *p, k;
    scanf ("%d %d", & m, & n);
    printf ("m is %d and n is %d\n", m, n);
    p = (int *) array (m, n);
    printf ("the numbers are:\n");
    for (k = 0; k < m * n; k++) {
        printf ("%d\n", p [k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21632651_21633205_3_18
21632651_21634006_4_13
Title: printing a string in c characer by character 
----------------------------------------

int main (int argc, char *argv [ARGV_SIZE]) {
    char x [ARGV_SIZE];
    int argvLength;
    strcpy (x, argv [1]);
    argvLength = strlen (x);
    printf ("%s and it's length is %d : \n", x, argvLength);
    for (int i = 0; i < argvLength; i++) {
        printf (" hi : %c\n", x [i]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv [20]) {
    char y = 'Y';
    char x;
    char z = 'Z';
    strcpy (& x, "This program is correct!!!");
    printf ("%s and it's length is %d : \n", & x, strlen (& x));
    printf ("%c%c%c", x, y, z);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21636243_21636799_19_38
21636243_21637442_10_23
Title: there's some error in my code for recursive prime function 
----------------------------------------

main (void) {
    int x, y = 0, z;
    char a [10], b;
loops :
    printf ("enter an integer:\t");
    y = 0;
    fflush (stdin);
    do {
        b = getchar ();
        if (b == 'q')
            exit (1);
        x = b - '0';
        if (x >= 0 && x <= 9) {
            y = (10 * y) + x;
        }
    }
    while (b != '\n');
    printf ("num is %d and it's\t", y);
    prime (y, 2);
    goto loops;
    return 0;
}
----------------------------------------

main (void) {
    int x, y = 0, z;
    char a [10], b;
loops :
    printf ("enter an integer:\t");
    scanf ("%d", & x);
    if (x == -1)
        exit (1);
    if (x == 1) {
        printf ("neither prime nor composite\n");
        return;
    }
    z = x;
    printf ("num is %d and it's\t", z);
    prime (z, 2);
    goto loops;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21636243_21636799_5_17
21636243_21637442_4_8
Title: there's some error in my code for recursive prime function 
----------------------------------------

prime (int a, int b) {
    if (a == 1) {
        printf ("neither prime nor composite\n");
        return;
    }
    else if (b >= a) {
        printf ("prime no.\n");
        return;
    }
    else if ((a % b) == 0) {
        printf ("composite no.\n");
        return;
    }
    else
        prime (a, (b + 1));
}
----------------------------------------

prime (int a, int b) {
    if (b == a) {
        printf ("prime no.\n");
        return;
    }
    else if (((a % b) == 0)) {
        printf ("composite no.\n");
        return;
    }
    else
        prime (a, (b + 1));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21638225_21639714_6_19
21638225_48257554_29_73
Title: Making A square with asterisk in C 
----------------------------------------

int main (void) {
    int i, n = 5;
    char line1 [LINE_SIZE] = {0}, line2 [LINE_SIZE] = {0};
    memset (line1, ' ', sizeof (line1) - 1);
    memset (line1 + sizeof (line1) - n - 1, '*', n);
    memcpy (line2, line1, sizeof (line1));
    memset (line2 + sizeof (line2) - n, ' ', n - 2);
    puts (line1);
    for (i = n - 2; i; --i)
        puts (line2);
    puts (line1);
    return 0;
}
----------------------------------------

void main () {
    long unsigned int status, i, j = 0;
    memset (data, ' ', sizeof (data));
    if (status = draw_Box (28, 28, 15, 15, 3, data)) {
        printf ("out of boundary");
        return;
    }
    for (i = 0; i < buff_size; i++) {
        if (i % coloumn == 0) {
            if (i == 0) {
            }
            else {
                printf ("%3d\n\n", (j ++));
            }
        }
        printf ("%2c ", data [i]);
    }
    printf ("%3d\n\n", j);
    for (i = 0; i < coloumn; i++) {
        printf ("%2d ", i);
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21641607_21644698_17_43
21641607_21645185_26_50
Title: How to sort ranking list with correct names output in C? 
----------------------------------------

int main () {
    int i, j, temp;
    int num = 5;
    int *id = (int *) malloc (num * sizeof (int));
    int *indexs = malloc (num * sizeof (int));
    char **name = malloc (num * sizeof (char *));
    for (i = 0; i < num; ++i) {
        name[i] = malloc (sizeof (char) * 10);
        indexs[i] = i;
    }
    printf ("Enter: Id Name (5 time) \n");
    for (i = 0; i < num; i++)
        scanf ("%d %9s", &id[i], name[i]);
    sorting (num, id, indexs);
    printf ("Sorted id is...\n");
    for (i = 0; i < num; i++) {
        printf ("%d \t %s \n", id [indexs [i]], name [indexs [i]]);
        free (name [indexs[i]]);
    }
    free (id);
    free (name);
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    int num = 5;
    name_id_pair_t *arr = (name_id_pair_t *) malloc (sizeof (name_id_pair_t) * 5);
    printf ("Enter: Id Name (5 time) \n");
    for (i = 0; i < num; i++) {
        scanf ("%d %s", & arr [i].id, & arr [i].name);
    }
    sorting (num, arr);
    printf ("Sorted id is...\n");
    for (i = 0; i < num; i++) {
        printf ("%d \t %s \n", arr [i].id, arr [i].name);
    }
    free (arr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21641607_21644698_4_15
21641607_21645185_8_24
Title: How to sort ranking list with correct names output in C? 
----------------------------------------

void sorting (int n, int *array, int *indexs) {
    int temp;
    for (int i = 0; i < n - 1; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (array[indexs[i]] > array[indexs[j]]) {
                temp = indexs[i];
                indexs[i] = indexs[j];
                indexs[j] = temp;
            }
        }
    }
}
----------------------------------------

int sorting (int n, name_id_pair_t *array) {
    int i, j;
    name_id_pair_t temp;
    for (i = 0; i < n; i++) {
        for (j = 0; j < (n - i - 1); j++) {
            if (array[j].id > array[j + 1].id) {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21656860_21659438_1_23
21656860_21659570_7_19
Title: Colour conversion not working in opencv? 
----------------------------------------

int main (int argc, char *argv []) {
    IplImage *img = cvLoadImage ("hello.jpg", CV_LOAD_IMAGE_COLOR);
    IplImage *img_data;
    img_data = cvCreateImage (cvGetSize (img), img->depth, img->nChannels);
    if (!img) {
        printf ("Image can NOT Load!!!\n");
        return 1;
    }
    cvNamedWindow ("myfirstwindow", CV_WINDOW_FREERATIO);
    cvShowImage ("myfirstwindow", img);
    printf ("Height: %d\nwidth: %d\nnchannels:%d\n", img -> height, img -> width, img -> nChannels);
    cvCvtColor (img, img_data, CV_RGB2XYZ);
    cvWaitKey (0);
    cvReleaseImage (& img);
    cvReleaseImage (& img_data);
    return 0;
}
----------------------------------------

int main () {
    namedWindow ("myfirstwindow", CV_WINDOW_FREERATIO);
    Mat img = imread ("hello.jpg", CV_IMAGE_LOAD_COLOR);
    imshow ("myfirstwindow", img);
    Mat hsv;
    cvtColor (img, hsv, CV_RGB2HSV);
    waitKey (0);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21660311_21660367_2_13
21660311_21660830_5_28
Title: Use of the last else statement in Else-If construction 
----------------------------------------

int main (void) {
    int x;
    scanf ("%d", & x);
    if (x == 1)
        printf ("ON");
    else if (x == 0)
        printf ("OFF");
    else
        printf ("Unexpected Input");
}
----------------------------------------

int main (void) {
    int n = 0;
    int c;
    while ((c = getchar ()) != EOF && isdigit (c) && (INT_MAX - (c - '0')) / 10 >= n) {
        n *= 10;
        n += c - '0';
    }
    if (c == EOF)
        printf ("End of file or an error was encountered");
    else if (c == '\n')
        printf ("Newline encountered");
    else if (!isdigit (c))
        printf ("Non-digit character %c encountered", c);
    else if ((INT_MAX - (c - '0')) / 10 < n)
        printf ("Overflow would be caused by appending %c", c);
    else
        printf ("unexpected logic error");
    printf (" after %d\n", n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21694221_21699182_5_26
21694221_21705423_30_44
Title: Reallocating a 2d array if initialized like so: char (*A)[size] = malloc(sizeof(char[size][size])) 
----------------------------------------

int main (void) {
    int i, j;
    char (*A) [4] = malloc (sizeof (char [4] [4]));
    for (i = 0; i < 4; ++i) {
        for (j = 0; j < 4; ++j) {
            A[i][j] = i + 'A';
            printf ("%c", A [i] [j]);
        }
        printf ("\n");
    }
    printf ("*\n");
    char (*B) [5] = realloc (A, sizeof (char [5] [5]));
    memset ((char *) B + sizeof (char [4] [4]), 'X', sizeof (char [5] [5]) - sizeof (char [4] [4]));
    for (i = 0; i < 5; ++i) {
        for (j = 0; j < 5; ++j) {
            printf ("%c", B [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int data [MAX_DATA_SIZE], max_data = 0;
    char input_line [128];
    int data_size = 0;
    while (fgets (input_line, sizeof (input_line), stdin)) {
        if (sscanf (input_line, "%d", &data[data_size]) == 1) {
            if (data[data_size] > max_data)
                max_data = data[data_size];
            if (++data_size == MAX_DATA_SIZE)
                break;
        }
    }
    histogram (data_size, data, max_data);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21695323_21695941_5_34
21695323_21698689_4_23
Title: String Compare issues in C 
----------------------------------------

int main (void) {
    char first [25];
    int index = 0, n;
    printf ("Enter the number of last names :\n");
    scanf ("%d", & n);
    printf ("Enter the first name \n");
    scanf ("%s", first);
    char last [n] [25];
    for (int i = 0; i < n; i++)
        scanf ("%s", last[i]);
    for (int i = 0; i < n; i++) {
        if (strcmp (last[i], first) == 0)
            index++;
    }
    if (index == 0)
        printf ("First name not repeated\n");
    else
        printf ("First name repeated %d times", index);
    return 0;
}
----------------------------------------

int main (void) {
    char last [25], first [25];
    int index, n, repeated = 0;
    printf ("Enter n, followed by n Last names (each last name must be a single word) :\n");
    scanf ("%d", & n);
    scanf ("%s", first);
    for (index = 1; index < n; index++) {
        scanf ("%s", last);
        if (strcmp (last, first) == 0)
            repeated = 1;
    }
    if (repeated)
        printf ("First name in list is repeated.\n");
    else
        printf ("First name in list is not repeated.\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21709124_21709295_1_15
21709124_21710158_1_33
Title: What is wrong with my binary search implementation? 
----------------------------------------

int bsearch (int a [], int n, int lo, int hi) {
    if (high < low)
        return 0;
    int mid;
    mid = (hi + lo) / 2;
    if (a[mid] == n)
        return 1;
    else if (a[mid] > n)
        return bsearch (a, n, lo, mid -1);
    else
        return bsearch (a, n, mid +1, hi);
}
----------------------------------------

int bsearch (int a [], int n, int lo, int hi) {
    int mid;
    mid = (hi + lo) / 2;
    if (a[mid] == n)
        return 1;
    else if (a[mid] > n)
        bsearch (a, n, lo, mid);
    else
        bsearch (a, n, mid, hi);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21737906_21745211_20_40
21737906_21775401_6_21
Title: How to Read/Write UTF8 text files in C? 
----------------------------------------

int main () {
    FILE *fin;
    FILE *fout;
    int character;
    fin = fopen ("in.txt", "r");
    fout = fopen ("out.txt", "w");
    while ((character = fgetc (fin)) != EOF) {
        for (int i = 0; i < numberOfBytesInChar ((unsigned char) character) - 1; i++) {
            putchar (character);
            fprintf (fout, "%c", character);
            character = fgetc (fin);
        }
        putchar (character);
        printf (" ");
        fprintf (fout, "%c ", character);
    }
    fclose (fin);
    fclose (fout);
    printf ("\nFile has been created...\n");
    return 0;
}
----------------------------------------

int main () {
    setlocale (LC_ALL, "en_US.UTF-8");
    FILE *fin;
    FILE *fout;
    wint_t wc;
    fin = fopen ("in.txt", "r");
    fout = fopen ("out.txt", "w");
    while ((wc = fgetwc (fin)) != WEOF) {
    }
    fclose (fin);
    fclose (fout);
    printf ("File has been created...\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21737906_21745211_20_40
21737906_38920662_4_23
Title: How to Read/Write UTF8 text files in C? 
----------------------------------------

int main () {
    FILE *fin;
    FILE *fout;
    int character;
    fin = fopen ("in.txt", "r");
    fout = fopen ("out.txt", "w");
    while ((character = fgetc (fin)) != EOF) {
        for (int i = 0; i < numberOfBytesInChar ((unsigned char) character) - 1; i++) {
            putchar (character);
            fprintf (fout, "%c", character);
            character = fgetc (fin);
        }
        putchar (character);
        printf (" ");
        fprintf (fout, "%c ", character);
    }
    fclose (fin);
    fclose (fout);
    printf ("\nFile has been created...\n");
    return 0;
}
----------------------------------------

int main () {
    wifstream input {"in.txt"} wofstream output {"out.txt"} locale utf8 {"en_us.UTF-8"};
    input.imbue (utf8);
    output.imbue (utf8);
    wcout.imbue (utf8);
    wchar_t c;
    while (input >> noskipws >> c) {
        wcout << c;
        output << c;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21737906_21775401_6_21
21737906_38920662_4_23
Title: How to Read/Write UTF8 text files in C? 
----------------------------------------

int main () {
    setlocale (LC_ALL, "en_US.UTF-8");
    FILE *fin;
    FILE *fout;
    wint_t wc;
    fin = fopen ("in.txt", "r");
    fout = fopen ("out.txt", "w");
    while ((wc = fgetwc (fin)) != WEOF) {
    }
    fclose (fin);
    fclose (fout);
    printf ("File has been created...\n");
    return 0;
}
----------------------------------------

int main () {
    wifstream input {"in.txt"} wofstream output {"out.txt"} locale utf8 {"en_us.UTF-8"};
    input.imbue (utf8);
    output.imbue (utf8);
    wcout.imbue (utf8);
    wchar_t c;
    while (input >> noskipws >> c) {
        wcout << c;
        output << c;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21744146_21744842_47_60
21744146_21744952_5_25
Title: "How can I convert this ""for"" loop to use EOF in C?" 
----------------------------------------

int main (void) {
    int num_strings = 0;
    char **stringArray = readScores (&num_strings);
    printf ("There were %d strings read. They are:\n", num_strings);
    for (int i = 0; i < num_strings; ++i) {
        printf ("%2d: %s\n", i + 1, stringArray [i]);
    }
    free_string_array (stringArray, num_strings);
    return EXIT_SUCCESS;
}
----------------------------------------

int main () {
    FILE *asd;
    char *stringArray = calloc (100, sizeof (char));
    int actualCount = 0;
    freopen_s (& asd, "wsx.txt", "w+", stdin);
    fprintf_s (stdin, "this is a test this is only a test this also is a test");
    rewind (stdin);
    for (int i = 0; i <= 13; i++) {
        actualCount = actualCount + 1;
        scanf_s ("%s", & stringArray [i], 100 - i);
        printf_s ("stringArray = %s when i = %d\t actualCount = %d\n", & stringArray [i], i, actualCount);
    }
    printf ("Finished!");
    Sleep (5000);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21762488_21762594_1_13
21762488_21762805_1_22
Title: pointers N linked list in C 
----------------------------------------

void add (LinkedList *Head, int value) {
    if ((*Head).Next == 0) {
        LinkedList sab;
        < -- need to be allocated dynamically sab.item = value;
        sab.Next = 0;
        (*Head).Next = &sab;
    }
    else {
        add ((* Head).Next, value);
    }
}
----------------------------------------

void add (LinkedList *Head, int value) {
    if (Head == NULL)
        return;
    if ((*Head).Next == NULL) {
        LinkedList *sab = malloc (sizeof (LinkedList));
        if (sab == NULL) {
            return;
        }
        (*sab).item = value;
        (*sab).Next = NULL;
        (*Head).Next = sab;
    }
    else {
        add ((* Head).Next, value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21768403_21768480_4_23
21768403_21768552_1_18
Title: how to show percent from random number generator in C 
----------------------------------------

int main () {
    int i, value;
    int heads = 0;
    srand (time (NULL));
    for (i = 0; i < 10; i++) {
        value = rand () % 2;
        if (value == 1) {
            heads++;
        }
    }
    printf ("Coin:\n____\n  Flips: 10\n");
    printf ("    Heads: %d%%\n", heads * 10);
    printf ("    Tails: %d%%\n\n", (10 - heads) * 10);
    return 0;
}
----------------------------------------

int main () {
    int i, value;
    int headsCount = 0;
    int tailsCount = 0;
    for (i = 0; i < 10; i++) {
        value = rand () % 2;
        if (value == 0)
            headsCount++;
        else
            tailsCount++;
        printf ("Coin:\n____\n  Flips: %d\n", i + 1);
        printf ("    Heads: %d%%\n", (headsCount * 100) / (i + 1))
        );
        printf ("    Tails: %d%%\n\n", (tailsCount * 100) / (i + 1))
        );
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21769478_21769799_4_28
21769478_21769820_8_30
Title: Sorting 3 double values using pointers 
----------------------------------------

void sort3 (int *a, int *b, int *c) {
    int min, mid, max;
    if (*a <= *b) {
        if (*a <= *c) {
            min = *a;
            if (*b <= *c) {
                mid = *b;
                max = *c;
            }
            else {
                mid = *c;
                max = *b;
            }
        }
    }
    else
        sort3 (b, a, c);
    *a = min;
    *b = mid;
    *c = max;
}
----------------------------------------

void sort3 (double *x, double *y, double *z) {
    if (*x > *y) {
        if (*x < *z) {
            if (*y > *z) {
                d_swap (y, z);
            }
        }
        else {
            d_swap (x, z);
            d_swap (y, z);
        }
    }
    else if (*y < *z) {
        if (*x < *z) {
            d_swap (x, y);
        }
        else {
            d_swap (x, y);
            d_swap (y, z);
        }
    }
    else {
        d_swap (x, z);
    }
    printf ("The order sequence is: %.1lf %.1lf %.1lf \n", * x, * y, * z);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21769478_21769799_4_28
21769478_21778662_7_15
Title: Sorting 3 double values using pointers 
----------------------------------------

void sort3 (int *a, int *b, int *c) {
    int min, mid, max;
    if (*a <= *b) {
        if (*a <= *c) {
            min = *a;
            if (*b <= *c) {
                mid = *b;
                max = *c;
            }
            else {
                mid = *c;
                max = *b;
            }
        }
    }
    else
        sort3 (b, a, c);
    *a = min;
    *b = mid;
    *c = max;
}
----------------------------------------

void sort3 (double *x, double *y, double *z) {
    if (*x > *y)
        swap (x, y);
    if (*x > *z)
        swap (x, z);
    if (*y > *z)
        swap (y, z);
    printf ("The order sequence is: %.1lf %.1lf %.1lf \n", * x, * y, * z);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21769478_21769820_8_30
21769478_21778662_7_15
Title: Sorting 3 double values using pointers 
----------------------------------------

void sort3 (double *x, double *y, double *z) {
    if (*x > *y) {
        if (*x < *z) {
            if (*y > *z) {
                d_swap (y, z);
            }
        }
        else {
            d_swap (x, z);
            d_swap (y, z);
        }
    }
    else if (*y < *z) {
        if (*x < *z) {
            d_swap (x, y);
        }
        else {
            d_swap (x, y);
            d_swap (y, z);
        }
    }
    else {
        d_swap (x, z);
    }
    printf ("The order sequence is: %.1lf %.1lf %.1lf \n", * x, * y, * z);
}
----------------------------------------

void sort3 (double *x, double *y, double *z) {
    if (*x > *y)
        swap (x, y);
    if (*x > *z)
        swap (x, z);
    if (*y > *z)
        swap (y, z);
    printf ("The order sequence is: %.1lf %.1lf %.1lf \n", * x, * y, * z);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21778424_21778787_1_19
21778424_21790720_1_20
Title: Pointer value changing 
----------------------------------------

PHBOOK uploadAddresses (PHBOOK p, char *fname) {
    PHBOOK temp = p;
    char mob [20], name [20];
    FILE *fp = fopen (fname, "r");
    while (fscanf (fp, "%s %s", name, mob) != EOF) {temp -> next = (PHBOOK) malloc (sizeof (Contact));
    temp = temp->next;
    temp->name = (char *) malloc (sizeof (char) * MAX_NAME);
    temp->mobileno = (char *) malloc (sizeof (char) * MAX_PHNO);
    strcpy (temp -> name, name);
    strcpy (temp -> mobileno, mob);
}
----------------------------------------

PHBOOK uploadAddresses (PHBOOK p, char *fname) {
    PHBOOK temp = p;
    char *mob, *name;
    FILE *fp = fopen (fname, "r");
    if (!fp)
        return temp;
    while (fscanf (fp, "%ms %ms", &name, &mob) != EOF) {
        temp->next = malloc (sizeof (Contact));
        temp = temp->next;
        temp->name = name;
        temp->mobileno = mob;
        printf ("%s %s\n", name, mob);
    }
    fclose (fp);
    temp->next = p;
    return p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2180079_38351276_1_15
2180079_52343888_27_108
Title: How can I copy a file on Unix using C? 
----------------------------------------

void copyFile (char from [], char to []) {
    FILE *copyFrom = fopen (from, "r");
    FILE *copyTo = fopen (to, "w");
    for (;;) {
        int caractereActuel = fgetc (copyFrom);
        if (caractereActuel != EOF) {
            fputc (caractereActuel, copyTo);
        }
        else {
            break;
        }
    }
    fclose (copyFrom);
    fclose (copyTo);
}
----------------------------------------

bool copyFile (CHAR *pszPathIn, CHAR *pszPathOut) {
    INT32 fdIn, fdOut;
    UINT32 ulFileSize_in = 0;
    UINT32 ulFileSize_out = 0;
    CHAR *szDataBuf;
    if (!pszPathIn || !pszPathOut) {
        print_err (" Invalid param!");
        return false;
    }
    if ((1 > strlen (pszPathIn)) || (1 > strlen (pszPathOut))) {
        print_err (" Invalid param!");
        return false;
    }
    if (0 != access (pszPathIn, F_OK)) {
        print_err (" %s, %s!", pszPathIn, strerror (errno));
        return false;
    }
    if (0 > (fdIn = open (pszPathIn, O_RDONLY))) {
        print_err ("open(%s, ) failed, %s", pszPathIn, strerror (errno));
        return false;
    }
    if (0 > (fdOut = open (pszPathOut, O_CREAT | O_WRONLY | O_TRUNC, 0777))) {
        print_err ("open(%s, ) failed, %s", pszPathOut, strerror (errno));
        close (fdIn);
        return false;
    }
    szDataBuf = malloc (DATA_BUF_SIZE);
    if (NULL == szDataBuf) {
        print_err ("malloc() failed!");
        return false;
    }
    while (1) {
        INT32 slSizeRead = read (fdIn, szDataBuf, sizeof (szDataBuf));
        INT32 slSizeWrite;
        if (slSizeRead <= 0) {
            break;
        }
        slSizeWrite = write (fdOut, szDataBuf, slSizeRead);
        if (slSizeWrite < 0) {
            print_err ("write(, , slSizeRead) failed, %s", slSizeRead, strerror (errno));
            break;
        }
        if (slSizeWrite != slSizeRead) {
            print_err (" write(, , %d) failed!", slSizeRead);
            break;
        }
    }
    close (fdIn);
    fsync (fdOut);
    close (fdOut);
    ulFileSize_in = get_file_size (pszPathIn);
    ulFileSize_out = get_file_size (pszPathOut);
    if (ulFileSize_in == ulFileSize_out) {
        free (szDataBuf);
        return true;
    }
    free (szDataBuf);
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21806286_21806318_14_23
21806286_21806394_8_16
Title: "I get the following error: expected '=' '' ';' 'asm' or '__attribute__' before '{' token. How do I fix it?" 
----------------------------------------

int main () {
    printf ("altura:");
    scanf ("%f", & altura);
    printf ("base:");
    scanf ("%f", & base);
    s = triangleArea ();
    printf ("el area es %f\n", s);
    return 0;
}
----------------------------------------

int main () {
    printf ("altura:");
    scanf ("%f", & altura);
    printf ("base:");
    scanf ("%f", & base);
    s = area ();
    printf ("el area es %f\n", s);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21838870_21838920_1_20
21838870_21839014_3_26
Title: Validate the correct month in C 
----------------------------------------

int main (void) {
    int month, year;
    printf ("Enter the Date of last oil change, month (1-12): ");
    scanf (" %i", & month);
    while (month < 1 || month > 12) {
        printf ("Please enter a number between 1-12.\n ");
        scanf (" %i", & month);
    }
    printf ("Month: %i\n ", month);
    return (0);
}
----------------------------------------

int main (void) {
    int month = 0;
    int year = 0;
    printf ("Enter the Date of last oil change, month (1-12): ");
    scanf ("%d", & month);
    while (month <= 0 || month > 12) {
        printf ("Please enter a number between 1-12: \n");
        scanf ("%d", & month);
    }
    printf ("Enter the Year of last oil change:");
    scanf ("%d", & year);
    while (year <= 0) {
        printf ("Please enter a positive number to be a year\n");
        scanf ("%d", & year);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21863294_21863728_1_21
21863294_21864340_1_18
Title: Returning the length of a char array in C 
----------------------------------------

int normalize (char *buf) {
    char c;
    int i = 0;
    int j = 0;
    while (buf[i] != 0) {
        c = buf[i++];
        if (isspace (c)) {
            j++;
            while (isspace (c))
                c = buf[i++];
        }
        if (isupper (c))
            buf[j] = tolower (c);
        j++;
    }
    buf[j] = 0;
    return j;
}
----------------------------------------

int normalize (unsigned char *buf, int len) {
    int i = 0;
    int j = 0;
    int previous_is_space = 0;
    while (i < len) {
        if (isspace (buf[i])) {
            if (!previous_is_space) {
                buf[j++] = ' ';
            }
            previous_is_space = 1;
        }
        else {
            buf[j++] = tolower (buf[i]);
            previous_is_space = 0;
        }
        i++;
    }
    return j;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21877674_21878252_1_14
21877674_21879035_3_28
Title: Insertion Sort program in C giving weird result 
----------------------------------------

int *isort (int array [], int size) {
    int i, j, tmp;
    for (j = 1; j < size; j++) {
        i = j;
        while (i > 0 && array[i - 1] > array[i]) {
            tmp = array[i];
            array[i] = array[i - 1];
            array[i - 1] = tmp;
            i--;
        }
    }
    return array;
}
----------------------------------------

int *isort (int array [], int size) {
    int i, j, key;
    for (j = 1; j < size; j++) {
        key = array[j];
        i = j - 1;
        while ((array[i] > key) && (i >= 0)) {
            array[i + 1] = array[i];
            i--;
        }
        array[i + 1] = key;
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21884106_21884226_1_14
21884106_21884999_1_10
Title: Run-Time Check Failure #2 - Stack arount the variable 's' was corrupted 
----------------------------------------

void str_cpy (char **s, char *org) {
    char *newptr;
    if (!s || !org)
        return;
    newptr = malloc (sizeof (char) * (strlen (org) + 1));
    *s = newptr;
    while (*org) {
        *newptr++ = *org++;
    }
    *newptr = '\0';
}
----------------------------------------

void str_cpy (char **s, char *org) {
    size_t len;
    if (!org) {
        *s = NULL;
        return;
    }
    len = strlen (org);
    *s = malloc (len +1);
    if (*s)
        memcpy (*s, org, len +1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21935502_21935625_1_16
21935502_21935631_1_23
Title: Segmentation Error with a linked list while loop 
----------------------------------------

void sl_print (sphere_list *ss) {
    if (ss == NULL) {
        printf ("SPHERE LIST EMPTY\n");
        printf ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
        printf ("SPHERE LIST:\n");
        return;
    }
    int i = 1;
    while (ss != NULL) {
        printf ("\t%d ", i);
        sphere_print (ss -> s);
        ss = ss->next;
        i++;
    }
}
----------------------------------------

void sl_print (sphere_list *ss) {
    sphere_list *tmp = ss;
    if (ss == NULL)
        printf ("SPHERE LIST EMPTY\n");
    printf ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    printf ("SPHERE LIST:\n");
    int i = 1;
    while (tmp != NULL) {
        printf ("\t%d ", i);
        if (tmp->s != NULL)
            sphere_print (tmp->s);
        if (tmp->next == NULL) {
            printf ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
            return;
        }
        tmp = tmp->next;
        i++;
    }
    printf ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21947523_21948770_1_14
21947523_21948813_5_22
Title: How to find string position within another string in C recursively? 
----------------------------------------

int instring (char *word, char *sentence) {
    int lenw = strlen (word);
    int lens = strlen (sentence);
    if (lenw > lens)
        return -1;
    if (strncmp (sentence, word, lenw) == 0)
        return 0;
    else {
        int ret = instring (word, sentence +1);
        if (ret < 0)
            return ret;
        return 1 + ret;
    }
}
----------------------------------------

static int instring (char const *word, char const *sentence) {
    int rc;
    if (debug)
        printf ("-->> [%s] in [%s]\n", word, sentence);
    if (*word == '\0')
        rc = 0;
    else if (*sentence == '\0')
        rc = -1;
    else if (*word != *sentence || (rc = instring (word +1, sentence +1)) != 0) {
        if ((rc = instring (word, sentence +1)) >= 0)
            rc++;
    }
    if (debug)
        printf ("<<-- [%s] in [%s] = %d\n", word, sentence, rc);
    return rc;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21952681_21952774_1_17
21952681_21957593_1_14
Title: What is the best way to convert str from standard stream into int array in C? 
----------------------------------------

int main (void) {
    char str [50 + 1];
    scanf ("%50s", str);
    int *integer = strtoint (str, integer);
    if (integer) {
        free (integer);
        integer = NULL;
    }
    return 0;
}
----------------------------------------

void main () {
    int N = 50;
    int integer [N];
    char str [N + 1];
    printf ("enter %d digits string for input:\n", N);
    fgets (str, sizeof str, stdin);
    for (int i = 0; i < N; i++) {
        if (sscanf (&buf[i], "%1d", &integer[i]) != 1)
            Fail ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21959607_21961117_28_54
21959607_21961216_18_37
Title: pass pointer array to function and count size 
----------------------------------------

int main () {
    int size = 0;
    int count = 0;
    Item *arrPtr = NULL;
    addItem (& arrPtr, & size, & count, 1, 239.99);
    addItem (& arrPtr, & size, & count, 2, 129.75);
    addItem (& arrPtr, & size, & count, 3, 99.95);
    addItem (& arrPtr, & size, & count, 4, 350.89);
    for (int i = 0; i < size; i++) {
        printf ("%d, %f\n", arrPtr [i].item, arrPtr [i].value);
    }
    free (arrPtr);
    getch ();
    return 0;
}
----------------------------------------

int main (void) {
    Item *arrPtr = NULL;
    int size = 0;
    int count = 0;
    int i;
    arrPtr = addItem (arrPtr, &size, &count, 1, 239.99);
    arrPtr = addItem (arrPtr, &size, &count, 2, 129.75);
    arrPtr = addItem (arrPtr, &size, &count, 3, 99.95);
    arrPtr = addItem (arrPtr, &size, &count, 4, 350.89);
    for (i = 0; i < count; i++) {
        printf ("%d, %f \n", arrPtr [i].item, arrPtr [i].value);
    }
    free (arrPtr);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21988776_21989384_4_22
21988776_21991013_1_13
Title: copy char before /after special operator in c 
----------------------------------------

void main (void) {
    char *a = malloc (strlen (ptr) / 2);
    char *b = malloc (strlen (ptr) / 2);
    int i = 0;
    j = 0, w;
    while (*(ptr + i) != '/') {
        *(a + j) = *(ptr + i);
        j++;
        i++;
    }
    *(a + j) = '\0';
    j = 0;
    for (w = i + 1; w <= strlen (ptr); w++) {
        *(b + j) = *(ptr + w);
        j++;
    }
    printf ("pure string : %s \ntoken1 : %s \ntoken2= %s", ptr, a, b);
    free (a);
    free (b);
}
----------------------------------------

int main () {
    char ptr [] = "xxx/yyy";
    char *part1, *part2;
    part1 = ptr;
    part2 = strchr (ptr, '/');
    if (part2 != NULL)
        *part2++ = '\0';
    printf ("'%s', '%s'\n", part1, part2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22005507_22005847_1_19
22005507_22007090_5_28
Title: Need help to format output 
----------------------------------------

main () {
    int i, x, count;
    char numbers [100];
    int noofoccurance [10] = {0};
    printf ("Enter an array of numbers:- ");
    scanf ("%s", numbers);
    x = strlen (no);
    for (i = 0; i < x; i++) {
        a[no[i] - 48] = a[no[i] - 48] + 1;
    }
    for (i = 0; i < 10; i++) {
        if [noofoccurance [i] != 0] printf (\ nFrequency of % d is % d ", i, noofoccurance [i])
    }
    getch ();
}
----------------------------------------

main () {
    int i, j, x, n, count;
    char no [100], no1 [100];
    printf ("Enter an array of numbers:- ");
    scanf ("%s", no);
    strcpy (no1, no);
    x = strlen (no);
    for (i = 0; i < x; i++) {
        count = 0;
        for (j = 0; j < x; j++) {
            if (no[i] == no1[j]) {
                count++;
                no1[j] = 0.1;
            }
        }
        if (count != 0)
            printf ("\n\nFrequency of %c is %d", no[i], count);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2201918_2201972_4_15
2201918_2202036_4_13
Title: conversion of multiple ascii characters in a char array to single int using their ascii values --- c/c++ 
----------------------------------------

int main () {
    char *str = "ABC";
    int i, n;
    for (i = 0, n = 0; i < strlen (str); i++, n *= 100) {
        n += str[i];
    }
    n /= 100;
    printf ("%d\n", n);
}
----------------------------------------

int main () {
    char start [] = "ABC";
    char output [100];
    int i;
    char *output_start = output;
    for (i = 0; i < 3; i++) {
        output_start += sprintf (output_start, "%d", start[i]);
    }
    printf ("%s\n", output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2201918_2201972_4_15
2201918_2202057_4_16
Title: conversion of multiple ascii characters in a char array to single int using their ascii values --- c/c++ 
----------------------------------------

int main () {
    char *str = "ABC";
    int i, n;
    for (i = 0, n = 0; i < strlen (str); i++, n *= 100) {
        n += str[i];
    }
    n /= 100;
    printf ("%d\n", n);
}
----------------------------------------

int main (void) {
    char *input = "ABC";
    char output [256];
    int n = 0;
    while (*input)
        n += sprintf (output +n, "%d", *input++);
    printf ("%d\n", atoi (output));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2201918_2201972_4_15
2201918_2202133_6_30
Title: conversion of multiple ascii characters in a char array to single int using their ascii values --- c/c++ 
----------------------------------------

int main () {
    char *str = "ABC";
    int i, n;
    for (i = 0, n = 0; i < strlen (str); i++, n *= 100) {
        n += str[i];
    }
    n /= 100;
    printf ("%d\n", n);
}
----------------------------------------

int main (void) {
    static const char * const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int A = 65;
    const char in [3] = "ABC";
    unsigned long long out = 0;
    size_t i;
    for (i = 0; i < sizeof in; ++i) {
        char *found = strchr (upper, in[i]);
        if (found) {
            if ((ULLONG_MAX - (A + (found - upper))) / 100 < out) {
                fprintf (stderr, "Overflow at %c\n", in [i]);
                return EXIT_FAILURE;
            }
            out = out * 100 + A + (found - upper);
        }
        else {
            fprintf (stderr, "Giving up at %c\n", in [i]);
            return EXIT_FAILURE;
        }
    }
    printf ("%llu\n", out);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2201918_2202036_4_13
2201918_2202057_4_16
Title: conversion of multiple ascii characters in a char array to single int using their ascii values --- c/c++ 
----------------------------------------

int main () {
    char start [] = "ABC";
    char output [100];
    int i;
    char *output_start = output;
    for (i = 0; i < 3; i++) {
        output_start += sprintf (output_start, "%d", start[i]);
    }
    printf ("%s\n", output);
}
----------------------------------------

int main (void) {
    char *input = "ABC";
    char output [256];
    int n = 0;
    while (*input)
        n += sprintf (output +n, "%d", *input++);
    printf ("%d\n", atoi (output));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2201918_2202036_4_13
2201918_2202133_6_30
Title: conversion of multiple ascii characters in a char array to single int using their ascii values --- c/c++ 
----------------------------------------

int main () {
    char start [] = "ABC";
    char output [100];
    int i;
    char *output_start = output;
    for (i = 0; i < 3; i++) {
        output_start += sprintf (output_start, "%d", start[i]);
    }
    printf ("%s\n", output);
}
----------------------------------------

int main (void) {
    static const char * const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int A = 65;
    const char in [3] = "ABC";
    unsigned long long out = 0;
    size_t i;
    for (i = 0; i < sizeof in; ++i) {
        char *found = strchr (upper, in[i]);
        if (found) {
            if ((ULLONG_MAX - (A + (found - upper))) / 100 < out) {
                fprintf (stderr, "Overflow at %c\n", in [i]);
                return EXIT_FAILURE;
            }
            out = out * 100 + A + (found - upper);
        }
        else {
            fprintf (stderr, "Giving up at %c\n", in [i]);
            return EXIT_FAILURE;
        }
    }
    printf ("%llu\n", out);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2201918_2202057_4_16
2201918_2202133_6_30
Title: conversion of multiple ascii characters in a char array to single int using their ascii values --- c/c++ 
----------------------------------------

int main (void) {
    char *input = "ABC";
    char output [256];
    int n = 0;
    while (*input)
        n += sprintf (output +n, "%d", *input++);
    printf ("%d\n", atoi (output));
    return 0;
}
----------------------------------------

int main (void) {
    static const char * const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int A = 65;
    const char in [3] = "ABC";
    unsigned long long out = 0;
    size_t i;
    for (i = 0; i < sizeof in; ++i) {
        char *found = strchr (upper, in[i]);
        if (found) {
            if ((ULLONG_MAX - (A + (found - upper))) / 100 < out) {
                fprintf (stderr, "Overflow at %c\n", in [i]);
                return EXIT_FAILURE;
            }
            out = out * 100 + A + (found - upper);
        }
        else {
            fprintf (stderr, "Giving up at %c\n", in [i]);
            return EXIT_FAILURE;
        }
    }
    printf ("%llu\n", out);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22030336_22030421_3_29
22030336_22030586_3_13
Title: C converting string/char input to floating point 
----------------------------------------

int main (int argc, char *argv []) {
    int number;
    int newNumber;
    int i;
    printf ("Enter a number in decimal...\n");
    scanf ("%d", & number);
    printf ("%d in binary is: ", number);
    for (i = sizeof (int) * 8 - 1; i >= 0; i--) {
        newNumber = (number >> i);
        if (newNumber & 1) {
            printf ("1");
        }
        else {
            printf ("0");
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    double v;
    int err;
    err = scanf ("%lf", &v);
    if (1 == err) {
        printf ("%lf\n", v);
    }
    else {
        printf ("read failed\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22033853_22034055_4_16
22033853_22035183_3_12
Title: How to solve compilation error in converting string to int? 
----------------------------------------

int main () {
    char a [100];
    printf ("Enter the string");
    scanf ("%s", a);
    int i = 0;
    if (atoi (&a[i]) == 222) {
        printf ("Hi");
    }
    puts (a);
    return 0;
}
----------------------------------------

int main () {
    char a [100];
    printf ("Enter the string : ");
    scanf ("%99s", a);
    if (a[0] == '2') {
        printf ("Hi ");
    }
    puts (a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22068593_22068781_1_12
22068593_22068874_1_15
Title: Printing String from array 
----------------------------------------

int main () {
    int j;
    char aarhus [] = {'\x8F', 'r', 'h', 'u', 's', ' ', 'H', '\0'};
    char esbjerg [] = {'E', 's', 'b', 'j', 'e', 'r', 'g', '\0'};
    char *stationer [] = {aarhus, esbjerg};
    int count = sizeof (stationer) / sizeof (char *);
    for (j = 0; j < count; j++) {
        printf ("%s", stationer [j]);
    }
}
----------------------------------------

int main () {
    char aarhus [] = {'\x8F', 'r', 'h', 'u', 's', ' ', 'H', '\0'};
    char esbjerg [] = {'E', 's', 'b', 'j', 'e', 'r', 'g', '\0'};
    char *stationer [] = {aarhus, esbjerg, NULL};
    int index = 0;
    for (index = 0; stationer[index] != NULL; ++index) {
        printf ("%s", stationer [index]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22079499_22081244_3_19
22079499_34618923_4_13
Title: Reading integers in C until the ENTER key is pressed 
----------------------------------------

int main () {
    int i = 0, no_elements = 0;
    int array [16];
    while (no_elements < 16) {
        char line [32];
        int n;
        printf ("Give the numbers in the array, then hit ENTER: \n");
        fgets (line, sizeof (line), stdin);
        if (*line == '\n')
            break;
        if (1 == sscanf (line, "%d", &n))
            array[no_elements++] = n;
    }
    printf ("%d\n", no_elements);
    return 0;
}
----------------------------------------

int main () {
    int ar [10], i = 0;
    char c = ' ';
    while (c != '\n') {
        scanf ("%d%c", & ar [i ++], & c);
    }
    while (i > 0)
        printf ("%d\t", ar[--i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22096693_22096795_5_18
22096693_22096842_6_16
Title: segmentation fault in a simple command line program 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc == 2) {
        char [20] c = "cat";
        strcat (c, argv [1]);
        printf ("commad: %s", c);
        system (c);
    }
    else {
        printf ("usage: %s filename", argv [0]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc != 2) {
        printf ("usage: %s filename", argv [0]);
        return 0;
    }
    else {
    std :
        : string command ("cat ");
        command += argv[1];
        printf ("command: %s", command.c_str ());
        return system (command.c_str ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22110096_22112730_10_34
22110096_22115562_5_34
Title: How to Write back to Parent's pipe? 
----------------------------------------

int main (int argc, char **argv) {
    int value;
    pipe (mypipe);
    value = fork ();
    if (value == -1) {
        perror ("Cannot fork");
        exit (1);
    }
    else if (value == 0) {
        read (mypipe [0], & i, sizeof (int));
        printf ("i = %d\n", i);
        wait (& pid);
        exit (0);
    }
    else {
        i = 7;
        write (mypipe [1], & i, sizeof (int));
        exit (0);
    }
}
----------------------------------------

int main (void) {
    int mypipe [2];
    int i, pid;
    pipe (mypipe);
    pid = fork ();
    if (pid == -1) {
        perror ("Cannot fork");
        return 1;
    }
    else if (pid == 0) {
        read (mypipe [0], & i, sizeof (int));
        printf ("child: i = %d\n", i);
        i += 13;
        write (mypipe [1], & i, sizeof (int));
    }
    else {
        i = 7;
        write (mypipe [1], & i, sizeof (int));
        int status;
        int corpse = wait (&status);
        read (mypipe [0], & i, sizeof (int));
        printf ("parent: i = %d (child = %d = %d; status = 0x%.4X)\n", i, pid, corpse, status);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111099_2_13
22111065_22111107_3_18
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int i, n, fakt = 1;
    printf ("Enter a number:\n");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        fakt = fakt * i;
        printf ("Factorial of %d is %d\n", i, fakt);
    }
    getch ();
}
----------------------------------------

int main () {
    int n, i, num, factorial;
    printf ("Enter the number of terms: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        num = i;
        factorial = 1;
        while (num)
            factorial *= num--;
        printf ("%d \t %d\n", i, factorial);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111099_2_13
22111065_22111114_12_23
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int i, n, fakt = 1;
    printf ("Enter a number:\n");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        fakt = fakt * i;
        printf ("Factorial of %d is %d\n", i, fakt);
    }
    getch ();
}
----------------------------------------

int main () {
    int n;
    printf ("Enter a number:\n");
    scanf ("%d", & n);
    int i = 0;
    for (i = 1; i <= n; i++) {
        printf ("Factorial for %d is %d\n", i, factorial (i));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111099_2_13
22111065_27950536_2_18
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int i, n, fakt = 1;
    printf ("Enter a number:\n");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        fakt = fakt * i;
        printf ("Factorial of %d is %d\n", i, fakt);
    }
    getch ();
}
----------------------------------------

int main (int n) {
    int fact;
    clrscr ();
    printf ("Enter a number and type exit:\n");
    scanf ("%d", & n);
    if (n != 0) {
        fact = n * main (n -1);
        printf ("Factorial of %d is %d\n", n, fact);
        getch ();
        return fact;
    }
    else {
        printf ("Factorial of 0 is 1.\n");
        getch ();
        return 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111099_2_13
22111065_34532292_4_17
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int i, n, fakt = 1;
    printf ("Enter a number:\n");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        fakt = fakt * i;
        printf ("Factorial of %d is %d\n", i, fakt);
    }
    getch ();
}
----------------------------------------

void main () {
    int f = 1, i, v;
    clrscr ();
    printf ("Enter the number :");
    scanf ("%d", & v);
    for (i = 1; i <= v; i++) {
        f = f * i;
        printf ("num =%d and fac=%d\n", i, f);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111107_3_18
22111065_22111114_12_23
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int n, i, num, factorial;
    printf ("Enter the number of terms: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        num = i;
        factorial = 1;
        while (num)
            factorial *= num--;
        printf ("%d \t %d\n", i, factorial);
    }
    return 0;
}
----------------------------------------

int main () {
    int n;
    printf ("Enter a number:\n");
    scanf ("%d", & n);
    int i = 0;
    for (i = 1; i <= n; i++) {
        printf ("Factorial for %d is %d\n", i, factorial (i));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111107_3_18
22111065_27950536_2_18
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int n, i, num, factorial;
    printf ("Enter the number of terms: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        num = i;
        factorial = 1;
        while (num)
            factorial *= num--;
        printf ("%d \t %d\n", i, factorial);
    }
    return 0;
}
----------------------------------------

int main (int n) {
    int fact;
    clrscr ();
    printf ("Enter a number and type exit:\n");
    scanf ("%d", & n);
    if (n != 0) {
        fact = n * main (n -1);
        printf ("Factorial of %d is %d\n", n, fact);
        getch ();
        return fact;
    }
    else {
        printf ("Factorial of 0 is 1.\n");
        getch ();
        return 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111107_3_18
22111065_34532292_4_17
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int n, i, num, factorial;
    printf ("Enter the number of terms: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        num = i;
        factorial = 1;
        while (num)
            factorial *= num--;
        printf ("%d \t %d\n", i, factorial);
    }
    return 0;
}
----------------------------------------

void main () {
    int f = 1, i, v;
    clrscr ();
    printf ("Enter the number :");
    scanf ("%d", & v);
    for (i = 1; i <= v; i++) {
        f = f * i;
        printf ("num =%d and fac=%d\n", i, f);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111114_12_23
22111065_27950536_2_18
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int n;
    printf ("Enter a number:\n");
    scanf ("%d", & n);
    int i = 0;
    for (i = 1; i <= n; i++) {
        printf ("Factorial for %d is %d\n", i, factorial (i));
    }
    return 0;
}
----------------------------------------

int main (int n) {
    int fact;
    clrscr ();
    printf ("Enter a number and type exit:\n");
    scanf ("%d", & n);
    if (n != 0) {
        fact = n * main (n -1);
        printf ("Factorial of %d is %d\n", n, fact);
        getch ();
        return fact;
    }
    else {
        printf ("Factorial of 0 is 1.\n");
        getch ();
        return 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_22111114_12_23
22111065_34532292_4_17
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main () {
    int n;
    printf ("Enter a number:\n");
    scanf ("%d", & n);
    int i = 0;
    for (i = 1; i <= n; i++) {
        printf ("Factorial for %d is %d\n", i, factorial (i));
    }
    return 0;
}
----------------------------------------

void main () {
    int f = 1, i, v;
    clrscr ();
    printf ("Enter the number :");
    scanf ("%d", & v);
    for (i = 1; i <= v; i++) {
        f = f * i;
        printf ("num =%d and fac=%d\n", i, f);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22111065_27950536_2_18
22111065_34532292_4_17
Title: Program to print N first factorial numbers in c 
----------------------------------------

int main (int n) {
    int fact;
    clrscr ();
    printf ("Enter a number and type exit:\n");
    scanf ("%d", & n);
    if (n != 0) {
        fact = n * main (n -1);
        printf ("Factorial of %d is %d\n", n, fact);
        getch ();
        return fact;
    }
    else {
        printf ("Factorial of 0 is 1.\n");
        getch ();
        return 1;
    }
}
----------------------------------------

void main () {
    int f = 1, i, v;
    clrscr ();
    printf ("Enter the number :");
    scanf ("%d", & v);
    for (i = 1; i <= v; i++) {
        f = f * i;
        printf ("num =%d and fac=%d\n", i, f);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22124384_22124507_4_17
22124384_22124512_4_45
Title: Trouble using fscanf in C 
----------------------------------------

int main () {
    FILE *input;
    char sequence [242];
    input = fopen ("dna_input.dat", "r");
    while (fgets (sequence, 242, input) != NULL) {
        printf ("The number of letters in a sequence is: %d\n", strlen (sequence) - 1);
    }
    fclose (input);
    return 0;
}
----------------------------------------

int main () {
    int i = 0, count = 0;
    char sequence [241];
    input = fopen ("dna_input.dat", "r");
    int c;
    while ((c = fgetc (input) != EOF)) {
        if (c != '\n') {
            sequence[i++] = c;
            count++;
        }
        else {
            printf ("The number of letters in a sequence is: %d\n", count);
            sequence[i] = '\0';
            i = 0;
            count = 0;
        }
    }
    if (count > 0) {
        printf ("The number of letters in a sequence is: %d\n", count);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22124384_22124507_4_17
22124384_22126223_3_19
Title: Trouble using fscanf in C 
----------------------------------------

int main () {
    FILE *input;
    char sequence [242];
    input = fopen ("dna_input.dat", "r");
    while (fgets (sequence, 242, input) != NULL) {
        printf ("The number of letters in a sequence is: %d\n", strlen (sequence) - 1);
    }
    fclose (input);
    return 0;
}
----------------------------------------

int main (void) {
    int len;
    char sequence [241 + 1];
    FILE *input = fopen ("dna_input.dat", "r");
    if (input == NULL) {
        printf ("Error in opening the file\n");
        return -1;
    }
    while (fgets (sequence, 242, input) != NULL) {
        len = strlen (sequence);
        if (sequence[len - 1] == '\n')
            --len;
        printf ("The number of letters in the sequence is: %d\n", len);
    }
    fclose (input);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22124384_22124512_4_45
22124384_22126223_3_19
Title: Trouble using fscanf in C 
----------------------------------------

int main () {
    int i = 0, count = 0;
    char sequence [241];
    input = fopen ("dna_input.dat", "r");
    int c;
    while ((c = fgetc (input) != EOF)) {
        if (c != '\n') {
            sequence[i++] = c;
            count++;
        }
        else {
            printf ("The number of letters in a sequence is: %d\n", count);
            sequence[i] = '\0';
            i = 0;
            count = 0;
        }
    }
    if (count > 0) {
        printf ("The number of letters in a sequence is: %d\n", count);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int len;
    char sequence [241 + 1];
    FILE *input = fopen ("dna_input.dat", "r");
    if (input == NULL) {
        printf ("Error in opening the file\n");
        return -1;
    }
    while (fgets (sequence, 242, input) != NULL) {
        len = strlen (sequence);
        if (sequence[len - 1] == '\n')
            --len;
        printf ("The number of letters in the sequence is: %d\n", len);
    }
    fclose (input);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22131746_22131803_3_35
22131746_22132000_3_30
Title: Bubble Sort With Array and Termination 
----------------------------------------

main () {
    int n [10];
    int i, j, temp;
    for (i = 0; i < 5; i++) {
        printf ("%d. Sayi giriniz(Enter NUmber)", i + 1);
        scanf ("%d", & n [i]);
    }
    if (n[i] != -1)
        for (i = 0; i < 4; i++)
            for (j = i + 1; j < 5; j++)
                if (n[i] > n[j]) {
                    temp = n[i];
                    n[i] = n[j];
                    n[j] = temp;
                }
    printf ("\n");
    for (i = 0; i < 5; i++)
        printf ("%d. say?(number):%d\n", i +1, n[i]);
    else {
        break;
    }
    getch ();
    return 0;
}
----------------------------------------

main () {
    int n [10];
    int i, j, temp;
    for (i = 0; i < 5; i++) {
        printf ("%d. Sayi giriniz(Enter NUmber)", i + 1);
        scanf ("%d", & n [i]);
        if (n[i] == -1)
            break;
    }
    int size = i;
    for (i = 0; i < size - 1; i++)
        for (j = i + 1; j < size; j++)
            if (n[i] > n[j]) {
                temp = n[i];
                n[i] = n[j];
                n[j] = temp;
            }
    printf ("\n");
    for (i = 0; i < size; i++)
        printf ("%d. sayı(number):%d\n", i +1, n[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22137805_22137827_58_72
22137805_22137898_1_34
Title: Is there any way to avoid using exit(0)? 
----------------------------------------

void play (guessing_game_t *g) {
    while (g->state != QUIT) {
        switch (g->state) {
        case GUESS :
            evaluate_guess (g, input_guess ());
            break;
        case GAMEOVER :
            play_again (g);
            break;
        }
    }
}
----------------------------------------

void play (void) {
    srand ((int) time (NULL));
    int num;
    int guess = 0;
    int attempts = 0;
    int try_again = 1;
    while (try_again) {
        num = rand () % 10 + 1;
        printf ("\nGuess the number: \n");
        while (TRUE) {
            scanf ("%d", & guess);
            if (num > guess) {
                printf ("Too low! ");
                attempts++;
            }
            else if (num < guess) {
                printf ("Too high! ");
                attempts++;
            }
            else if (num == guess) {
                attempts++;
                printf ("You won! You did it in %d attempts", attempts);
                char yo = playAgain ();
                if (yo == 'n')
                    try_again = 0;
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22163871_22165684_5_51
22163871_22171032_6_62
Title: Reading in bytes of a file for printable ASCII characetrs 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fp;
    char buf [100], ch;
    int i = 0;
    if (argc < 2) {
        printf ("\nInsufficient Arguments.\n");
        printf ("\nUsage: PrintChar <file>\n\n");
        return 1;
    }
    if ((fp = fopen (argv[1], "rb")) == NULL) {
        printf ("\nError: Unable to open the file.\n");
        return 2;
    }
    i = 0;
    while ((ch = fgetc (fp)) != EOF) {
        if (ch >= 32 && ch <= 126) {
            buf[i] = ch;
            i++;
            while (((ch = fgetc (fp)) >= 32 && ch <= 126) && ch != EOF) {buf [i] = ch;
            i++;
        }
        buf[i] = '\0';
        if (i >= 4)
            printf ("\n%s", buf);
        i = 0;
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    size_t str_min_len = 4;
    size_t buf_len = 1024;
    char in_buf [buf_len], out_buf [buf_len];
    size_t out_len, in_len, last_len;
    last_len = out_len = 0;
    while ((in_len = fread (in_buf, 1, buf_len, stdin)) > 0) {
        assert (out_len == 0);
        for (size_t i = 0; i < in_len; i++) {
            char ch = in_buf[i];
            if (isprint (ch)) {
                out_buf[out_len++] = ch;
            }
            else {
                if (out_len + last_len >= str_min_len) {
                    fwrite (out_buf, 1, out_len, stdout);
                    last_len = 0;
                }
                out_len = 0;
            }
        }
        if (0 < out_len && out_len < str_min_len) {
            size_t pad_len = str_min_len - out_len;
            for (size_t i = 0; i < pad_len; i++) {
                char ch;
                if (fread (&ch, 1, 1, stdin) < 1) {
                    exit (EXIT_SUCCESS);
                }
                else if (isprint (ch)) {
                    out_buf[out_len++] = ch;
                }
                else {
                    break;
                }
            }
        }
        if (out_len >= str_min_len) {
            fwrite (out_buf, 1, out_len, stdout);
            last_len = out_len;
            out_len = 0;
        }
        else {
            last_len = out_len = 0;
        }
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22187666_22187739_1_11
22187666_22187764_1_11
Title: "Custom strcpy is compiling fine but not working properly" 
----------------------------------------

char *my_strcpy (char *s1, const char *s2) {
    int r = 0;
    for (int i = 0; *s2[i] != '\0'; i++) {
        *s1[i] = *s2[i];
        r++;
    }
    *s1[r + 1] = '\0';
    return *s1;
}
----------------------------------------

char *my_strcpy (char *s1, const char *s2) {
    int r = 0;
    for (int i = 0; s2[i] != '\0'; i++) {
        s1[i] = s2[i];
        r++;
    }
    s1[r] = '\0';
    return s1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22188628_22188831_1_17
22188628_22189313_4_25
Title: cmd arguments into char** in c 
----------------------------------------

int main (int argc, char **argv) {
    char **StringsFromArgs;
    StringsFromArgs = malloc (3 * sizeof (char *));
    if (StringsFromArgs == NULL) {
        return -1;
    }
    StringsFromArgs[0] = argv[1];
    StringsFromArgs[1] = argv[3];
    StringFromArgs[2] = NULL;
    free (StringsFromArgs);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i = 0, k = 0;
    if (argc > 1) {
        char **StringsFromArgs = malloc ((argc - 1) * sizeof (char *));
        for (i = 0; i < argc - 1; i++) {
            if (strcmp (argv[i + 1], "somestring") == 0) {
                StringsFromArgs[k] = argv[i + 1];
                printf ("Argument%d:%s\n", i + 1, StringsFromArgs [k]);
                k++;
            }
        }
    }
    free (StringsFromArgs);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2219001_2219034_1_10
2219001_2219042_1_15
Title: How to initialize const members of structs on the heap 
----------------------------------------

ImmutablePoint *make_immutable_point (int x, int y) {
    ImmutablePoint init = {
        .x = x,
        .y = y
    };
    ImmutablePoint *p = malloc (sizeof *p);
    if (p == NULL)
        abort ();
    memcpy (p, & init, sizeof * p);
    return p;
}
----------------------------------------

ImmutablePoint *make_immutable_point (int x, int y) {
    ImmutablePoint *p = malloc (sizeof (ImmutablePoint));
    if (p == NULL)
        abort ();
    ImmutablePoint temp = {x, y};
    memcpy (p, & temp, sizeof (temp));
    *(int*) &p->x = x;
    *(int*) &p->y = y;
    return p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22213007_22213088_1_19
22213007_22213243_22_50
Title: Store and eliminating garbage values 
----------------------------------------

int filePrinter (char *arr) {
    int i = 0, ch;
    FILE *file;
    file = fopen ("assests/room.txt", "r");
    if (file == NULL) {
        printf ("Could not open file\n");
        exit (- 1);
    }
    else {
        while (EOF != (ch = fgetc (file))) {
            arr[i] = ch;
            ++i;
        }
        arr[i] = '\0';
    }
    fclose (file);
    return i;
}
----------------------------------------

void filePrinter (char *arr) {
    int c = 0, j = 0;
    FILE *file = NULL;
    file = fopen ("assests/room.txt", "r");
    if (file == NULL) {
        printf ("Could not open file\n");
        exit (- 1);
    }
    else {
        while (1) {
            c = fgetc (file);
            if (c != EOF) {
                arr[j++] = c;
            }
            else {
                break;
            }
        }
    }
    fclose (file);
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22218605_22219080_11_24
22218605_22219094_8_38
Title: Is this function a good candidate for SIMD on Intel? 
----------------------------------------

int f (int len, unsigned char *p) {
    int i = 0;
    int len8 = len / 8;
    unsigned long long *q = (unsigned long long *) p;
    while (i < len8 && bytesInRange (q[i])) {
        i++;
    }
    i = i * 8;
    while (i < len && p[i] >= 32 && p[i] <= 127) {
        i++;
    }
    return i;
}
----------------------------------------

int f (int len, unsigned char *p) {
    int i = 0;
    __m128i A;
    __m128i B;
    __m128i C;
    UmmU8 *pu = (UmmU8 *) p;
    int const len16 = len / 16;
    while (i < len16) {
        A = pu[i].mm_;
        B = _mm_slli_epi32 (A, 1);
        C = _mm_slli_epi32 (A, 2);
        B = _mm_or_si128 (B, C);
        A = _mm_andnot_si128 (A, B);
        int mask = _mm_movemask_epi8 (A);
        if (mask == 0xFFFF) {
            ++i;
        }
        else {
            if (mask == 0) {
                return i * 16;
            }
            break;
        }
    }
    i *= 16;
    while (i < len && p[i] >= 32 && p[i] <= 127) {
        i++;
    }
    return i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22224972_22225437_1_15
22224972_22225738_1_17
Title: Reverse characters word in array 
----------------------------------------

void ReverseWord (char *Str) {
    int end = strlen (Str) - 1;
    int start = 0;
    while (start < end) {
        Str[start] ^= Str[end];
        Str[end] ^= Str[start];
        Str[start] ^= Str[end];
        ++start;
        --end;
    }
}
----------------------------------------

void ReverseWord (char *Str) {
    size_t len;
    char temp, *end;
    len = strlen (Str);
    if (len < 2)
        return;
    end = Str + len - 1;
    while (end > Str) {
        temp = *end;
        *end-- = *Str;
        *Str++ = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22246915_22246999_5_14
22246915_22247305_9_19
Title: assign a string to a structure variable in c 
----------------------------------------

int main () {
    char str1 [] = "Sample string";
    char str2 [40];
    char str3 [40];
    strcpy (str2, str1);
    strcpy (str3, "copy successful");
    printf ("str1: %s\nstr2: %s\nstr3: %s\n", str1, str2, str3);
    return 0;
}
----------------------------------------

int main () {
    char temp [] = "sumit";
    printf ("Program started\n");
    my_name.first_name = temp;
    your_name = my_name;
    NAME abc = my_name;
    printf ("my_name=%s\n", my_name.first_name);
    printf ("your_name=%s\n", your_name.first_name);
    printf ("abc=%s\n", abc.first_name);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22269827_22271297_1_18
22269827_22276086_1_19
Title: Caesar Cipher Algorith Shifting C 
----------------------------------------

void encrypt (char table [], char entext [], char text [], int key) {
    int i, j;
    int k = strlen (table);
    for (i = 0; i < strlen (table); ++i) {
        if (text[i] != '\0') {
            for (j = 0; text[i] != table[j]; j++)
                ;
            entext[i] = table[(j + key) % k];
        }
    }
    entext[i + 1] = '\0';
    puts (entext);
}
----------------------------------------

void encrypt (char table [], char entext [], char text [], int key) {
    int i, j;
    int k = strlen (table);
    for (i = 0; text[i]; ++i) {
        for (j = 0; table[j] && text[i] != table[j]; ++j)
            ;
        if (table[j] == '\0')
            entext[i] = text[i];
        else {
            j += key;
            if (j >= k)
                j -= k;
            entext[i] = table[j];
        }
    }
    entext[i] = '\0';
    puts (entext);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2227077_2227115_1_15
2227077_2227119_1_16
Title: Char * (pointer) function 
----------------------------------------

int l2_read (char **chunkp, int length) {
    int i;
    *chunkp = malloc (length * sizeof **chunkp);
    if (*chunkp == NULL) {
        return -2;
    }
    for (i = 0; i < length; i++) {
        char c;
        if (read (&c) < 0)
            return -1;
        (*chunkp)[i] = c;
    }
    printf ("%s", * chunkp);
    return 1;
}
----------------------------------------

int l2_read (char **chunk, int length) {
    *chunk = malloc (sizeof (char) * length);
    int i;
    for (i = 0; i < length; i++) {
        char c;
        if (read (&c) < 0)
            return (-1);
        (*chunk)[i] = c;
    }
    printf ("%s", * chunk);
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2227198_2227289_4_18
2227198_2227317_4_16
Title: Segmentation Fault when using strtok_r 
----------------------------------------

int main (void) {
    char hello [] = "Hello World, let me live.";
    char *tmp;
    char *token = NULL;
    for (token = strtok_r (hello, ", ", &tmp); token != NULL; token = strtok_r (NULL, ", ", &tmp)) {
        printf ("%s\n", token);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char hello [] = "Hello World, Let me live.";
    char *rest;
    char *token;
    char *ptr = hello;
    while (token = strtok_r (ptr, " ,", &rest)) {
        printf ("%s\n", token);
        ptr = rest;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2227198_2227289_4_18
2227198_2227320_4_24
Title: Segmentation Fault when using strtok_r 
----------------------------------------

int main (void) {
    char hello [] = "Hello World, let me live.";
    char *tmp;
    char *token = NULL;
    for (token = strtok_r (hello, ", ", &tmp); token != NULL; token = strtok_r (NULL, ", ", &tmp)) {
        printf ("%s\n", token);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char hello [] = "Hello World, Let me live.";
    char *p = hello;
    char *tokens [50];
    int i = 0;
    while (i < 50) {
        tokens[i] = strtok_r (p, " ,", &p);
        if (tokens[i] == NULL) {
            break;
        }
        i++;
    }
    i = 0;
    while (i < 5) {
        printf ("%s\n", tokens [i ++]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2227198_2227317_4_16
2227198_2227320_4_24
Title: Segmentation Fault when using strtok_r 
----------------------------------------

int main (void) {
    char hello [] = "Hello World, Let me live.";
    char *rest;
    char *token;
    char *ptr = hello;
    while (token = strtok_r (ptr, " ,", &rest)) {
        printf ("%s\n", token);
        ptr = rest;
    }
}
----------------------------------------

int main (void) {
    char hello [] = "Hello World, Let me live.";
    char *p = hello;
    char *tokens [50];
    int i = 0;
    while (i < 50) {
        tokens[i] = strtok_r (p, " ,", &p);
        if (tokens[i] == NULL) {
            break;
        }
        i++;
    }
    i = 0;
    while (i < 5) {
        printf ("%s\n", tokens [i ++]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22272230_22272865_8_23
22272230_31451049_4_77
Title: "Program that displays each digit on an integer in english doesn't work with an integer beginning with ""0""" 
----------------------------------------

int main () {
    int i;
    char format [10];
    char str [MAX_INPUT_LEN + 1];
    sprintf (format, "%c%us", '%', MAX_INPUT_LEN);
    scanf (format, str);
    for (i = 0; str[i] != 0; i++) {
        if ('0' <= str[i] && str[i] <= '9')
            printf ("%s ", digits[str[i] - '0']);
        else
            printf ("invalid character ");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num, count, user, out;
    count = 0;
    printf ("Type in any int: ");
    scanf ("%d", & num);
    if (num < 0) {
        num = -num;
        printf ("minus ");
    }
    user = num;
    while (num != 0) {
        num = num / 10;
        count++;
    }
    int i2;
    i2 = count;
    for (int i = 0; i < i2; i++) {
        out = user / pow (10, count -1);
        user = user - out * pow (10, count -1);
        count--;
        switch (out) {
        case 1 :
            printf ("one ");
            break;
        case 2 :
            printf ("two ");
            break;
        case 3 :
            printf ("three ");
            break;
        case 4 :
            printf ("four ");
            break;
        case 5 :
            printf ("five ");
            break;
        case 6 :
            printf ("six ");
            break;
        case 7 :
            printf ("seven ");
            break;
        case 8 :
            printf ("eight ");
            break;
        case 9 :
            printf ("nine ");
            break;
        case 0 :
            printf ("zero ");
            break;
        default :
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22274067_22274206_1_10
22274067_22275976_108_118
Title: sorting an array based on proximity to mean 
----------------------------------------

int comp (double a, double b, double mean) {
    a = fabs (mean -a);
    b = fabs (mean -b);
    if (a > b)
        return 1;
    else if (a < b)
        return -1;
    else
        return 0;
}
----------------------------------------

static int comp (void *thunk, const void *pa, const void *pb) {
    double aValue = fabs (*(double*) thunk - *(double*) pa);
    double bValue = fabs (*(double*) thunk - *(double*) pb);
    if (aValue > bValue)
        return 1;
    else if (aValue < bValue)
        return -1;
    else
        return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22274067_22274495_37_55
22274067_22275976_135_150
Title: sorting an array based on proximity to mean 
----------------------------------------

int main (int argc, char *argv []) {
    unsigned int numlen = 100;
    double numbers [100] = {20.11267454572858, 27.00916748845121, 41.69273886807976, 59.574594859929206, 5.148795948275042, 25.0952600949092, 7.490782458661016, 46.82558348995649, 99.1505635434539, 80.82884752229698, 34.562195425918965, 12.83419004171462, 65.21675903144343, 60.939055397544415, 59.716932510808405, 68.58214712201324, 16.96903326566488, 40.890117173893096, 43.24295370982686, 49.74083920053604, 51.879578222761545, 85.55201465227584, 0.9988146850440804, 72.9927624741183, 24.544352584593764, 38.07294449540915, 89.21601198806061, 46.242113823416055, 34.77013261276065, 75.50489987606491, 68.73075063359678, 34.11250399830412, 33.03497314824547, 50.356507540969574, 43.44185408674688, 1.3480391491077937, 17.87324689034111, 27.521463721587523, 65.36478555088043, 89.08983557487836, 91.20949281863321, 36.15883451406319, 64.71929705431249, 96.51660222081459, 84.3925334284804, 9.273474377948954, 20.7970994809055, 81.63173897647613, 34.54178336906219, 69.17908602857048, 34.49554788014096, 27.658713128591337, 37.84762296714004, 32.47882877578083, 80.33388365434217, 12.535403896961606, 1.6177858463917616, 58.492589297744544, 4.996882418234216, 0.6516899504362961, 94.14913555948795, 45.01455399721226, 91.13032884578304, 0.9747543756017163, 87.73797888418335, 17.05103955970504, 34.9990215191348, 32.132359722564175, 51.39141618413181, 90.41510433921886, 70.85275376557709, 60.81740079574899, 56.276844928014334, 96.84741168778665, 38.587969750110915, 26.93423429759396, 56.28727064877738, 40.69208717486249, 30.893466414304214, 54.69704130793473, 8.422991004598423, 42.51756379315109, 6.109299688810255, 97.5321480398511, 76.34912536352495, 83.6200551607522, 19.447640061947336, 29.659746702311896, 72.24996303415246, 7.992406225268933, 57.09202659164654, 60.782606246000036, 60.398430869817474, 41.77937462471086, 47.28376403551421, 54.31179044336384, 39.837395485680894, 39.301123086537395, 71.8438289228498, 49.209926974123285};
    double mean, sum = 0;
    dbl_and_mean *doubles_and_mean = calloc (numlen, sizeof (dbl_and_mean));
    for (unsigned i = 0; i < numlen; i++) {
        sum = sum + numbers[i];
        doubles_and_mean[i].value = &(numbers[i]);
        doubles_and_mean[i].mean = &mean;
    }
    mean = sum / numlen;
    printf ("Mean is %f\n", mean);
    qsort (doubles_and_mean, 100, sizeof (dbl_and_mean), & cmpToMean);
    for (unsigned int i = 0; i < numlen; i++) {
        printf ("%03d: %f\n", i, * (doubles_and_mean [i].value));
    }
}
----------------------------------------

int main (void) {
    double d [] = {3.1416, 2.7813, 1.613, 9.8126, 0.1213};
    enum {NUM_D = sizeof (d) / sizeof (d[0])};
    test (NUM_D, d);
    double data [] = {1.23, 3.29, 8.18, 2.51, 4.18, 9.99, 6.75, 1.01, 4.68, 8.21, 6.38,};
    enum {NUM_DATA = sizeof (data) / sizeof (data[0])};
    test (NUM_DATA, data);
    return 0;
}
----------------------------------------

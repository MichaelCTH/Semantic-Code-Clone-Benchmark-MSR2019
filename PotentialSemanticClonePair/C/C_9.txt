$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18915236_18915469_5_61
18915236_18915603_1_18
Title: Switch case help in C 
----------------------------------------

int main () {
    int n1, n2, a = 0, c, o;
    int terminate = 0;
    while (!terminate) {
        printf ("\n \n 1. Addition \n 2. Substract \n 3. Multiply \n 4. Divide \n \n");
        printf ("\n Enter your choice: \t");
        scanf ("%d", & o);
        if (o < 0 || o > 4) {
            printf ("Choice ain't correct!\n");
            continue;
        }
        printf ("Enter two numbers: \n ");
        scanf ("%d %d", & n1, & n2);
        switch (o) {
        case 1 :
            a = n1 + n2;
            break;
        case 2 :
            a = n1 - n2;
            break;
        case 3 :
            a = n1 * n2;
            break;
        case 4 :
            a = n1 / n2;
            break;
        default :
            break;
        }
        sleep (1);
        printf ("\n Answer is %d", a);
        printf ("\n Perform another action too? 1 for Yes and 0 for No \t", c);
        scanf ("%d", & c);
        if (c != 1) {
            terminate = 1;
        }
    }
    printf ("\n \n \n Bye!");
}
----------------------------------------

int main () {
    int o, a1, a2;
    printf ("Hi!\r\n");
    while (1) {
        printf ("1234 - operations, else - exit\r\n");
        scanf ("%d", & o);
        if (o < 1 || o > 4)
            break;
        printf ("Enter args: ");
        scanf ("%d %d", & a1, & a2);
        switch (o) {
        }
    }
    printf ("Bye!\r\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18919612_18919880_1_15
18919612_18920460_1_12
Title: How to save stack and heap 
----------------------------------------

int main () {
    int a = 1;
    int *b = malloc (sizeof (int));
    *b = 2;
    if (fork () == 0) {
        a = 3;
        *b = 4;
        return 0;
    }
    int status;
    wait (& status);
    printf ("%d %d\n", a, * b);
    return 0;
}
----------------------------------------

int main () {
    int a = 1;
    int *b = (int *) malloc (sizeof (int));
    *b = 2;
    {
        int a = 3;
        int *b = (int *) malloc (sizeof (int));
        * b = 4
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18930908_18931095_4_39
18930908_51591972_5_39
Title: C-printing a histogram 
----------------------------------------

int main (void) {
    int ch, cha [100] = {0}, k = 1;
    int numWords = 0;
    int numLetters = 0;
    bool prevWasANewline = true;
    printf ("Enter the words:-\n");
    while ((ch = getchar ()) != EOF && ch != '\n') {
        if (ch == ' ' || ch == '\t')
            prevWasANewline = true;
        else {
            if (prevWasANewline) {
                numWords++;
                numLetters = 0;
            }
            prevWasANewline = false;
            cha[numWords] = ++numLetters;
        }
    }
    do {
        printf ("%3d|", k);
        for (int j = 0; j < cha[k]; j++)
            printf ("%c", '*');
        printf ("\n");
        k++;
    }
    while (k <= numWords);
    return 0;
}
----------------------------------------

int main (void) {
    int wnumb [100];
    int i, inword, c, n, k;
    n = (-1);
    for (i = 0; i <= 100; ++i) {
        wnumb[i] = 0;
    }
    inword = NO;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            inword = NO;
        }
        else if (inword == NO) {
            ++n;
            ++wnumb[n];
            inword = YES;
        }
        else {
            ++wnumb[n];
        }
    }
    for (i = 0; i <= 100; ++i) {
        if (wnumb[i] > 0) {
            printf ("\n%3d. | ", (i + 1));
            for (k = 1; k <= wnumb[i]; ++k) {
                printf ("*");
            }
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18938779_18939097_4_54
18938779_32623343_4_18
Title: How to copy a string using a pointer 
----------------------------------------

int main () {
    char *orig_str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    char *ptr = orig_str;
    int orig_str_size = 0;
    char *bkup_copy = NULL;
    while (*ptr++ != '\0')
        orig_str_size++;
    printf ("Size of the original string: %d\n", orig_str_size);
    bkup_copy = (char *) malloc ((orig_str_size + 1) * sizeof (char));
    bkup_copy[orig_str_size] = '\0';
    ptr = &orig_str[0];
    int idx = 0;
    while (*ptr != '\0')
        bkup_copy[idx++] = *ptr++;
    printf ("Original String: %s\n", orig_str);
    printf ("Backup String: %s\n", bkup_copy);
    return 0;
}
----------------------------------------

int main (void) {
    char *original, *copy, *start;
    original = malloc (sizeof (char) * MAX_LENGTH);
    gets (original);
    copy = malloc (sizeof (char) * (strlen (original) + 1));
    start = copy;
    while ((*original) != '\0')
        *copy++ = *original++;
    *copy = '\0';
    copy = start;
    printf ("The copy of input string is \"%s\".", copy);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18942719_18943028_4_28
18942719_18943224_8_44
Title: Reading from a text file and storing in a 2D array 
----------------------------------------

int main (void) {
    int i = 0, totalNums, totalNum, j = 0;
    size_t count;
    int numbers [100] [100];
    char *line = malloc (100);
    FILE *file;
    file = fopen ("g.txt", "r");
    while (getline (&line, &count, file) != -1) {
        for (; count > 0; count--, j++)
            sscanf (line, "%d", &numbers[i][j]);
        i++;
    }
    totalNums = i;
    totalNum = j;
    for (i = 0; i < totalNums; i++) {
        for (j = 0; j < totalNum; j++) {
            printf ("\n%d", numbers [i] [j]);
        }
    }
    fclose (file);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fp;
    char *line = NULL;
    size_t len = 0;
    ssize_t read;
    const char *s = " ";
    char *token = NULL;
    int i = 0;
    double arr [200];
    int j;
    fp = fopen ("g.txt", "r");
    if (fp == NULL) {
        printf ("Error opening");
        exit (EXIT_FAILURE);
    }
    while ((read = getline (&line, &len, fp)) != -1) {
        token = strtok (line, s);
        while (token != NULL) {
            arr[i] = atoi (token);
            printf ("%f\n", arr [i]);
            token = strtok (NULL, s);
            i++;
        }
    }
    exit (EXIT_SUCCESS);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18949078_18949239_2_16
18949078_18950226_2_18
Title: Truncating a String of text given by user in C 
----------------------------------------

int main (int argc, char **argv) {
    int a;
    int i = 0;
    while ((a = getchar ()) != EOF) {
        if (++i < 73)
            putchar (a);
        else if (i == 73)
            putchar ('\n');
        if (a == '\n')
            i = 0;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int in_char;
    int col_no = 0;
    while ((in_char = getchar ()) != EOF) {
        col_no = col_no + 1;
        if (in_char == '\n')
            col_no = 0;
        if (col_no <= 72)
            putchar (in_char);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18971670_18971705_1_14
18971670_18973209_2_15
Title: How to check if the argument passed is a string in c? 
----------------------------------------

int main (int argc, char **argv) {
    int val;
    if (argc <= 1 || !is_integer (argv[1])) {
        fprintf (stderr, "Syntax: %s val\n\nWhere val is an integer\n", argv [0]);
        return 1;
    }
    val = strtol (argv[1], NULL, 10);
    test (val);
    return 0;
}
----------------------------------------

int main (void) {
    char line [200];
    int n;
    printf ("Enter an integer: ");
    fflush (stdout);
    fgets (line, sizeof line, stdin);
    if (sscanf (line, "%d", &n) == 1) {
        printf ("You entered %d (0x%x)\n", n, (unsigned) n);
    }
    else {
        printf ("You did not enter an integer\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1898371_1898425_1_16
1898371_1898471_4_14
Title: Problems writing the memset function 
----------------------------------------

void *memsetFun (void *pointer, int c, int size) {
    printf ("A %x %d %d\n", pointer, c, size);
    if (pointer != NULL && size > 0) {
        printf ("B\n");
        unsigned char *pChar = pointer;
        int i = 0;
        for (i = 0; i < size; ++i) {
            printf ("C %d (%d)", i, * pChar);
            unsigned char temp = (unsigned char) c;
            *pChar++ = temp;
            printf (" -> (%d)", i, * (pChar - 1));
        }
    }
    printf ("D\n");
    return pointer;
}
----------------------------------------

void *memsetFun (void *pointer, int c, int size) {
    if (pointer != NULL && size > 0) {
        unsigned char *pChar = pointer;
        int i = 0;
        for (i = 0; i < size; ++i) {
            unsigned char temp = (unsigned char) c;
            *pChar++ = temp;
        }
    }
    return pointer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18994671_18994927_2_14
18994671_18995055_2_18
Title: c program char and integer separation 
----------------------------------------

int convstrg (char *str) {
    int output = 0;
    char *p = str;
    int i = 0;
    for (i = 0; p[i] != '\0'; i++) {
        char c = *p++;
        if (c < '0' || c > '9')
            continue;
        output *= 10;
        output += c - '0';
    }
    return output;
}
----------------------------------------

int convstrg (const char *str) {
    int output = 0;
    const char *p = str;
    for (; *p;) {
        char c = *p++;
        if ((c >= '0') && (c <= '9')) {
            output *= 10;
            output += c - '0';
        }
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18995071_18995250_12_27
18995071_52147097_33_60
Title: Simple stack program in C 
----------------------------------------

void pop () {
    struct node *prevPtr;
    if (first == NULL) {
        printf ("Error: Stack Empty.\n");
        return;
    }
    printf ("%d was popped off the stack.\n", first -> data);
    prevPtr = first;
    first = first->next;
    free (prevPtr);
}
----------------------------------------

void pop () {
    int str;
    if (top == -1) {
        printf ("stack empty\n");
    }
    else {
        str = stack[top];
        top--;
        printf ("the removed element is %d\n", str);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18995071_18995262_1_16
18995071_52147097_33_60
Title: Simple stack program in C 
----------------------------------------

void pop () {
    struct node *prevPtr;
    if (first == NULL) {
        printf ("Error: Stack Empty.\n");
        return;
    }
    printf ("%d was popped off the stack.\n", first -> data);
    prevPtr = first;
    first = first->next;
    free (prevPtr);
}
----------------------------------------

void pop () {
    int str;
    if (top == -1) {
        printf ("stack empty\n");
    }
    else {
        str = stack[top];
        top--;
        printf ("the removed element is %d\n", str);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19059730_19059797_18_33
19059730_27106178_2_25
Title: Cannot figure out how to use getchar(); in C 
----------------------------------------

int main (void) {
    int F, C;
    printf ("Do you have a Fever? y/n\n");
    F = get_answer ();
    printf ("Do you have a runny nose or cough? y/n\n");
    C = get_answer ();
    printf ("Here are the results you input:\n");
    printf ("Do you have a fever? %c\n", F);
    printf ("Do you have a runny nose or cough? %c\n", C);
    return 0;
}
----------------------------------------

int main (void) {
    char F, C;
    printf ("Do you have a Fever? y/n\n");
    F = getchar ();
    getchar ();
    printf ("Do you have a runny nose or cough? y/n\n");
    C = getchar ();
    getchar ();
    printf ("Here are the results you input:\n");
    printf ("Do you have a fever?");
    putchar (F);
    printf ("\nDo you have a runny nose or cough?");
    putchar (C);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19074954_19075197_12_23
19074954_19075323_12_25
Title: How to return array of string in function? 
----------------------------------------

int main () {
    char *array2 [100];
    function (array2);
    int i;
    for (i = 0; i < (int) strlen (*array2) - 1; i++) {
        printf ("%s\n", array2 [i]);
    }
    system ("pause");
}
----------------------------------------

int main (int argc, char *argv []) {
    char **array2;
    array2 = function ();
    int i;
    for (i = 0; i < 2; i++)
        printf ("%s\n", array2[i]);
    free (array2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19147386_19147468_5_23
19147386_19147525_4_26
Title: System Call fork() and execv function 
----------------------------------------

int main (int argc, char **argv) {
    pid_t i = fork ();
    if (i == 0) {
        execv ("./prcs1", (char * []) {"./prcs1", argv [1], NULL});
        _exit (1);
    }
    else if (i > 0) {
        execv ("./prcs2", (char * []) {"./prcs2", argv [0], NULL});
        _exit (2);
    }
    else {
        perror ("fork failed");
        _exit (3);
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int ret = fork ();
    if (ret == 0) {
        execv ("./prcs1", & argv [1]);
        printf ("EXECV Failed from child\n");
    }
    else if (ret > 0) {
        execv ("./prcs2", argv);
        printf ("EXECV Failed from parent\n");
    }
    else {
        printf ("forkFailed\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1915701_1915851_5_34
1915701_1916957_5_24
Title: How to write a program that use 2D array to generate a matrix? 
----------------------------------------

int _tmain (int argc, _TCHAR *argv []) {
    int num1, num2;
    while (!(num > 3) & (num < 9)) {
        printf ("enter a integer (3-9): ");
        scanf ("%d", & num1);
    }
    srand (time (NULL));
    int counter1 = num1;
    int counter2 = num1;
    int intArray [num1] [num1];
    while (counter1 > 0) {
        while (counter2 > 0) {
            intArray[counter1][counter2] = rand ();
            counter2--;
        }
        counter1--;
        counter2 = num1;
    }
    return 0;
}
----------------------------------------

int _tmain (int argc, _TCHAR *argv []) {
    int num = 0, i, j;
    int mtx [9] [9] = {0};
    while (num < 3 || num > 9) {
        printf ("Enter an integer (3-9): ");
        scanf ("%d", & num);
    }
    srand (time (NULL));
    for (i = 0; i < num; ++i)
        for (j = 0; j < num; ++j)
            mtx[i][j] = rand ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19182811_19183374_5_33
19182811_19183698_1_23
Title: Idenfifying a 10 digit number in middle of a string 
----------------------------------------

int main (int argc, char **argv) {
    char str_in [] = "abcgfg1234567890gfggf";
    int result = 0;
    const char *pattern = "[0-9]{10}";
    regex_t re;
    char msg [256];
    if (regcomp (&re, pattern, REG_EXTENDED | REG_NOSUB) != 0) {
        perror ("regcomp");
        return (EXIT_FAILURE);
    }
    result = regexec (&re, str_in, (size_t) 0, NULL, 0);
    regfree (& re);
    if (!result) {
        printf ("Regex got a match.\n");
    }
    else if (result == REG_NOMATCH) {
        printf ("Regex got no match.\n");
    }
    else {
        regerror (result, & re, msg, sizeof (msg));
        fprintf (stderr, "Regex match failed: %s\n", msg);
        return (EXIT_FAILURE);
    }
    return (EXIT_SUCCESS);
}
----------------------------------------

int main () {
    char str_in [] = "abcgfg1234567890gfggf";
    char cset [] = "1234567890";
    int result;
    int i;
    int f;
    i = 0;
    f = 0;
    while (str_in[i]) {
        if (str_in[i] == cset[f]) {
            f++;
            if (f == strlen (cset))
                return (f);
        }
        else
            f = 0;
        i++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19185958_19186027_8_40
19185958_19186521_9_31
Title: Wait only 5 second for user input 
----------------------------------------

int main (void) {
    int value = 0;
    struct timeval tmo;
    fd_set readfds;
    printf ("Enter a non-zero number: ");
    fflush (stdout);
    FD_ZERO (& readfds);
    FD_SET (0, & readfds);
    tmo.tv_sec = 5;
    tmo.tv_usec = 0;
    switch (select (1, &readfds, NULL, NULL, &tmo)) {
    case -1 :
        err (1, "select");
        break;
    case 0 :
        printf ("User dont give input");
        return (1);
    }
    scanf ("%d", & value);
    if (value != 0) {
        printf ("User input a number");
    }
    else {
        printf ("User dont give input");
    }
    return (0);
}
----------------------------------------

int main () {
    int x;
    struct sigaction sa;
    sa.sa_handler = handler;
    sigemptyset (& sa.sa_mask);
    sa.sa_flags = 0;
    sigaction (SIGALRM, & sa, NULL);
    alarm (5);
    if (scanf ("%d", &x) == 1) {
        printf ("%d\n", x);
        alarm (0);
    }
    else {
        printf ("timedout\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19197006_19197027_3_30
19197006_19197734_3_33
Title: Can anyone help me with my C code please ? 
----------------------------------------

int main (int argc, const char *argv []) {
    float V, I, R;
    printf ("welcome to my lovely program");
    printf ("please enter the value of the current if the value is not known make I=0 ");
    scanf ("%f", & I);
    printf ("please entre the value of the resistance if the value is not known make R=0");
    scanf ("%f", & R);
    printf ("please enter the value of the voltage, if unknown make V=0");
    scanf ("%f", & V);
    if (V == 0) {
        V = I * R;
        printf (" V = %f", V);
    }
    else if (I == 0) {
        I = V / R;
        printf ("I = %f ", I);
    }
    else {
        R = V / I;
        printf ("R= %f", R);
    }
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    int V, I, R;
    printf ("please enter the value of the current if the value is not known make I=0 ");
    scanf ("%d", & I);
    printf ("please entre the value of the resistance if the value is not known make R=0");
    scanf ("%d", & R);
    printf ("please enter the value of the voltage, if unknown make V=0");
    scanf ("%d", & V);
    if (V == 0) {
        V = I * R;
        printf (" V = %d", V);
    }
    else if (I == 0)
        I = V / R;
    {
        printf ("I = %d ", I);
    }
    else {
        R = V / I;
        printf ("R= %d", R);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19200328_19200481_8_37
19200328_19200486_3_11
Title: Parse command line arguments as unsigned long long in C 
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    unsigned long long big_value;
    if (argc < 2) {
        fprintf (stderr, "Usage: %s some_numeric_parameters\n", argv [0]);
        return 1;
    }
    for (i = 1; i < argc; i++) {
        big_value = strtoull (argv[i], NULL, 10);
        if (errno) {
            fprintf (stderr, "%s: parameter %s: %s\n", argv [0], argv [i], strerror (errno));
            return 2;
        }
        ...
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    unsigned long long example;
    int i;
    for (i = 1; i < argc; i++) {
        sscanf (argv [i], "%llu", & example);
        printf ("Argument: %llu\n", example);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19211087_19211126_4_21
19211087_19211182_4_24
Title: compare 2 inputs from keyboard with strcmp leads to segmentation fault 
----------------------------------------

int main (void) {
    char str1 [80];
    char str2 [80];
    printf ("Enter sth: ");
    char *st1 = gets (str1);
    printf ("Enter sth: ");
    char *st2 = gets (str2);
    if (!strcmp (st1, st2))
        printf ("Same\n");
    else
        printf ("Different\n");
    return 0;
}
----------------------------------------

int main (void) {
    char str [80];
    char str2 [80];
    printf ("Enter sth: ");
    gets (str);
    printf ("Enter sth: ");
    gets (str2);
    if (strcmp (str, str2) == 0)
        printf ("Same\n");
    else
        printf ("Different\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19219619_19219736_3_14
19219619_19219786_4_15
Title: How to delete a newline using \b 
----------------------------------------

int main () {
    int key;
    char output [8] = {'\0'};
    printf ("Enter value of key: )";
    scanf ("%d", & key);
    sprintf (output, "-|-%d-|-", key);
    printf ("%s\r\n", output);
    return 0;
}
----------------------------------------

int main () {
    int key;
    char buffer [whatever_size];
    printf ("Enter value of key: ");
    scanf ("%d", & key);
    sprintf (buffer, "-|-%d-|-", key);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19223788_19224067_3_18
19223788_19224431_3_16
Title: Multiplication table with rows and columns 
----------------------------------------

int main () {
    int i, j;
    for (i = 1; i <= 9; i += 3) {
        for (j = 1;
        j <= 10;
        j ++) {printf ("%2d * %2d = %2d ", i, j, (i) * j);
        printf ("%2d * %2d = %2d ", i + 1, j, (i + 1) * j);
        printf ("%2d * %2d = %d\n", i + 2, j, (i + 2) * j);
    }
    printf ("\n");
}
----------------------------------------

int main () {
    int i, j = 1;
    while (j <= 9) {
        for (i = 1; i <= 9; i++) {
            printf ("%d * %d = %3d    ", i, j, i * j);
        }
        printf ("\n");
        j++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19229339_19229422_1_24
19229339_42927107_1_21
Title: Effective way of checking if a given string is palindrome in C 
----------------------------------------

int main () {
    char str [100];
    char *p, *t;
    printf ("Your string : ");
    gets (str);
    for (p = str; *p != NULL; p++)
        ;
    for (t = str, p--; p >= t;) {
        if (*p == *t) {
            p--;
            t++;
        }
        else
            break;
    }
    if (t > p)
        printf ("\nPalindrome");
    else
        printf ("\nNot a palindrome");
    getch ();
    return 0;
}
----------------------------------------

int main () {
    const char *p = "MALAYALAM";
    int count = 0;
    int len = strlen (p);
    for (int i = 0; i < len; i++) {
        if (p[i] == p[len - i - 1])
            count++;
    }
    cout << "Count: " << count;
    if (count == len)
        cout << "Palindrome";
    else
        cout << "Not Palindrome";
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19229339_19229537_1_26
19229339_19229599_1_21
Title: Effective way of checking if a given string is palindrome in C 
----------------------------------------

int palindrome (char *string) {
    size_t len = strlen (string);
    if (len == 0)
        return 0;
    if (len == 1)
        return 1;
    char *ptr1 = string;
    char *ptr2 = string + len - 1;
    while (ptr2 >= ptr1) {
        if (!isalpha (*ptr2)) {
            ptr2--;
            continue;
        }
        if (!isalpha (*ptr1)) {
            ptr1++;
            continue;
        }
        if (tolower (*ptr1) != tolower (*ptr2)) {
            return 0;
        }
        ptr1++;
        ptr2--;
    }
    return 1;
}
----------------------------------------

int palindrome (char *string) {
    size_t length = strlen (string);
    if (length >= sizeof (uintptr_t)) {
        uintptr_t *ptr1 = (uintptr_t *) string;
        size_t length_v /= sizeof (uintptr_t);
        uintptr_t *ptr2 = (uintptr_t *) (string + (length - (length_v * sizeof (uintptr_t)))) + length_v - 1;
        while (ptr2 > ptr1) {
            if (*ptr1 != bswap (*ptr2)) {
                return (0);
            }
            ptr1++;
            ptr2--;
        }
    }
    else {
    }
    return (1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19237124_19237391_24_38
19237124_19238148_7_58
Title: Exec To Another Program + Child Death 
----------------------------------------

int main () {
    int r1 = 0, r2 = 0;
    getRandomNumbers (& r1, & r2);
    int sleeptime = abs ((r1 % 10)) + 1;
    printf ("Sleep Time: %d\n", sleeptime);
    sleep (sleeptime);
    int exitcode = abs ((r2 % 30)) + 1;
    exit (exitcode);
}
----------------------------------------

int main (int argc, char **argv) {
    int n = 10;
    if (argc > 1)
        n = atoi (argv[1]);
    if (n <= 0) {
        fprintf (stderr, "%s: invalid number of processes %d\n", argv [0], n);
        return (1);
    }
    int i;
    pid_t pid [n];
    int t = time (0);
    srand (t);
    printf ("Time/seed: %d\n", t);
    for (i = 0; i < n; i++) {
        int seed = rand ();
        fflush (0);
        if ((pid[i] = fork ()) < 0) {
            fprintf (stderr, "%s: Fork Failed!\n", argv [0]);
            return -2;
        }
        if (pid[i] == 0) {
            const char command [] = "sleep";
            char argument [15];
            snprintf (argument, sizeof (argument), "%d", seed);
            execl (command, command, argument, (char *) 0);
            fprintf (stderr, "%d: failed to execute %s\n", (int) getpid (), command);
            return (1);
        }
        printf ("Child: %d (%d)\n", pid [i], seed);
    }
    int corpse, status;
    while ((corpse = waitpid (-1, &status, 0)) > 0) {
        if (WIFEXITED (status))
            printf ("%d: Exit Status From %d was %d!\n", (int) time (0), corpse, WEXITSTATUS (status));
        else
            printf ("%d: Exit status from %d was 0x%.4X\n", (int) time (0), corpse, status);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19259612_19259656_1_18
19259612_19259949_1_14
Title: C programming - Repeat scanf until only numbers are input 
----------------------------------------

void input_number (int *number) {
    int flag = 1;
    printf ("Number: ");
    while (flag == 1) {
        if (scanf ("%d", &number) == 1) {
            flag = 0;
        }
        else {
            printf ("-> Wrong format, try again! <-\n");
            getchar ();
        }
    }
    return 0;
}
----------------------------------------

void input_number (int *number) {
    printf ("Number: ");
    if (scanf ("%d", number) == 1)
        return 0;
    else {
        scanf ("%*s");
        printf ("-> Wrong format, try again! <-\n");
        input_number (number);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19259612_19259656_1_18
19259612_19259952_14_28
Title: C programming - Repeat scanf until only numbers are input 
----------------------------------------

void input_number (int *number) {
    int flag = 1;
    printf ("Number: ");
    while (flag == 1) {
        if (scanf ("%d", &number) == 1) {
            flag = 0;
        }
        else {
            printf ("-> Wrong format, try again! <-\n");
            getchar ();
        }
    }
    return 0;
}
----------------------------------------

int input_number (int *number) {
    while (printf ("Number: ") > 0 && scanf ("%d", number) != 1) {
        int c;
        if (feof (stdin) || ferror (stdin))
            return EOF;
        printf ("-> Wrong format, try again! <-\n");
        while ((c = getchar ()) != EOF && c != '\n')
            ;
        if (c == EOF)
            return EOF;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19259612_19259656_1_18
19259612_19259952_1_12
Title: C programming - Repeat scanf until only numbers are input 
----------------------------------------

void input_number (int *number) {
    int flag = 1;
    printf ("Number: ");
    while (flag == 1) {
        if (scanf ("%d", &number) == 1) {
            flag = 0;
        }
        else {
            printf ("-> Wrong format, try again! <-\n");
            getchar ();
        }
    }
    return 0;
}
----------------------------------------

int input_number (int *number) {
    char line [4096];
    while (printf ("Number: ") > 0 && fgets (line, sizeof (line), stdin) != 0) {
        if (sscanf (line, "%d", number) == 1)
            return 0;
        printf ("-> Wrong format, try again! <-\n");
    }
    return EOF;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19259612_19259949_1_14
19259612_19259952_14_28
Title: C programming - Repeat scanf until only numbers are input 
----------------------------------------

void input_number (int *number) {
    printf ("Number: ");
    if (scanf ("%d", number) == 1)
        return 0;
    else {
        scanf ("%*s");
        printf ("-> Wrong format, try again! <-\n");
        input_number (number);
    }
}
----------------------------------------

int input_number (int *number) {
    while (printf ("Number: ") > 0 && scanf ("%d", number) != 1) {
        int c;
        if (feof (stdin) || ferror (stdin))
            return EOF;
        printf ("-> Wrong format, try again! <-\n");
        while ((c = getchar ()) != EOF && c != '\n')
            ;
        if (c == EOF)
            return EOF;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19259612_19259949_1_14
19259612_19259952_1_12
Title: C programming - Repeat scanf until only numbers are input 
----------------------------------------

void input_number (int *number) {
    printf ("Number: ");
    if (scanf ("%d", number) == 1)
        return 0;
    else {
        scanf ("%*s");
        printf ("-> Wrong format, try again! <-\n");
        input_number (number);
    }
}
----------------------------------------

int input_number (int *number) {
    char line [4096];
    while (printf ("Number: ") > 0 && fgets (line, sizeof (line), stdin) != 0) {
        if (sscanf (line, "%d", number) == 1)
            return 0;
        printf ("-> Wrong format, try again! <-\n");
    }
    return EOF;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19259612_19259952_14_28
19259612_19259952_1_12
Title: C programming - Repeat scanf until only numbers are input 
----------------------------------------

int input_number (int *number) {
    while (printf ("Number: ") > 0 && scanf ("%d", number) != 1) {
        int c;
        if (feof (stdin) || ferror (stdin))
            return EOF;
        printf ("-> Wrong format, try again! <-\n");
        while ((c = getchar ()) != EOF && c != '\n')
            ;
        if (c == EOF)
            return EOF;
    }
    return 0;
}
----------------------------------------

int input_number (int *number) {
    char line [4096];
    while (printf ("Number: ") > 0 && fgets (line, sizeof (line), stdin) != 0) {
        if (sscanf (line, "%d", number) == 1)
            return 0;
        printf ("-> Wrong format, try again! <-\n");
    }
    return EOF;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19283364_19283931_4_27
19283364_19284136_21_59
Title: "Displaying hex values inside an array to stdout and comparing input to those hex values" 
----------------------------------------

int main (void) {
    int target;
    const unsigned char array [] = {0xAC, 0xEE, 0x88, 0x0D, 0x87};
    const int len = sizeof array;
    printf ("Enter the target byte as a hex value: \n");
    scanf ("%x", & target);
    for (int i = 0; i < 5; ++i) {
        printf ("Value of array[%d] is 0x%x\n", i, array [i]);
    }
    for (int i = 0; i < len; ++i) {
        if (target == array[i]) {
            printf ("Found a match!\n");
        }
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    auto double myDoubles [NUMELEMS];
    auto int myInts [NUMELEMS];
    auto char myChars [NUMELEMS];
    auto int target;
    auto int numMatches;
    puts ("Here's the array of chars as bytes: ");
    DispBytes (myChars, sizeof (myChars));
    printf ("\nEnter the target byte as a hex value: ");
    scanf ("%x", & target);
    numMatches = CountMatchBytes (myChars, sizeof (myChars), target);
    printf ("There %s %d matching byte%s.\n\n", (1 == numMatches ? "is" : "are"), numMatches, (1 == numMatches ? "" : "s"));
    puts ("\nHere's the array of ints as bytes: ");
    DispBytes (myInts, sizeof (myInts));
    printf ("Enter the target byte as a hex value: ");
    scanf ("%x", & target);
    numMatches = CountMatchBytes (myInts, sizeof (myInts), target);
    printf ("There %s %d matching byte%s.\n\n", (1 == numMatches ? "is" : "are"), numMatches, (1 == numMatches ? "" : "s"));
    puts ("\nHere's the array of doubles as bytes: ");
    DispBytes (myDoubles, sizeof (myDoubles));
    printf ("Enter the target byte as a hex value: ");
    scanf ("%x", & target);
    numMatches = CountMatchBytes (myDoubles, sizeof (myDoubles), target);
    printf ("There %s %d matching byte%s.\n\n", (1 == numMatches ? "is" : "are"), numMatches, (1 == numMatches ? "" : "s"));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19293819_19294658_4_13
19293819_19295791_4_18
Title: "System command in C how to pass a pointer inside a string enclosed inbetween """"" 
----------------------------------------

int main () {
    char *ptr2 = "/home/shailendra/sampleprograms/C/output.txt";
    char *ptr = " gzip -r '%s'";
    int i;
    char buf [500];
    sprintf (buf, ptr, ptr2);
    system (buf);
    return 0;
}
----------------------------------------

int main (void) {
    const char *file = "/home/shailendra/sampleprograms/C/output.txt";
    char buf [500];
    if (snprintf (buf, sizeof buf, "gzip -r '%s'", file) >= sizeof buf) {
    }
    else {
        system (buf);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19297342_19297440_1_14
19297342_19297682_4_13
Title: Weird output when converting int to char* 
----------------------------------------

char *toString (int x) {
    int l = getLength (x);
    char * str = new char [l + 1];
    str[l] = '\0';
    l--;
    while (l >= 0) {
        str[l] = x % 10 + '0';
        x /= 10;
        l--;
    }
    return str;
}
----------------------------------------

char *toString (int x) {
    int l = getLength (x);
    char * str = new char [l + 1];
    str[l] = '\0';
    while (l >= 0) {
        str[--l] = x % 10 + '0';
        x /= 10;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19311250_19311699_6_21
19311250_19311804_4_18
Title: Parsing a txt file 
----------------------------------------

int problem22 () {
    FILE *f = fopen ("file", "r");
    char *tok = NULL;
    char name [100];
    fscanf (f, "%s", name);
    printf ("string before strtok(): %s\n", name);
    tok = strtok (name, ",");
    while (tok) {
        printf ("Token: %s\n", tok);
        tok = strtok (NULL, ",");
    }
    return 0;
}
----------------------------------------

int problem22 () {
    FILE *f = fopen ("names.txt", "r");
    char name [100];
    int pos = 0, maxnames = 4, n;
    for (n = 0; n <= maxnames; n++) {
        fseek (f, pos, 0);
        fscanf (f, "\"%[^\"]s", name);
        printf ("%s\n", name);
        pos += (strlen (name) + 3);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1931935_1931968_1_21
1931935_1931987_1_27
Title: How do I generate a fixed-waveform table in C? 
----------------------------------------

int main (int argc, char *argv []) {
    const int tableSize = 10;
    const char *fileName = "sin_table.txt";
    int x;
    FILE *file;
    file = fopen (fileName, "w");
    if (file == NULL) {
        printf ("unable to open file\n");
        return -1;
    }
    fprintf (file, "float sin_table[%d] =\n{\n ", tableSize);
    for (x = 0; x < tableSize; x++) {
        fprintf (file, "\t%f,\n", sinf (x * 2 * pi / tableSize));
    }
    fprintf (file, "};\n");
    fclose (file);
    return 0;
}
----------------------------------------

int main (int argc, char **args) {
    int i;
    float data [1024];
    float angle = 2.0f * 3.14 / 1024;
    float sinval = 0;
    float cosval = 1;
    float delta_sin = sinf (angle);
    float delta_cos = cosf (angle);
    for (i = 0; i < 1024; i++) {
        data[i] = sinval;
        float s = sinval * delta_cos - cosval * delta_sin;
        float c = sinval * delta_sin + cosval * delta_cos;
        sinval = s;
        cosval = c;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19341684_19341818_23_32
19341684_19341848_22_31
Title: Trying to use strtok and malloc but keeps erroring and I cannot see the error message 
----------------------------------------

char **toArray (char **array, char str [], char sep [], int *count) {
    char *temp = str;
    temp = strtok (temp, sep);
    array[0] = temp;
    *count = 1;
    while ((temp = strtok (NULL, sep)) != NULL) {
        array[(*count)++] = temp;
    }
    return array;
}
----------------------------------------

char **toArray (char **array, char str [], char sep [], int *count) {
    char *temp = str;
    temp = strtok (temp, sep);
    array[0] = temp;
    *count = 1;
    while ((temp = strtok (NULL, sep)) != NULL)
        array[(*count)++] = temp;
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19341684_19341818_6_21
19341684_19341848_7_20
Title: Trying to use strtok and malloc but keeps erroring and I cannot see the error message 
----------------------------------------

int main (int argc, char *argv []) {
    char test [] = "Hello there lol";
    int count = 0;
    char **array = malloc ((sizeof (char *) * 5) + 1);
    toArray (array, test, " ", & count);
    printf ("Count: %d\n", count);
    int array_i;
    for (array_i = 0; array_i < count; array_i++) {
        printf ("array %d: %s\n", array_i, array [array_i]);
    }
    getchar ();
    free (array);
    return 1;
}
----------------------------------------

int main (void) {
    char test [] = "Hello there lol";
    int count = 0;
    char **array = malloc (sizeof (char *) * 5);
    toArray (array, test, " ", & count);
    printf ("Count: %d\n", count);
    for (int i = 0; i < count; i++)
        printf ("array %d: %s\n", i, array[i]);
    free (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19345905_19345983_1_12
19345905_19345985_1_15
Title: Stop for loop upon returning value 
----------------------------------------

int computerChoice () {
    int x, y;
    for (y = 0; y <= 2; y++) {
        for (x = 0; x <= 2; x++) {
            if (matrix[y][x] != 'a') {
                matrix[y][x] = 'b';
                return 0;
            }
        }
    }
    return 1;
}
----------------------------------------

int computerChoice () {
    int x, y;
    for (y = 0; y <= 2; y++) {
        for (x = 0; x <= 2; x++) {
            if (matrix[y][x] == 'a') {
                continue;
            }
            else {
                matrix[y][x] = 'b';
                return (0);
            }
        }
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19352749_19352773_1_21
19352749_19353630_1_39
Title: Why is my function printing this statement? 
----------------------------------------

void checkRoom (int x) {
    if ((x >= 203) && (x <= 216)) {
        printf ("first quad\n");
    }
    else if ((x >= 217) && (x <= 229)) {
        printf ("second quad\n");
    }
    else if ((x >= 232) && (x <= 238)) {
        printf ("CSL\n");
    }
    else if ((x >= 246) && (x <= 257)) {
        printf ("classroom wing\n");
    }
    else {
        printf ("not sure\n");
    }
}
----------------------------------------

void checkRoom (int x) {
    if ((x >= 203) && (x <= 216)) {
        printf ("first quad\n");
        flag = 1;
    }
    if ((x >= 217) && (x <= 229)) {
        printf ("second quad\n");
        flag = 1;
    }
    if ((x >= 232) && (x <= 238)) {
        printf ("CSL\n");
        flag = 1;
    }
    if ((x >= 246) && (x <= 257)) {
        printf ("classroom wing\n");
        flag = 1;
    }
    else if (flag != 1) {
        printf ("not sure\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19365480_19365939_1_11
19365480_19366375_1_11
Title: Best method to find out set bit positions in a bit mask in C 
----------------------------------------

int count_bits (long long s) {
    s = (s & 0x5555555555555555L) + ((s >> 1) & 0x5555555555555555L);
    s = (s & 0x3333333333333333L) + ((s >> 2) & 0x3333333333333333L);
    s = (s & 0x0F0F0F0F0F0F0F0FL) + ((s >> 4) & 0x0F0F0F0F0F0F0F0FL);
    s = (s & 0x00FF00FF00FF00FFL) + ((s >> 8) & 0x00FF00FF00FF00FFL);
    s = (s & 0x0000FFFF0000FFFFL) + ((s >> 16) & 0x0000FFFF0000FFFFL);
    s = (s & 0x00000000FFFFFFFFL) + ((s >> 32) & 0x00000000FFFFFFFFL);
    return (int) s;
}
----------------------------------------

int count_bits (long long s) {
    s = (s & 0x5555555555555555L) + ((s >> 1) & 0x5555555555555555L);
    s = (s & 0x3333333333333333L) + ((s >> 2) & 0x3333333333333333L);
    s = (s & 0x0F0F0F0F0F0F0F0FL) + ((s >> 4) & 0x0F0F0F0F0F0F0F0FL);
    s = (s & 0x00FF00FF00FF00FFL) + ((s >> 8) & 0x00FF00FF00FF00FFL);
    s = (s & 0x0000FFFF0000FFFFL) + ((s >> 16) & 0x0000FFFF0000FFFFL);
    s = (s & 0x00000000FFFFFFFFL) + ((s >> 32) & 0x00000000FFFFFFFFL);
    return (int) s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19365841_19365936_5_14
19365841_19367256_5_20
Title: How do you return a value from a called function to the main? 
----------------------------------------

int main (void) {
    int a;
    int b;
    printf (" Enter temperatrure: ");
    scanf ("%d", & a);
    b = Cel_To_Fah (a);
    printf ("The temperature is: %d\n", b);
    return 0;
}
----------------------------------------

int main (void) {
    int a;
    float b;
    printf (" Enter temperatrure:  ");
    scanf ("%d", & a);
    b = Cel_To_Fah (a);
    printf ("The temperature is: %.2f\n", b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19368438_19370029_1_21
19368438_19370297_1_17
Title: Star printing in C the hard way 
----------------------------------------

void PrintTriangle (int iMainNumber, int iCurrNumber) {
    if (iMainNumber < 0) {
        printf ("%c", '*');
        PrintTriangle (iMainNumber + 1, 0);
        if (iMainNumber == -1)
            printf ("\n");
    }
    else if (iMainNumber > 0) {
        if (iCurrNumber < iMainNumber) {
            if (iCurrNumber > 1)
                PrintTriangle (iMainNumber, iCurrNumber -1);
            PrintTriangle (- iCurrNumber, 0);
        }
        else if (iCurrNumber == iMainNumber) {
            PrintTriangle (iMainNumber, iCurrNumber - 1);
            PrintTriangle (iMainNumber, iCurrNumber + 1);
        }
        else {
            if ((iCurrNumber - iMainNumber) < iMainNumber)
                PrintTriangle (iMainNumber, iCurrNumber +1);
            PrintTriangle (- (iCurrNumber - iMainNumber), 0);
        }
    }
}
----------------------------------------

void PrintTriangle (int size, int indent) {
    switch (size) {
    case 0 :
        if (indent > 1)
            PrintTriangle (size, indent -1);
        putchar ('*');
        break;
    case 1 :
        PrintTriangle (size -1, indent +1);
        putchar ('\n');
        break;
    default :
        PrintTriangle (1, indent);
        PrintTriangle (size - 1, indent + 1);
        PrintTriangle (1, indent);
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19389439_19389640_20_43
19389439_19394616_3_28
Title: splitting strings with C 
----------------------------------------

int main () {
    char in_name [50], first [25], last [25];
    char name [100];
    char *pch;
    printf ("What is your name? ");
    gets (in_name);
    printf ("Hello \"%s\" here is your First and Last Name:\n", in_name);
    insert_spaces (in_name, name);
    pch = strtok (name, " ");
    while (pch != NULL) {
        printf ("%s\n", pch);
        pch = strtok (NULL, " ");
    }
    return 0;
}
----------------------------------------

int main () {
    char name [50];
    printf ("What is your name? ");
    fgets (name, 49, stdin);
    printf ("Hello. Your name is ");
    int ii = 1, foundSpace = 0;
    printf ("%c", name [0]);
    while (name[ii] != '\0') {
        if (name[ii] == ' ')
            foundSpace = 1;
        if (foundSpace == 0 && isupper (name[ii])) {
            printf (" %c", name [ii]);
        }
        else {
            putchar (name [ii]);
            foundSpace = 0;
        }
        ii++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19401267_19401410_3_19
19401267_19402476_4_29
Title: Segmentation Fault(core dumped) 
----------------------------------------

int main () {
    FILE *input;
    FILE *output;
    char date [9];
    input = fopen ("journal.txt", "r");
    if (input == NULL) {
        perror ("Could not open input file");
        return -1;
    }
    output = fopen ("output.txt", "w");
    if (output == NULL) {perror ("Could not open output file");
    fclose (input);
    return -1;
}
----------------------------------------

int main () {
    FILE *input = fopen ("journal.txt", "r");
    FILE *output = fopen ("output.txt", "w");
    char date [9];
    if (input) {
        fscanf (input, "%s", date);
        fgets (date, 9, input);
    }
    else {
        printf ("error opening the file");
    }
    if (output) {
        fputs (date, output);
    }
    else {printf ("error opening the file");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19402974_19407448_29_47
19402974_19418488_61_81
Title: Write a function that rearranges a linked list to put the nodes in even positions after the nodes in odd positions in the list 
----------------------------------------

int main (void) {
    struct list *root, *ptr;
    root = arr;
    for (ptr = root; ptr; ptr = ptr->next) {
        printf ("-> %c", ptr -> ch);
    }
    printf ("\n");
    printf ("Swap\n");
    swap_odd_even (& root);
    for (ptr = root; ptr; ptr = ptr->next) {
        printf ("-> %c", ptr -> ch);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    struct node *head = (struct node *) malloc (LIST_LENGTH * sizeof (struct node));
    struct node *mem = head;
    if (NULL == head) {
        return -1;
    }
    struct node *current = head;
    for (i = 0; i < LIST_LENGTH - 1; i++) {
        current->next = current + 1;
        current->id = i;
        current = current->next;
    }
    current->next = NULL;
    current->id = i;
    head = reorder_list (head);
    print_list (head);
    free (mem);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19416981_19426724_14_34
19416981_19427994_7_20
Title: Running luajit object file from C 
----------------------------------------

int main () {
    lua_State *L = luaL_newstate ();
    luaL_openlibs (L);
    lua_getglobal (L, "package");
    lua_getfield (L, - 1, "preload");
    bool err = luaL_loadbuffer (L, luaJIT_BC_test, luaJIT_BC_test_SIZE, NULL);
    assert (! err);
    lua_setfield (L, - 2, "test");
    lua_settop (L, 0);
    err = luaL_dostring (L, runtest);
    assert (! err);
    lua_close (L);
}
----------------------------------------

int main (int argc, char **argv) {
    int status;
    lua_State *L = luaL_newstate ();
    luaL_openlibs (L);
    lua_getglobal (L, "require");
    lua_pushliteral (L, "main");
    status = lua_pcall (L, 1, 0, 0);
    if (status) {
        fprintf (stderr, "Error: %s\n", lua_tostring (L, - 1));
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19422443_19422711_5_26
19422443_19425280_7_30
Title: localtime() function shows two equals date 
----------------------------------------

int main () {
    time_t time1, time2;
    struct tm timeinfo1, timeinfo2, *ti;
    char time1str [256], time2str [256], *tstr;
    time1 = 3600;
    time2 = 3720;
    ti = localtime (&time1);
    memcpy (& timeinfo1, ti, sizeof (* ti));
    ti = localtime (&time2);
    memcpy (& timeinfo2, ti, sizeof (* ti));
    tstr = asctime (&timeinfo1);
    strncpy (time1str, tstr, sizeof (time1str) - 1);
    tstr = asctime (&timeinfo2);
    strncpy (time2str, tstr, sizeof (time1str) - 1);
    puts (time1str);
    puts (time2str);
    return 0;
}
----------------------------------------

int main (void) {
    time_t time1 = 3600;
    time_t time2 = 3720;
    struct tm timeinfo1 = {0};
    struct tm timeinfo2 = {0};
    char time1str [32] = "";
    char time2str [32] = "";
    localtime_r (& time1, & timeinfo1);
    localtime_r (& time2, & timeinfo2);
    asctime_r (& timeinfo1, timestr1);
    asctime_r (& timeinfo2, timestr2);
    puts (time1str);
    puts (time2str);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19442991_20560658_3_68
19442991_26377164_4_94
Title: c program for a simple ATM machine using if and else if 
----------------------------------------

int main () {
    int card_number, choice;
    float amount = 3000.00, withdraw = 0.0, deposit, new_amount = 0;
    char password;
    clrscr ();
    printf (" INSERT YOUR ATM CARD : ");
    printf ("\n\n");
    printf (" Enter the Password: ");
    scanf ("%s", & password);
    clrscr ();
    printf ("\n\t***********************************");
    printf ("\n\t*           MENU                  *");
    printf ("\n\t*     1. Check Balance            *");
    printf ("\n\t*     2. Withdraw                 *");
    printf ("\n\t*     3. Deposit                  *");
    printf ("\n\t*     4. Exit                     *");
    printf ("\n\t*                                 *");
    printf ("\n\t***********************************");
    printf ("\n\n");
S :
    printf ("\n Enter your choice: ");
    scanf ("%d", & choice);
    if (choice == 1) {
        printf (" Current balance on your account: %f\n", amount);
        goto S;
    }
    else if (choice == 2) {
        printf (" Enter the amount you want to withdraw: ");
        scanf ("%f", & withdraw);
        if (withdraw > amount) {
            printf (" \n You don't have sufficient balance\n ");
            goto S;
        }
        else {
            amount = amount - withdraw;
            printf (" \n Current balance on your account: %f\n", amount);
            goto S;
        }
    }
    else if (choice == 3) {
        printf (" \n Enter the amount you want to deposit: ");
        scanf ("%f", & deposit);
        amount = amount + deposit;
        printf (" \n Current balance on your account: %f\n", amount);
        goto S;
    }
    else if (choice == 4) {
        printf (" \n Thank you for using our service\n\n");
        getch ();
    }
    else {
        printf (" \n Enter correct Choice and Try Again \n\n");
        goto S;
    }
    getch ();
    return 0;
}
----------------------------------------

int main () {
    int password;
    for (int i = 0; i < 3; i++) {
        cout << "enter password:\n";
        cin >> password;
        if (password == 123456) {
            cout << "correct!!!\n";
            double balance = 10000;
            double withdraw, deposit;
            int option;
            cout << "\n";
            cout << "            ***Western Ace***\n";
            cout << "*** Automated Teller Machine***" << endl;
            cout << "Choose a Transaction:\n";
            cout << "\n";
            cout << "[1] Inquire Balance \n" << "[2] Withdraw \n" << "[3] Deposit \n" << "[4] Quit \n" << "\n" << "Enter Option:";
            cin >> option;
            switch (option) {
            case 1 :
                cout << "\n[[[BALANCE INQUIRY]]]\n";
                cout.setf (ios : : fixed);
                cout.setf (ios : : showpoint);
                cout.precision (2);
                cout << "\n Your current balance is $" << balance << endl;
                break;
            case 2 :
                cout << "\n[[[WITHDRAW]]]\n";
                cout << "Enter amount: $";
                cin >> withdraw;
                balance = balance - withdraw;
                cout.setf (ios : : fixed);
                cout.setf (ios : : showpoint);
                cout.precision (2);
                cout << "You withdrew $" << withdraw << endl;
                cout << "Your remaining balance is $" << balance << endl;
                continue;
            case 3 :
                cout << "\n[[[DEPOSIT]]]\n";
                cout << "Enter amount: $";
                cin >> deposit;
                balance = balance + deposit;
                cout.setf (ios : : fixed);
                cout.setf (ios : : showpoint);
                cout.precision (2);
                cout << "You deposited $" << deposit << endl;
                cout << "Your new balance is $" << balance << endl;
                continue;
            case 4 :
                cout << "\n***[[[EXIT MODE]]]***\n";
                break;
            default :
                cout << "\n That is an invalid option \n";
            }
            break;
        }
        else
            cout << "Pls try again!!!\n";
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19447150_19447253_4_19
19447150_19447297_4_39
Title: I want to find the ascii value of this string and the average number of character 
----------------------------------------

int main () {
    char str [100];
    int i = 0;
    printf ("Enter any string: ");
    fgets (str, sizeof (str), stdin);
    printf ("ASCII values of each characters of given string: ");
    while (str[i])
        printf ("%d ", str[i++]);
    return 0;
}
----------------------------------------

int main () {
    char str [100];
    int sum = 0;
    int average = 0;
    int i = 0;
    printf ("Enter any string: ");
    str[i] = getchar ();
    while (str[i] != '\n') {
        str[i + 1] = getchar ();
        i++;
    }
    str[i] = '\0';
    printf ("%s\n", str);
    i = 0;
    printf ("ASCII values of each characters of given string: ");
    while (str[i] != '\0') {
        sum = sum + str[i];
        printf ("%d ", str [i ++]);
    }
    average = sum / (i - 1);
    printf ("\nAverage = %d\n", average);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462948_19462973_5_37
19462948_19462976_1_29
Title: C Programming min and max of array 
----------------------------------------

int main (void) {
    int i = 0;
    int a [11];
    int min = 0;
    int max = 0;
    srandom ((unsigned) time (NULL));
    a[0] = random () % 100;
    min = a[0];
    for (i = 1; i < 11; i++) {
        a[i] = random () % 100;
        printf ("%d\n", a [i]);
        if (a[i] > max) {
            max = a[i];
        }
        if (a[i] < min) {
            min = a[i];
        }
    }
    printf ("Min: %d\n", min);
    printf ("Max: %d\n", max);
    return 0;
}
----------------------------------------

int main (void) {
    int i = 0;
    int a [11];
    int min;
    int max;
    srandom ((unsigned) time (NULL));
    for (i = 0; i < 11; i++)
        a[i] = random () % 100;
    min = a[0];
    max = a[0];
    for (i = 1; i < 11; i++) {
        printf ("%d\n", a [i]);
        if (a[i] > max) {
            max = a[i];
        }
        else if (a [i] < min) {min = a [i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462948_19462976_1_29
19462948_51365949_5_35
Title: C Programming min and max of array 
----------------------------------------

int main (void) {
    int i = 0;
    int a [11];
    int min;
    int max;
    srandom ((unsigned) time (NULL));
    for (i = 0; i < 11; i++)
        a[i] = random () % 100;
    min = a[0];
    max = a[0];
    for (i = 1; i < 11; i++) {
        printf ("%d\n", a [i]);
        if (a[i] > max) {
            max = a[i];
        }
        else if (a [i] < min) {min = a [i];
    }
}
----------------------------------------

int main (void) {
    int i = 0;
    int a [11];
    int min = 100;
    int max = 0;
    srandom ((unsigned) time (NULL));
    for (i = 0; i < 11; i++) {
        a[i] = random () % 100;
        printf ("%d\n", a [i]);
        if (a[i] > max) {
            max = a[i];
        }
        else if (a[i] < min) {
            min = a[i];
        }
    }
    printf ("Min: %d\n", min);
    printf ("Max: %d\n", max);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19468556_19468597_1_11
19468556_35342861_1_19
Title: Converting char array to int array 
----------------------------------------

int main (int argc, char *argv []) {
    char y [10] = "0123456789";
    char x [3];
    int i;
    x[0] = y[8];
    x[1] = y[9];
    x[2] = '\0';
    i = atoi (x);
}
----------------------------------------

int main (void) {
    int x = 0;
    int y = 0 char input [12] = {0};
    scanf ("%s", & input [0]);
    int ch_len = strlen (input) / sizeof (char);
    int digit [ch_len];
    fflush (stdin);
    while (input[y] != '\0') {
        if (isdigit (input[y])) {
            digit[x++] = input[y++] - '0';
            count++;
        }
        else
            y++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19468556_19468597_1_11
19468556_45958488_32_43
Title: Converting char array to int array 
----------------------------------------

int main (int argc, char *argv []) {
    char y [10] = "0123456789";
    char x [3];
    int i;
    x[0] = y[8];
    x[1] = y[9];
    x[2] = '\0';
    i = atoi (x);
}
----------------------------------------

int main (void) {
    printf ("Hello :)\n");
    char *buf = "This is mixed string 3 0 12 233 18 100 321 and 231 123345";
    int k = 0;
    int dst [9] = {0};
    k = atoia (buf, dst, 9);
    while (k--) {
        printf ("Number: %d: %d\n", k, dst [k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19468556_35342861_1_19
19468556_45958488_32_43
Title: Converting char array to int array 
----------------------------------------

int main (void) {
    int x = 0;
    int y = 0 char input [12] = {0};
    scanf ("%s", & input [0]);
    int ch_len = strlen (input) / sizeof (char);
    int digit [ch_len];
    fflush (stdin);
    while (input[y] != '\0') {
        if (isdigit (input[y])) {
            digit[x++] = input[y++] - '0';
            count++;
        }
        else
            y++;
    }
}
----------------------------------------

int main (void) {
    printf ("Hello :)\n");
    char *buf = "This is mixed string 3 0 12 233 18 100 321 and 231 123345";
    int k = 0;
    int dst [9] = {0};
    k = atoia (buf, dst, 9);
    while (k--) {
        printf ("Number: %d: %d\n", k, dst [k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19469365_19469529_3_30
19469365_25813100_1_17
Title: Binary search in C using recursive function with return type 
----------------------------------------

int binary_search (int array [], int low, int high, int key) {
    if (low == high) {
        if (array[low] == key) {
            printf ("Key found at index %d \n", low);
            return 1;
        }
        else
            return 0;
    }
    int mid = (high + low) / 2;
    if (low < high) {
        if (array[mid] == key) {
            printf ("Key found at index %d \n", mid);
            return 1;
        }
        else if (array[mid] > key)
            return binary_search (array, low, mid, key);
        else
            return binary_search (array, mid +1, high, key);
    }
    else
        return 0;
}
----------------------------------------

int binary_search (int array [], int low, int high, int key) {
    int mid = (high + low) / 2;
    if (array[mid] == key) {
        return mid;
    }
    if (low < high) {
        if (array[mid] > key)
            return binary_search (array, low, mid, key);
        else
            return binary_search (array, mid +1, high, key);
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19470987_19471027_1_15
19470987_19471042_1_12
Title: write a code for the following function using struct pointers and array 
----------------------------------------

struct arrayData *createArray (int size) {
    struct arrayData *str = (struct arrayData *) malloc (sizeof (struct arrayData));
    int a = 10;
    int *arr = (int *) malloc (size * sizeof (int));
    str->size = size;
    for (a = 0; a < 10; a++) {
        arr[i] = a;
    }
    str->array = arr;
    return str;
}
----------------------------------------

struct arrayData *createArray (int size) {
    struct arrayData *str = malloc (sizeof (struct arrayData));
    int a = 10;
    str->array = malloc (size * sizeof (int));
    str->size = size;
    for (a = 0; a < 10; a++) {
        str->array[i] = a;
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19477897_19479007_3_20
19477897_19479532_37_50
Title: convert particular array elements as integer value 
----------------------------------------

int main () {
    char Buffer [100] = "01 05 01 4A 63 41";
    const char *h = &Buffer[0];
    int i;
    while (*h != 0) {
        if (sscanf (h, "%2x", &i) == 1) {
            printf ("0x%02X (%d)\n", i, i);
        }
        h += 3;
    }
    return 0;
}
----------------------------------------

int main () {
    char Buffer [100] = "01 2A 10 15 20 25";
    int intarr [100], current = 0;
    char *tok = malloc (20 * sizeof (char));
    tok = strtok (Buffer, " ");
    while (tok != NULL) {
        intarr[current] = hexToInt (tok);
        current++;
        tok = strtok (NULL, " ");
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19478068_19478397_2_21
19478068_19479732_5_27
Title: A binary to decimal program 
----------------------------------------

int main () {
    int a, i, p, sum = 0;
    int temp;
    printf ("enter binary number\n");
    scanf ("%d", & a);
    for (i = 0; i < 5; i++) {
        temp = a % 10;
        a = a / 10;
        p = temp << i;
        sum = sum + p;
    }
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------

int main () {
    int pv = 1;
    int value = 0;
    char bin [33];
    printf ("Enter binary number: ");
    scanf ("%32s", bin);
    for (int i = strlen (bin) - 1; i >= 0; i--) {
        if (bin[i] == '1') {
            value |= pv;
        }
        pv <<= 1;
    }
    printf ("%d\n", value);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19486808_19486907_3_16
19486808_19488839_1_17
Title: How to take first letter from C string? 
----------------------------------------

int main (void) {
    char firstname [256];
    char lastname [256];
    printf ("What's your first name? ");
    if (scanf ("%255s", firstname) != 1)
        return 1;
    printf ("What's your last  name? ");
    if (scanf ("%255s", lastname) != 1)
        return 1;
    printf ("Your school.edu e-mail address is: %c%s2@school.edu\n", firstname [0], lastname);
    return 0;
}
----------------------------------------

void main (void) {
    char fname = 0;
    char lname [256] = {0};
    printf ("Enter firstname\n");
    scanf ("%c", & fname);
    printf ("Enter lastname\n");
    scanf ("%s", lname);
    lname[1] = fname;
    printf ("Your school.edu e-mail address is: %c%s2@school.edu\n", fname, lname);
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19508712_19509111_1_18
19508712_19521841_1_10
Title: C optimzation techniques 
----------------------------------------

void autocorrelation (float * restrict data, float * restrict r) {
    float *data_end = data + N;
    for (int m = 0; m < P + 1; m++) {
        float temp = 0;
        for (float *data_n = data, *data_nm = data + m; data_nm != data_end; data_n++, data_nm++) {
            temp += *data_n * *data_nm;
        }
        r[m] = temp;
    }
}
----------------------------------------

void autocorrelation (int32_t *data, float *r) {
    int m, n;
    for (m = 0; m < P + 1; m++)
        r[m] = 0.0f;
    for (n = 0; n < N; n++) {
        int limit = min (P +1, N -n);
        for (m = 0; m < limit; m++) {
            r[m] += data[n] * data[n + m];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19520008_19523635_3_28
19520008_41673295_6_53
Title: Arrays in a Palindrome program 
----------------------------------------

int main () {
    char word [100];
    int length, counter;
    printf ("Please enter a word: ");
    scanf ("%s", word);
    length = strlen (word);
    int flag = 1;
    for (counter = 0; counter < length / 2 && flag; counter++) {
        if (word[counter] != word[length - counter - 1]) {
            flag = 0;
            break;
        }
    }
    if (flag) {
        printf ("%s is a palindrome!\n", word);
    }
    else {
        printf ("%s is NOT a palindrome\n!", word);
    }
}
----------------------------------------

int main () {
    int arr_size;
    int flag = 0;
    cout << "Enter The Array Size: \n->arr[";
    cin >> arr_size;
    cout << " ]";
    int arr [arr_size];
    for (int i = 0; i < arr_size; i++) {
        cout << "Enter Value For Arr[ " << i << " ]  -> ";
        cin >> arr[i];
    }
    for (int k = 0, j = arr_size - 1; k < arr_size && j > -1; k++) {
        if (arr [i] == arr [j];
        {
            flag++;
        }
    }
    if (flag == arr_size) {
        cout << "Array Is Palindrome: ";
    }
    else {
        cout << "Array Is Not Palindrome: ";
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1952175_1952223_1_26
1952175_1952286_3_25
Title: How to call the function using function pointer? 
----------------------------------------

int main () {
    bool (*choice) ();
    if (x == 1)
        choice = A;
    else if (x == 2)
        choice = B;
    else
        choice = C;
    if (choice ())
        printf ("Success\n");
    else
        printf ("Failure\n");
    ..................
}
----------------------------------------

int main (void) {
    ......printf ("Enter your choice");
    scanf ("%d", & a);
    switch (a) {
    case 0 :
        fptr = A;
        break;
    case 1 :
        fptr = B;
        break;
    case 2 :
        fptr = C;
        break;
    case 3 :
        break;
    }
    (*fptr) ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1952175_1952223_1_26
1952175_1953512_13_40
Title: How to call the function using function pointer? 
----------------------------------------

int main () {
    bool (*choice) ();
    if (x == 1)
        choice = A;
    else if (x == 2)
        choice = B;
    else
        choice = C;
    if (choice ())
        printf ("Success\n");
    else
        printf ("Failure\n");
    ..................
}
----------------------------------------

int main (void) {
    int (*a) ();
    int (*b) (void);
    a = test_zero;
    printf ("a: %d\n", a ());
    a = test_one;
    printf ("a: %d\n", a ());
    b = test_zero;
    printf ("b: %d\n", b ());
    b = test_one;
    printf ("b: %d\n", b ());
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1952175_1952286_3_25
1952175_1953512_13_40
Title: How to call the function using function pointer? 
----------------------------------------

int main (void) {
    ......printf ("Enter your choice");
    scanf ("%d", & a);
    switch (a) {
    case 0 :
        fptr = A;
        break;
    case 1 :
        fptr = B;
        break;
    case 2 :
        fptr = C;
        break;
    case 3 :
        break;
    }
    (*fptr) ();
    return 0;
}
----------------------------------------

int main (void) {
    int (*a) ();
    int (*b) (void);
    a = test_zero;
    printf ("a: %d\n", a ());
    a = test_one;
    printf ("a: %d\n", a ());
    b = test_zero;
    printf ("b: %d\n", b ());
    b = test_one;
    printf ("b: %d\n", b ());
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19535622_19535838_4_22
19535622_19536018_6_23
Title: How to retrieve multiple substrings of a string and write them into one string in C? 
----------------------------------------

int main (void) {
    char *inputStr = "abcde";
    char buff [500];
    strcpy (buff, "IN(");
    int i, len = strlen (inputStr);
    for (i = 0; i < len; ++i) {
        strcat (buff, "'");
        strncat (buff, inputStr, i + 1);
        strcat (buff, "'");
        if (i != len - 1)
            strcat (buff, ",");
    }
    strcat (buff, ")");
    printf ("%s", buff);
    return 0;
}
----------------------------------------

int main () {
    const char *inputStr = "abcde";
    char buff [500];
    int count = 0;
    for (int i = 0; i < (int) strlen (inputStr); i++) {
        for (int j = 0; j <= i; j++) {
            buff[count++] = inputStr[j];
        }
        buff[count++] = ',';
    }
    buff[--count] = '\0';
    cout << buff;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1954635_1954657_5_21
1954635_1954696_8_22
Title: append chars to get a string 
----------------------------------------

int main (int argc, char *argv []) {
    char *str = "Hello World";
    size_t length = strlen (str);
    char *s = (char *) malloc (sizeof (char) * (length + 1));
    strcpy (s, str);
    s[length] = '\0';
    printf ("%s", s);
    free (s);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *str = "Hello World";
    char s [MAX];
    int i = 0, j = 0;
    for (; i < strlen (str) - LESS; i++) {
        s[j++] = *(str + i);
    }
    s[j] = '\0';
    printf ("%s\n", s);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1954635_1954657_5_21
1954635_1954744_1_15
Title: append chars to get a string 
----------------------------------------

int main (int argc, char *argv []) {
    char *str = "Hello World";
    size_t length = strlen (str);
    char *s = (char *) malloc (sizeof (char) * (length + 1));
    strcpy (s, str);
    s[length] = '\0';
    printf ("%s", s);
    free (s);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *str = "Hello World";
    char *s = malloc (strlen (str));
    int i = 0;
    for (; i < strlen (str) - 5; i++) {
        s[i] = *(str + i);
    }
    s[i] = 0;
    printf (s);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1954635_1954696_8_22
1954635_1954744_1_15
Title: append chars to get a string 
----------------------------------------

int main (int argc, char *argv []) {
    char *str = "Hello World";
    char s [MAX];
    int i = 0, j = 0;
    for (; i < strlen (str) - LESS; i++) {
        s[j++] = *(str + i);
    }
    s[j] = '\0';
    printf ("%s\n", s);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *str = "Hello World";
    char *s = malloc (strlen (str));
    int i = 0;
    for (; i < strlen (str) - 5; i++) {
        s[i] = *(str + i);
    }
    s[i] = 0;
    printf (s);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19551030_19554315_1_45
19551030_19554881_1_18
Title: Binary Search Tree node insertion not working properly 
----------------------------------------

void insert_node (int k) {
    struct node *nodnou, *flow, *parent;
    nodnou = (struct node *) malloc (sizeof (node));
    nodnou->st = NULL;
    nodnou->dr = NULL;
    nodnou->nr = k;
    parent = NULL;
    if (root == NULL) {
        root = nodnou;
    }
    else {
        flow = root;
        while (flow != NULL) {
            parent = flow;
            if (k < flow->nr) {
                flow = flow->st;
            }
            else {
                flow = flow->dr;
            }
        }
        if (k < parent->nr) {
            parent->st = nodnou;
        }
        else {
            parent->dr = nodnou;
        }
    }
}
----------------------------------------

void insert_node (struct node **pp, int k) {
    while (*pp) {
        if (k < (*pp)->nr)
            pp = &(*pp)->st;
        else if ((*pp)->nr < k)
            pp = &(*pp)->dr;
        else
            return;
    }
    *pp = malloc (sizeof (**pp));
    (*pp)->st = (*pp)->dr = NULL;
    (*pp)->nr = k;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19557262_19557754_2_22
19557262_53511025_3_24
Title: "print a list of numbers replace numbers with words multiples of 35 also 3and5 C" 
----------------------------------------

int main () {
    int x;
    for (x = 1; x <= 100; x++) {
        if (x % 3 == 0) {
            printf ("fizz");
        }
        if (x % 5 == 0) {
            printf ("buzz");
        }
        if (x % 3 && x % 5) {
            printf ("%d", x);
        }
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    int x, y;
    printf ("this should count from 1 to 100, and instead of printing the multiples of 3 or 5 or 3 and 5 it should print words\n");
    for (x = 1; x <= 100; x++) {
        if (x % 3 == 0 && x % 5 == 0) {
            printf ("FizzBuzz\n");
        }
        else if (x % 3 == 0) {
            printf ("fizz\n");
        }
        else if (x % 5 == 0) {
            printf ("buzz\n");
        }
        else
            printf ("%d\n", x);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19558370_19558403_10_21
19558370_19564070_9_25
Title: Accessing an array present in main in a function 
----------------------------------------

int main () {
    int a [SIZE];
    int i;
    for (i = 0; i < SIZE; i++) {
        a[i] = 4;
    }
    for (i = 0; i < SIZE; i++) {
        printf ("array has %d\n", a [i]);
    }
    sample (a);
}
----------------------------------------

int main () {
    int count = 3;
    int a [count];
    int i;
    for (i = 0; i < count; i++) {
        a[i] = 4;
    }
    for (i = 0; i < count; i++) {
        printf ("array has %d\n", a [i]);
    }
    sample (a);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19558370_19558403_10_21
19558370_19565481_10_26
Title: Accessing an array present in main in a function 
----------------------------------------

int main () {
    int a [SIZE];
    int i;
    for (i = 0; i < SIZE; i++) {
        a[i] = 4;
    }
    for (i = 0; i < SIZE; i++) {
        printf ("array has %d\n", a [i]);
    }
    sample (a);
}
----------------------------------------

int main () {
    int a [3];
    int i;
    for (i = 0; i < 3; i++)
        ;
    {
        a[i] = 4;
    }
    printf ("\nArray has:");
    for (i = 0; i < 3; i++) {
        printf ("\n%d", a [i]);
    }
    sample (& a [0], 3)
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19558370_19564070_9_25
19558370_19565481_10_26
Title: Accessing an array present in main in a function 
----------------------------------------

int main () {
    int count = 3;
    int a [count];
    int i;
    for (i = 0; i < count; i++) {
        a[i] = 4;
    }
    for (i = 0; i < count; i++) {
        printf ("array has %d\n", a [i]);
    }
    sample (a);
}
----------------------------------------

int main () {
    int a [3];
    int i;
    for (i = 0; i < 3; i++)
        ;
    {
        a[i] = 4;
    }
    printf ("\nArray has:");
    for (i = 0; i < 3; i++) {
        printf ("\n%d", a [i]);
    }
    sample (& a [0], 3)
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19566776_19567295_9_53
19566776_19567991_3_32
Title: How to create C program to determine lagest number by entered value? 
----------------------------------------

int main (int argc, char *argv []) {
    char c;
    signed int count = 0;
    unsigned int fireErrorMessage = 0;
    do {
        if (fireErrorMessage == 1) {
            printf ("You entered not a positive natural number. Please enter a number >0 Examples: 1 22 4012\n");
        }
        if (fireErrorMessage == 0) {
            fireErrorMessage = 1;
        }
        printf ("How many integers do you want to insert (Inser a number >0)? ");
    }
    while (((scanf ("%d%c", &count, &c) != 2 || c != '\n') && clean_stdin ()) || count < 1);
    signed int indexOfNumber;
    signed int highestNumberIndex;
    double highestNumber;
    fireErrorMessage = 0;
    for (indexOfNumber = 1; indexOfNumber <= count; indexOfNumber++) {
        double scannedNumber;
        do {
            if (fireErrorMessage == 1) {
                printf ("You entered not a number. Please enter a number. Examples: 3.0 -1 14\n");
            }
            if (fireErrorMessage == 0) {
                fireErrorMessage = 1;
            }
            printf ("Input number %d: ", indexOfNumber);
        }
        while (((scanf ("%lf%c", &scannedNumber, &c) != 2 || c != '\n') && clean_stdin ()));
        fireErrorMessage = 0;
        if (indexOfNumber == 1 || scannedNumber > highestNumber) {
            highestNumberIndex = indexOfNumber;
            highestNumber = scannedNumber;
        }
    }
    printf ("Highest input number on index %d, the value is about %.2lf\n", highestNumberIndex, highestNumber);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    double a, b = 0;
    printf ("limit of n input: ");
    scanf ("%lf", & n);
    if (n < 0) {
        printf ("value of n cannot be negative");
        return 0;
    }
    else if (n == 0)
        return 0;
    else if (isnan (n))
        return 0;
    else {
        for (i = 1; i <= n; i++) {
            scanf ("%lf", & a);
            if (!isnan (a) && a > 0) {
                if (a > b)
                    b = a;
            }
        }
        printf ("%.2lf", b);
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19572183_19572333_1_18
19572183_19572357_1_21
Title: Concatenating two strings in C and placing the result into a third string 
----------------------------------------

int main (void) {
    char *str1 = "Hello";
    char *str2 = "World!";
    int size = strlen (str1) + strlen (str2);
    char *str3 = (char *) malloc (size +1);
    char *str_mod = str3;
    while ((*str_mod++ = *str1++) != '\0')
        ;
    str_mod--;
    while ((*str_mod++ = *str2++) != '\0')
        ;
    printf ("%s", str3);
    free (str3);
    return 0;
}
----------------------------------------

int main (void) {
    char *str1 = "Hello";
    char *str2 = "World";
    int size1 = strlen (str1);
    int size2 = strlen (str2);
    int i = 0;
    char *out = malloc (sizeof (char) * (size1 + size2) + 1);
    for (i = 0; i < size1; i++) {
        out[i] = str1[i];
    }
    for (i = 0; i < size2; i++) {
        out[i + size1] = str2[i];
    }
    out [strlen (out) - 1] = \ 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19572696_19573008_32_46
19572696_19573110_4_26
Title: Read and write matrix 
----------------------------------------

int main () {
    int *a;
    int r, c, i, j;
    scanf ("%d%d", & r, & c);
    a = (int *) malloc (r *c * sizeof (int));
    scanmatrix (& a, r, c);
    printmatrix (& a, r, c);
    return (0);
}
----------------------------------------

int main () {
    int *p, i, j;
    p = (int *) malloc (ROW *COL * sizeof (int));
    for (i = 0; i < ROW; i++) {
        for (j = 0; j < COL; j++) {
            scanf ("%d\t", & p [i * COL + j]);
        }
        printf ("\n");
    }
    for (i = 0; i < ROW; i++) {
        for (j = 0; j < COL; j++) {
            printf ("%d\t", p [i * COL + j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19575647_19576028_23_37
19575647_19576192_1_27
Title: C program for stddev/mean 
----------------------------------------

void calc (float *arr, int arr_size, float *mean, float *stdev) {
    float sum = 0;
    int i;
    for (i = 0; i < arr_size; ++i) {
        sum += arr[i];
    }
    *mean = sum / arr_size;
    printf ("%.2f ", * mean);
    sum = 0;
    for (i = 0; i < arr_size; ++i) {
        sum += pow ((arr[i] - *mean), 2);
    }
    *stdev = sqrt ((sum / arr_size));
    printf ("%.2f", * stdev);
}
----------------------------------------

void calc (float arr [], int arr_size, float *_mean, float *_stdev) {
    double sum, mean, stddev;
    int i;
    sum = 0.0;
    for (i = 0; i < arr_size; ++i) {
        sum += arr[i];
    }
    printf ("sum %f\n", sum);
    *_mean = mean = sum / arr_size;
    printf ("mean %f\n", mean);
    printf ("%.2f\n", * _mean);
    sum = 0.0;
    for (i = 0; i < arr_size; ++i) {
        sum += pow ((arr[i] - mean), 2);
    }
    printf ("sum^2 %f\n", sum);
    *_stdev = stddev = sqrt ((sum / arr_size));
    printf ("stddev %f\n", stddev);
    printf ("%.2f\n", * _stdev);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1957647_1957857_4_48
1957647_1958082_5_81
Title: Print the digits of a number in reverse order without arrays or functions 
----------------------------------------

int main () {
    int num, base, remainder, quotient;
    int divider;
    printf ("please enter a positive number to convert: ");
    scanf ("%d", & num);
    printf ("please enter the base to convert to: ");
    scanf ("%d", & base);
    remainder = quotient = 1;
    if (num < 0 || base < 0) {
        printf ("Error - all numbers must be positive integers!\n");
        return 1;
    }
    divider = base;
    while (num / divider > base) {
        divider *= base;
    }
    do {
        remainder = num / divider;
        num -= remainder * divider;
        divider /= base;
        if (remainder >= 10) {
            printf ("%c", remainder + 55);
        }
        else {
            printf ("%d", remainder);
        }
    }
    while (divider);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int nr, base, res, tp, tpb, tpbt, r, rnr, lp, lpt, i;
    float baset, rt;
    printf ("nr=");
    scanf ("%d", & nr);
    printf ("base=");
    scanf ("%d", & base);
    res = 0;
    if (nr < 0 || base < 2) {
        res = 1;
    }
    else {
        lp = 0;
        baset = base;
        while (baset > 1) {
            lp++;
            baset /= 10;
        }
        tpb = 1;
        while ((lp--) > 0) {
            tpb *= 10;
        }
        tp = 0;
        rnr = 0;
        while (nr > 0) {
            r = nr % base;
            nr /= base;
            rt = r;
            lpt = 0;
            while (rt > 1) {
                lpt++;
                rt /= 10;
            }
            tpbt = tpb;
            for (i = 0; i < lpt; i++) {
                tpbt /= 10;
            }
            rnr += r * pow ((double) (tpbt), (double) (tp++));
        }
    }
    printf ("number is: %d \n", rnr);
    return (res);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1957647_1957857_4_48
1957647_1958411_3_52
Title: Print the digits of a number in reverse order without arrays or functions 
----------------------------------------

int main () {
    int num, base, remainder, quotient;
    int divider;
    printf ("please enter a positive number to convert: ");
    scanf ("%d", & num);
    printf ("please enter the base to convert to: ");
    scanf ("%d", & base);
    remainder = quotient = 1;
    if (num < 0 || base < 0) {
        printf ("Error - all numbers must be positive integers!\n");
        return 1;
    }
    divider = base;
    while (num / divider > base) {
        divider *= base;
    }
    do {
        remainder = num / divider;
        num -= remainder * divider;
        divider /= base;
        if (remainder >= 10) {
            printf ("%c", remainder + 55);
        }
        else {
            printf ("%d", remainder);
        }
    }
    while (divider);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int num, saved, base, remainder;
    int quotient, prev_q, stop_q, just_printed;
    printf ("please enter a positive number to convert: ");
    scanf ("%d", & num);
    printf ("please enter the base to convert to: ");
    scanf ("%d", & base);
    saved = num;
    remainder = quotient = prev_q = just_printed = 1;
    stop_q = 0;
    if (num <= 0 || base <= 0) {
        printf ("Error - all numbers must be positive integers!\n");
        return 1;
    }
    while (1) {
        remainder = num % base;
        quotient = num / base;
        num = quotient;
        if (quotient == stop_q) {
            if (remainder >= 10) {
                printf ("%c", remainder + 55);
            }
            else {
                printf ("%d", remainder);
            }
            if (just_printed) {
                break;
            }
            stop_q = prev_q;
            num = saved;
            just_printed = 1;
        }
        else {
            just_printed = 0;
        }
        prev_q = quotient;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1957647_1958082_5_81
1957647_1958411_3_52
Title: Print the digits of a number in reverse order without arrays or functions 
----------------------------------------

int main () {
    int nr, base, res, tp, tpb, tpbt, r, rnr, lp, lpt, i;
    float baset, rt;
    printf ("nr=");
    scanf ("%d", & nr);
    printf ("base=");
    scanf ("%d", & base);
    res = 0;
    if (nr < 0 || base < 2) {
        res = 1;
    }
    else {
        lp = 0;
        baset = base;
        while (baset > 1) {
            lp++;
            baset /= 10;
        }
        tpb = 1;
        while ((lp--) > 0) {
            tpb *= 10;
        }
        tp = 0;
        rnr = 0;
        while (nr > 0) {
            r = nr % base;
            nr /= base;
            rt = r;
            lpt = 0;
            while (rt > 1) {
                lpt++;
                rt /= 10;
            }
            tpbt = tpb;
            for (i = 0; i < lpt; i++) {
                tpbt /= 10;
            }
            rnr += r * pow ((double) (tpbt), (double) (tp++));
        }
    }
    printf ("number is: %d \n", rnr);
    return (res);
}
----------------------------------------

int main () {
    int num, saved, base, remainder;
    int quotient, prev_q, stop_q, just_printed;
    printf ("please enter a positive number to convert: ");
    scanf ("%d", & num);
    printf ("please enter the base to convert to: ");
    scanf ("%d", & base);
    saved = num;
    remainder = quotient = prev_q = just_printed = 1;
    stop_q = 0;
    if (num <= 0 || base <= 0) {
        printf ("Error - all numbers must be positive integers!\n");
        return 1;
    }
    while (1) {
        remainder = num % base;
        quotient = num / base;
        num = quotient;
        if (quotient == stop_q) {
            if (remainder >= 10) {
                printf ("%c", remainder + 55);
            }
            else {
                printf ("%d", remainder);
            }
            if (just_printed) {
                break;
            }
            stop_q = prev_q;
            num = saved;
            just_printed = 1;
        }
        else {
            just_printed = 0;
        }
        prev_q = quotient;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19595659_19595772_1_33
19595659_19595812_1_18
Title: Binary Search Tree insertion not working 
----------------------------------------

void add (int value, Tree *t) {
    if (t->root == NULL) {
        t->root = nodeCreate (value);
        t->size++;
        return;
    }
    Node *cursor = t->root;
    Node *last = null;
    while (cursor != NULL) {
        last = cursor;
        if (value == cursor->value) {
            printf ("value already present in BST\n");
            return;
        }
        if (value < cursor->value) {
            cursor = cursor->left;
        }
        if (value > cursor->value) {
            cursor = cursor->right;
        }
    }
    cursor = nodeCreate (value);
    if (value > cursor->value) {
        last->right = cursor;
    }
    else {
        last->left = cursor;
    }
    t->size = t->size + 1;
}
----------------------------------------

void add (int value, Tree *t) {
    Node **pp = &(t->root);
    while (*pp) {
        if (value == (*pp)->value) {
            printf ("value already present in BST\n");
            return;
        }
        if (value < (*pp)->value)
            pp = &(*pp)->left;
        else if (value > (*pp)->value)
            pp = &(*pp)->right;
    }
    *pp = nodeCreate (value);
    t->size++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19602930_19603124_3_21
19602930_19603160_7_21
Title: clock using fflush is not clearing screen 
----------------------------------------

int main () {
    while (1) {
        time_t rawtime;
        char st [30];
        struct tm *timeinfo;
        time (& rawtime);
        timeinfo = localtime (&rawtime);
        sprintf (st, "%s", asctime (timeinfo));
        *(index (st, '\n')) = '\0';
        printf ("\r%s", st);
        flush (stdout);
        sleep (1);
    }
    return 0;
}
----------------------------------------

int main () {
    while (1) {
        time_t rawtime;
        struct tm *timeinfo;
        gotoxy (0, 0);
        time (& rawtime);
        timeinfo = localtime (&rawtime);
        printf ("%s", asctime (timeinfo));
        fflush (stdout);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19602930_19603124_3_21
19602930_19603325_12_28
Title: clock using fflush is not clearing screen 
----------------------------------------

int main () {
    while (1) {
        time_t rawtime;
        char st [30];
        struct tm *timeinfo;
        time (& rawtime);
        timeinfo = localtime (&rawtime);
        sprintf (st, "%s", asctime (timeinfo));
        *(index (st, '\n')) = '\0';
        printf ("\r%s", st);
        flush (stdout);
        sleep (1);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buf [42];
    time_t the_time [1];
    int i, len;
    printf ("The time is: ");
    for (;;) {
        time (the_time);
        len = strlen (strcpy (buf, asctime (localtime (the_time)))) - 1;
        printf ("%.*s", len, buf);
        for (i = 0; i < len; i++)
            putchar ('\b');
        fflush (stdout);
        sleep (1);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19602930_19603160_7_21
19602930_19603325_12_28
Title: clock using fflush is not clearing screen 
----------------------------------------

int main () {
    while (1) {
        time_t rawtime;
        struct tm *timeinfo;
        gotoxy (0, 0);
        time (& rawtime);
        timeinfo = localtime (&rawtime);
        printf ("%s", asctime (timeinfo));
        fflush (stdout);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buf [42];
    time_t the_time [1];
    int i, len;
    printf ("The time is: ");
    for (;;) {
        time (the_time);
        len = strlen (strcpy (buf, asctime (localtime (the_time)))) - 1;
        printf ("%.*s", len, buf);
        for (i = 0; i < len; i++)
            putchar ('\b');
        fflush (stdout);
        sleep (1);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19609904_19609946_1_12
19609904_19609965_1_12
Title: How can i print numbers on single line 
----------------------------------------

void main () {
    int i, j, result;
    for (i = 1; i <= 4; i++) {
        for (j = 1; j <= i; j++) {
            printf ("%d", i);
        }
        printf ("\n");
    }
}
----------------------------------------

void main () {
    int i, j;
    for (i = 0; i < 4; ++i) {
        for (j = 0; j < i; ++j) {
            printf ("%d", i);
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19609904_19609946_1_12
19609904_19609993_2_13
Title: How can i print numbers on single line 
----------------------------------------

void main () {
    int i, j, result;
    for (i = 1; i <= 4; i++) {
        for (j = 1; j <= i; j++) {
            printf ("%d", i);
        }
        printf ("\n");
    }
}
----------------------------------------

void main () {
    int i, j, result;
    for (i = 1; i <= 4; i++) {
        for (j = i; j <= i; j++) {
            printf ("%d", i);
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19609904_19609965_1_12
19609904_19609993_2_13
Title: How can i print numbers on single line 
----------------------------------------

void main () {
    int i, j;
    for (i = 0; i < 4; ++i) {
        for (j = 0; j < i; ++j) {
            printf ("%d", i);
        }
        printf ("\n");
    }
}
----------------------------------------

void main () {
    int i, j, result;
    for (i = 1; i <= 4; i++) {
        for (j = i; j <= i; j++) {
            printf ("%d", i);
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19611542_19611574_3_13
19611542_19612240_4_18
Title: addition of numbers using pointers 
----------------------------------------

int main () {
    int p1;
    int p2;
    int n;
    printf ("Enter number1\n");
    scanf ("%d", & p1);
    printf ("Enter number2\n");
    scanf ("%d", & p2);
    printf ("sum:%d\n", (p1 + p2));
    return 0;
}
----------------------------------------

int main () {
    int *p1;
    int *p2;
    int n;
    p1 = malloc (sizeof (int));
    p2 = malloc (sizeof (int));
    printf ("Enter number1\n");
    scanf ("%d", p1);
    printf ("Enter number2\n");
    scanf ("%d", p2);
    printf ("sum:%d\n", (* p1 + * p2));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19611542_19611582_4_14
19611542_19612240_4_18
Title: addition of numbers using pointers 
----------------------------------------

int main () {
    int p1;
    int p2;
    int n;
    printf ("Enter number1\n");
    scanf ("%d", & p1);
    printf ("Enter number2\n");
    scanf ("%d", & p2);
    printf ("sum:%d\n", (p1 + p2));
    return 0;
}
----------------------------------------

int main () {
    int *p1;
    int *p2;
    int n;
    p1 = malloc (sizeof (int));
    p2 = malloc (sizeof (int));
    printf ("Enter number1\n");
    scanf ("%d", p1);
    printf ("Enter number2\n");
    scanf ("%d", p2);
    printf ("sum:%d\n", (* p1 + * p2));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19621930_19622208_30_44
19621930_19622400_3_25
Title: C Sorting an array by integer 
----------------------------------------

int main () {
    int y;
    printf ("give integer\n");
    scanf ("%d", & y);
    int x [10] = {5, 8, 9, 4, 2, 3, 2, 4, 5, 6};
    partition (x, 10, y);
    int i;
    for (i = 0; i < 10; i++) {
        printf ("x[%d]=%d\n", i, x [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, x [10] = {5, 8, 9, 4, 2, 3, 2, 4, 5, 6};
    int *y;
    int partition;
    printf ("enter a number from 0 to 10\n");
    scanf ("%d", & partition);
    y = malloc (sizeof (int) * sizeof (x) / sizeof (x[0]) + 1);
    y = partitionArr (x, partition);
    printf ("Partition is: %d\n\n", partition);
    for (i = 0; i < sizeof (x) / sizeof (x[0]); i++) {
        printf ("y[%d] == %d\n", i, y [i]);
    }
    getchar ();
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19624333_19624451_1_32
19624333_19624675_3_17
Title: C String Reversed 
----------------------------------------

char *flip_string (const char *string) {
    char *tmp = NULL;
    size_t len = strlen (string);
    int i = 0;
    if (!(tmp = malloc (len +1))) {
        printf ("Allocation failed ...\n");
        return NULL;
    }
    tmp[len] = '\0';
    for (i = 0; i < len; i++) {
        tmp[i] = string[len - i - 1];
    }
    return tmp;
}
----------------------------------------

char *flip_string (char *str) {
    char *lhs = str, *rhs = str;
    if (!str || !*str || !*(str + 1))
        return str;
    while (*++rhs)
        ;
    while (lhs < --rhs) {
        char tmp = *lhs;
        *lhs++ = *rhs;
        *rhs = tmp;
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19631212_19631422_3_16
19631212_19631523_1_11
Title: How to get input to the system(program.exe)? 
----------------------------------------

int main () {
    int a, b;
    a = 10;
    b = 10;
    char str1 [10], str2 [10];
    char progCmdline [100];
    sprintf (str1, " %d", a);
    sprintf (str2, " %d", b);
    strcpy (progCmdline, "subprogram.exe ");
    strcat (progCmdline, str1);
    strcat (prog, str2);
    system (progCmdline);
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("needs atleast two inputs");
    }
    else {
        printf ("%d", atoi (argv [1]) + argv [2])
        );
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1963677_1963696_1_33
1963677_1963754_1_31
Title: Traversing a binary tree in C 
----------------------------------------

void traverse (struct ASTNode *root) {
    if (root != NULL) {
        switch (root->nodeType) {
        case OP :
            printf ("OP \n");
            if (root->left != NULL) {
                printf ("left - ");
                traverse (root -> left);
            }
            if (root->right != NULL) {
                printf ("right - ");
                traverse (root -> right);
            }
            break;
        case INT :
            printf ("INT - ");
            printf ("INT: %d\n", root -> value);
            break;
        case CHAR :
            printf ("CHAR - ");
            printf ("CHAR: %c\n", root -> chValue);
        }
    }
}
----------------------------------------

void traverse (struct ASTNode *root) {
    if (root == NULL)
        return;
    if (root->nodeType == OP) {
        printf ("OP \n");
        if (root->left != NULL) {
            printf ("left - ");
            traverse (root -> left);
        }
        if (root->right != NULL) {
            printf ("right - ");
            traverse (root -> right);
        }
    }
    else if (root->nodeType == INT) {
        printf ("INT - ");
        printf ("INT: %d\n", root -> value);
    }
    else if (root->nodeType == CHAR) {
        printf ("CHAR - ");
        printf ("CHAR: %c\n", root -> chValue);
    }
    else
        assert ("Unrecognized nodeType" == 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19648137_19648223_3_15
19648137_19648368_2_48
Title: How to Write Differences in Two Text Files to Another Text File in C? 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *file1 = fopen (argv[1], "r");
    FILE *file2 = fopen (argv[2], "r");
    int i;
    for (i = 0; !feof (file1) || !feof (file2); i++) {
        int byte1 = getc (file1);
        int byte2 = getc (file2);
        if (byte1 != byte2) {
            printf ("%d %d %d\n", i, byte1, byte2);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int offset;
    int argi = 1;
    int ch1, ch2;
    FILE *fh1, *fh2, *fh3 = stdout;
    FILE *fh4 = stdout;
    if (argc < 3) {
        printf ("usage: diff <file> <file> { <outfile> }\n");
        return (1);
    }
    if (argi < argc) {
        if (!(fh1 = fopen (argv[argi], "r"))) {
            printf ("cannot open %s\n", argv [argi]);
            return (2);
        }
    }
    if (++argi < argc) {
        if (!(fh2 = fopen (argv[argi], "r"))) {
            printf ("cannot open %s\n", argv [argi]);
            return (3);
        }
    }
    if (++argi < argc) {
        if (!(fh3 = fopen (argv[argi], "w+"))) {
            printf ("cannot open %s\n", argv [argi]);
            return (4);
        }
    }
    if (++argi < argc) {
        if (!(fh4 = fopen (argv[argi], "r"))) {
            printf ("cannot open %s\n", argv [argi]);
            return (3);
        }
    }
    for (offset = 0; (!feof (fh1)) && (!feof (fh2)); offset++) {
        ch1 = ch2 = '-';
        if (!feof (fh1))
            ch1 = getc (fh1);
        if (!feof (fh2))
            ch2 = getc (fh2);
        if (ch1 != ch2) {
            fprintf (fh3, "%d:%c %c\n", offset, ch1, ch2);
        }
        else {
            fprintf (fh3, "%c\n", ch1);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19676987_19677013_1_12
19676987_19678148_1_12
Title: Is there an error in the following function for matrix multiplication? 
----------------------------------------

void matMul (Matrix A, Matrix B, int ARows, int ACols, int BCols, Matrix C) {
    int i, j, k, sum;
    for (i = 0; i < ARows; i++) {
        sum = 0;
        for (j = 0; j < ACols; j++) {
            for (k = 0; k < BCols; k++) {
                sum += A[i][k] * B[k][j];
            }
            C[i][j] = sum;
        }
    }
}
----------------------------------------

void matMul (Matrix A, Matrix B, int ARows, int ACols, int BCols, Matrix C) {
    int i, j, k, sum;
    for (i = 0; i < ARows; i++) {
        for (j = 0; j < ACols; j++) {
            for (k = 0;
            k < BCols;
            k ++) {sum += A [i] [k] * B [k] [j];
        }
        C[i][j] = sum;
        sum = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19676987_19677082_1_12
19676987_19678148_1_12
Title: Is there an error in the following function for matrix multiplication? 
----------------------------------------

void matMul (Matrix A, Matrix B, int ARows, int ACols, int BCols, Matrix C) {
    int i, j, k;
    for (i = 0; i < ARows; i++) {
        int sum = 0;
        for (j = 0; j < ACols; j++) {
            for (k = 0; k < BCols; k++) {
                sum += A[i][k] * B[k][j];
            }
            C[i][j] = sum;
        }
    }
}
----------------------------------------

void matMul (Matrix A, Matrix B, int ARows, int ACols, int BCols, Matrix C) {
    int i, j, k, sum;
    for (i = 0; i < ARows; i++) {
        for (j = 0; j < ACols; j++) {
            for (k = 0;
            k < BCols;
            k ++) {sum += A [i] [k] * B [k] [j];
        }
        C[i][j] = sum;
        sum = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19707097_19707555_11_23
19707097_19707560_2_18
Title: Prototype function with my while loop condition error in C 
----------------------------------------

int main (void) {
    char inp [256];
    clrscr ();
    do {
        printf ("Type \"pass\": ");
        fgets (inp, sizeof inp, stdin);
    }
    while (strcmp (inp, "pass\n") && msghere ("Error!"));
    msghere ("Right Answer!");
    getch ();
    return 0;
}
----------------------------------------

int main (void) {
    int passed = 0;
    while (!passed) {
        if (strcmp (inp, "pass") == 0) {
            passed = 1;
        }
        else {
            msghere ("error");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1972003_17581052_1_14
1972003_2164426_18_40
Title: How to compile C code with anonymous structs / unions? 
----------------------------------------

int main (int argc, char **argv) {
    Vec3 tVec;
    for (int i = 0; i < 3; ++i) {
        tVec.xyz[i] = (float) i;
    }
    printf ("vec.x == %f\n", tVec.x);
    printf ("vec.y == %f\n", tVec.y);
    printf ("vec.z == %f\n", tVec.z);
    return 0;
}
----------------------------------------

int main () {
    Vector4f position, normal, color;
    position.x = 12.3f;
    position.y = 2.f;
    position.z = 3.f;
    position.w = 1.f;
    normal.x = .8f;
    normal.y = .9f;
    normal.z = .1f;
    normal.w = 1.f;
    color.r = 1.f;
    color.g = .233f;
    color.b = 2.11f;
    color.a = 1.1f;
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892717_3_28
37892659_37894739_5_22
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main () {
    int array [100], maximum, size, c, location = 1;
    printf ("Enter the number of elements in array\n");
    scanf ("%d", & size);
    printf ("Enter %d integers\n", size);
    for (c = 0; c < size; c++)
        scanf ("%d", &array[c]);
    maximum = array[0];
    for (c = 1; c < size; c++) {
        if (array[c] > maximum) {
            maximum = array[c];
            location = c + 1;
        }
    }
    printf ("Maximum element is present at location %d and it's value is %d.\n", location, maximum);
    return 0;
}
----------------------------------------

int main (void) {
    size_t i;
    double num [N];
    for (i = 0; i < N; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i]) != 1)
            return -1;
    }
    double maximum = num[0];
    double minimum = num[0];
    for (i = 1; i < N; i++) {
        if (isnan (num[i]))
            continue;
        if (!(num[i] >= minimum))
            minimum = num[i];
        if (!(num[i] <= maximum))
            maximum = num[i];
    }
    printf ("min: %e\n", minimum);
    printf ("max: %e\n", maximum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892879_4_30
37892659_37892914_9_38
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main (void) {
    int i;
    double num [10], max, min;
    for (i = 0; i < 10; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i]) != 1) {
            puts ("invalid input");
            return 1;
        }
    }
    min = num[0];
    max = num[0];
    for (int i = 1; i < 10; i++) {
        if (min > num[i]) {
            min = num[i];
        }
        else if (max < num[i]) {
            max = num[i];
        }
    }
    printf ("The max is %lf and the min is %lf", max, min);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    size_t i, n;
    double max, min, tmp, ad [MAXD] = {0.0};
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    for (n = 0; n < MAXD && fscanf (fp, " %lf", &tmp) == 1; n++)
        ad[n] = tmp;
    if (fp != stdin)
        fclose (fp);
    printf ("\narray values:\n\n");
    for (i = 0; i < n; i++)
        printf ("  ad[%2zu] : %13.2lf\n", i, ad[i]);
    if (maxmin_dbl (ad, &max, &min, n))
        printf ("\n maximum : %.2lf\n minimum : %.2lf\n\n", max, min);
    else {
        fprintf (stderr, "error: maxmin_dbl failed.\n");
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892879_4_30
37892659_37894739_5_22
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main (void) {
    int i;
    double num [10], max, min;
    for (i = 0; i < 10; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i]) != 1) {
            puts ("invalid input");
            return 1;
        }
    }
    min = num[0];
    max = num[0];
    for (int i = 1; i < 10; i++) {
        if (min > num[i]) {
            min = num[i];
        }
        else if (max < num[i]) {
            max = num[i];
        }
    }
    printf ("The max is %lf and the min is %lf", max, min);
    return 0;
}
----------------------------------------

int main (void) {
    size_t i;
    double num [N];
    for (i = 0; i < N; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i]) != 1)
            return -1;
    }
    double maximum = num[0];
    double minimum = num[0];
    for (i = 1; i < N; i++) {
        if (isnan (num[i]))
            continue;
        if (!(num[i] >= minimum))
            minimum = num[i];
        if (!(num[i] <= maximum))
            maximum = num[i];
    }
    printf ("min: %e\n", minimum);
    printf ("max: %e\n", maximum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892914_9_38
37892659_37894739_5_22
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main (int argc, char **argv) {
    size_t i, n;
    double max, min, tmp, ad [MAXD] = {0.0};
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    for (n = 0; n < MAXD && fscanf (fp, " %lf", &tmp) == 1; n++)
        ad[n] = tmp;
    if (fp != stdin)
        fclose (fp);
    printf ("\narray values:\n\n");
    for (i = 0; i < n; i++)
        printf ("  ad[%2zu] : %13.2lf\n", i, ad[i]);
    if (maxmin_dbl (ad, &max, &min, n))
        printf ("\n maximum : %.2lf\n minimum : %.2lf\n\n", max, min);
    else {
        fprintf (stderr, "error: maxmin_dbl failed.\n");
        return 1;
    }
    return 0;
}
----------------------------------------

int main (void) {
    size_t i;
    double num [N];
    for (i = 0; i < N; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i]) != 1)
            return -1;
    }
    double maximum = num[0];
    double minimum = num[0];
    for (i = 1; i < N; i++) {
        if (isnan (num[i]))
            continue;
        if (!(num[i] >= minimum))
            minimum = num[i];
        if (!(num[i] <= maximum))
            maximum = num[i];
    }
    printf ("min: %e\n", minimum);
    printf ("max: %e\n", maximum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37894341_37894468_12_22
37894341_37894539_17_27
Title: double pointer help me 
----------------------------------------

void get_sum (int *q, int p, int n) {
    int k, i, sum;
    for (k = 0; k < p; k++) {
        sum = 0;
        for (i = 0; i < n; i++) {
            sum = *(q + n * k + i) + sum;
        }
        printf ("%d\n", sum);
    }
}
----------------------------------------

int get_sum (int (*q) [5], int p, int n) {
    int sum = 0;
    for (int k = 0; k < p; k++) {
        for (int i = 0; i < n; i++)
            sum += q[k][i];
        printf ("row[%2d] : %d\n", k, sum);
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37906766_37906824_1_15
37906766_37906921_3_17
Title: How do I stop scanf loop after user enters specific amount of integers? 
----------------------------------------

int main () {
    double numbersEntered, sum = 0;
    int numbersToBeEntered = 0;
    scanf ("%d", & numbersToBeEntered);
    do {
        printf ("Enter a number: ");
        scanf ("%lf", & numbersEntered);
        sum += numbersEntered;
    }
    while (--numbersToBeEntered);
    printf ("Sum = %.2lf", sum);
    return 0;
}
----------------------------------------

int main (void) {
    double numbersEntered, sum = 0;
    int cnt = 0;
    int ret;
    do {
        printf ("Enter a number: ");
        ret = scanf ("%lf", &numbersEntered);
        if (ret != 1)
            continue;
        sum += numbersEntered;
        cnt++;
    }
    while (cnt < 4);
    printf ("Sum = %.2lf", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37906766_37906824_1_15
37906766_37907219_3_25
Title: How do I stop scanf loop after user enters specific amount of integers? 
----------------------------------------

int main () {
    double numbersEntered, sum = 0;
    int numbersToBeEntered = 0;
    scanf ("%d", & numbersToBeEntered);
    do {
        printf ("Enter a number: ");
        scanf ("%lf", & numbersEntered);
        sum += numbersEntered;
    }
    while (--numbersToBeEntered);
    printf ("Sum = %.2lf", sum);
    return 0;
}
----------------------------------------

int main (void) {
    const int N = 4;
    double sum = 0.0;
    printf ("Enter %d numbers\n\n", N);
    for (int i = 0, success = 1; success && i < N; i++) {
        double numberEntered;
        printf ("Enter number %d: ", i + 1);
        if (success = (scanf ("%lf", &numberEntered) == 1))
            sum += numberEntered;
    }
    printf ("\nSum = %.2lf", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37906766_37906921_3_17
37906766_37907219_3_25
Title: How do I stop scanf loop after user enters specific amount of integers? 
----------------------------------------

int main (void) {
    double numbersEntered, sum = 0;
    int cnt = 0;
    int ret;
    do {
        printf ("Enter a number: ");
        ret = scanf ("%lf", &numbersEntered);
        if (ret != 1)
            continue;
        sum += numbersEntered;
        cnt++;
    }
    while (cnt < 4);
    printf ("Sum = %.2lf", sum);
    return 0;
}
----------------------------------------

int main (void) {
    const int N = 4;
    double sum = 0.0;
    printf ("Enter %d numbers\n\n", N);
    for (int i = 0, success = 1; success && i < N; i++) {
        double numberEntered;
        printf ("Enter number %d: ", i + 1);
        if (success = (scanf ("%lf", &numberEntered) == 1))
            sum += numberEntered;
    }
    printf ("\nSum = %.2lf", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37906917_37906996_12_25
37906917_37911652_18_32
Title: Error in function from project euler when using largest signed int value 
----------------------------------------

int main (void) {
    int upperlimit = 0;
    unsigned int sums = 0;
    printf ("Intervalo de 0 a (escreva um numero)\n");
    printf ("><![CDATA[>");
    scanf ("%d", & upperlimit);
    sums = getsums (upperlimit);
    printf ("somas dos multiplos de 3 e 5 no intervalo [0;%d] e: %u\n", upperlimit, sums);
    return 0;
}
----------------------------------------

int main (void) {
    size_t upperlimit = 0;
    size_t sums = 0;
    printf ("Intervalo de 0 a (escreva um numero)\n");
    printf ("><![CDATA[>");
    scanf ("%lu", & upperlimit);
    sums = getsums (upperlimit);
    printf ("somas dos multiplos de 3 e 5 no intervalo [0;%lu] e: %lu\n", upperlimit, sums);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37906917_37906996_1_10
37906917_37911652_3_15
Title: Error in function from project euler when using largest signed int value 
----------------------------------------

unsigned int getsums (int v) {
    unsigned int sum = 0;
    int i = 0;
    for (; i < v; i++) {
        if (i % 3 == 0 || i % 5 == 0) {
            sum += i;
        }
    }
    return sum;
}
----------------------------------------

size_t getsums (size_t v) {
    size_t sum = 0;
    for (size_t i = 0; i < v; i++) {
        if (i % 3 == 0 || i % 5 == 0) {
            sum += i;
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37909003_37909354_13_58
37909003_37911419_11_73
Title: Quit function for C dice game 
----------------------------------------

int main () {
    int flag = 0;
    while (1) {
        while (1) {
            switch (prediction) {
            case 'X' :
            case 'x' :
                flag = 1;
                break;
            }
            if (cont ()) {
                flag = 1;
                break;
            }
            if (flag == 1)
                break;
        }
        if (flag == 1)
            break;
    }
}
----------------------------------------

int main () {
    srand ((unsigned) time (NULL));
    int DiceR [NUM_OF_DICE];
    char prediction;
    while (1) {
        for (size_t i = 0; i < NUM_OF_DICE; i++) {
            DiceR[i] = (rand () % MAX_DICE_VALUE) + 1;
            printf ("\n%d \n", DiceR [i]);
        }
        printf ("\nDo you think the next dice roll will be higher or lower than %d", DiceR [2]);
        printf ("\nPlease enter L = Lower E = Equal H = higher or X = Exit:\t");
        if (1 != scanf ("\n%c", &prediction)) {
            perror ("scanf for inputting prediction failed");
            exit (EXIT_FAILURE);
        }
        prediction = (char) toupper (prediction);
        if ('X' == prediction) {
            return 0;
        }
        switch (prediction) {
        case 'L' :
            if (DiceR[3] < DiceR[2])
                printf ("\ncongrats DiceRoll 4 is %d\n", DiceR[3]);
            else
                printf ("\nYou lose, the last roll was %d\n", DiceR[3]);
            break;
        case 'E' :
            if (DiceR[3] == DiceR[2])
                printf ("\ncongrats DiceRoll 4 is %d\n", DiceR[3]);
            else
                printf ("\nYou lose, the last roll was %d\n", DiceR[3]);
            break;
        case 'H' :
            if (DiceR[3] > DiceR[2])
                printf ("\ncongrats DiceRoll 4 is %d\n", DiceR[3]);
            else
                printf ("\nYou lose, the last roll was %d\n", DiceR[3]);
            break;
        default :
            printf ("input must be 'L' or 'H' or 'E' or 'X'\n");
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37910486_37910687_4_20
37910486_37911373_17_50
Title: Summing an Array of Numbers but Receiving Error when Run 
----------------------------------------

int main () {
    int sum, length, count;
    int *array;
    sum = 0;
    scanf ("%d", & length);
    scanf ("%d", & sum);
    array = (int *) malloc (sizeof (int) * length);
    if (array == NULL)
        return 0;
    memset (array, length, 0);
    for (count = 0; count < length - 1; count++) {
        sum = sum + array[count];
    }
    printf ("%d", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int sum = 0, length = 0, count, i;
    printf ("Please, enter the number of values you want to add: ");
    if (read_int (&length) == EOF)
        return -1;
    int array [length];
    for (count = 0; count < length; ++count) {
        printf ("Value n° %2d: ", count + 1);
        if (read_int (&array[count]) == EOF) {
            printf ("Warning: You entered only %d values out of %d.\n", count, length);
            break;
        }
    }
    for (i = 0; i < count; ++i) {
        sum += array[i];
    }
    printf ("The sum of the values is:\n%d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3792663_13729185_6_26
3792663_3792676_1_12
Title: atol() v/s. strtol() 
----------------------------------------

int main () {
    errno = 0;
    char *end = 0;
    long res = strtol ("83459299999999999K997", &end, 10);
    if (errno != 0) {
        printf ("Conversion error, %s\n", strerror (errno));
    }
    else if (*end) {
        printf ("Converted partially: %i, non-convertible part: %s\n", res, end);
    }
    else {
        printf ("Converted successfully: %i\n", res);
    }
    return 0;
}
----------------------------------------

int main () {
    char *end;
    int res_help = strtol ("help", &end, 10);
    if (!*end)
        printf ("Converted successfully\n");
    else
        printf ("Conversion error, non-convertible part: %s", end);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37940739_37942727_5_17
37940739_37945048_1_20
Title: "Guidance on reading multiple integers from file converting them to binary then printing them to screen?" 
----------------------------------------

int main () {
    int32_t n = 1234567890;
    char buf [65];
    while (1) {
        if (scanf ("%ld", &n) != 1) {
            return 1;
        }
        itoa (n, buf, 2);
        printf ("%s\n", buf);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp = stdin;
    if (argc > 1) {
        if (!(fp = fopen (argv[1], "r"))) {
            fprintf (stderr, "Could not open %s\n", argv [1]);
            return EXIT_FAILURE;
        }
    }
    while (fscanf (fp, "%ld", &inputInteger) == 1) {
    }
    if (fp != stdin)
        fclose (fp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37945058_37962976_6_55
37945058_38002764_10_45
Title: I want to ask date from User in DD/MM/YYYY format and I want to insert '/' automatically after DD or MM or YYYY 
----------------------------------------

int main (void) {
    int ch, k;
    setlocale (LC_ALL, "");
    initscr ();
    cbreak ();
    noecho ();
    nonl ();
    intrflush (stdscr, FALSE);
    keypad (stdscr, TRUE);
    k = 0;
    printw ("Enter date: __ (DAY)\b\b\b\b\b\b\b\b");
    do {
        ch = getch ();
        if (isdigit ((unsigned char) ch)) {
            printw ("%c", ch);
            k++;
        }
        else {
            beep ();
        }
    }
    while (k < 2);
    k = 0;
    printw ("/__ (MONTH)\b\b\b\b\b\b\b\b\b\b");
    do {
        ch = getch ();
        if (isdigit ((unsigned char) ch)) {
            printw ("%c", ch);
            k++;
        }
        else {
            beep ();
        }
    }
    while (k < 2);
    k = 0;
    printw ("/____ (YEAR)\b\b\b\b\b\b\b\b\b\b\b");
    do {
        ch = getch ();
        if (isdigit ((unsigned char) ch)) {
            printw ("%c", ch);
            k++;
        }
        else {
            beep ();
        }
    }
    while (k < 4);
    endwin ();
    return 0;
}
----------------------------------------

int main (void) {
    char buf [MAXC] = "", str [MAXS] = "";
    int c = 0;
    struct termios old, new;
    size_t idx = 0, stx = 0, sz = MAXC;
    setkbmode (& new, & old);
    printf ("\n enter date (DD/MM/YYYY -- '/' are automatic): ");
    while ((c = getchar ()) != '\n' && c != EOF) {
        if (idx + 1 < sz && '0' <= c && c <= '9') {
            putchar (c);
            buf[idx++] = str[stx++] = c;
            if (idx == 2 || idx == 4) {
                putchar ('/');
                str[stx++] = '/';
            }
        }
        if (idx > 0 && c == 127) {
            putchar (0x8);
            putchar (' ');
            putchar (0x8);
            if (str[stx - 1] != '/')
                buf[--idx] = 0;
            str[--stx] = 0;
        }
    }
    buf[idx] = 0;
    str[stx] = 0;
    restorekbmode (& old);
    printf ("\n buf  : %s\n", buf);
    printf (" str  : %s\n\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37949487_37949530_3_17
37949487_37949797_4_21
Title: Can I use || instead of else if in C? 
----------------------------------------

int main () {
    char card_name [3];
    puts ("Enter the card_name: ");
    scanf ("%2s", card_name);
    int val = 0;
    if (card_name[0] == 'K' || card_name[0] == 'Q' || card_name[0] == 'J') {
        val = 10;
    }
    else if (card_name[0] == 'A') {
        val = 11;
    }
    else {
        val = atoi (card_name);
    }
    printf ("The card name value is %i\n", val);
    return 0;
}
----------------------------------------

int main () {
    char card_name [3];
    puts ("Enter the card_name: ");
    scanf ("%2s", card_name);
    int val = 0;
    switch (card_name[0]) {
    case 'K' :
    case 'Q' :
    case 'J' :
        val = 10;
        break;
    case 'A' :
        val = 11;
        break;
    default :
        val = atoi (card_name);
    }
    printf ("The card name value is %i\n", val);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37958658_37958806_1_15
37958658_37959042_1_15
Title: How to check if it is a subset with linked lists in C 
----------------------------------------

boolean compareList (LIST A, LIST B) {
    LIST p;
    boolean checker = FALSE;
    for (p = B; p != NULL; p = p->next) {
        if (p == A) {
            checker = TRUE;
            break;
        }
    }
    return checker;
}
----------------------------------------

boolean compareList (LIST A, LIST B) {
    LIST p, q;
    for (p = A; p != NULL; p = p->next) {
        for (q = B; q != NULL; q = q->next) {
            if (q->data == p->data)
                break;
        }
        if (q == NULL)
            return FALSE;
    }
    return TRUE;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37964472_37964539_5_18
37964472_37965878_5_19
Title: Loop iterating only through half of the elements 
----------------------------------------

int main () {
    int r, col;
    srand ((unsigned) time (NULL));
    for (col = 1; col <= 10; col++) {
        r = rand () % 11;
        printf ("%d\n", r);
    }
    return 0;
}
----------------------------------------

int main () {
    int r, col;
    srand ((unsigned) time (NULL));
    for (col = 1; col <= 10; col++) {
        r = rand () % 11;
        printf ("%d\n", r);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3796479_3796582_3_18
3796479_3796604_34_49
Title: How to remove a carriage return from a string in C? 
----------------------------------------

int main (void) {
    char str [] = "This is a two-line\r\nstring with DOS line endings.\r\n";
    printf ("%d [%s]\n", strlen (str), str);
    char *src, *dst;
    for (src = dst = str; *src != '\0'; src++) {
        *dst = *src;
        if (*dst != '\r')
            dst++;
    }
    *dst = '\0';
    printf ("%d [%s]\n", strlen (str), str);
}
----------------------------------------

int main (void) {
    char *original = "a\nmultiline\nstring";
    int original_len = strlen (original) + 1;
    char *string = (char *) malloc (original_len);
    memset (string, 0, original_len);
    strncpy (string, original, original_len);
    replace_char_from_string ('\n', ' ', string);
    printf ("String: %s\n", string);
    remove_char_from_string (' ', string);
    printf ("String: %s\n", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37967503_37967609_1_14
37967503_37968345_10_23
Title: C Stack push function 
----------------------------------------

void push (Node **stack, int val) {
    Node *p = (Node *) calloc (1, sizeof (Node));
    p->v = val;
    Node *aux = *stack;
    if (aux == NULL) {
        *stack = p;
        return;
    }
    while (aux->next != NULL)
        aux = aux->next;
    aux->next = p;
}
----------------------------------------

int push (Node **stack, int val) {
    Node *p = malloc (sizeof (Node));
    int success = p != NULL;
    if (success) {
        p->v = val;
        p->next = *stack;
        *stack = p;
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37967986_37968385_4_34
37967986_37970529_7_86
Title: Integer factorization in C language 
----------------------------------------

int main () {
    int num, numfordiv;
    int div = 2;
    for (num = 2; num < MAXNUM; num++) {
        printf ("%d= ", num);
        numfordiv = num;
        div = 2;
        while (numfordiv > 1) {
            if (numfordiv % div != 0) {
                div++;
            }
            else {
                numfordiv /= div;
                printf ("%d ", div);
                if (numfordiv != 1) {
                    printf ("x ");
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int primes_array_size = INCREASE_BY;
    int *primes = malloc (primes_array_size * sizeof (int));
    if (primes == NULL) {
        printf ("out of memory\n");
        return 0;
    }
    primes[0] = 2;
    int num_primes = 1;
    int prime_pos = 0;
    int num, numfordiv;
    int div = 2;
    for (num = 2; num < MAXNUM; num++) {
        div = primes[0];
        prime_pos = 0;
        printf ("%d = ", num);
        numfordiv = num;
        while (numfordiv > 1) {
            if (numfordiv % div != 0) {
                ++prime_pos;
                if (prime_pos < num_primes) {
                    div = primes[prime_pos];
                }
                else {
                    break;
                }
            }
            else {
                numfordiv = numfordiv / div;
                printf ("%d", div);
                if (numfordiv != 1)
                    printf (" x ");
            }
        }
        if (numfordiv != 1) {
            primes[num_primes] = num;
            ++num_primes;
            printf ("%d", num);
            if (num_primes == primes_array_size) {
                primes_array_size = primes_array_size + INCREASE_BY;
                int *tmp = realloc (primes, primes_array_size * sizeof (int));
                if (tmp == NULL) {
                    printf ("out of memory\n");
                    free (primes);
                    return 0;
                }
                primes = tmp;
            }
        }
        printf ("\n");
    }
    free (primes);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37980866_37980918_2_11
37980866_37981031_3_17
Title: Printing a question mark after a loop 
----------------------------------------

int main () {
    char a [23];
    int i = 0;
    printf ("enter a single english word: ");
    while ((a[i++] = getchar ()) != '\n' && i < 23) {
    }
    a[i] = '\0';
    printf ("%s?", a);
    return 0;
}
----------------------------------------

int main () {
    char a [23];
    int i = 0, j = 0;
    printf ("enter a single english word: ");
    for (a[i] = getchar (); (a[i] != '\n') && (i < 23); i++)
        ;
    for (j = 0; j < i; j++)
        putchar (a[j]);
    printf ("?");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37985829_37986141_3_29
37985829_37986173_9_36
Title: How to make simple calculator using Functions in C? 
----------------------------------------

int main () {
    int32_t i, k;
    char j;
    if (scanf ("%d%c%d", &i, &j, &k) != 3) {
        printf ("incorrect input\n");
        return 1;
    }
    switch (j) {
    case '/' :
        if (k == 0)
            printf ("Divide by 0\n");
        else
            printf ("%.2f\n", i / (float) k);
        break;
    case '*' :
        printf ("%d\n", i *k);
        break;
    case '+' :
        printf ("%d\n", i +k);
        break;
    case '-' :
        printf ("%d\n", i -k);
        break;
    default :
        printf ("incorrect input\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, k;
    char j;
    scanf ("%d%c%d", & i, & j, & k);
    switch (j) {
    case '/' :
        fun1 (i, k);
        break;
    case '*' :
        fun2 (i, k);
        break;
    case '+' :
        fun3 (i, k);
        break;
    case '-' :
        fun4 (i, k);
        break;
    default :
        printf ("ERROR");
        break;
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37998168_37999656_12_39
37998168_41862960_5_47
Title: Student Locker puzzle 
----------------------------------------

int main (void) {
    int i, j;
    bool locker [101];
    for (i = 1; i <= 100; ++i)
        locker[i] = true;
    for (i = 2; i <= 100; ++i)
        for (j = i; j <= 100; j += i)
            locker[j] = !locker[j];
    printf ("\nopen lockers: ");
    for (i = 1; i <= 100; ++i)
        if (locker[i])
            printf ("%i ", i);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int studentTotal, lockerTotal, visit, totalOpened = 0, totalClosed = 0;
    cout << "Enter number of students" << endl;
    cin >> studentTotal;
    lockerTotal = studentTotal;
    for (int locker = 1; locker <= lockerTotal; locker++) {
        cout << "\n\n\nLocker no." << locker << endl;
        cout << " is visited by student(s) ";
        visit = 0;
        for (int student = 1; student <= studentTotal; student++) {
            if (locker % student == 0) {
                cout << student << ", ";
                visit++;
            }
        }
        cout << "\nTotal number of visits: " << visit;
        if (visit % 2 == 0) {
            cout << " the locker will stay closed.";
            totalClosed++;
        }
        else {
            cout << " the locker will be opened.";
            totalOpened++;
        }
    }
    if (lockerTotal == totalOpened + totalClosed) {
        cout << "\n\n\nOf total lockers (" << lockerTotal << "), " << totalOpened << " will be left open." << "(" << totalClosed << ") " << "will be closed." << endl;
    }
    else
        cout << "Error!!";
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38034553_38034664_1_12
38034553_38034843_5_48
Title: How can I add a space after the first printf statement? 
----------------------------------------

int main () {
    int i;
    i = 0;
    while (i < 30) {
        printf (" ");
        i++;
    }
    printf ("X\n");
    return 0;
}
----------------------------------------

int main () {
    int theNumber;
    int userGuess;
    int counter = 10;
    int lowerBound = 1, upperBound = 100;
    srand ((unsigned) time (NULL));
    theNumber = lowerBound + rand () % (upperBound - lowerBound + 1);
    printf ("Please guess a number (1-100): ");
    for (counter = 9; counter <= 10; counter--) {
        if (scanf ("%d", &userGuess) != 1) {
            printf ("incorrect input.\n");
            return 1;
        }
        printf ("\n");
        if (userGuess == theNumber) {
            printf ("You guessed it! The number was: %d", theNumber);
            break;
        }
        if (userGuess < theNumber && counter >= 1)
            printf ("Your guess was too low. You have %d guesses remaining. Guess higher: ", counter);
        if (userGuess > theNumber && counter >= 1)
            printf ("Your guess was too high. You have %d guesses remaining. Guess lower: ", counter);
        if (counter == 0) {
            printf ("\nYou ran out of guesses. The number was: %d \n", theNumber);
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38042577_38042960_3_13
38042577_38043765_3_15
Title: Single Character input in c language in ubuntu 
----------------------------------------

int main () {
    char fname, sname;
    printf ("your first name?: ");
    scanf ("%c", & fname);
    printf ("your last name?: ");
    scanf (" %c", & sname);
    printf ("initials: %c.   %c", fname, sname);
    return 0;
}
----------------------------------------

int main () {
    char fname, sname;
    printf ("your first name?: ");
    __fpurge (stdin);
    scanf ("%c", & fname);
    printf ("your last name?: ");
    __fpurge (stdin);
    scanf ("%c", & sname);
    printf ("initials: %c.   %c", fname, sname);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38044650_38044678_9_28
38044650_38044682_9_27
Title: How to make an array of structs 
----------------------------------------

int main () {
    line *array = malloc (10 * sizeof (line));
    int i = 0;
    for (i; i < 2; i++) {
        array[i] = malloc (sizeof array[i]);
        array[i]->x = 5;
    }
    for (i = 0; i < 2; i++) {
        printf ("%d\n", array [i] -> x);
    }
    return 0;
}
----------------------------------------

int main () {
    Line *array = malloc (10 * sizeof (line));
    int i = 0;
    for (i; i < 2; i++) {
        array[i].x = 5;
    }
    for (i; i < 2; i++) {
        printf ("%d\n", array [i].x);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38046350_38046575_11_27
38046350_38047444_11_25
Title: Unable to sort Array while implementing QuickSort 
----------------------------------------

int partition (A, P, R) {
    while (1) {
        key = A[P];
        i = P;
        j = R;
        while (key > A[i] && key != A[i])
            i++;
        while (key < A[j] && key != A[j])
            j--;
        if (i < j)
            swap (A[i], A[j]);
        else
            return j;
    }
}
----------------------------------------

int partition (int *a, int l, int r) {
    int i = l, pivot = a[r];
    int j = l;
    for (; j < r; j++) {
        if (a[j] < pivot) {
            swap (& a [i], & a [j]);
            i++;
        }
    }
    swap (& a [i], & a [r]);
    return i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38052187_38052291_3_19
38052187_38053852_10_26
Title: Why does the following code to insert a node at the end of a singly linked list does not work? 
----------------------------------------

void insert (struct node **headref, int value) {
    struct node *head = (*headref);
    while (head->link != NULL) {
        head = head->link;
    }
    struct node *new_node = (struct node *) malloc (sizeof (struct node));
    new_node->data = value;
    new_node->link = NULL;
    head->link = new_node;
}
----------------------------------------

int insert (struct node **head, int value) {
    struct node *tmp = malloc (sizeof (struct node));
    int success = tmp != NULL;
    if (success) {
        tmp->data = value;
        tmp->link = NULL;
        while (*head)
            head = &(*head)->link;
        *head = tmp;
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38059418_38059776_4_37
38059418_38061390_5_59
Title: Palindromes in C 
----------------------------------------

int main () {
    char p [999];
    printf ("Enter string: ");
    if (fgets (p, sizeof (p), stdin)) {
        int palindrome = 1;
        int i;
        int n;
        n = strlen (p);
        if (p[n - 1] == '\n')
            p[n - 1] = '\0';
        n = strlen (p);
        if (n == 0)
            palindrome = 0;
        for (i = 0; i < n / 2; i++) {
            if (p[i] != p[n - 1 - i])
                palindrome = 0;
        }
        if (palindrome)
            printf ("is a palindrome\n");
        else
            printf ("is not a palindrome\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char str [100];
    printf ("Enter a value :");
    gets (str);
    int i = 0;
    int n;
    n = strlen (str) - 1;
    while (i < n) {
        if (str[i++] != str[n--]) {
            printf ("%s is Not palidrome\n", str);
            return 0;
        }
    }
    printf ("%s is palidrome\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38089066_38089494_1_18
38089066_38090533_12_27
Title: "So I am having trouble reversing my string it reverses everything but something weird happens in the middle" 
----------------------------------------

void reverse (char *str) {
    char temp;
    int i;
    int ltc;
    int len;
    len = strlen (str);
    ltc = len >> 1;
    len--;
    for (i = 0; i < ltc; i++) {
        temp = str[i];
        str[i] = str[len - i];
        str[len - i] = temp;
    }
}
----------------------------------------

void reverse (char *str) {
    char temp;
    int i = 0;
    int j = strlen (str) - 1;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
    printf ("%s\n", str);
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38131484_38131523_5_31
38131484_38131971_14_27
Title: How do I write a program in C that counts the number of numbers as an argument? 
----------------------------------------

int main (int argc, char *argv []) {
    argv++;
    argc--;
    int i;
    unsigned int totalNumbers = 0;
    printf ("Total number of arguments: %d\n", argc);
    for (i = 0; i < argc; i++) {
        printf ("argv[%d]=%s\n", i, argv [i]);
        errno = 0;
        long num = strtol (argv[i], NULL, 10);
        if (!(num == 0L && errno == EINVAL))
            totalNumbers++;
    }
    printf ("Total number of numeric arguments: %u\n", totalNumbers);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int i;
    int numcount = 0;
    for (i = 1; i < argc; ++i) {
        if (is_number (argv[i]))
            numcount++;
    }
    printf ("There were %d numbers on the command line\n", numcount);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38159245_38159460_4_24
38159245_38160100_4_23
Title: Why does scanf not working with regex and dynamic allocation 
----------------------------------------

int main (void) {
    char *string;
    string = malloc (100);
    if (string == NULL) {
        puts ("Something went wrong");
        abort ();
    }
    printf ("Type anything : ");
    scanf ("%99s", string);
    printf ("Your input : %s\n", string);
    free (string);
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    char *string = NULL;
    printf ("Type anything : ");
    if (scanf ("%10m[^\n]", &string) != 1) {
        fputs ("Uh, oh! `scanf` failed! Exiting...\n", stderr);
        return EXIT_FAILURE;
    }
    scanf ("%*[^\n]");
    getchar ();
    printf ("Your input : %s\n", string);
    free (string);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3816233_26095839_7_18
3816233_3816288_1_11
Title: Swapping two string pointers 
----------------------------------------

int main () {
    char *s1 = "1234567890123456";
    char *s2 = "abcdefghij";
    printf ("s1 before swap: \"%s\"\n", s1);
    printf ("s2 before swap: \"%s\"\n", s2);
    FastSwap ((void * *) & s1, (void * *) & s2);
    printf ("s1 after swap : \"%s\"\n", s1);
    printf ("s2 after swap : \"%s\"\n", s2);
    return (0);
}
----------------------------------------

int main () {
    char num1 [] = "012345678910";
    char num2 [] = "abcdefghujk";
    char *test1 = num1;
    char *test2 = num2;
    fastSwap (& test1, & test2);
    printf ("%s\n", test1);
    printf ("%s\n", test2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38171003_38172754_10_82
38171003_38179360_15_78
Title: Need help changing Structure of Array to Array of Structures 
----------------------------------------

int main (void) {
    struct student s [100];
    int i, j, val, flag = 0;
    printf (" \n Please enter the students ID# followed by their grades. When done entering\n");
    printf (" grades, enter 101 to start a new student or 102 to exit entry.\n\n\n ");
    for (i = 0; i < 10;) {
        printf ("Enter student ID#: ");
        scanf ("%d", & s [i].studID);
        s[i].marks = malloc (100 * sizeof (int));
        printf ("\nFor student ID# %d\n", s [i].studID);
        for (j = 0; j < 100; j++) {
            printf ("Enter grades: ");
            scanf ("%d", & val);
            if (val >= 0 && val <= 100) {
                s[i].marks[j] = val;
            }
            else if (val == 101) {
                s[i].marks[j] = -1;
                s[i].marks = realloc (s[i].marks, (j + 1) * sizeof (int));
                break;
            }
            else if (val == 102) {
                s[i].marks[j] = -1;
                s[i].marks = realloc (s[i].marks, (j + 1) * sizeof (int));
                flag = 1;
                break;
            }
            else {
                printf ("\ninvalid entry\n");
                j--;
            }
        }
        printf ("\n\n----------\n\n");
        i++;
        if (flag == 1)
            break;
    }
    int num = i;
    for (i = 0; i < num; i++) {
        printf ("\nInformation for student ID number %d:\n", s [i].studID);
        for (j = 0; s[i].marks[j] != -1; j++)
            printf ("Grades: %d\n", s[i].marks[j]);
    }
    for (i = 0; i < num; i++) {
        free (s [i].marks);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    int i, j, sidx = 0;
    student s [NSTD] = {{
            .sid = 0
        }
    };
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    printf ("\n enter student ID followed by grade (0-100)\n" " 101 for next student, 102 when finished.\n\n");
    for (; sidx < NSTD;) {
        int grade = 0, tries = 0;
        printf (" enter student ID: ");
        while (scanf (" %d", &s[sidx].sid) != 1) {
            fprintf (stderr, " error: invalid student ID.\n");
            if (++tries == 3) {
                fprintf (stderr, " (max attempts reached, exiting.)\n");
                goto done;
            }
            printf (" enter student ID: ");
        }
        printf ("  Enter grades for student %d: ", s [sidx].sid);
        while (scanf (" %d", &grade) == 1) {
            if (grade < 0 || 102 < grade) {
                fprintf (stderr, " warning: invalid entry '%d'.\n", grade);
                continue;
            }
            if (grade == 101)
                break;
            if (grade == 102) {
                if (s[sidx].nmarks)
                    sidx++;
                goto done;
            }
            s[sidx].marks[s[sidx].nmarks++] = grade;
            if (s[sidx].nmarks == NMARK) {
                fprintf (stderr, "  warning: max grades for ID %d.\n", s [sidx].sid);
                break;
            }
        }
        sidx++;
    }
done :
    ;
    if (fp != stdin)
        fclose (fp);
    qsort (s, sidx, sizeof * s, cmpsid);
    for (i = 0; i < sidx; i++) {
        printf ("\n Student ID : %3d     grades :", s [i].sid);
        for (j = 0; j < s[i].nmarks; j++)
            printf ("  %2d", s[i].marks[j]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38173177_38173331_3_15
38173177_38173598_1_14
Title: "How to pipe output to another program in C using read" 
----------------------------------------

int main (void) {
    char buf [4];
    FILE *fp;
    fp = popen ("./a", "r");
    while (!feof (fp)) {
        fscanf (fp, "%s", buf);
        printf ("%s\n", buf);
    }
    return 0;
    pclose (fp);
}
----------------------------------------

int main () {
    char buf [4];
    int ret;
    while ((ret = read (0, buf, 4)) > 0) {
        fwrite (buf, 1, ret, stdout);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38174994_38175047_7_19
38174994_38175068_4_23
Title: Initializing arrays 
----------------------------------------

int main () {
    char initial_map [rows] [cols];
    for (int i = 0; i < cols; ++i) {
        for (int j = 0; j < rows; ++j) {
            initial_map[i][j] = '.';
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int cols = 30;
    int rows = 30;
    int i;
    int j;
    char intial_map [30] [30];
    for (i = 0; i < cols; i++) {
        for (j = 0; j < rows; j++) {
            intial_map[i][j] = '.';
            putchar (initial_map [i] [j]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38190219_38190322_3_15
38190219_38193402_4_31
Title: Calculating a power: how to test for values that exceed INT_MAX or INT_MIN? 
----------------------------------------

int power (int x, int n) {
    int res;
    if (n == 0) {
        return 1;
    }
    res = power (x, n -1);
    if (INT_MAX / res < x) {
        return -1;
    }
    return x * res;
}
----------------------------------------

bool power (int x, int y, int *zp) {
    if (y < 0) {
        switch (x) {
        case 1 :
            *zp = 1;
            return false;
        case -1 :
            *zp = y % 2 ? -1 : 1;
            return false;
        }
        return true;
    }
    int z = 1;
    int base = x;
    for (;;) {
        if (y % 2) {
            if (is_undefined_mult1 (z, base))
                return true;
            z *= base;
        }
        y /= 2;
        if (y == 0)
            break;
        if (is_undefined_mult1 (base, base))
            return true;
        base *= base;
    }
    *zp = z;
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38197517_38203094_42_189
38197517_38215261_18_119
Title: Interpretation of input_event members for mouse actions 
----------------------------------------

int main (int argc, char *argv []) {
    unsigned char buffer [4];
    ssize_t len;
    const char *devpath = "/dev/input/mice";
    int devfd;
    int wasleft, wasmiddle, wasright;
    if (argc < 1 || argc > 2 || (argc == 2 && (!strcmp (argv[1], "-h") || !strcmp (argv[1], "--help")))) {
        fprintf (stderr, "\n");
        fprintf (stderr, "Usage: %s -h | --help\n", argv [0]);
        fprintf (stderr, "       %s /dev/input/mouseX\n", argv [0]);
        fprintf (stderr, "\n");
        return EXIT_FAILURE;
    }
    if (argc == 2)
        devpath = argv[1];
    if (install_done (SIGINT) || install_done (SIGTERM) || install_done (SIGHUP)) {
        fprintf (stderr, "Cannot install signal handlers: %s.\n", strerror (errno));
        return EXIT_FAILURE;
    }
    do {
        devfd = open (devpath, O_RDWR | O_NOCTTY);
    }
    while (devfd == -1 && errno == EINTR);
    if (devfd == -1) {
        fprintf (stderr, "Cannot open %s: %s.\n", devpath, strerror (errno));
        return EXIT_FAILURE;
    }
    if (write (devfd, mousedev_imps_seq, mousedev_seq_len) != (ssize_t) mousedev_seq_len) {
        fprintf (stderr, "Cannot switch to ImPS/2 protocol.\n");
        close (devfd);
        return EXIT_FAILURE;
    }
    if (read (devfd, buffer, sizeof buffer) != 1 || buffer[0] != 0xFA) {
        fprintf (stderr, "Failed to switch to ImPS/2 protocol.\n");
        close (devfd);
        return EXIT_FAILURE;
    }
    fprintf (stderr, "Mouse device %s opened successfully.\n", devpath);
    fprintf (stderr, "Press CTRL+C (or send INT, TERM, or HUP signal to process %d) to exit.\n", (int) getpid ());
    fflush (stderr);
    wasleft = 0;
    wasmiddle = 0;
    wasright = 0;
    while (!done) {
        int x, y, wheel, left, middle, right;
        len = read (devfd, buffer, 4);
        if (len == -1) {
            if (errno == EINTR)
                continue;
            fprintf (stderr, "%s.\n", strerror (errno));
            break;
        }
        else if (len != 4 || !(buffer[0] & 0x08)) {
            fprintf (stderr, "Warning: Ignored a %d-byte report.\n", (int) len);
            continue;
        }
        left = buffer[0] & 1;
        middle = buffer[0] & 4;
        right = buffer[0] & 2;
        x = bytetoint (buffer[1]);
        y = bytetoint (buffer[2]);
        wheel = bytetoint (buffer[3]);
        if (x)
            printf (" x%+d", x);
        if (y)
            printf (" y%+d", y);
        if (wheel)
            printf (" w%+d", wheel);
        if (left && !wasleft)
            printf (" LeftDown");
        else if (left && wasleft)
            printf (" Left");
        else if (!left && wasleft)
            printf (" LeftUp");
        if (middle && !wasmiddle)
            printf (" MiddleDown");
        else if (middle && wasmiddle)
            printf (" Middle");
        else if (!middle && wasmiddle)
            printf (" MiddleUp");
        if (right && !wasright)
            printf (" RightDown");
        else if (right && wasright)
            printf (" Right");
        else if (!right && wasright)
            printf (" RightUp");
        printf ("\n");
        fflush (stdout);
        wasleft = left;
        wasmiddle = middle;
        wasright = right;
    }
    close (devfd);
    return EXIT_SUCCESS;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *devpath = (argc > 1 ? argv[1] : "/dev/input/mice");
    int msglevel = (argc > 2 ? atoi (argv[2]) : 3);
    int devfd = (-1);
    unsigned char buffer [4];
    ssize_t len = (-1);
    int nactions = 0, wasleft = 0, wasmiddle = 0, wasright = 0;
    fflush (NULL);
    do {
        devfd = open (devpath, O_RDWR | O_NOCTTY);
    }
    while (devfd == -1 && errno == EINTR);
    if (devfd == -1) {
        printf ("Cannot open %s: %s.\n", devpath, strerror (errno));
        goto end_of_job;
    }
    if (write (devfd, mousedev_imps_seq, mousedev_seq_len) != (ssize_t) mousedev_seq_len) {
        printf ("Cannot switch to ImPS/2 protocol.\n");
        goto end_of_job;
    }
    if (read (devfd, buffer, sizeof buffer) != 1 || buffer[0] != 0xFA) {
        printf ("Failed to switch to ImPS/2 protocol.\n");
        goto end_of_job;
    }
    printf ("Mouse device %s opened successfully.\n", devpath);
    printf ("Press CTRL+C to exit.\n");
    while (1) {
        int x, y, wheel, left, middle, right;
        int recognized = 0;
        nactions++;
        fflush (stdout);
        len = read (devfd, buffer, 4);
        if (len == -1) {
            if (errno == EINTR)
                continue;
            printf ("%s.\n", strerror (errno));
            break;
        }
        if (len != 4 || !(buffer[0] & 0x08)) {
            printf ("Warning: Ignored a %d-byte report.\n", (int) len);
            continue;
        }
        left = buffer[0] & 1;
        middle = buffer[0] & 4;
        right = buffer[0] & 2;
        x = bytetoint (buffer[1]);
        y = bytetoint (buffer[2]);
        wheel = bytetoint (buffer[3]);
        if (msglevel >= 1) {
            printf ("(%d) buffer=%02x,%02x,%02x,%02x" ", xy=%d,%d, lmrw=%d,%d,%d,%d:  ", nactions, buffer [0], buffer [1], buffer [2], buffer [3], x, y, left, middle, right, wheel);
            fflush (stdout);
        }
        if (x) {
            RECOGNIZED (" x");
            printf ("%+d", x);
        }
        if (y) {
            RECOGNIZED (" y");
            printf ("%+d", y);
        }
        if (wheel) {
            RECOGNIZED (" w");
            printf ("%+d", wheel);
        }
        if (left && !wasleft) {
            RECOGNIZED (" LeftDown");
        }
        else if (left && wasleft) {
            RECOGNIZED (" Left");
        }
        else if (!left && wasleft) {
            RECOGNIZED (" LeftUp");
        }
        if (middle && !wasmiddle) {
            RECOGNIZED (" MiddleDown");
        }
        else if (middle && wasmiddle) {
            RECOGNIZED (" Middle");
        }
        else if (!middle && wasmiddle) {
            RECOGNIZED (" MiddleUp");
        }
        if (right && !wasright) {
            RECOGNIZED (" RightDown");
        }
        else if (right && wasright) {
            RECOGNIZED (" Right");
        }
        else if (!right && wasright) {
            RECOGNIZED (" RightUp");
        }
        printf (" (recognized %d)\n", recognized);
        wasleft = left;
        wasmiddle = middle;
        wasright = right;
    }
end_of_job :
    if (devfd != (-1))
        close (devfd);
    fflush (NULL);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38201592_38201624_1_15
38201592_38201910_17_26
Title: cannot delete from a singly linked list 
----------------------------------------

void delete (int x) {
    struct Book *current;
    for (current = start; current; current = current->next) {
        if (current->next != NULL) {
            if (current->next->pages == x) {
                current->next = current->next->next;
                break;
            }
        }
        else if (current -> pages == x) {free (current);
        current = NULL;
    }
}
----------------------------------------

int delete (int x, struct Book *root) {
    struct Book *found = unlink (x, root);
    if (found != NULL) {
        free (found -> title);
        free (found -> actor);
        free (found);
        return 0;
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38201592_38201624_1_15
38201592_38201964_1_25
Title: cannot delete from a singly linked list 
----------------------------------------

void delete (int x) {
    struct Book *current;
    for (current = start; current; current = current->next) {
        if (current->next != NULL) {
            if (current->next->pages == x) {
                current->next = current->next->next;
                break;
            }
        }
        else if (current -> pages == x) {free (current);
        current = NULL;
    }
}
----------------------------------------

void delete (int x) {
    if (start == NULL)
        return;
    struct Book *current;
    if (start->pages == x) {
        Struct Book *temp = start;
        start = start->next;
        free (temp -> author);
        free (...);
        free (temp);
        return;
    }
    for (current = start; current; current = current->next) {
        if (current -> next != NULL) {if (current -> next -> pages == x) {Struct Book * temp = current -> next;
        current->next = current->next->next;
        free (temp -> author);
        free (...);
        free (temp);
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38201592_38201910_17_26
38201592_38201964_1_25
Title: cannot delete from a singly linked list 
----------------------------------------

int delete (int x, struct Book *root) {
    struct Book *found = unlink (x, root);
    if (found != NULL) {
        free (found -> title);
        free (found -> actor);
        free (found);
        return 0;
    }
    return -1;
}
----------------------------------------

void delete (int x) {
    if (start == NULL)
        return;
    struct Book *current;
    if (start->pages == x) {
        Struct Book *temp = start;
        start = start->next;
        free (temp -> author);
        free (...);
        free (temp);
        return;
    }
    for (current = start; current; current = current->next) {
        if (current -> next != NULL) {if (current -> next -> pages == x) {Struct Book * temp = current -> next;
        current->next = current->next->next;
        free (temp -> author);
        free (...);
        free (temp);
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3820895_3820990_4_24
3820895_3821068_4_23
Title: Using dynamic memory in C 
----------------------------------------

int main () {
    vector < int > a;
    int i;
    system ("clear");
    for (i = 0; i < 5; i++) {
        printf ("please enter the element in array");
        int n;
        scanf ("%d", & n);
        a.push_back (n);
    }
    for (i = 0; i < 5; i++) {
        printf ("\nthe %d entry in the array %d", i, a [i]);
    }
    return;
}
----------------------------------------

int main () {
    int *a;
    int size = 5;
    int i = 0;
    a = malloc (sizeof (int) * size);
    for (i = 0; i < size; i++) {
        printf ("%u: ", & a);
        printf (" please enter the element in the array> ");
        scanf ("%d", & a [i]);
    }
    for (i = 0; i < size; i++) {
        printf ("index %d in the array is %d\n", i, a [i]);
    }
    free (a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3820895_3820990_4_24
3820895_3821466_12_35
Title: Using dynamic memory in C 
----------------------------------------

int main () {
    vector < int > a;
    int i;
    system ("clear");
    for (i = 0; i < 5; i++) {
        printf ("please enter the element in array");
        int n;
        scanf ("%d", & n);
        a.push_back (n);
    }
    for (i = 0; i < 5; i++) {
        printf ("\nthe %d entry in the array %d", i, a [i]);
    }
    return;
}
----------------------------------------

int main () {
    int **a;
    int i;
    a = (int **) malloc (sizeof (*a) * ARRSIZE);
    if (a == 0)
        err_exit ("out of memory");
    for (i = 0; i < ARRSIZE; i++) {
        a[i] = (int *) malloc (sizeof (int));
        if (a[i] == 0)
            err_exit ("out of memory");
        printf ("%" PRIuPTR "\n", (uintptr_t) a [i]);
        printf ("please enter the element in array: ");
        if (scanf ("%d", a[i]) != 1)
            err_exit ("failed to read a valid integer");
    }
    for (i = 0; i < ARRSIZE; i++) {
        printf ("the %d entry in the array %d\n", i, * a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3820895_3821068_4_23
3820895_3821466_12_35
Title: Using dynamic memory in C 
----------------------------------------

int main () {
    int *a;
    int size = 5;
    int i = 0;
    a = malloc (sizeof (int) * size);
    for (i = 0; i < size; i++) {
        printf ("%u: ", & a);
        printf (" please enter the element in the array> ");
        scanf ("%d", & a [i]);
    }
    for (i = 0; i < size; i++) {
        printf ("index %d in the array is %d\n", i, a [i]);
    }
    free (a);
    return 0;
}
----------------------------------------

int main () {
    int **a;
    int i;
    a = (int **) malloc (sizeof (*a) * ARRSIZE);
    if (a == 0)
        err_exit ("out of memory");
    for (i = 0; i < ARRSIZE; i++) {
        a[i] = (int *) malloc (sizeof (int));
        if (a[i] == 0)
            err_exit ("out of memory");
        printf ("%" PRIuPTR "\n", (uintptr_t) a [i]);
        printf ("please enter the element in array: ");
        if (scanf ("%d", a[i]) != 1)
            err_exit ("failed to read a valid integer");
    }
    for (i = 0; i < ARRSIZE; i++) {
        printf ("the %d entry in the array %d\n", i, * a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38211270_38211935_1_13
38211270_38212446_1_20
Title: Implementing getchar issue in C 
----------------------------------------

int my_getchar (void) {
    static unsigned char buff [BUFF_SIZE];
    static int index = 0;
    static int count = 0;
    if (index >= count) {
        index = 0;
        count = read (STDIN_FILENO, buff, BUFF_SIZE);
        if (count == 0)
            return EOF;
        if (count < 0)
            return EOF;
    }
    return buff[index++];
}
----------------------------------------

int my_getchar (void) {
    static char buff [BUFF_SIZE];
    static char *chr;
    static int pos = 0;
    static int ret = 0;
    if (pos >= ret) {
        if ((ret = read (STDIN_FILENO, buff, BUFF_SIZE)) > 0) {
            chr = buff;
            pos = 0;
            return *(chr + pos++);
        }
        else {
            return EOF;
        }
    }
    else {
        return *(chr + pos++);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38256937_38257748_16_36
38256937_38281446_23_81
Title: Quick sort function works only if last value is the largest 
----------------------------------------

int main (int argc, const char *argv []) {
    int i, j;
    j = 10;
    struct people list [10];
    for (i = 0; i < 10; i++) {
        list[i].name = 'a';
        list[i].age = 10 - i;
    }
    printf ("Unsorted Names: \n");
    for (i = 0; i < j; i++) {
        printf ("Name : %c| Age : %d\n", list [i].name, list [i].age);
    }
    printf ("Sorted by Age: \n");
    quicksort (list, 0, j - 1);
    for (i = 0; i < j; i++) {
        printf ("Name : %c| Age : %d\n", list [i].name, list [i].age);
    }
}
----------------------------------------

int main (int argc, const char *argv []) {
    int l = argc / 2;
    struct people list [l];
    if (argc % 2 == 0) {
        fprintf (stderr, "Invalid Arguments!\n");
        fprintf (stderr, "Usage : %s name1 age1 name2 age2 ... ", argv [0]);
        exit (EXIT_FAILURE);
    }
    printf ("You have entered %d persons(s) into the program \n", l);
    for (int i = 1, j = 0; j < l; i += 2, j++) {
        memset (list [i].name, '\0', NAME_LEN + 1);
        strncpy (list [j].name, argv [i], NAME_LEN);
        list[j].age = atoi (argv[i + 1]);
        if (list[j].age == 0) {
            fprintf (stderr, "...Invalid age <=0. Try again.\n");
            exit (EXIT_FAILURE);
        }
    }
    printf ("Unsorted Names: \n");
    print_struct (list, l);
    quicksort (list, 0, l);
    printf ("Sorted by Age: \n");
    print_struct (list, l);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38268389_38268804_4_13
38268389_38268958_15_25
Title: how to use scanf to scan double and char at the same time into a double array in C 
----------------------------------------

int main (void) {
    char s [10];
    while (1 == scanf ("%s", s)) {
        printf ("%s\n", s);
        if (strcmp (s, "s") == 0)
            break;
    }
    return (0);
}
----------------------------------------

int main (int argc, char **argv) {
    int size;
    scanf ("%d", & size);
    int *vectors [NB_VECTORS];
#
    for (int i = 0; i < NB_VECTORS; i++)
        vectors[i] = readVector (size);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38268389_38268804_4_13
38268389_38269033_1_21
Title: how to use scanf to scan double and char at the same time into a double array in C 
----------------------------------------

int main (void) {
    char s [10];
    while (1 == scanf ("%s", s)) {
        printf ("%s\n", s);
        if (strcmp (s, "s") == 0)
            break;
    }
    return (0);
}
----------------------------------------

int main () {
    int x [3], y [3];
    int dimension;
    scanf ("%d", & dimension);
    if (dimension == 3) {
        scanf ("%d %d %d", & x [0], & x [1], & x [2]);
        scanf ("%d %d %d", & y [0], & y [1], & y [2]);
    }
    else if (dimension == 2) {
        scanf ("%d %d", & x [0], & x [1]);
        scanf ("%d %d", & y [0], & y [1]);
    }
    ...return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38268389_38268958_15_25
38268389_38269033_1_21
Title: how to use scanf to scan double and char at the same time into a double array in C 
----------------------------------------

int main (int argc, char **argv) {
    int size;
    scanf ("%d", & size);
    int *vectors [NB_VECTORS];
#
    for (int i = 0; i < NB_VECTORS; i++)
        vectors[i] = readVector (size);
    return 0;
}
----------------------------------------

int main () {
    int x [3], y [3];
    int dimension;
    scanf ("%d", & dimension);
    if (dimension == 3) {
        scanf ("%d %d %d", & x [0], & x [1], & x [2]);
        scanf ("%d %d %d", & y [0], & y [1], & y [2]);
    }
    else if (dimension == 2) {
        scanf ("%d %d", & x [0], & x [1]);
        scanf ("%d %d", & y [0], & y [1]);
    }
    ...return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38277715_38277831_14_31
38277715_38277920_23_39
Title: how to check if user input is a certain character 
----------------------------------------

void calculatorPrompt () {
    int a = 0;
    int b = 0;
    int sum = 0;
    printf ("Enter your first number: ");
    scanf_s ("%d", & a);
    if (checkNumber (a)) {
    }
    printf ("Enter your second number: ");
    scanf_s ("%d", & b);
    if (checkNumber (b)) {
    }
    sum = calculate (a, b);
    printf ("Your answer is: %d", sum);
}
----------------------------------------

void calculatorPrompt () {
    int a = 0;
    int b = 0;
    int sum = 0;
    printf ("Enter your first number: ");
    if (scanf ("%d", &a) != 1) {
        checkNumber ();
    }
    else {
        printf ("Enter your second number: ");
        if (scanf ("%d", &b) != 1) {
            checkNumber ();
        }
        else {
            sum = calculate (a, b);
            printf ("Your answer is: %d\n", sum);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38277715_38277831_33_45
38277715_38277920_7_18
Title: how to check if user input is a certain character 
----------------------------------------

int main () {
    printf ("Thanks for that\nDo you want a calculator?(y/n)");
    char answer = 'n';
    scanf_s ("%c", & answer);
    if (answer == 'y') {
        calculatorPrompt ();
    }
    else if (answer == 'n') {
        printf ("Okay bye!");
        Sleep (100);
    }
}
----------------------------------------

int main (void) {
    printf ("Thanks for that\nDo you want a calculator?(y/n)");
    char answer = 'n';
    scanf ("%c", & answer);
    if (answer == 'y') {
        calculatorPrompt ();
    }
    else if (answer == 'n') {
        printf ("Okay bye!\n");
        Sleep (100);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38281205_38282066_4_27
38281205_38287981_3_14
Title: Unexpected output in the C code with union 
----------------------------------------

int main () {
    union {
        int32_t i32;
        uint32_t u32;
        int16_t i16 [2];
        uint16_t u16 [2];
        int8_t i8 [4];
        uint8_t u8 [4];
    } u;
    u.u8[3] = 52;
    u.u8[2] = 51;
    u.u8[1] = 50;
    u.u8[0] = 49;
    printf (" %d %d %d %d \n", u.u8 [3], u.u8 [2], u.u8 [1], u.u8 [0]);
    printf (" %x %x %x %x \n", u.u8 [3], u.u8 [2], u.u8 [1], u.u8 [0]);
    printf (" 0x%x \n", u.i32);
    return 0;
}
----------------------------------------

int main (void) {
    union U {
        int i;
        char s [3];
    } u;
    u.i = 0x3132;
    printf ("%s", u.s);
    printf ("%8x\n", (unsigned) u.i);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38288164_38288186_1_19
38288164_38288289_7_26
Title: Iterate through a char pointer from a struct 
----------------------------------------

String *String_Combine (String *tar, const String *src) {
    char *tar_str = tar->str, *src_str = src->str;
    while (*tar_str != '\0') {
        tar_str++;
    }
    while (*src_str != '\0') {
        *tar_str = *src_str;
        tar_str++;
        src_str++;
    }
    *tar_str = '\0';
    return tar;
}
----------------------------------------

String *String_Combine (String *tar, const String *src) {
    char *tar_str = tar->str;
    char *src_str = src->str;
    while (*tar_str != '\0') {
        tar_str++;
    }
    while (*src_str != '\0') {
        *tar_str = *src_str;
        *tar_str++;
        *src_str++;
    }
    return tar;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38291623_38291685_2_22
38291623_38291705_2_22
Title: Extra values when printing an array(converting from %s to %c) 
----------------------------------------

int main () {
    int *value;
    value = (int *) malloc (20 * sizeof (int));
    int x;
    int y;
    for (x = 0; x < 20; x++) {
        scanf ("%d", value + i);
    }
    for (x = 0; x < 20; x++) {
        y = value[x];
        printf ("\nThe square of %d is: %d", y, y * y);
        printf ("\nThe cube of %d is: %d \n", y, y * y * y);
    }
    return 0;
}
----------------------------------------

int main () {
    int value [20];
    float answer;
    int x;
    int y;
    scanf ("%s", value);
    for (x = 0; x < 20; x++) {
        y = value[x] - '0';
        printf ("\nThe square of %d is: %d", y, y * y);
        printf ("\nThe cube of %d is: %d \n", y, y * y * y);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38292213_38292600_5_36
38292213_38292775_53_65
Title: Generate all possible binary combinations with an arbitrary size array of uint8_t in C 
----------------------------------------

int main (void) {
    uint8_t arr [SZ];
    for (int i = 0; i < SZ; i++)
        arr[i] = 0;
    for (int i = 0; i < SZ * 2; i++)
        putchar ('0');
    putchar ('\n');
    while (1) {
        for (int i = 0; i <= SZ; i++) {
            if (i == SZ)
                goto stop;
            arr[i]++;
            if (arr[i] != 0xff)
                break;
        }
        const char *digits = "0123456789abcdef";
        for (int i = SZ - 1; i >= 0; i--) {
            putchar (digits [(arr[i] >> 4) & 0xf]);
            putchar (digits [arr[i] & 0xf]);
        }
        putchar ('\n');
    }
stop :
    puts ("Done! Wow, you're still alive?");
}
----------------------------------------

int main (void) {
    bignum_t *bn = bn_new (10);
    do {
        bn_print (bn);
        putchar ('\n');
    }
    while (bn_next (bn));
    bn_free (bn);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38292213_38292600_5_36
38292213_38292805_50_65
Title: Generate all possible binary combinations with an arbitrary size array of uint8_t in C 
----------------------------------------

int main (void) {
    uint8_t arr [SZ];
    for (int i = 0; i < SZ; i++)
        arr[i] = 0;
    for (int i = 0; i < SZ * 2; i++)
        putchar ('0');
    putchar ('\n');
    while (1) {
        for (int i = 0; i <= SZ; i++) {
            if (i == SZ)
                goto stop;
            arr[i]++;
            if (arr[i] != 0xff)
                break;
        }
        const char *digits = "0123456789abcdef";
        for (int i = SZ - 1; i >= 0; i--) {
            putchar (digits [(arr[i] >> 4) & 0xf]);
            putchar (digits [arr[i] & 0xf]);
        }
        putchar ('\n');
    }
stop :
    puts ("Done! Wow, you're still alive?");
}
----------------------------------------

int main (int argc, const char *argv []) {
    uint8_t bytes [] = {0, 0, 0};
    uint8_t max [] = {0xFF, 0xFF, 0xFF};
    int size = sizeof (bytes);
    while (!equal (bytes, max, size)) {
        printBytes (bytes, size);
        increment (bytes, size, 0);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38292213_38292775_53_65
38292213_38292805_50_65
Title: Generate all possible binary combinations with an arbitrary size array of uint8_t in C 
----------------------------------------

int main (void) {
    bignum_t *bn = bn_new (10);
    do {
        bn_print (bn);
        putchar ('\n');
    }
    while (bn_next (bn));
    bn_free (bn);
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    uint8_t bytes [] = {0, 0, 0};
    uint8_t max [] = {0xFF, 0xFF, 0xFF};
    int size = sizeof (bytes);
    while (!equal (bytes, max, size)) {
        printBytes (bytes, size);
        increment (bytes, size, 0);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38300063_38300322_5_18
38300063_38300350_3_18
Title: Why am i not able to print 47th fibonacci number correctly? 
----------------------------------------

int main (void) {
    unsigned int array [LIMIT] = {0, 1};
    printf ("%u\n", array [0]);
    printf ("%u\n", array [1]);
    for (size_t i = 2; i < LIMIT; i++) {
        array[i] = array[i - 1] + array[i - 2];
        printf ("%u\n", array [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n = 50;
    long long array [n];
    array[0] = 0;
    array[1] = 1;
    printf ("%lli\n", array [0]);
    printf ("%lli\n", array [1]);
    int i;
    for (i = 2; i < n; i++) {
        array[i] = array[i - 1] + array[i - 2];
        printf ("%lli\n", array [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38300063_38300322_5_18
38300063_38300640_1_12
Title: Why am i not able to print 47th fibonacci number correctly? 
----------------------------------------

int main (void) {
    unsigned int array [LIMIT] = {0, 1};
    printf ("%u\n", array [0]);
    printf ("%u\n", array [1]);
    for (size_t i = 2; i < LIMIT; i++) {
        array[i] = array[i - 1] + array[i - 2];
        printf ("%u\n", array [i]);
    }
    return 0;
}
----------------------------------------

void main () {
    unsigned long long i = 1, num1 = 1, num2 = 0;
    printf ("1 \n");
    for (i; i < 100; i++) {
        num1 = num1 + num2;
        num2 = num1 - num2;
        printf ("%lli \n", num1);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38300063_38300350_3_18
38300063_38300640_1_12
Title: Why am i not able to print 47th fibonacci number correctly? 
----------------------------------------

int main (void) {
    int n = 50;
    long long array [n];
    array[0] = 0;
    array[1] = 1;
    printf ("%lli\n", array [0]);
    printf ("%lli\n", array [1]);
    int i;
    for (i = 2; i < n; i++) {
        array[i] = array[i - 1] + array[i - 2];
        printf ("%lli\n", array [i]);
    }
}
----------------------------------------

void main () {
    unsigned long long i = 1, num1 = 1, num2 = 0;
    printf ("1 \n");
    for (i; i < 100; i++) {
        num1 = num1 + num2;
        num2 = num1 - num2;
        printf ("%lli \n", num1);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38306267_38306754_1_23
38306267_38306761_1_36
Title: Search of an element on a unsorted array recursively 
----------------------------------------

int occ (int *p, int dim, int X) {
    int pivot, a = 0, b = 0;
    pivot = (dim) / 2;
    if (dim == 0) {
        return 0;
    }
    if (*(p + pivot) == X)
        return 1;
    if (pivot != 0) {
        a = occ (p, pivot, X);
        b = occ (p +pivot, dim -pivot, X);
    }
    if (a + b >= 1)
        return 1;
    else {
        return 0;
    }
}
----------------------------------------

int occ (int *p, int dim, int X) {
    int pivot, a, b;
    pivot = (dim) / 2;
    if (dim == 0) {
        return 0;
    }
    if (*(p + pivot) == X) {
        return 1;
    }
    if (dim == 1) {
        if (*(p + pivot) == X) {
            return 1;
        }
        else {
            return 0;
        }
    }
    a = occ (p, pivot, X);
    b = occ (p +pivot, dim -pivot, X);
    if (a + b >= 1) {
        return 1;
    }
    else {
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38335563_38335679_5_20
38335563_38336974_1_22
Title: Visualising recursion in C 
----------------------------------------

long factorial (int level, long number) {
    int result;
    printf ("[%03d] Calculating: %d\n", level, number);
    if (number <= 1) {
        result = 1;
    }
    else {
        result = number * factorial (level +1, number -1);
    }
    printf ("[%03d] Returning:   %d\n", level, result);
    return result;
}
----------------------------------------

long factorial (long number) {
    static char output [4096];
    static int level;
    static int index;
    int saved_index;
    long result;
    switch (level++) {
    case 1 :
        index += snprintf (output +index, sizeof (output) - index, "= ");
    default :
        index += snprintf (output +index, sizeof (output) - index, "%ld x ", number +1);
    case 0 :
        snprintf (output +index, sizeof (output) - index, "factorial(%ld)\n", number);
    }
    saved_index = index;
    printf ("%s", output);
    result = factorial_body (number);
    index = saved_index;
    snprintf (output + index, sizeof (output) - index, -- level ? "%ld\n" : "= %ld\n", result);
    printf ("%s", output);
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38338361_38340916_6_143
38338361_38342385_6_24
Title: Insert string every Nth word 
----------------------------------------

int main (int argc, char const *argv []) {
    char one [] = "one";
    char two [] = "two";
    char sentence [] = "Longer but still simple sentence containing even more words";
    char result [MAX_OUTPUT_LENGTH];
    int len = strlen (sentence);
    int spaces = 0;
    int k = 0;
    int skipUntilAnotherSpace = 0;
    for (int i = 0; i < len; i++) {
        if (sentence[i] == ' ') {
            spaces++;
            skipUntilAnotherSpace = 0;
        }
        if (k == 0) {
            result[i] = sentence[i];
        }
        else {
            result[k] = sentence[i];
            k++;
        }
        if ((spaces % 3 == 0) && spaces != 0 && skipUntilAnotherSpace == 0) {
            int useVariableK = 0;
            if (spaces > 3) {
                useVariableK = 1;
            }
            if (!useVariableK) {
                result[i] = ' ';
                i++;
                int j;
                for (j = 0; j < strlen (one); j++) {
                    result[i + j] = one[j];
                }
                i += (strlen (one));
                result[i] = ' ';
                k = i + 1;
                i -= (strlen (one) + 1);
                skipUntilAnotherSpace = 1;
            }
            else {
                int j;
                for (j = 0; j < strlen (one); j++) {
                    result[k + j] = one[j];
                }
                k += (strlen (one));
                result[k] = ' ';
                k += 1;
                skipUntilAnotherSpace = 1;
            }
        }
        if ((spaces % 4 == 0) && spaces != 0 && skipUntilAnotherSpace == 0) {
            int j;
            for (j = 0; j < strlen (two); j++) {
                result[k + j] = two[j];
            }
            k += (strlen (two));
            result[k] = ' ';
            k += 1;
            skipUntilAnotherSpace = 1;
        }
    }
    printf ("%s.\n", result);
    return 0;
}
----------------------------------------

int main (void) {
    char *w1 = "one", *w2 = "two";
    int nth1 = 3, nth2 = 4;
    char line [MAXC] = "", *p = NULL, *delim = " \t.,;\n";
    char *fmt1 = "%s", *fmt2 = " %s";
    while (fgets (line, MAXC, stdin)) {
        int idx = 0;
        for (p = strtok (line, delim); p; p = strtok (NULL, delim)) {
            printf (! idx ? fmt1 : fmt2, p);
            idx++;
            if (idx == nth1)
                printf (fmt2, w1);
            if (idx == nth2)
                printf (fmt2, w2);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38341730_38341953_1_24
38341730_38342076_54_81
Title: How to pass a reference to a function that takes references as argument 
----------------------------------------

void insert (struct intNode **head, struct intNode **current) {
    struct intNode *node;
    node = (struct intNode *) malloc (sizeof (struct intNode));
    printf ("enter a number:");
    scanf ("%d", & node -> value);
    if (*head == NULL) {
        *head = node;
    }
    else {
        if ((*head)->next == NULL) {
            (*head)->next = node;
            *current = node;
        }
        else {
            printf ("%d ", (* current) -> value);
            (*current)->next = node;
            (*current) = node;
        }
    }
}
----------------------------------------

void insert (struct intNode *head, struct intNode *current) {
    struct intNode *node;
    node = (struct intNode *) malloc (sizeof (struct intNode));
    printf ("enter a number:");
    scanf ("%d", & node -> value);
    if (head == NULL) {
        head = node;
    }
    else {
        if (head->next == NULL) {
            head->next = node;
            current = node;
        }
        else {
            printf ("%d ", current -> value);
            current->next = node;
            current = node;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38343600_38344174_21_30
38343600_38345392_8_27
Title: Creating an array with the amount of occurrences from an input file (C) 
----------------------------------------

int main () {
    int a [30];
    memset (a, 0, sizeof (a));
    FILE *fin = fopen ("test.txt", "r");
    createVArray (fin, a, 30);
    for (int i = 0; i < 30; ++i) {
        printf ("a[%d]=%d\n", i, a [i]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int array [ARSZ] = {0};
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    createVArray (array, ARSZ, fp);
    if (fp != stdin)
        fclose (fp);
    printf ("\n '%d' votes recorded.\n\n", * array);
    for (int i = 1; i < ARSZ; i++)
        printf ("  tshirt[%2d] : %2d\n", i, array[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38343600_38344174_5_18
38343600_38345392_33_48
Title: Creating an array with the amount of occurrences from an input file (C) 
----------------------------------------

void createVArray (FILE *fin, int *a, int len) {
    int i;
    assert (len > 29);
    while (1) {
        if (fscanf (fin, "%d", &i) != 1) {
            perror ("fscanf error");
            exit (1);
        }
        if (i >= 30)
            return;
        a[0] += 1;
        a[i] += 1;
    }
}
----------------------------------------

void createVArray (int *a, int n, FILE *fp) {
    if (!a || !fp) {
        fprintf (stderr, "error: invalid parameter in list.\n");
        return;
    }
    if (!n) {
        *a = 0;
        return;
    }
    int tmp = 0, total = 0;
    while (fscanf (fp, " %d", &tmp) == 1) {
        if (tmp == 30)
            break;
        if (0 < tmp && tmp <= 20)
            total++, a[tmp]++;
    }
    a[0] = total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38363808_38364513_10_60
38363808_38364529_4_20
Title: scanf is not waiting for user input in a while loop 
----------------------------------------

int main () {
    char *states [STACK_SIZE];
    int i;
    for (i = 0; i < 10; i++) {
        states[i] = malloc (MAX_STRING_SIZE * sizeof (char));
        if (states[i] == NULL) {
            fputs ("malloc() failed\n", stderr);
            while (i >= 0) {
                free (states [i--]);
            }
            exit (EXIT_FAILURE);
        }
    }
    i = 0;
    while (i < 10) {
        printf ("Enter State and Pop: ");
        scanf (" %99[^\n]", states [i]);
        printf ("State %d is %s\n", i, states [i]);
        i++;
    }
    puts ("All states:");
    for (i = 0; i < 10; i++) {
        printf ("State %d is %s\n", i, states [i]);
        free (states [i]);
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------

int main (void) {
    char *states [SIZE];
    int cnt = 0;
    printf ("Here\n");
    while (cnt < 10) {
        printf ("Enter State and Pop: ");
        states[cnt] = (char *) getchar ();
        getchar ();
        cnt++;
        printf ("%d\n", cnt);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38378946_38379023_56_76
38378946_38379700_4_74
Title: C. My digits are printing (in English) in reverse order? How can I fix this? 
----------------------------------------

int main (void) {
    int digit;
    printf ("Choose a number.\n");
    int num = GetInt ();
    if (num < 0) {
        num = -num;
        printf ("minus ");
    }
    printNumber (num, 0);
    printf ("\n");
}
----------------------------------------

int main (void) {
    int digit;
    printf ("Choose a number.\n");
    int num = GetInt ();
    if (num < 0) {
        num = -num;
        printf ("minus ");
    }
    int place;
    for (place = 1; place <= num / 10; place *= 10)
        ;
    do {
        digit = num / place;
        switch (digit) {
        case 0 :
            printf ("Zero ");
            break;
        case 1 :
            printf ("One ");
            break;
        case 2 :
            printf ("Two ");
            break;
        case 3 :
            printf ("Three ");
            break;
        case 4 :
            printf ("Four ");
            break;
        case 5 :
            printf ("Five ");
            break;
        case 6 :
            printf ("Six ");
            break;
        case 7 :
            printf ("Seven ");
            break;
        case 8 :
            printf ("Eight ");
            break;
        case 9 :
            printf ("Nine ");
            break;
        default :
            break;
        }
        num %= place;
        place /= 10;
    }
    while (place != 0);
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38378946_38379023_56_76
38378946_40272883_56_73
Title: C. My digits are printing (in English) in reverse order? How can I fix this? 
----------------------------------------

int main (void) {
    int digit;
    printf ("Choose a number.\n");
    int num = GetInt ();
    if (num < 0) {
        num = -num;
        printf ("minus ");
    }
    printNumber (num, 0);
    printf ("\n");
}
----------------------------------------

int main (void) {
    int number;
    printf ("\nenter a number: ");
    scanf ("%i", & number);
    if (number < 0) {
        printf ("negative ");
        number = -number;
    }
    convertToWords (number);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38378946_38379700_4_74
38378946_40272883_56_73
Title: C. My digits are printing (in English) in reverse order? How can I fix this? 
----------------------------------------

int main (void) {
    int digit;
    printf ("Choose a number.\n");
    int num = GetInt ();
    if (num < 0) {
        num = -num;
        printf ("minus ");
    }
    int place;
    for (place = 1; place <= num / 10; place *= 10)
        ;
    do {
        digit = num / place;
        switch (digit) {
        case 0 :
            printf ("Zero ");
            break;
        case 1 :
            printf ("One ");
            break;
        case 2 :
            printf ("Two ");
            break;
        case 3 :
            printf ("Three ");
            break;
        case 4 :
            printf ("Four ");
            break;
        case 5 :
            printf ("Five ");
            break;
        case 6 :
            printf ("Six ");
            break;
        case 7 :
            printf ("Seven ");
            break;
        case 8 :
            printf ("Eight ");
            break;
        case 9 :
            printf ("Nine ");
            break;
        default :
            break;
        }
        num %= place;
        place /= 10;
    }
    while (place != 0);
    printf ("\n");
}
----------------------------------------

int main (void) {
    int number;
    printf ("\nenter a number: ");
    scanf ("%i", & number);
    if (number < 0) {
        printf ("negative ");
        number = -number;
    }
    convertToWords (number);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38396003_38396213_3_18
38396003_38396771_3_15
Title: Reverse String function in C without library functions 
----------------------------------------

void Reverse (char *ptr) {
    size_t size = 0;
    while (*(ptr + size))
        ++size;
    if (size != 0) {
        for (size_t left = 0, right = size - 1; left < right; left++, right--) {
            char c = ptr[left];
            ptr[left] = ptr[right];
            ptr[right] = c;
        }
    }
}
----------------------------------------

void Reverse (char *ptr) {
    unsigned int left, right;
    for (right = 0; *(ptr + right) != '\0'; right++) {
        continue;
    }
    for (left = 0; left < right; left++, right--) {
        char ch = ptr[left];
        ptr[left] = ptr[right - 1];
        ptr[right - 1] = ch;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3839664_3839721_4_15
3839664_3839777_4_19
Title: How to safety parse tab-delimited string ? 
----------------------------------------

int main () {
    char str [] = "test\tbla-bla-bla\t2332";
    char *pch;
    pch = strtok (str, " \t");
    while (pch != NULL) {
        printf ("%s\n", pch);
        pch = strtok (NULL, " \t");
    }
    return 0;
}
----------------------------------------

int main () {
    char string [] = "foo\tbar\tbaz";
    char *start = string;
    char *end;
    while ((end = strchr (start, '\t')) != NULL) {
        printf ("%.*s\n", end - start, start);
        start = end + 1;
    }
    printf ("%s", start);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3839664_3839721_4_15
3839664_3840513_17_31
Title: How to safety parse tab-delimited string ? 
----------------------------------------

int main () {
    char str [] = "test\tbla-bla-bla\t2332";
    char *pch;
    pch = strtok (str, " \t");
    while (pch != NULL) {
        printf ("%s\n", pch);
        pch = strtok (NULL, " \t");
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char *string = "foo\tbar\tbaz";
    const char *start = string;
    const char *end = NULL;
    while (next_token (&start, &end)) {
        printf ("%.*s\n", end - start, start);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3839664_3839777_4_19
3839664_3840513_17_31
Title: How to safety parse tab-delimited string ? 
----------------------------------------

int main () {
    char string [] = "foo\tbar\tbaz";
    char *start = string;
    char *end;
    while ((end = strchr (start, '\t')) != NULL) {
        printf ("%.*s\n", end - start, start);
        start = end + 1;
    }
    printf ("%s", start);
    return 0;
}
----------------------------------------

int main (void) {
    const char *string = "foo\tbar\tbaz";
    const char *start = string;
    const char *end = NULL;
    while (next_token (&start, &end)) {
        printf ("%.*s\n", end - start, start);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38418603_38419453_9_61
38418603_38419877_3_32
Title: How can I correct the following code concerning matching bit patterns? 
----------------------------------------

int bitpatSearch (unsigned int source, unsigned int pattern, unsigned int n) {
    unsigned int mask;
    unsigned int tmp;
    int i;
    if (n == 0) {
        return 0;
    }
    if (n == CHAR_BIT * sizeof (source)) {
        if (source == pattern) {
            return 0;
        }
        return NO_MATCH;
    }
    if (n > CHAR_BIT * sizeof (source)) {
        return ARGUMENT_ERROR;
    }
    mask = ~((~0u) << n);
    pattern &= mask;
    for (i = 0; i <= CHAR_BIT * sizeof (source) - n; i++) {
        tmp = (source >> i) & mask;
        if (tmp == pattern) {
            return i;
        }
    }
    return NO_MATCH;
}
----------------------------------------

int bitpatSearch (unsigned int source, unsigned int pattern, int n) {
    unsigned int count, x, sourceCopy, patternCopy;
    for (count = 0; count <= 32; ++count) {
        x = 0;
        sourceCopy = source >> count;
        patternCopy = pattern;
        while (((sourceCopy & 1) == (patternCopy & 1)) && (x < n)) {
            sourceCopy >>= 1;
            patternCopy >>= 1;
            ++x;
        }
        if (x == n)
            return 32 - (count + n);
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38516029_38516214_17_36
38516029_38534163_49_90
Title: Having trouble creating an array of character strings. What am I doing wrong? 
----------------------------------------

int main (void) {
    int N;
    char *day;
    DATE date;
    printf ("Okay, choose your day:\n");
    scanf ("%i:%i:%i", & date.day, & date.month, & date.year);
    N = nConvert (date);
    day = getName (N);
    printf ("The day of the week of %i, %i, %i is: %s\n", date.day, date.month, date.year, day);
    return 0;
}
----------------------------------------

int main (void) {
    struct date date1;
    printf ("\nOkay, choose your date (day, month, year): ");
    scanf ("%i%i%i", & date1.day, & date1.month, & date1.year);
    printf ("\nday of the week for %i/%i/%i is ", date1.day, date1.month, date1.year);
    switch ((calculateN (date1) - 621049) % 7) {
    case 0 :
        printf ("Sunday");
        break;
    case 1 :
        printf ("Monday");
        break;
    case 2 :
        printf ("Tuesday");
        break;
    case 3 :
        printf ("Wednesday");
        break;
    case 4 :
        printf ("Thursday");
        break;
    case 5 :
        printf ("Friday");
        break;
    case 6 :
        printf ("Saturday");
        break;
    default :
        printf ("error ");
        break;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38540980_38541774_12_34
38540980_38542252_14_62
Title: How to delete a row from a 2D array in C? 
----------------------------------------

int main () {
    int i, j, k;
    for (i = 0; i < no_of_rows; i++) {
        if (matrica[i][0] % 2 == 0) {
            for (k = i; k < no_of_rows - 1; k++) {
                for (j = 0; j < no_of_columns; j++) {
                    matrica[k][j] = matrica[k + 1][j];
                }
            }
            i--;
            no_of_rows--;
        }
    }
    for (i = 0; i < no_of_rows; i++) {
        for (j = 0; j < no_of_columns; j++) {
            printf ("%d ", matrica [i] [j]);
        }
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    int a [] [N] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {3, 3, 3, 3, 3, 3, 3, 3, 3, 3}, {4, 4, 4, 4, 4, 4, 4, 4, 4, 4}, {5, 5, 5, 5, 5, 5, 5, 5, 5, 5}, {6, 6, 6, 6, 6, 6, 6, 6, 6, 6}, {7, 7, 7, 7, 7, 7, 7, 7, 7, 7}, {8, 8, 8, 8, 8, 8, 8, 8, 8, 8}, {9, 9, 9, 9, 9, 9, 9, 9, 9, 9}};
    const size_t M = sizeof (a) / sizeof (*a);
    size_t n = M;
    for (size_t i = 0; i < n; i++) {
        for (size_t j = 0; j < N; j++)
            printf ("%d ", a[i][j]);
        printf ("\n");
    }
    printf ("\n");
    n = 0;
    for (size_t i = 0; i < M; i++) {
        if (!all_of_even (a[i], N)) {
            if (n != i) {
                for (size_t j = 0; j < N; j++)
                    a[n][j] = a[i][j];
            }
            ++n;
        }
    }
    for (size_t i = 0; i < n; i++) {
        for (size_t j = 0; j < N; j++)
            printf ("%d ", a[i][j]);
        printf ("\n");
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38549226_38549668_2_12
38549226_38552456_3_17
Title: Counting how many times a character is typed without using string 
----------------------------------------

int main (void) {
    int counter = 0;
    while (1) {
        int input = getchar ();
        if (input == 'c' || input == 'C')
            counter++;
        else if (input == '\n')
            break;
    }
    printf ("%d", counter);
}
----------------------------------------

int main () {
    int counter = 0;
    int ch;
    printf ("Enter a string: ");
    while ((ch = getchar ()) != EOF && ch != '\n') {
        if (ch == 'c' || ch == 'C')
            counter++;
    }
    printf ("The letter c was entered %d times.\n", counter);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38553901_38554062_2_19
38553901_38558813_2_17
Title: "For each testcase input an integer n (0 <= n <= 10)" 
----------------------------------------

int main () {
    int i, test, n = 0, x, j, y, s = 1;
    scanf ("%d", & Test);
    if (!(test < 100 && test > 0)) {
        printf ("Invalid input!");
    }
    for (i = 1; i <= test; i++) {
        scanf ("%d", & n);
        s = 1;
        for (j = 1; j <= n; j++) {
            s = s * j;
        }
        printf ("Case %d: %d\n", i, s);
    }
    return 0;
}
----------------------------------------

int main () {
    int i, Test, n = 0, x, j, y;
    scanf ("%d", & Test);
    for (i = 1; i <= Test; i++) {
        int s = 1;
        scanf ("%d", & n);
        for (j = 1; j <= n; j++) {
            s = s * j;
        }
        printf ("Case %d: %d\n", i, s);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38557112_38557301_3_34
38557112_38557362_4_32
Title: Printing a name in Standard format 
----------------------------------------

int main (void) {
    char first [32], middle [32], last [32];
    char line [32];
    printf ("Enter full name: ");
    fflush (stdout);
    if (fgets (line, sizeof line, stdin)) {
        *first = *middle = *last = '\0';
        switch (sscanf (line, "%s %s %[^\n]", first, middle, last)) {
        case EOF :
        case 0 :
            printf ("No name\n");
            break;
        case 1 :
            printf ("Standard name: %s\n", first);
            strcpy (last, first);
            *first = '\0';
            break;
        case 2 :
            printf ("Standard name: %c. %s\n", first[0], middle);
            strcpy (last, middle);
            *middle = '\0';
            break;
        case 3 :
            printf ("Standard name: %c. %c. %s\n", first[0], middle[0], last);
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char first [32], middle [32], last [32];
    int count = 0;
    int i = 0;
    printf ("Enter full name: ");
    scanf (" %[^\n]s", first);
    for (i = 0; first[i] != '\0'; i++) {
        if (isspace (first[i]))
            count++;
    }
    if (count == 1) {
        int read = 0;
        int k = 0;
        for (int j = 0; j < i; j++) {
            if (isspace (first[j]))
                read++;
            if (read > 0) {
                last[k] = first[j];
                k++;
            }
        }
        last[k + 1] = '\0';
    }
    printf ("Standard name: ");
    printf ("%c. %s\n", first [0], last);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38561555_38562316_2_21
38561555_38562574_1_17
Title: Dump memory in c use fwrite() 
----------------------------------------

void dumpCode (char *start, char *end, char *subject) {
    FILE *fp;
    char *i;
    char fileName [100];
    int count = 0;
    sprintf (fileName, "/storage/emulated/0/test/%s-%s.txt", start, end);
    fp = fopen (fileName, "wb");
    if (NULL == fp) {
        printf ("fopen error,errno is %d\n", errno);
    }
    else {
        for (i = start; i <= end; i++) {
            if (fwrite (start, 1, 10 * sizeof (unsigned long long), fp) == 0)
                printf ("fwrite error,errno is %d\n", errno);
        }
        fclose (fp);
    }
}
----------------------------------------

void dumpCode (char *start, char *end, char *subject) {
    FILE *fp;
    char *i;
    char fileName [100];
    sprintf (fileName, "/storage/emulated/0/test/%s-%s.txt", start, end);
    if ((fp = fopen (fileName, "wb")) == NULL)
        printf ("Error: Could not open '%s'\n", fileName);
    for (i = start; i <= end; i++)
        fwrite (start, 1, 10 * sizeof (unsigned long long), fp);
    fclose (fp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38572140_38572440_8_32
38572140_38572450_1_19
Title: C random matrix with numbers between 0 and 9 
----------------------------------------

int main () {
    int na [10] = {0};
    int n [MaxL] [MaxC], i = 0;
    srand ((unsigned) time (NULL));
    while (i < MaxL) {
        int j = 0;
        while (j < MaxC) {
            int r = rand () % 10;
            if (na[r] < 2) {
                ++na[r];
                n[i][j] = r;
                printf (" %3d ", n [i] [j]);
                ++j;
            }
        }
        ++i;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int c [10] = {0};
    int i = 0, j = 0, r;
    int n [MaxL] [MaxC];
    srand (time (NULL));
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 4; j++) {
            do {
                r = (rand () % 10);
            }
            while (c[r] > 2);
            ++c[r];
            n[i][j] = r;
            printf (" %3d ", n [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38587464_38588277_7_24
38587464_38592823_39_48
Title: How to wake up sleep(3)ing thread 
----------------------------------------

int main () {
    signal (SIGINIT, handler);
    while (++i) {
        cout << "Going to sleep...." << endl;
        if (i == 3) {
            raise (SIGINT);
        }
        sleep (1);
    }
    return 0;
}
----------------------------------------

int main (void) {
    pthread_t thread;
    pthread_create (& thread, NULL, event_loop, NULL);
    while (getchar () != EOF) {
        pthread_mutex_lock (& mutex);
        interrupted = 1;
        pthread_cond_signal (& cond);
        pthread_mutex_unlock (& mutex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38603550_38603932_1_11
38603550_38603933_2_14
Title: How to read an indefinite number of variables from scanf (separated by space or new lines) 
----------------------------------------

int main () {
    int a;
    while (fscanf (stdin, "%d", &a) == 1) {
        while (a-- > 0) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char buffer [1000];
    while (fgets (buffer, sizeof (buffer), stdin) != 0) {
        int i, j, a;
        for (i = 0; sscanf (buffer +i, "%d%n", &a, &j) != EOF; i += j) {
            while (a-- > 0) {
                printf ("#");
            }
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38607575_38607698_4_33
38607575_38607798_2_13
Title: How to find the length of an input 
----------------------------------------

int main (void) {
    char s [1024];
    char *p;
    int i = 0;
    fgets (s, 1024, stdin);
    p = s;
    while (*p != '\0') {
        if (!isdigit (*p)) {
            p++;
        }
        else {
            i++;
            p++;
            while (*p != '\0' && isdigit (*p)) {
                p++;
            }
        }
    }
    printf ("We found %d numbers", i);
    return 0;
}
----------------------------------------

int main (void) {
    int data = 1;
    int i = 0;
    while (data != 0) {
        scanf ("%d", & data)
        printf ("Collected Data: %d", data);
        i++;
    }
    printf ("Total number of inputs are %d.", i);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38607575_38607698_4_33
38607575_38608239_4_21
Title: How to find the length of an input 
----------------------------------------

int main (void) {
    char s [1024];
    char *p;
    int i = 0;
    fgets (s, 1024, stdin);
    p = s;
    while (*p != '\0') {
        if (!isdigit (*p)) {
            p++;
        }
        else {
            i++;
            p++;
            while (*p != '\0' && isdigit (*p)) {
                p++;
            }
        }
    }
    printf ("We found %d numbers", i);
    return 0;
}
----------------------------------------

int main () {
    int i = 0;
    int data [100];
    while (1) {
        scanf ("%d", & data [i]);
        if (data[i] == -1) {
            break;
        }
        i++;
    }
    printf ("%d\n", data [2]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38607575_38607798_2_13
38607575_38608239_4_21
Title: How to find the length of an input 
----------------------------------------

int main (void) {
    int data = 1;
    int i = 0;
    while (data != 0) {
        scanf ("%d", & data)
        printf ("Collected Data: %d", data);
        i++;
    }
    printf ("Total number of inputs are %d.", i);
}
----------------------------------------

int main () {
    int i = 0;
    int data [100];
    while (1) {
        scanf ("%d", & data [i]);
        if (data[i] == -1) {
            break;
        }
        i++;
    }
    printf ("%d\n", data [2]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38621938_38622620_4_16
38621938_38626198_6_46
Title: Using fgetc() for reading into an array in C 
----------------------------------------

int main () {
    char *ch = NULL;
    int i = 0;
    ch = realloc (ch, i +1);
    while ((ch[i] = fgetc (stdin)) != '\n') {
        ch = realloc (ch, i +1);
        i++;
    }
    ch[i] = 0;
    puts (ch);
    free (ch);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int c;
    size_t n = 0, nchar = NCHAR;
    char *arr = malloc (sizeof *arr * nchar);
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    if (!arr) {
        fprintf (stderr, "error: virtual memory exhausted.\n");
        return 1;
    }
    while ((c = fgetc (fp)) != EOF) {
        arr[n++] = c;
        if (n == nchar) {
            void *tmp = realloc (arr, nchar +NCHAR);
            if (!tmp) {
                fprintf (stderr, "realloc() error: memory exhausted.\n");
                break;
            }
            arr = tmp;
            nchar += NCHAR;
        }
    }
    arr[n] = 0;
    if (fp != stdin)
        fclose (fp);
    for (size_t i = 0; i < n; i++)
        putchar (arr[i]);
    free (arr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627178_1_21
38627087_38627187_3_19
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int index1 = i * n + j;
            int index2 = j * m + i;
            new_array[index2] = array[index1];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

static void transpose (int *array, int m, int n) {
    int new_array [m * n];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            int old_idx = i * n + j;
            int new_idx = j * m + i;
            new_array[new_idx] = array[old_idx];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627178_1_21
38627087_38627222_1_15
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int index1 = i * n + j;
            int index2 = j * m + i;
            new_array[index2] = array[index1];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    int count;
    count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j += n) {
            new_array[count++] = i + j;
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627178_1_21
38627087_38627228_1_12
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int index1 = i * n + j;
            int index2 = j * m + i;
            new_array[index2] = array[index1];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    int k = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            new_array[k++] = array[j * n + i];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627178_1_21
38627087_38627287_1_16
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int index1 = i * n + j;
            int index2 = j * m + i;
            new_array[index2] = array[index1];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

static void transpose (int *array, int m, int n) {
    int *temp = malloc (m *n * sizeof (int));
    memcpy (temp, array, m * n * sizeof (int));
    int i, j;
    for (i = 0; i < m; ++i) {
        for (j = 0; j < n; ++j) {
            array[j * m + i] = temp[i * n + j];
        }
    }
    free (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627187_3_19
38627087_38627222_1_15
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

static void transpose (int *array, int m, int n) {
    int new_array [m * n];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            int old_idx = i * n + j;
            int new_idx = j * m + i;
            new_array[new_idx] = array[old_idx];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    int count;
    count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j += n) {
            new_array[count++] = i + j;
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627187_3_19
38627087_38627228_1_12
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

static void transpose (int *array, int m, int n) {
    int new_array [m * n];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            int old_idx = i * n + j;
            int new_idx = j * m + i;
            new_array[new_idx] = array[old_idx];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    int k = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            new_array[k++] = array[j * n + i];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627187_3_19
38627087_38627287_1_16
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

static void transpose (int *array, int m, int n) {
    int new_array [m * n];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            int old_idx = i * n + j;
            int new_idx = j * m + i;
            new_array[new_idx] = array[old_idx];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

static void transpose (int *array, int m, int n) {
    int *temp = malloc (m *n * sizeof (int));
    memcpy (temp, array, m * n * sizeof (int));
    int i, j;
    for (i = 0; i < m; ++i) {
        for (j = 0; j < n; ++j) {
            array[j * m + i] = temp[i * n + j];
        }
    }
    free (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627222_1_15
38627087_38627228_1_12
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    int count;
    count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j += n) {
            new_array[count++] = i + j;
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    int k = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            new_array[k++] = array[j * n + i];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627222_1_15
38627087_38627287_1_16
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    int count;
    count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j += n) {
            new_array[count++] = i + j;
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

static void transpose (int *array, int m, int n) {
    int *temp = malloc (m *n * sizeof (int));
    memcpy (temp, array, m * n * sizeof (int));
    int i, j;
    for (i = 0; i < m; ++i) {
        for (j = 0; j < n; ++j) {
            array[j * m + i] = temp[i * n + j];
        }
    }
    free (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38627087_38627228_1_12
38627087_38627287_1_16
Title: Taking the transpose of a matrix in C with 1D arrays 
----------------------------------------

void transpose (int *array, int m, int n) {
    int new_array [12];
    int k = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            new_array[k++] = array[j * n + i];
        }
    }
    for (int i = 0; i < m * n; i++) {
        array[i] = new_array[i];
    }
}
----------------------------------------

static void transpose (int *array, int m, int n) {
    int *temp = malloc (m *n * sizeof (int));
    memcpy (temp, array, m * n * sizeof (int));
    int i, j;
    for (i = 0; i < m; ++i) {
        for (j = 0; j < n; ++j) {
            array[j * m + i] = temp[i * n + j];
        }
    }
    free (temp);
}
----------------------------------------

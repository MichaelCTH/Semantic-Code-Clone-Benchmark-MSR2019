$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2839790_2839815_8_19
2839790_2841311_8_28
Title: Whats wrong with this C program? 
----------------------------------------

int main () {
    int i, input;
    printf ("Enter integer values one by one, -1 to quit.\n");
    for (i = 0; i < max; i++) {
        scanf ("%d", & input);
        arr[i] = input;
        if (input == -1)
            break;
        count++;
    }
    printf ("You entered %d values.\n", count);
    return 0;
}
----------------------------------------

int main () {
    int i, input, ret;
    char end;
    printf ("Enter integer values one by one, q to quit.\n");
    for (i = 0; i < max; i++) {
        ret = scanf ("%d", &input);
        if (!ret) {
            scanf ("%c", & end);
            if (end == 'q')
                break;
            else
                continue;
        }
        arr[i] = input;
        count++;
    }
    printf ("You entered %d values.\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28415956_28416000_1_13
28415956_28416081_1_14
Title: Positive value input C 
----------------------------------------

float scanval () {
    float x;
    printf ("Insert positive value \n");
    scanf ("%f", & x);
    if (x < 0) {
        printf ("Not a valid value \n");
        x = scanval ();
    }
    return x;
}
----------------------------------------

float scanval () {
    float x;
    printf ("Insert positive value \n");
    if ((scanf ("%f", &x) != 1) || (x < 0)) {
        int chr;
        while (((chr = getchar ()) != EOF) && (chr != '\n'))
            ;
        return scanval ();
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28421703_28421750_4_46
28421703_28421796_7_22
Title: Draw a square inside another 
----------------------------------------

int main (void) {
    int i, j, side;
    printf ("Enter side: ");
    scanf ("%d", & side);
    for (j = 0; j < side; j++)
        printf ("0");
    printf ("\n");
    for (j = 1; j < side - 1; j++) {
        printf ("0");
        if ((j == 1) || (j == side - 2)) {
            for (i = 1; i < side - 1; i++)
                printf ("1");
        }
        else {
            for (i = 1; i < side - 1; i++)
                printf (((i == 1) || (i == side - 2)) ? "1" : "0");
        }
        if (i == side - 2)
            printf ("1");
        else
            printf ("0");
        printf ("\n");
    }
    for (j = 0; j < side; j++)
        printf ("0");
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int i, j, side;
    printf ("Enter side: ");
    scanf ("%d", & side);
    for (j = 1; j < side; j++) {
        for (i = 1; i <= side; i++)
            if (min (i -1, min (j - 1, min (side -j - 1, side -i))) == 1)
                printf ("1");
            else
                printf ("0");
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28447921_28448235_3_32
28447921_28449613_3_14
Title: Algorithm to parse an int from a string in one pass 
----------------------------------------

int parse_int (const char *c1, const char *c2, int *i) {
    int n = 0;
    *i = 0;
    for (; c1 != c2; c1++) {
        char c = *c1;
        if (c >= '0' && c <= '9') {
            ++n;
            *i = *i * 10 + c - '0';
        }
        else {
            break;
        }
    }
    return n;
}
----------------------------------------

int parse_int (const char *begin, const char *end, int *result) {
    int d = 0;
    for (*result = 0; begin != end; d++, begin++) {
        int digit = *begin - '0';
        if (digit >= 0 && digit < 10) {
            *result *= 10;
            *result += digit;
        }
        else
            break;
    }
    return d;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28456410_28457494_5_18
28456410_28542038_3_13
Title: "need help in plotting the most simple xy graph using gnuplot through C pipes" 
----------------------------------------

int main () {
    char *commandsForGnuplot [] = {"set title \"My Little Graph\"", "plot 'data.temp'"};
    FILE *temp = fopen ("data.temp", "w");
    FILE *gnuplotPipe = popen ("gnuplot -persistent", "w");
    int i;
    fprintf (temp, "%lf %lf \n", 100.0, 200.0);
    fprintf (temp, "%lf %lf \n", 200.0, 400.0);
    for (i = 0; i < COMMANDS; i++) {
        fprintf (gnuplotPipe, "%s \n", commandsForGnuplot [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *p = popen ("gnuplot -persist", "w");
    fprintf (p, "plot '-' with linespoints\n");
    fprintf (p, "%d\t%d\n", 100, 200);
    fprintf (p, "%d\t%d\n", 200, 400);
    fprintf (p, "%d\t%d\n", 300, 600);
    fprintf (p, "e\n");
    fclose (p);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28469244_28469276_14_23
28469244_28469345_13_31
Title: Passing a 2-dimensional character array to a function 
----------------------------------------

int main (int argc, char *argv []) {
    char array [5] [6];
    strcpy (array [0], "abcde");
    strcpy (array [1], "fghij");
    strcpy (array [2], "klmno");
    strcpy (array [3], "pqrst");
    strcpy (array [4], "uvwxy");
    printgraph (array);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *array [5];
    for (int i = 0; i < 5; ++i)
        array[i] = malloc (6);
    strcpy (array [0], "abcde");
    strcpy (array [1], "fghij");
    strcpy (array [2], "klmno");
    strcpy (array [3], "pqrst");
    strcpy (array [4], "uvwxy");
    printf ("array: %s\n", array [1]);
    printgraph (array);
    for (int i = 0; i < 5; ++i)
        free (array[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28469244_28469345_13_31
28469244_28478729_15_28
Title: Passing a 2-dimensional character array to a function 
----------------------------------------

int main (int argc, char *argv []) {
    char *array [5];
    for (int i = 0; i < 5; ++i)
        array[i] = malloc (6);
    strcpy (array [0], "abcde");
    strcpy (array [1], "fghij");
    strcpy (array [2], "klmno");
    strcpy (array [3], "pqrst");
    strcpy (array [4], "uvwxy");
    printf ("array: %s\n", array [1]);
    printgraph (array);
    for (int i = 0; i < 5; ++i)
        free (array[i]);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char array [5] [6];
    printf ("%u\n", array);
    printf ("%u\n", & array);
    strcpy (array [0], "abcde");
    strcpy (array [1], "fghij");
    strcpy (array [2], "klmno");
    strcpy (array [3], "pqrst");
    strcpy (array [4], "uvwxy");
    printf ("array: %s\n", array [1]);
    printgraph (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28481522_28481996_1_15
28481522_28482613_1_15
Title: Binary Search on Arrays using Recursion in C 
----------------------------------------

int retindex (int ele, int be, int la) {
    int mid;
    mid = (be + la) / 2;
    if (mid == be) {
        if (ele == arr[mid])
            return mid;
        return -1;
    }
    if (ele < arr[mid])
        return retindex (ele, be, mid);
    if (ele > arr[mid])
        return retindex (ele, mid, la);
    return mid;
}
----------------------------------------

int retindex (int sorted_array [], int ele, int be, int la) {
    int mid = (be + la) / 2;
    if (mid == be) {
        if (ele == sorted_array[mid])
            return mid;
        return -1;
    }
    if (ele < sorted_array[mid])
        return retindex (sorted_array, ele, be, mid);
    else if (ele > sorted_array[mid])
        return retindex (sorted_array, ele, mid, la);
    else
        return mid;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2849716_2849742_1_23
2849716_2849936_1_16
Title: counting characters program in c 
----------------------------------------

int main (void) {
    int ch = ' ', lastch, w = 0, c = 0;
    do {
        lastch = ch;
        ch = getchar ();
        ++c;
        if (ch == ' ') {
            if (lastch != ' ') {
                ++w;
            }
        }
    }
    while (ch != '\n');
    if (lastch != ' ') {
        ++w;
    }
    printf ("num of characters is  %d\n", c);
    printf ("num of words is  %d\n", w);
    return 0;
}
----------------------------------------

void main (void) {
    int ch, w = 0, c = 0, lastch = 32;
    while ((ch = getche ()) != 13) {
        ++c;
        if (ch == 32 && lastch != ch)
            ++w;
        lastch = ch;
    }
    if (lastch != 32)
        ++w;
    printf ("\nnum of characters is  %d", c);
    printf ("\nnum of words is  %d", w);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28498332_28498468_4_16
28498332_28498471_1_15
Title: Insertion at end in linked list 
----------------------------------------

void insertatend (int x) {
    node *ptr;
    ptr = malloc (sizeof (node));
    ptr->info = x;
    ptr->next = NULL;
    if (head == NULL) {
        head = ptr;
    }
    else {
        tail->next = ptr;
    }
    tail = ptr;
}
----------------------------------------

void insertatend (node **hd, int x) {
    node *ptr = NULL, *cur = NULL;
    if (!(ptr = malloc (sizeof (node)))) {
        return;
    }
    if (!*hd) {
        *hd = ptr;
    }
    else {
        cur = *hd;
        while (cur->next) {
            cur = cur->next;
        }
        cur->next = ptr;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28498332_28498471_1_15
28498332_28499331_1_17
Title: Insertion at end in linked list 
----------------------------------------

void insertatend (node **hd, int x) {
    node *ptr = NULL, *cur = NULL;
    if (!(ptr = malloc (sizeof (node)))) {
        return;
    }
    if (!*hd) {
        *hd = ptr;
    }
    else {
        cur = *hd;
        while (cur->next) {
            cur = cur->next;
        }
        cur->next = ptr;
    }
}
----------------------------------------

void insertatend (int x) {
    node *ptr;
    ptr = malloc (sizeof (node));
    ptr->info = x;
    ptr->next = NULL;
    if (head == NULL) {
        head = ptr;
    }
    else {
        node *tmp = head;
        while (tmp->next)
            tmp = tmp->next;
        tmp->next = ptr;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28505929_28506692_9_34
28505929_28508964_5_40
Title: Command line arguments and read file/print text in C 
----------------------------------------

int main (int argc, char *argv []) {
    int col1, col2;
    FILE *fp;
    char ch [256];
    if (argc < 4)
        fatal ("Need three arguments");
    if (sscanf (argv[2], "%d", &col1) != 1)
        fatal ("Argument 1 error");
    if (sscanf (argv[3], "%d", &col2) != 1)
        fatal ("Argument 2 error");
    printf ("Read columns %d and %d from file %s\n", col1, col2, argv [1]);
    if ((fp = fopen (argv[1], "r")) == NULL)
        fatal ("Unable to open file");
    while (fgets (ch, 256, fp) != NULL) {
        printf ("%s", ch);
    }
    fclose (fp);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int col1, col2;
    int size = 512;
    char ch [size];
    char *temp [size];
    char *token;
    if (argc == 1) {
        fprintf (stderr, "I need more!\n");
        return 1;
    }
    else {
        int i;
        for (i = 0; i < argc; i++) {
            printf ("argv[%d] = %s\n", i, argv [i]);
        }
        if (sscanf (argv[1], "%d", &col1) != 1)
            return 1;
        if (sscanf (argv[2], "%d", &col2) != 1)
            return 1;
        while (fgets (ch, size, stdin) != NULL) {
            token = strtok (ch, " ");
            while (token != NULL) {
                printf (" %s", token);
                temp[i++] = token;
                token = strtok (NULL, " ");
            }
        }
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28521620_28521876_4_20
28521620_28521881_58_72
Title: issues trying to make rows in c program 
----------------------------------------

int prime (int limit, int col) {
    int i, j, w = 0;
    for (i = 2; i <= limit; i++) {
        for (j = 2; j <= i; j++) {
            if (i % j == 0) {
                break;
            }
        }
        if (i == j) {
            if (w++ % col == 0)
                printf ("\n");
            printf ("%7d", i);
        }
    }
    printf ("\n");
    return w;
}
----------------------------------------

void prime (int limit, int column) {
    int i, j, cnt;
    cnt = 0;
    for (i = 0; i < limit; i++) {
        if (is_prime (i)) {
            printf ("%4d ", i);
            cnt++;
            if ((cnt % column) == 0) {
                printf ("\n");
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28521620_28521876_4_20
28521620_28521940_39_62
Title: issues trying to make rows in c program 
----------------------------------------

int prime (int limit, int col) {
    int i, j, w = 0;
    for (i = 2; i <= limit; i++) {
        for (j = 2; j <= i; j++) {
            if (i % j == 0) {
                break;
            }
        }
        if (i == j) {
            if (w++ % col == 0)
                printf ("\n");
            printf ("%7d", i);
        }
    }
    printf ("\n");
    return w;
}
----------------------------------------

void prime (int limit, int col) {
    int i, j;
    int count;
    count = 0;
    for (i = 2; i <= limit; i++) {
        for (j = 2; j <= i; j++) {
            if (i % j == 0)
                break;
        }
        if (i == j) {
            count += 1;
            printf ("%5d", i);
            if ((count != 0) && (count % col == 0))
                printf ("\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28521620_28521881_58_72
28521620_28521940_39_62
Title: issues trying to make rows in c program 
----------------------------------------

void prime (int limit, int column) {
    int i, j, cnt;
    cnt = 0;
    for (i = 0; i < limit; i++) {
        if (is_prime (i)) {
            printf ("%4d ", i);
            cnt++;
            if ((cnt % column) == 0) {
                printf ("\n");
            }
        }
    }
}
----------------------------------------

void prime (int limit, int col) {
    int i, j;
    int count;
    count = 0;
    for (i = 2; i <= limit; i++) {
        for (j = 2; j <= i; j++) {
            if (i % j == 0)
                break;
        }
        if (i == j) {
            count += 1;
            printf ("%5d", i);
            if ((count != 0) && (count % col == 0))
                printf ("\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28521620_28521881_7_24
28521620_28521940_6_19
Title: issues trying to make rows in c program 
----------------------------------------

int main () {
    int limit, col;
    printf ("Table of Primes\n");
    printf ("===============\n");
    printf ("Upper limit: ");
    scanf ("%d", & limit);
    getchar ();
    printf ("# of columns: ");
    scanf ("%d", & col);
    prime (limit, col);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int limit, col;
    printf ("Table of Primes\n");
    printf ("===============\n");
    limit = readint ("Upper limit");
    col = readint ("# of columns");
    prime (limit, col);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28527362_28527669_1_22
28527362_28527885_1_27
Title: Recursive boolean function to check if a string is a palindrome 
----------------------------------------

bool ispalindrome (char str []) {
    int len = strlen (str);
    if (len <= 1) {
        return TRUE;
    }
    else if (str[0] != str[len - 1]) {
        reutrn FALSE;
    }
    else {
        char *str2 = malloc (len -1);
        strncpy (str2, str + 1, len - 2);
        str2[len - 2] = NULL;
        BOOL result = ispalindrome (str2);
        free (str2);
        return result;
    }
}
----------------------------------------

bool ispalindrome (char str []) {
    int l = strlen (str);
    if (l == 0 || l == 1)
        return true;
    char t = str[l - 1];
    str[l - 1] = '\0';
    bool res = ispalindrome (str +1);
    str[l - 1] = t;
    if (res == false)
        return res;
    return (str[0] == str[l - 1]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28532075_28532436_1_26
28532075_28571640_63_90
Title: Pointer to structures in C langage 
----------------------------------------

emp *saisir (emp *t, int *m) {
    int i, s;
    printf ("\n  Donner le nombre des employes a ajouter : ");
    scanf ("%d", & s);
    t = realloc (t, (*m + s) * sizeof (emp));
    if (!t) {
        exit (1);
    }
    for (i = *m; i < *m + s; i++) {
        printf ("\n\n\n donner les info de %d eme employe \n", i + 1);
        printf ("\n le nom : ");
        scanf ("%s", (t + i) -> nom);
        printf ("\n le prenom : ");
        scanf ("%s", (t + i) -> prenom);
        printf ("\n l \' age  : ");
        scanf ("%d", & (t + i) -> age);
        printf ("\n le salaire : ");
        scanf ("%f", & (t + i) -> salaire);
    }
    *m = *m + s;
    return t;
}
----------------------------------------

emp *saisir (emp *t, int *m) {
    int i, j, s;
    printf ("\n  Donner le nombre des employes a ajouter : ");
    scanf ("%d", & s);
    if ((*m) == 0)
        t = malloc (sizeof (emp));
    i = *m;
    j = 0;
    do {
        printf ("\n\n\n donner les info de %d eme employe \n", i + 1);
        printf ("\n le nom : ");
        scanf ("%s", (t + i) -> nom);
        printf ("\n le prenom : ");
        scanf ("%s", (t + i) -> prenom);
        printf ("\n l \' age  : ");
        scanf ("%d", & (t + i) -> age);
        printf ("\n le salaire : ");
        scanf ("%f", & (t + i) -> salaire);
        (*m)++;
        t = realloc (t, (*m + 1) * sizeof (emp));
        i++;
        j++;
    }
    while (j < s);
    return t;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28535622_28535835_3_30
28535622_28535935_1_42
Title: Duplicate Characters Removal - From O(n^2) to O(n) 
----------------------------------------

int main () {
    char a [100], b [100];
    int bucket [256] = {0};
    int i;
    printf ("Enter the string:");
    scanf ("%s", a);
    int n = strlen (a);
    for (i = 0; i < n; ++i) {
        bucket[a[i]]++;
    }
    int b_pos = 0;
    for (i = 0; i < 256; ++i) {
        if (bucket[i] > 0) {
            b[b_pos] = (char) i;
            b_pos++;
        }
    }
    b[b_pos] = '\0';
    printf ("Modified string : %s", b);
}
----------------------------------------

int main () {
    char a [100], b [100];
    int i, n, j, count = 0, k = 0;
    printf ("ENTRE THE STRING \n");
    scanf ("%s", a);
    n = strlen (a);
    b[0] = a[0];
    k = 1;
    for (i = 1; i < n; i++) {
        for (j = 0; j < i; j++) {
            if (a[i] == b[j]) {
                count = 1;
                break;
            }
        }
        if (count == 0) {
            b[k] = a[i];
            k++;
        }
        else {
            count = 0;
        }
    }
    b[k] = 0;
    printf ("RESULT %s", b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28556641_28557196_1_23
28556641_28558349_1_16
Title: A program that counts unique elements in an un-ordered array 
----------------------------------------

int unique_elements (int arr [], int len) {
    int counted [len], j, n, count, flag;
    counted[0] = arr[0];
    count = 1;
    for (j = 0; j <= len - 1; ++j) {
        flag = 1;
        for (n = 0; n < count; ++n) {
            if (arr[j] == counted[n]) {
                flag = 0;
            }
        }
        if (flag == 1) {
            ++count;
            counted[count - 1] = arr[j];
        }
    }
    return count;
}
----------------------------------------

int unique_elements (int arr, int len) {
    if (len <= 0)
        return 0;
    int unique = 1;
    for (int outer = 1; outer < len; ++outer) {
        int is_unique = 1;
        for (int inner = 0; is_unique && inner < outer; ++inner) {
            if (arr[inner] == arr[outer])
                is_unique = 0;
        }
        if (is_unique)
            ++unique;
    }
    return unique;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28567417_28567817_3_27
28567417_28568282_3_21
Title: Pointer arithmetic around cast 
----------------------------------------

int main (int argc, char *argv []) {
    int arr [5];
    int i;
    for (i = 0; i < 5; i++)
        arr[i] = 0;
    printf ("Before: ");
    for (i = 0; i < sizeof (int) * 5; i++)
        printf ("%2.2X ", ((char *) arr)[i]);
    printf ("\n");
    ((short *) (((char *) (&arr[1])) + 8))[3] = 100;
    printf ("After: ");
    for (i = 0; i < sizeof (int) * 5; i++)
        printf ("%2.2X ", ((char *) arr)[i]);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int arr [5];
    char *start = (char *) &arr;
    char *end = (char *) &((short *) (((char *) (&arr[1])) + 8))[3];
    printf ("sizeof(int)=%zu\n", sizeof (int));
    printf ("sizeof(short)=%zu\n", sizeof (short));
    printf ("offset=%td <- THIS IS THE ANSWER\n", (end - start));
    printf ("100=%04x (hex)\n", 100);
    for (size_t i = 0; i < 5; ++i) {
        printf ("arr[%zu]=%d (%08x hex)\n", i, arr [i], arr [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28580345_28582807_12_35
28580345_28598077_2_26
Title: How to count Integer array elements like char based strlen() in C? 
----------------------------------------

int main (void) {
    istruct intarr = {0};
    int i;
    printf ("Enter some integers:\n");
    while (scanf ("%d", &i) == 1) {
        if (intarr.length >= intarr.maxlen) {
            intarr.maxlen += ARRAY_STEP;
            intarr.array = realloc (intarr.array, intarr.maxlen * sizeof (int));
            if (intarr.array == NULL) {
                printf ("Memory allocation error\n");
                exit (1);
            }
        }
        intarr.array[intarr.length++] = i;
    }
    printf ("You entered:\n");
    for (i = 0; i < intarr.length; i++)
        printf ("%-10d", intarr.array[i]);
    printf ("\n");
    if (intarr.array)
        free (intarr.array);
    return 0;
}
----------------------------------------

int main () {
    double a [100000], mx = 0;
    int i, j, c = 0;
    printf ("Enter as many numbers as you wish . Press Ctrl+D or any character to stop inputting :\n");
    for (i = 0; i < 100000; i++) {
        if ((scanf ("%lf", &a[i])) == 1)
            c++;
    }
    for (j = 0; j < c; j++) {
        if (a[j] > mx)
            mx = a[j];
    }
    printf ("You have inserted %d values and the maximum is:%g", c, mx);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28580345_28582807_12_35
28580345_52715129_3_23
Title: How to count Integer array elements like char based strlen() in C? 
----------------------------------------

int main (void) {
    istruct intarr = {0};
    int i;
    printf ("Enter some integers:\n");
    while (scanf ("%d", &i) == 1) {
        if (intarr.length >= intarr.maxlen) {
            intarr.maxlen += ARRAY_STEP;
            intarr.array = realloc (intarr.array, intarr.maxlen * sizeof (int));
            if (intarr.array == NULL) {
                printf ("Memory allocation error\n");
                exit (1);
            }
        }
        intarr.array[intarr.length++] = i;
    }
    printf ("You entered:\n");
    for (i = 0; i < intarr.length; i++)
        printf ("%-10d", intarr.array[i]);
    printf ("\n");
    if (intarr.array)
        free (intarr.array);
    return 0;
}
----------------------------------------

int main () {
    int a [100], max = INT_MIN;
    int i, j, count = 0;
    printf ("Start Entering the integers... Give any non-integer input to stop:\n");
    for (i = 0; i < 100; i++) {
        if ((scanf ("%d", &a[i])) == 1) {
            count++;
            if (a[i] > max) {
                max = a[i];
            }
        }
        else
            break;
    }
    printf ("number of input values: %d;\nThe maximum input value: %d", count, max);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28580345_28598077_2_26
28580345_52715129_3_23
Title: How to count Integer array elements like char based strlen() in C? 
----------------------------------------

int main () {
    double a [100000], mx = 0;
    int i, j, c = 0;
    printf ("Enter as many numbers as you wish . Press Ctrl+D or any character to stop inputting :\n");
    for (i = 0; i < 100000; i++) {
        if ((scanf ("%lf", &a[i])) == 1)
            c++;
    }
    for (j = 0; j < c; j++) {
        if (a[j] > mx)
            mx = a[j];
    }
    printf ("You have inserted %d values and the maximum is:%g", c, mx);
    return 0;
}
----------------------------------------

int main () {
    int a [100], max = INT_MIN;
    int i, j, count = 0;
    printf ("Start Entering the integers... Give any non-integer input to stop:\n");
    for (i = 0; i < 100; i++) {
        if ((scanf ("%d", &a[i])) == 1) {
            count++;
            if (a[i] > max) {
                max = a[i];
            }
        }
        else
            break;
    }
    printf ("number of input values: %d;\nThe maximum input value: %d", count, max);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28593724_28593993_3_29
28593724_28594144_65_85
Title: how to make a char into one word in C 
----------------------------------------

int main () {
    FILE *pFile;
    char mystring [100];
    const char delimters [2] = " ,:";
    char *token;
    pFile = fopen ("myfile.txt", "r");
    if (pFile == NULL)
        perror ("Error opening file");
    else {
        if (fgets (mystring, 100, pFile) != NULL)
            token = strtok (mystring, delimiters);
        while (token != NULL) {
            printf (" %s\n", token);
            token = strtok (NULL, delimiters);
        }
        fclose (pFile);
    }
    return 0;
}
----------------------------------------

int main () {
    const char *filename = "your-file-name-here";
    char **words = load_words_from_file (filename);
    size_t counter = 0;
    if (words == NULL) {
        printf ("no words found in the file\n");
        return -1;
    }
    while (words[counter] != NULL) {
        printf ("%zuth word: %s\n", 1 + counter, words [counter]);
        free (words [counter]);
        counter += 1;
    }
    free (words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28593724_28593993_3_29
28593724_28595840_5_88
Title: how to make a char into one word in C 
----------------------------------------

int main () {
    FILE *pFile;
    char mystring [100];
    const char delimters [2] = " ,:";
    char *token;
    pFile = fopen ("myfile.txt", "r");
    if (pFile == NULL)
        perror ("Error opening file");
    else {
        if (fgets (mystring, 100, pFile) != NULL)
            token = strtok (mystring, delimiters);
        while (token != NULL) {
            printf (" %s\n", token);
            token = strtok (NULL, delimiters);
        }
        fclose (pFile);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char **words = NULL;
    char **temp = NULL;
    char word [30] = {'\0'};
    int ch = 0;
    int each = 0;
    int found = 0;
    int count = 0;
    int wordsize = 0;
    FILE *pf = NULL;
    if (argc != 2) {
        printf ("useage: program filename\n");
        return 1;
    }
    if ((pf = fopen (argv[1], "r")) == NULL) {
        perror ("could not open file");
        return 1;
    }
    while (1) {
        if ((fscanf (pf, "%29[a-zA-Z]", word)) == 1) {
            found = 0;
            for (each = 0; each < wordsize; each++) {
                if (strcmp (words[each], word) == 0) {
                    found = 1;
                    break;
                }
            }
            if (found == 0) {
                wordsize += 1;
                temp = realloc (words, wordsize * sizeof (char *));
                if (temp != NULL) {
                    words = temp;
                    words[wordsize - 1] = malloc (strlen (word) +1);
                    if (words[wordsize - 1] != NULL) {
                        strcpy (words [wordsize - 1], word);
                    }
                    else {
                        printf ("malloc failed\n");
                        wordsize -= 1;
                        break;
                    }
                }
                else {
                    printf ("realloc failed\n");
                    wordsize -= 1;
                    break;
                }
            }
            printf ("%s\n", word);
        }
        else {
            if ((ch = fgetc (pf)) == EOF) {
                break;
            }
        }
    }
    printf ("--DONE Reading file--\n");
    for (each = 0; each < wordsize; each++) {
        printf ("%s\n", words [each]);
    }
    count = 0;
    printf ("Enter a word to search for\n");
    if ((scanf ("%29[a-zA-Z]", word)) == 1) {
        for (each = 0; each < wordsize; each++) {
            if (strcmp (words[each], word) == 0) {
                printf ("Found %s at index %d\n" word, each);
                count++;
            }
        }
        printf ("Found %s %d times\n" word, count);
    }
    for (each = 0; each < wordsize; each++) {
        free (words [each]);
    }
    free (words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28593724_28594144_65_85
28593724_28595840_5_88
Title: how to make a char into one word in C 
----------------------------------------

int main () {
    const char *filename = "your-file-name-here";
    char **words = load_words_from_file (filename);
    size_t counter = 0;
    if (words == NULL) {
        printf ("no words found in the file\n");
        return -1;
    }
    while (words[counter] != NULL) {
        printf ("%zuth word: %s\n", 1 + counter, words [counter]);
        free (words [counter]);
        counter += 1;
    }
    free (words);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char **words = NULL;
    char **temp = NULL;
    char word [30] = {'\0'};
    int ch = 0;
    int each = 0;
    int found = 0;
    int count = 0;
    int wordsize = 0;
    FILE *pf = NULL;
    if (argc != 2) {
        printf ("useage: program filename\n");
        return 1;
    }
    if ((pf = fopen (argv[1], "r")) == NULL) {
        perror ("could not open file");
        return 1;
    }
    while (1) {
        if ((fscanf (pf, "%29[a-zA-Z]", word)) == 1) {
            found = 0;
            for (each = 0; each < wordsize; each++) {
                if (strcmp (words[each], word) == 0) {
                    found = 1;
                    break;
                }
            }
            if (found == 0) {
                wordsize += 1;
                temp = realloc (words, wordsize * sizeof (char *));
                if (temp != NULL) {
                    words = temp;
                    words[wordsize - 1] = malloc (strlen (word) +1);
                    if (words[wordsize - 1] != NULL) {
                        strcpy (words [wordsize - 1], word);
                    }
                    else {
                        printf ("malloc failed\n");
                        wordsize -= 1;
                        break;
                    }
                }
                else {
                    printf ("realloc failed\n");
                    wordsize -= 1;
                    break;
                }
            }
            printf ("%s\n", word);
        }
        else {
            if ((ch = fgetc (pf)) == EOF) {
                break;
            }
        }
    }
    printf ("--DONE Reading file--\n");
    for (each = 0; each < wordsize; each++) {
        printf ("%s\n", words [each]);
    }
    count = 0;
    printf ("Enter a word to search for\n");
    if ((scanf ("%29[a-zA-Z]", word)) == 1) {
        for (each = 0; each < wordsize; each++) {
            if (strcmp (words[each], word) == 0) {
                printf ("Found %s at index %d\n" word, each);
                count++;
            }
        }
        printf ("Found %s %d times\n" word, count);
    }
    for (each = 0; each < wordsize; each++) {
        free (words [each]);
    }
    free (words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28603618_28603781_1_13
28603618_28603808_1_10
Title: How to return a value from a function in C? 
----------------------------------------

int preced (char arr) {
    if (arr == '/')
        return 4;
    else if (arr == '*')
        return 3;
    else if (arr == '+' || arr == '-')
        return 2;
    else if (arr == '(')
        return 1;
    else
        return 0;
}
----------------------------------------

int preced (char arr) {
    switch (arr) {
    case '/' :
        return 4;
    case '*' :
        return 3;
    case '+' :
    case '-' :
        return 2;
    case '(' :
        return 1;
    default :
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
286123_286172_3_20
286123_286320_3_22
Title: How to read a line from file? 
----------------------------------------

void main (int argc, char **argv) {
    FILE *f;
    f = fopen (argv[1], "r");
    while (1) {
        char char_or_num [32] [5];
        int i;
        int did_read;
        did_read = fscanf (f, "%32[0-9a-zA-Z]: (%32[0-9a-zA-Z], %32[0-9a-zA-Z]), (%32[0-9a-zA-Z], %32[0-9a-zA-Z])\n", char_or_num[0], char_or_num[1], char_or_num[2], char_or_num[3], char_or_num[4]);
        if (did_read != 5) {
            break;
        }
        printf ("%s, %s, %s, %s, %s\n", char_or_num [0], char_or_num [1], char_or_num [2], char_or_num [3], char_or_num [4]);
    }
    fclose (f);
}
----------------------------------------

int main (void) {
    char buf [81];
    char parts [5] [11];
    while (fgets (buf, sizeof (buf), stdin) != NULL) {
        if (sscanf (buf, "%10[^:]: (%10[^,], %10[^)]), (%10[^,], %10[^)])", parts[0], parts[1], parts[2], parts[3], parts[4]) == 5) {
            printf ("parts: %s, %s, %s, %s, %s\n", parts [0], parts [1], parts [2], parts [3], parts [4]);
        }
        else {
            printf ("Invalid input: %s", buf);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28621173_28621193_1_12
28621173_28637415_1_33
Title: How to get the length of the line being read in from fgets and loop over it 
----------------------------------------

void readIt (char *argv []) {
    FILE *file = fopen (argv[1], "r");
    if (file) {
        char arr [200];
        while (fgets (arr, sizeof arr, file)) {
            const int len = strlen (arr);
            for (int i = 0; i < len; ++i) {
            }
        }
    }
}
----------------------------------------

void readIt (char *argv [], char arr [], int currS) {
    FILE *file = NULL;
    if (NULL == (file = fopen (argv[1], "r"))) {
        perror ("fopen failed");
        exit (EXIT_FAILURE);
    }
    while (fgets (arr, currS, file)) {
        int len = strlen (arr);
        if ('\n' == arr[strlen (arr) - 1]) {
            arr[strlen (arr) - 1] = '\0';
            len--;
        }
        printf ("\nNumber of characters in line: %d\n", len);
        printf ("%s\n", arr);
    }
    fclose (file);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28621956_28622542_6_105
28621956_28623406_3_89
Title: Parse Error in string in C 
----------------------------------------

int main (void) {
    int lake, beach, samples;
    char recc [20], lakename [20], beachname [20];
    FILE *in;
    in = fopen ("july15.data", "r");
    if (in == NULL) {
        exit (EXIT_FAILURE);
    }
    char *line = NULL;
    size_t len = 0;
    ssize_t read;
    printf ("Lake   |   Beach   | Avg E Coli Level |  Reccomendation |\n");
    while ((read = getline (&line, &len, in)) != -1) {
        double sum = 0;
        int tokens = 0;
        int i = 0;
        for (; i < len; i++) {
            if (line[i] == ' ') {
                tokens++;
            }
        }
        tokens = tokens + 1;
        if (tokens < 4) {
            continue;
        }
        i = 0;
        double *values = malloc (sizeof (double) * tokens);
        char *token = strtok (line, " ");
        while (token != NULL) {
            values[i++] = atof (token);
            token = strtok (NULL, " ");
        }
        lake = values[0];
        beach = values[1];
        samples = values[2];
        for (i = 3; i < tokens; i++) {
            sum = sum + values[i];
        }
        free (values);
        double ave = sum / samples;
        if (lake == 1)
            strcpy (lakename, "Ontario");
        else if (lake == 2)
            strcpy (lakename, "Erie");
        else if (lake == 3)
            strcpy (lakename, "Huron");
        else if (lake == 4)
            strcpy (lakename, "Muskoka");
        else if (lake == 5)
            strcpy (lakename, "Simcoe");
        if (beach == 100)
            strcpy (beachname, "Kew Beach");
        else if (beach == 101)
            strcpy (beachname, "Sunnyside Beach");
        else if (beach == 102)
            strcpy (beachname, "Sandbanks");
        else if (beach == 201)
            strcpy (beachname, "Port Dover");
        else if (beach == 202)
            strcpy (beachname, "Port Burwell");
        else if (beach == 203)
            strcpy (beachname, "Crystal Beach");
        else if (beach == 301)
            strcpy (beachname, "Goderich");
        else if (beach == 302)
            strcpy (beachname, "Sauble Beach");
        else if (beach == 303)
            strcpy (beachname, "Kincardine");
        else if (beach == 401)
            strcpy (beachname, "Muskoka Beach");
        else if (beach == 501)
            strcpy (beachname, "Sibbald Point");
        if (samples < 3)
            strcpy (recc, "INSUFFICENT DATA");
        else if (samples > 3 && ave < 50)
            strcpy (recc, "OPEN");
        else if (samples > 3 && ave > 50)
            strcpy (recc, "CLOSED");
        printf ("%s,      %s,      %f,      %s\n", lakename, beachname, ave, recc);
    }
    free (line);
    fclose (in);
    return (0);
}
----------------------------------------

int main (void) {
    int lake, beach, samples, count, sum;
    float e_coli, ave;
    char *recc;
    char *lakename;
    char *beachname;
    FILE *in;
    sum = 0;
    count = 0;
    in = fopen ("july15.data", "r");
    printf ("Lake   |   Beach   | Avg E Coli Level |  Reccomendation |\n");
    int iterator;
    char lake_names [6] [10] = {{"Ontario"}, {"Erie"}, {"Huron"}, {"Muskoka"}, {"Simcoe"}, {"No lake"},};
    int beach_code [12] = {100, 101, 102, 201, 202, 203, 301, 302, 303, 401, 501, 0};
    char beach_names [12] [20] = {{"Kew Beach"}, {"Sunnyside Beach"}, {"Sandbanks"}, {"Port Dover"}, {"Port Burwell"}, {"Crystal Beach"}, {"Goderich"}, {"Sauble Beach"}, {"ncardine"}, {"Muskoka Beach"}, {"Sibbald Point"}, {"No beach"},};
    char reccs [3] [20] = {{"INSUFFICENT DATA"}, {"OPEN"}, {"CLOSED"},};
    while (fscanf (in, "%d, %d, %d", &lake, &beach, &samples) != EOF) {
        recc = &reccs[0][0];
        lakename = &lake_names[5][0];
        beachname = &beach_names[11][0];
        count = samples;
        while (count < samples) {
            fscanf (in, "%f", & e_coli);
            sum = sum + samples;
        }
        ave = sum / samples;
        for (iterator = 1; iterator < 5; iterator++) {
            if (lake == iterator)
                lakename = &lake_names[iterator][0];
        }
        for (iterator = 0; iterator < 11; iterator++) {
            if (beach == beach_code[iterator])
                beachname = &beach_names[iterator][0];
        }
        if (samples < 3)
            recc = &reccs[0][0];
        else if (samples > 3 && ave < 50)
            recc = &reccs[1][0];
        else if (samples > 3 && ave > 50)
            recc = &reccs[2][0];
        printf ("%s,      %s,      %f,      %s\n", lakename, beachname, ave, recc);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28639429_28639510_3_11
28639429_28639584_1_10
Title: Segmentation fault (core dumped) in C program 
----------------------------------------

char *decrypt (char const *p, int key) {
    char *tmp = malloc (strlen (p) +1);
    int i = 0;
    for (; p[i] != '\0'; i++) {
        tmp[i] = p[i] - key;
    }
    tmp[i] = '\0';
    return tmp;
}
----------------------------------------

char *decrypt (char *p, int key) {
    char *tmp;
    tmp = (char *) malloc (MAX);
    if (!tmp)
        return NULL;
    for (int i = 0; p[i] != '\0'; i++) {
        tmp[i] = p[i] - key;
    }
    return tmp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28642026_28642085_38_48
28642026_28642113_36_69
Title: Can't seem to pass information between function and main 
----------------------------------------

void direction (double compass) {
    int j;
    for (j = 0; j < ARRAY_SIZE (dirs); ++j)
        if (compass >= dirs[j].lo && compass <= dirs[j].hi) {
            printf ("Direction is %s\n", dirs [j].name);
            return;
        }
    printf ("Direction is not between 0 and 360 degrees.\n");
}
----------------------------------------

float direction (float compass) {
    if (compass >= 354.38 && compass <= 360.00) {
        printf ("You are heading North \n");
    }
    else if (compass >= 0.0 && compass <= 39.37) {
        printf ("You are heading North \n");
    }
    else if (compass >= 39.38 && compass <= 84.37) {
        printf ("You are heading Northeast \n");
    }
    else if (compass >= 84.38 && compass <= 129.37) {
        printf ("You are heading East \n");
    }
    else if (compass >= 129.38 && compass <= 174.37) {
        printf ("You are heading Southeast \n");
    }
    else if (compass >= 174.38 && compass <= 219.37) {
        printf ("You are heading South \n");
    }
    else if (compass >= 219.38 && compass <= 264.37) {
        printf ("You are heading Southwest \n");
    }
    else if (compass >= 264.38 && compass <= 309.37) {
        printf ("You are heading West \n");
    }
    else if (compass >= 309.38 && compass <= 354.37) {
        printf ("You are heading Northwest \n");
    }
    else {
        printf ("You did not enter a value between 0 - 360 degrees");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28643793_28643936_1_14
28643793_28644254_10_20
Title: Find % Mod for floating variables 
----------------------------------------

int main (void) {
    int dollars, cents, count, amount;
    count = scanf ("%d.%d", &dollars, &cents);
    if (count == 1)
        amount = dollars * 100;
    else if (count == 2 && cents < 100)
        amount = dollars * 100 + cents;
    else
        amount = 0;
    printf ("%d\n", amount);
}
----------------------------------------

int main (int argc, char **args) {
    int k;
    float change = 1.01f, number;
    printf ("Make %.2f change:\n", change);
    for (k = 0; k < DENOMINATIONS; k++) {
        number = change / values[k];
        printf ("%-10s %10f %5d\n", names [k], number, (int) number);
        change = fmodf (change, values[k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28647791_28647872_18_43
28647791_28647967_14_27
Title: Reading and printing a file in C 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fileInput;
    float gallons;
    int element;
    char id [10];
    char odometer [10];
    fileInput = fopen ("gasData.txt", "r");
    if (fileInput == NULL) {
        fprintf (stderr, "cannot open `gasData.txt'\n");
        return -1;
    }
    for (element = 0; element < N; element++) {
        if (fscanf (fileInput, "%9s%9s%f", id, odometer, &gallons) == 3) {
            printf ("element = %d:, id = %s, odometer = %s, gallons = %f\n", element, id, odometer, gallons);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    float gallons = 0.0;
    int element = 0;
    char id [10] = {0}, odometer [10] = {0};
    FILE *fileInput = fopen ("gasData.txt", "r");
    if (fileInput == NULL)
        return -1;
    for (element = 0; element < N; element++)
        if (fscanf (fileInput, "%9s%9s%f", id, odometer, &gallons) == 3)
            printf ("element = %d:, id = %s, odometer = %s, gallons = %f\n", element, id, odometer, gallons);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2865583_2865632_4_15
2865583_2865644_5_16
Title: gethostbyname in C 
----------------------------------------

int main (int argc, char *argv []) {
    struct hostent *hstnm;
    if (argc != 2) {
        fprintf (stderr, "usage: %s hostname\n", argv [0]);
        return 1;
    }
    hstnm = gethostbyname (argv[1]);
    if (!hstnm)
        return 1;
    printf ("Name: %s\n", hstnm -> h_name);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char hostname [HOST_NAME_MAX + 1];
    hostname[HOST_NAME_MAX] = 0;
    if (gethostname (hostname, HOST_NAME_MAX) == 0)
        puts (hostname);
    else
        perror ("gethostname");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28676223_28676241_5_21
28676223_28676869_5_14
Title: "How to add null terminator to char pointer when using strcpy" 
----------------------------------------

int main (void) {
    char *target;
    const char *src;
    src = "Test";
    target = malloc (1 + strlen (src));
    if (target == NULL)
        return -1;
    strcpy (target, src);
    printf ("%s\n", target);
    free (target);
    return 0;
}
----------------------------------------

int main (void) {
    const char *src = "Test";
    char *target = strdup (src);
    if (target == NULL) {
        return EXIT_FAILURE;
    }
    printf ("%s\n", target);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28683485_28683855_15_31
28683485_28686740_14_23
Title: Unique Combinations of Digits in C 
----------------------------------------

int main (int argc, char **argv) {
    char array [256];
    int i, n;
    int max = (argc > 1) ? strtol (argv[1], NULL, 0) : 6;
    int silent = 0;
    long long count = 0;
    if (max < 0) {
        max = -max;
        silent = 1;
    }
    array[sizeof (array) - 1] = '\0';
    for (n = 1; n <= max; n++) {
        count += enumerate (array + sizeof (array) - 1 - n, 0, n, '1', silent);
        if (silent)
            printf ("%lld combinations between 0 and 1E%d\n", count, n);
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int a [N] = {0};
    while (next (a +N - 1, N) != 10) {
        for (int i = 0; i < N; i++) {
            if (a[i] != 0)
                printf ("%d", a[i]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28710239_28710407_5_48
28710239_28710611_3_41
Title: Loops and functions:Retirment lab for class 
----------------------------------------

int main (void) {
    int year;
    double balance, target, finalbalance, deposit, rate, interest;
    balance = 250000.0;
    deposit = 20000.0;
    interest = 10.0;
    target = 2000000.0;
    year = 0;
    interest = 0;
    finalbalance = balance + deposit + interest;
    printf ("\nYear    Deposit    Interest    Balance");
    printf ("\n----    -------    --------    -------");
    printf ("\n%d   %.2lf    %.2lf    %.2lf", year, deposit, interest, finalbalance);
    do {
        finalbalance = finalbalance + deposit + interest;
        year += 1;
        interest = (finalbalance + deposit) * RATE;
        printf ("\n%d    %.2lf    %.2lf    %.2lf", year, deposit, interest, finalbalance);
    }
    while (finalbalance <= target);
    printf ("\nIn year %d, balance %.2lf reaches target %.2lf", year, balance, target);
    return 0;
}
----------------------------------------

int main (void) {
    int year;
    double balance, target, deposit, rate, interest;
    printf ("Enter starting balance ($): ");
    scanf ("%lf", & balance);
    printf ("Enter amount deposited every year ($): ");
    scanf ("%lf", & deposit);
    printf ("Enter estimated annual interest rate (%%): ");
    scanf ("%lf", & rate);
    rate = rate * 0.01;
    printf ("Enter target balance ($): ");
    scanf ("%lf", & target);
    year = 0;
    interest = 0;
    printf ("Year      Deposit      Interest       Balance\n");
    printf ("----    ---------    ----------    ----------\n");
    static const char fmt_str [] = "%4d   %10.2lf    %10.2lf    %10.2lf\n";
    printf (fmt_str, year, balance, interest, balance);
    while (balance < target) {
        year += 1;
        interest = (balance + deposit) * rate;
        balance = balance + deposit + interest;
        printf (fmt_str, year, balance, interest, balance);
    }
    printf ("In year %3d, balance %.2lf reaches target %.2lf\n", year, balance, target);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28713228_28713373_1_19
28713228_28713391_4_18
Title: How to Read Until Newline 
----------------------------------------

int main (void) {
    int hour, min;
    int ch;
    printf ("Enter a 12-hour time: ");
    scanf ("%d : %d", & hour, & min);
    while ((ch = getchar ()) != '\n' && ch != EOF) {
        if (toupper (ch) == 'P') {
            hour += 12;
        }
    }
    printf ("24-hour time: %d:%d", hour, min);
    return 0;
}
----------------------------------------

int main (void) {
    int hour, min;
    char ch;
    printf ("Enter a 12-hour time: ");
    char fmt [3];
    scanf ("%d : %d %s", & hour, & min, fmt);
    if (strcmp (fmt, "pm") == 0) {
        hour += 12;
    }
    printf ("24-hour time: %d:%d", hour, min);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28720263_28721123_6_31
28720263_28721609_4_29
Title: C - append argv[1] to end of unix PATH 
----------------------------------------

int main (int argc, char *argv []) {
    char *path = getenv ("PATH");
    char *temp;
    FILE *file;
    char tmp_file [100];
    temp = strtok (path, ":");
    while (temp != NULL) {
        printf ("temp: %s\n", temp);
        sprintf (tmp_file, "%s/%s", temp, argv [1]);
        printf ("tmp_file: %s\n", tmp_file);
        file = fopen (tmp_file, "r");
        if (file == NULL) {
            printf ("ERROR: File \"%s\" does not exist.\n", tmp_file);
        }
        else {
            printf ("SUCCESS! File \"%s\" exists.\n", tmp_file);
        }
        temp = strtok (NULL, ":");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *path = strdup (getenv ("PATH"));
    char *temp;
    FILE *file;
    char fileName [1024];
    temp = strtok (path, ":");
    while (temp != NULL) {
        printf ("temp: %s\n", temp);
        sprintf (fileName, "%s/%s", temp, argv [1]);
        printf ("fileName: %s\n", tmp_file);
        file = fopen (fileName, "r");
        if (file == NULL)
            printf ("ERROR: File \"%s\" does not exist.\n", fileName);
        else
            printf ("SUCCESS! File \"%s\" exists.\n", fileName);
        temp = strtok (NULL, ":");
    }
    free (path);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28726256_28727253_4_22
28726256_28727359_19_31
Title: Read 8 Bit Binary Numbers from text File in C 
----------------------------------------

int main (void) {
    FILE *file = fopen ("data", "r");
    char *result = calloc (1, sizeof (char));
    char line [8];
    int i = 0;
    for (; i < 8; i++) {
        char get = (char) getc (file);
        if (get == '0')
            *result <<= 1;
        else if (get == '1')
            *result = ((*result << 1) | 0x1);
    }
    printf ("->%c\n", * result);
    return 0;
}
----------------------------------------

int main (void) {
    unsigned x;
    char inp [100];
    FILE *fp;
    if ((fp = fopen ("test.txt", "r")) == NULL)
        fatal ("Unable to open file");
    while (fgets (inp, 99, fp) != NULL) {
        x = binstr2int (inp);
        printf ("%X\n", x);
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2873697_2874516_23_47
2873697_2875063_48_78
Title: Communication between parent and child 
----------------------------------------

int main (void) {
    int p;
    pipe (pipe_fds);
    varOP = (Operation *) malloc (sizeof (Operation));
    p = fork ();
    if (p == 0) {
        signal (SIGUSR1, finalResult);
        pause ();
    }
    if (p > 0) {
        varOP->op = '+';
        varOP->op1 = 2;
        varOP->op2 = 3;
        write (pipe_fds [1], varOP, sizeof (Operation));
        kill (p, SIGUSR1);
        wait (NULL);
    }
    return 0;
}
----------------------------------------

int main () {
    int p;
    key_t cle;
    p = fork ();
    cle = ftok (getenv ("titi"), 'A');
    id = shmget (cle, sizeof (Operation), 0);
    if (p == 0) {
        signal (SIGUSR1, hand);
        while (1)
            ;
        exit (0);
    }
    if (p > 0) {
        Operation *varOP = (Operation *) shmat (id, NULL, SHM_W);
        varOP->op = '+';
        varOP->op1 = 2;
        varOP->op2 = 3;
        shmdt ((char *) varOP);
        kill (p, SIGUSR1);
        wait (NULL);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28744407_28744452_2_11
28744407_28744778_5_26
Title: taking date as dd/mm/yy in c language 
----------------------------------------

int main () {
    int d, m, year;
    printf ("Enter date (dd/mm/yy): ");
    scanf ("%d/%d/%d", & d, & m, & year);
    if (d % 10 == 1 && d != 11)
        printf ("%d st", d);
    else if (d % 10 == 2 && d != 12)
        printf ("%d nd", d);
    else if (d % 10 == 3 && d != 13)
        printf ("%d rd", d);
    else
        printf ("%d th", d);
    return 0;
}
----------------------------------------

int main () {
    char buffer [100];
    struct tm date;
    memset (& date, 0, sizeof (date));
    printf ("Enter date (dd/mm/yy): ");
    if (fgets (buffer, sizeof (buffer), stdin) == NULL)
        return -1;
    if (sscanf (buffer, "%d/%d/%d", &date.tm_mday, &date.tm_mon, &date.tm_year) == 3) {
        const char *format;
        format = "Dated %A %dth of %B, %Y";
        if (strftime (buffer, sizeof (buffer), format, &date) > sizeof (buffer))
            fprintf (stderr, "there was a problem converting the string\n");
        else
            fprintf (stdout, "%s\n", buffer);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28748197_28748951_1_14
28748197_28762610_49_69
Title: thread synchronization without using flag variable 
----------------------------------------

void *producer () {
    pthread_mutex_lock (& count_mutex);
    for (; count < COUNT_DONE; count++) {
        printf ("Counter value producer: %d\n", count);
    }
    pthread_cond_signal (& condition_var);
    pthread_mutex_unlock (& count_mutex);
    return NULL;
}
----------------------------------------

void *producer () {
    static int numberOfIterations = 1;
    while (numberOfIterations--)
        ;
    {
        pthread_mutex_lock (& count_mutex);
        while (count != 0)
            pthread_cond_wait (&condition_var_produce, &count_mutex);
        while (count != COUNT_DONE) {
            count++;
            printf ("Counter value producer: %d\n", count);
        }
        pthread_cond_signal (& condition_var_consume);
        pthread_mutex_unlock (& count_mutex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28759136_28759188_1_10
28759136_28759343_1_12
Title: Infinite loop issue in c 
----------------------------------------

void get_input () {
    char ch;
    while (flag == false) {
        printf ("please enter an odd number betwen 1 and 9\n");
        scanf ("%d", & input);
        while ((ch = getchar () != '\n') && ch != EOF)
            ;
        flag = is_valid (input);
    }
}
----------------------------------------

void get_input () {
    while (flag == false) {
        printf ("please enter an odd number betwen 1 and 9\n");
        scanf ("%d", & input);
        while (getchar () != '\n')
            ;
        if (is_valid (input)) {
            flag = true;
        }
        else {
            flag = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28759136_28759188_1_10
28759136_28759422_1_15
Title: Infinite loop issue in c 
----------------------------------------

void get_input () {
    char ch;
    while (flag == false) {
        printf ("please enter an odd number betwen 1 and 9\n");
        scanf ("%d", & input);
        while ((ch = getchar () != '\n') && ch != EOF)
            ;
        flag = is_valid (input);
    }
}
----------------------------------------

int get_input () {
    char buf [80];
    int input = 0;
    bool flag = false;
    while (flag == false) {
        printf ("please enter an odd number betwen 1 and 9\n");
        if (fgets (buf, sizeof (buf), stdin) == NULL)
            return -1;
        flag = (sscanf (buf, "%d", &input) == 1 && is_valid (input));
    }
    return input;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28759136_28759343_1_12
28759136_28759422_1_15
Title: Infinite loop issue in c 
----------------------------------------

void get_input () {
    while (flag == false) {
        printf ("please enter an odd number betwen 1 and 9\n");
        scanf ("%d", & input);
        while (getchar () != '\n')
            ;
        if (is_valid (input)) {
            flag = true;
        }
        else {
            flag = false;
        }
    }
}
----------------------------------------

int get_input () {
    char buf [80];
    int input = 0;
    bool flag = false;
    while (flag == false) {
        printf ("please enter an odd number betwen 1 and 9\n");
        if (fgets (buf, sizeof (buf), stdin) == NULL)
            return -1;
        flag = (sscanf (buf, "%d", &input) == 1 && is_valid (input));
    }
    return input;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28774152_28774678_1_19
28774152_28774784_1_26
Title: I'm getting a SegFault on the 19th time my addNode function runs and I can't figure out why 
----------------------------------------

int addNode (size_t t, Node **ht) {
    Node *n = (Node *) malloc (sizeof (Node));
    int hashVal = hash (t);
    n->value = t;
    if (ht[hashVal] != NULL) {
        Node *nptr = ht[hashVal];
        while (nptr != NULL) {
            if (nptr->value == t) {
                free (n);
                return 0;
            }
            nptr = nptr->next;
        }
    }
    n->next = ht[hashVal];
    ht[hashVal] = n;
    return 1;
}
----------------------------------------

int addNode (size_t t, Node **ht) {
    int hashVal = hash (t);
    Node *n = ht[hashVal];
    while (NULL != n) {
        if (n->value == t)
            return 0;
        n = n->next;
    }
    if (NULL == (n = malloc (sizeof (Node))))
        return -1;
    n->value = t;
    n->next = ht[hashVal];
    ht[hashVal] = n;
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28774152_28774678_1_19
28774152_28781937_16_31
Title: I'm getting a SegFault on the 19th time my addNode function runs and I can't figure out why 
----------------------------------------

int addNode (size_t t, Node **ht) {
    Node *n = (Node *) malloc (sizeof (Node));
    int hashVal = hash (t);
    n->value = t;
    if (ht[hashVal] != NULL) {
        Node *nptr = ht[hashVal];
        while (nptr != NULL) {
            if (nptr->value == t) {
                free (n);
                return 0;
            }
            nptr = nptr->next;
        }
    }
    n->next = ht[hashVal];
    ht[hashVal] = n;
    return 1;
}
----------------------------------------

int addNode (size_t t, Node **ht) {
    Node *new;
    size_t hashVal;
    hashVal = hash (t);
    for (ht += hashVal; *ht; ht = &(*ht)->next) {
        if ((*ht)->value == t)
            return 0;
    }
    new = malloc (sizeof *new);
    new->value = t;
    new->next = NULL;
    *ht = new;
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28774152_28774784_1_26
28774152_28781937_16_31
Title: I'm getting a SegFault on the 19th time my addNode function runs and I can't figure out why 
----------------------------------------

int addNode (size_t t, Node **ht) {
    int hashVal = hash (t);
    Node *n = ht[hashVal];
    while (NULL != n) {
        if (n->value == t)
            return 0;
        n = n->next;
    }
    if (NULL == (n = malloc (sizeof (Node))))
        return -1;
    n->value = t;
    n->next = ht[hashVal];
    ht[hashVal] = n;
    return 1;
}
----------------------------------------

int addNode (size_t t, Node **ht) {
    Node *new;
    size_t hashVal;
    hashVal = hash (t);
    for (ht += hashVal; *ht; ht = &(*ht)->next) {
        if ((*ht)->value == t)
            return 0;
    }
    new = malloc (sizeof *new);
    new->value = t;
    new->next = NULL;
    *ht = new;
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28781501_28781530_5_19
28781501_28781593_3_17
Title: C programming language :if statements are not working correctly with characters 
----------------------------------------

int main () {
    char history [200];
    strcpy (history, "NY school");
    if (strcmp (history, "NY school") == 0) {
        printf ("good");
    }
    else {
        printf ("okay");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *history = "NY school";
    if (history == "NY school") {
        printf ("good");
    }
    else {
        printf ("okay");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28789629_28789762_17_32
28789629_28789800_3_16
Title: convert binary file to hexadecimal characters 
----------------------------------------

int main (void) {
    FILE *input = fopen ("input", "r");
    FILE *output = fopen ("output", "w");
    int x;
    char out [4] = {0};
    out[2] = ' ';
    while ((x = fgetc (input)) != EOF) {
        to_hex (x, out);
        fputs (out, output);
    }
    fclose (input);
    fclose (output);
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    int i;
    for (i = 1; i < argc; ++i) {
        FILE *fp = fopen (argv[i], "rb");
        if (fp) {
            int c;
            while ((c = fgetc (fp)) != EOF) {
                printf (" %02x", c);
            }
            fclose (fp);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28795009_28795086_3_31
28795009_28795347_1_17
Title: In which loop i should put print function? 
----------------------------------------

int main () {
    int row, c, n, t, temp;
    printf ("Give me a number: ");
    scanf ("%d", & n);
    temp = n;
    for (row = 0; row <= n; row++) {
        for (c = 0; c < temp; c++) {
            printf ("*");
        }
        printf (" ");
        for (t = n; t >= temp; t--) {
            printf ("*");
        }
        temp--;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int tmp;
    printf ("\n");
    scanf ("%d", & tmp);
    for (int i = 0; i < tmp; i++) {
        for (int j = 0; j <= tmp - i; j++)
            printf ("*");
        printf (" ");
        for (int j = 0; j <= i; j++)
            printf ("*");
        printf ("/n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28795009_28795086_3_31
28795009_28797773_4_56
Title: In which loop i should put print function? 
----------------------------------------

int main () {
    int row, c, n, t, temp;
    printf ("Give me a number: ");
    scanf ("%d", & n);
    temp = n;
    for (row = 0; row <= n; row++) {
        for (c = 0; c < temp; c++) {
            printf ("*");
        }
        printf (" ");
        for (t = n; t >= temp; t--) {
            printf ("*");
        }
        temp--;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int row, c, temp;
    int n = 0;
    int t = 0;
    while ((n < 1) || (n > 50)) {
        printf ("Give me a number (1...50): ");
        if (1 != scanf ("%d", &n)) {
            perror ("scanf for number failed");
            exit (EXIT_FAILURE);
        }
        if ((n < 1) || (n > 50))
            printf ("\n number not in range 1...50\n");
    }
    temp = n;
    for (row = 0; row < n; row++) {
        temp = n - row;
        for (c = 0; c < temp; c++) {
            printf ("*");
        }
        printf (" ");
        t++;
        for (c = 0; c < t; c++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28795009_28795096_3_31
28795009_28795347_1_17
Title: In which loop i should put print function? 
----------------------------------------

int main () {
    int row, c, n, t, temp;
    printf ("Give me a number: ");
    scanf ("%d", & n);
    temp = n;
    for (row = 0; row < n; row++) {
        for (c = 0; c < temp; c++) {
            printf ("*");
        }
        printf (" ");
        for (t = n; t >= temp; t--) {
            printf ("*");
        }
        temp--;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int tmp;
    printf ("\n");
    scanf ("%d", & tmp);
    for (int i = 0; i < tmp; i++) {
        for (int j = 0; j <= tmp - i; j++)
            printf ("*");
        printf (" ");
        for (int j = 0; j <= i; j++)
            printf ("*");
        printf ("/n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28795009_28795096_3_31
28795009_28797773_4_56
Title: In which loop i should put print function? 
----------------------------------------

int main () {
    int row, c, n, t, temp;
    printf ("Give me a number: ");
    scanf ("%d", & n);
    temp = n;
    for (row = 0; row < n; row++) {
        for (c = 0; c < temp; c++) {
            printf ("*");
        }
        printf (" ");
        for (t = n; t >= temp; t--) {
            printf ("*");
        }
        temp--;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int row, c, temp;
    int n = 0;
    int t = 0;
    while ((n < 1) || (n > 50)) {
        printf ("Give me a number (1...50): ");
        if (1 != scanf ("%d", &n)) {
            perror ("scanf for number failed");
            exit (EXIT_FAILURE);
        }
        if ((n < 1) || (n > 50))
            printf ("\n number not in range 1...50\n");
    }
    temp = n;
    for (row = 0; row < n; row++) {
        temp = n - row;
        for (c = 0; c < temp; c++) {
            printf ("*");
        }
        printf (" ");
        t++;
        for (c = 0; c < t; c++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28795009_28795347_1_17
28795009_28797773_4_56
Title: In which loop i should put print function? 
----------------------------------------

int main () {
    int tmp;
    printf ("\n");
    scanf ("%d", & tmp);
    for (int i = 0; i < tmp; i++) {
        for (int j = 0; j <= tmp - i; j++)
            printf ("*");
        printf (" ");
        for (int j = 0; j <= i; j++)
            printf ("*");
        printf ("/n");
    }
    return 0;
}
----------------------------------------

int main () {
    int row, c, temp;
    int n = 0;
    int t = 0;
    while ((n < 1) || (n > 50)) {
        printf ("Give me a number (1...50): ");
        if (1 != scanf ("%d", &n)) {
            perror ("scanf for number failed");
            exit (EXIT_FAILURE);
        }
        if ((n < 1) || (n > 50))
            printf ("\n number not in range 1...50\n");
    }
    temp = n;
    for (row = 0; row < n; row++) {
        temp = n - row;
        for (c = 0; c < temp; c++) {
            printf ("*");
        }
        printf (" ");
        t++;
        for (c = 0; c < t; c++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28795421_28795513_27_51
28795421_28795547_4_32
Title: Dynamic array of pointers 
----------------------------------------

int main (void) {
    char *str1 = "Hello World";
    char *str2 = "Hello World2";
    char *str3 = "Hello World3";
    char *str4 = "Hello World4";
    char *str5 = "Hello World5";
    string_array my_array;
    my_array.capacity = 0;
    my_array.size = 0;
    add_to_array (& my_array, str1);
    add_to_array (& my_array, str2);
    add_to_array (& my_array, str3);
    add_to_array (& my_array, str4);
    add_to_array (& my_array, str5);
    for (int i = 0; i < my_array.size; ++i) {
        printf (my_array.arr [i]);
        printf ("\n");
    }
    free (my_array.arr);
    getchar ();
    return (0);
}
----------------------------------------

int main (void) {
    size_t N = 2;
    char **array = malloc (N * sizeof (char *));
    if (!array)
        return 1;
    char *word = "lolol";
    char *word2 = "blabla";
    array[0] = word;
    array[1] = word2;
    char *word3 = "Hello";
    ++N;
    array = realloc (array, N * sizeof (char *));
    if (!array)
        return 2;
    array[2] = word3;
    for (size_t i = 0; i < N; i++)
        puts (array[i]);
    free (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28800900_28801223_16_25
28800900_28801396_5_27
Title: How do I remove overflow characters or append characters in a given string in C? 
----------------------------------------

int main (void) {
    char d [10] = "helloooo";
    char m [4] = "h";
    print_five (d);
    printf ("continued\n");
    print_five (m);
    printf ("continued\n");
    return 1;
}
----------------------------------------

int main (int argc, char **argv) {
    int limit = atoi (argv[1]);
    for (int j = 2; j < argc - 1; j += 2) {
        int n = atoi (argv[j]);
        char buffer [limit + 1];
        if (snprintf (buffer, limit +1, "%d %s" "%*.0s", n, argv[j + 1], limit, "") < 0) {
            perror ("snprintf");
            return 1;
        }
        if (strlen (buffer) != limit)
            fprintf (stderr, "buffer length is %zd instead of %d\n", strlen (buffer), limit);
        printf ("|%s|\n", buffer);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28805304_28806297_3_38
28805304_28812444_3_53
Title: while loop condition not working 7 
----------------------------------------

int main () {
    int a [25] = {4756, 9870, 5867, 5241, 2805, 5490, 4536, 3458, 3490, 5666, 1604, 3045, 1267, 5766, 2233, 2938, 3425, 1837, 6890, 1029, 7930, 9348, 2389, 7689, 3847}, b;
    printf ("\t\t\t ADABPO ENGINEERING\n");
    do {
        printf ("Please enter your ID: ");
        scanf ("%d", & b);
        if (b == a[0])
            printf ("Welcome Mr/Mrs Ah-Fong Wan!\n");
        else if (b == a[1])
            printf ("Welcome Mr/Mrs Aisac!\n");
        else if (b == a[2])
            printf ("Welcome Mr/Mrs Alsong!\n");
        else if (b == a[3])
            printf ("Welcome Mr/Mrs Ayassamy!\n");
        else if (b == a[4])
            printf ("Welcome Mr/Mrs Balkins!\n");
        else if (b == a[5])
            printf ("Welcome Mr/Mrs Bilbo!\n");
        else {
            printf ("Unable to identify,please try again!!\n");
        }
    }
    while (b != a[24]);
    getch ();
    return 0;
}
----------------------------------------

int main () {
    int a [25] = {4756, 9870, 5867, 5241, 2805, 5490, 4536, 3458, 3490, 5666, 1604, 3045, 1267, 5766, 2233, 2938, 3425, 1837, 6890, 1029, 7930, 9348, 2389, 7689, 3847}, b;
    printf ("\t\t\t ADABPO ENGINEERING\n");
    while (1) {
        printf ("Please enter your ID: ");
        scanf ("%d", & b);
        if (b == a[0]) {
            printf ("Welcome Mr/Mrs Ah-Fong Wan!");
            break;
        }
        else if (b == a[1]) {
            printf ("Welcome Mr/Mrs Aisac!");
            break;
        }
        else if (b == a[2]) {
            printf ("Welcome Mr/Mrs Alsong!");
            break;
        }
        else if (b == a[3]) {
            printf ("Welcome Mr/Mrs Ayassamy!");
            break;
        }
        else if (b == a[4]) {
            printf ("Welcome Mr/Mrs Balkins!");
            break;
        }
        else if (b == a[5]) {
            printf ("Welcome Mr/Mrs Bilbo!");
            break;
        }
        else {
            printf ("Unable to identify,please try again!!\n");
        }
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28818521_28819085_1_55
28818521_28819225_1_11
Title: Allocate 3D matrix in one big chunk 
----------------------------------------

void foo (int imax, int jmax, int kmax) {
    double *data_0 = malloc (imax *jmax * kmax * sizeof (double));
    double **data_1 = malloc (imax *jmax * sizeof (double *));
    double ***data_2 = malloc (imax * sizeof (double **));
    for (int i = 0; i < imax; i++) {
        data_2[i] = &data_1[i * jmax];
        for (int j = 0; j < jmax; j++) {
            data_1[i * jmax + j] = &data_0[(i * jmax + j) * kmax];
        }
    }
    double ***matrix = data_2;
    for (int i = 0; i < imax; i++) {
        for (int j = 0; j < jmax; j++) {
            for (int k = 0; k < kmax; k++) {
                matrix[i][j][k] = i + j + k;
            }
        }
    }
    for (int i = 0; i < imax; i++) {
        for (int j = 0; j < jmax; j++) {
            for (int k = 0; k < kmax; k++) {
                printf ("%lf ", matrix [i] [j] [k]);
            }
            printf ("\n");
        }
    }
    free (data_2);
    free (data_1);
    free (data_0);
}
----------------------------------------

void foo (int imax, int jmax, int kmax) {
    double (*matrix) [jmax] [kmax] = malloc (imax * sizeof (*matrix));
    for (int i = 0; i < imax; i++) {
        for (int j = 0; j < jmax; j++) {
            for (int k = 0; k < kmax; k++) {
                matrix [i] [j] [k] =...
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28823218_28824262_7_21
28823218_28825736_25_54
Title: "Rewind File Create Dynamic Struct" 
----------------------------------------

_data *load (FILE *stream, int size) {
    _data *BlackBox = calloc (size, sizeof (_data));
    char tempName [3];
    for (int i = 0; i < size; i++) {
        fscanf (stream, "%s %ld", tempName, & BlackBox [i].number);
        BlackBox[i].name = strdup (tempName);
    }
    fclose (stream);
    return BlackBox;
}
----------------------------------------

struct _data *load (const char *fn, int *psize) {
    struct _data *data = NULL;
    FILE *stream;
    char line [80];
    int lnr = 0;
    int n = 0;
    stream = fopen ("names.txt", "r");
    if (stream == NULL)
        return NULL;
    while (fgets (line, sizeof (line), stream)) {
        long int number;
        char buf [20];
        lnr++;
        if (sscanf (line, "%19s %ld", buf, &number) == 2) {
            data = realloc (data, (n + 1) * sizeof (*data));
            data[n].number = number;
            data[n].name = duplicate (buf);
            n++;
        }
        else {
            fprintf (stderr, "[%s, line %d] Illegal format\n", fn, lnr);
        }
    }
    fclose (stream);
    *psize = n;
    return data;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28823823_28824002_1_10
28823823_28825712_1_11
Title: Finding how to remove largest and second largest in array in c 
----------------------------------------

unsigned short int FindIndexOfLargest (unsigned short int class [], unsigned short int start, unsigned short int end) {
    unsigned short int largest, i;
    largest = 0;
    for (i = 0; i < end; i++) {
        if (class[i] > largest) {
            largest = i;
        }
    }
    return (largest);
}
----------------------------------------

unsigned short int FindIndexOfLargest (unsigned short int class [], unsigned short int start, unsigned short int end) {
    unsigned short int largest, i, index;
    largest = 0;
    for (i = 0; i < end; i++) {
        if (class[i] > largest) {
            largest = class[i];
            index = i;
        }
    }
    return (index);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28823823_28825712_1_11
28823823_28832065_1_10
Title: Finding how to remove largest and second largest in array in c 
----------------------------------------

unsigned short int FindIndexOfLargest (unsigned short int class [], unsigned short int start, unsigned short int end) {
    unsigned short int largest, i, index;
    largest = 0;
    for (i = 0; i < end; i++) {
        if (class[i] > largest) {
            largest = class[i];
            index = i;
        }
    }
    return (index);
}
----------------------------------------

unsigned short int FindIndexOfLargest (unsigned short int tempArr [], unsigned short int start, unsigned short int end) {
    unsigned short int largest, i;
    largest = 0;
    for (i = 0; i < end; i++) {
        if (tempArr[i] > tempArr[largest]) {
            largest = i;
        }
    }
    return (largest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28826801_28826982_3_29
28826801_28827360_4_20
Title: "How to draw a triangle in C using + - | and \" 
----------------------------------------

int main (void) {
    int i = 0, j = 0;
    printf ("+\n");
    for (i = 0; i < 5; i++) {
        if (i == 4)
            printf ("+");
        else
            printf ("|");
        j = i;
        while (j--) {
            if (i == 4) {
                printf ("-");
            }
            else
                printf (" ");
        }
        if (i == 4)
            printf ("+");
        else
            printf ("\\");
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char charset [2] [3] = {{'|', ' ', '\\'}, {'+', '-', '+'}};
    int s = 0;
    printf ("+\n");
    for (int row = 0; row < N; row++) {
        if (row == N - 1)
            s = 1;
        putchar (charset [s] [0]);
        for (int col = 0; col < row; col++)
            putchar (charset[s][1]);
        printf ("%c\n", charset [s] [2]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28826801_28826982_3_29
28826801_28827861_3_32
Title: "How to draw a triangle in C using + - | and \" 
----------------------------------------

int main (void) {
    int i = 0, j = 0;
    printf ("+\n");
    for (i = 0; i < 5; i++) {
        if (i == 4)
            printf ("+");
        else
            printf ("|");
        j = i;
        while (j--) {
            if (i == 4) {
                printf ("-");
            }
            else
                printf (" ");
        }
        if (i == 4)
            printf ("+");
        else
            printf ("\\");
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter height of triangle (0 - exit): ");
        size_t height = 0;
        scanf ("%zu", & height);
        if (!height)
            break;
        size_t i = 0;
        printf ("\n+\n");
        while (++i < height - 1) {
            printf ("|%*c\n", i, '\\');
        }
        if (i < height) {
            printf ("+");
            while (--i)
                printf ("-");
            printf ("+\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28826801_28827360_4_20
28826801_28827861_3_32
Title: "How to draw a triangle in C using + - | and \" 
----------------------------------------

int main (void) {
    char charset [2] [3] = {{'|', ' ', '\\'}, {'+', '-', '+'}};
    int s = 0;
    printf ("+\n");
    for (int row = 0; row < N; row++) {
        if (row == N - 1)
            s = 1;
        putchar (charset [s] [0]);
        for (int col = 0; col < row; col++)
            putchar (charset[s][1]);
        printf ("%c\n", charset [s] [2]);
    }
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter height of triangle (0 - exit): ");
        size_t height = 0;
        scanf ("%zu", & height);
        if (!height)
            break;
        size_t i = 0;
        printf ("\n+\n");
        while (++i < height - 1) {
            printf ("|%*c\n", i, '\\');
        }
        if (i < height) {
            printf ("+");
            while (--i)
                printf ("-");
            printf ("+\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28840725_28841036_1_10
28840725_28842173_17_26
Title: Segmentation fault in passing matrix to C function 
----------------------------------------

void fld (const int b [] [3]) {
    int i, j;
    printf ("Hello R\n");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++)
            printf ("%d", b[i][j]);
        printf ("\n");
    }
    return;
}
----------------------------------------

void fld (const int **b, int rows, int cols) {
    int i, j;
    printf ("Hello R\n");
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++)
            printf ("%-5d", b[i][j]);
        printf ("\n");
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28841357_28841589_7_34
28841357_28841861_5_25
Title: Why does program crash after exiting do-while loop asking for input in C? 
----------------------------------------

int main () {
    char temp_input [STRING_MAX];
    int ch;
    int ins;
    ins = 0;
    for (;;) {
        ch = getchar ();
        if (ch == 13) {
            temp_input[ins] = 0;
            break;
        }
        temp_input[ins] = ch;
        ins++;
        if (ins == STRING_MAX) {
            temp_input[STRING_MAX - 1] = 0;
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char string [STRING_MAX];
    unsigned int count;
    unsigned int total;
    int chr;
    do {
        count = 0;
        total = 0;
        while (((chr = getchar ()) != EOF) && (chr != '\n')) {
            if (count < STRING_MAX - 1)
                string[count++] = chr;
            total += 1;
        }
        string[count] = '\0';
    }
    while (total > STRING_MAX - 1);
    printf ("The input string was:\n\t%s\n", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28853380_28853570_3_33
28853380_28854430_3_24
Title: c program to print second largest number of three numbers given as input using if else statement 
----------------------------------------

int main () {
    int a, b, c, lar, seclar, x, temp, y;
    int arr1 [3];
    scanf ("%d%d%d", & a, & b, & c);
    getchar ();
    arr1[0] = a;
    arr1[1] = b;
    arr1[2] = c;
    for (y = 0; y < 3; ++y) {
        for (x = 0; x < 2; ++x) {
            if (arr1[x] < arr1[x + 1]) {
                temp = arr1[x];
                arr1[x] = arr1[x + 1];
                arr1[x + 1] = temp;
            }
        }
    }
    lar = arr1[0];
    seclar = arr1[1];
    printf ("largest is %d\n", lar);
    printf ("second largest is %d", seclar);
    getchar ();
    return 0;
}
----------------------------------------

int main (void) {
    int a, b, c;
    int second_max;
    scanf ("%d%d%d", & a, & b, & c);
    if (a < b) {
        if (b < c)
            second_max = b;
        else
            second_max = (a < c ? c : a);
    }
    else {
        if (a < c)
            second_max = a;
        else
            second_max = (b < c ? c : b);
    }
    printf ("second maximum value is %d\n ", second_max);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28853380_28853570_3_33
28853380_51452574_3_23
Title: c program to print second largest number of three numbers given as input using if else statement 
----------------------------------------

int main () {
    int a, b, c, lar, seclar, x, temp, y;
    int arr1 [3];
    scanf ("%d%d%d", & a, & b, & c);
    getchar ();
    arr1[0] = a;
    arr1[1] = b;
    arr1[2] = c;
    for (y = 0; y < 3; ++y) {
        for (x = 0; x < 2; ++x) {
            if (arr1[x] < arr1[x + 1]) {
                temp = arr1[x];
                arr1[x] = arr1[x + 1];
                arr1[x + 1] = temp;
            }
        }
    }
    lar = arr1[0];
    seclar = arr1[1];
    printf ("largest is %d\n", lar);
    printf ("second largest is %d", seclar);
    getchar ();
    return 0;
}
----------------------------------------

void main () {
    int a, b, c;
    cout << "enter the a,b,c";
    cin >> a >> b >> c;
    clrscr ();
    if ((a > b && a < c) || (a < b && a > c)) {
        cout << "the second large" << a;
    }
    if ((b > c && b < a) || (b < c && b > a)) {
        cout << "the second large" << b;
    }
    if ((c > a && c < b) || (c < a && c > b)) {cout << "the second large" << a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28853380_28854430_3_24
28853380_51452574_3_23
Title: c program to print second largest number of three numbers given as input using if else statement 
----------------------------------------

int main (void) {
    int a, b, c;
    int second_max;
    scanf ("%d%d%d", & a, & b, & c);
    if (a < b) {
        if (b < c)
            second_max = b;
        else
            second_max = (a < c ? c : a);
    }
    else {
        if (a < c)
            second_max = a;
        else
            second_max = (b < c ? c : b);
    }
    printf ("second maximum value is %d\n ", second_max);
    return 0;
}
----------------------------------------

void main () {
    int a, b, c;
    cout << "enter the a,b,c";
    cin >> a >> b >> c;
    clrscr ();
    if ((a > b && a < c) || (a < b && a > c)) {
        cout << "the second large" << a;
    }
    if ((b > c && b < a) || (b < c && b > a)) {
        cout << "the second large" << b;
    }
    if ((c > a && c < b) || (c < a && c > b)) {cout << "the second large" << a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28858722_28858876_1_16
28858722_28858900_1_16
Title: Sorting a word into alphabetical order in c 
----------------------------------------

void alphasort (char *array, int length) {
    int i, j, k;
    for (i = 0; i < length - 1; ++i) {
        for (j = 0; j < length - i - 1; ++j) {
            if (array[j] > array[j + 1]) {
                k = array[j];
                array[j] = array[j + 1];
                array[j + 1] = k;
            }
        }
    }
}
----------------------------------------

void alphasort (char *word, int length) {
    int i, j, k;
    for (i = 0; i < length - 1; ++i) {
        for (j = 0; j < length - i - 1; ++j) {
            if (word[j] > word[j + 1]) {
                k = word[j];
                word[j] = word[j + 1];
                word[j + 1] = k;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28862850_28863629_1_43
28862850_28864476_20_36
Title: How to print character array in reverse order of C program 
----------------------------------------

int main (void) {
    int d, b, c, i = 1;
    char *converted = malloc (i);
    printf (" Enter an integer and press 'enter':\n");
    scanf ("%d", & d);
    printf (" Enter the desired base and press 'enter':\n");
    scanf ("%d", & b);
    if (b < 2) {
        printf (" Your base is to low! \n");
        return 1;
    }
    else if (b > 16) {
        printf (" Your base is to high! \n");
        return 1;
    }
    else {
        while (d != 0) {
            int radix;
            radix = d % b;
            d = d / b;
            char basechars [] = "0123456789ABCDEF";
            converted = realloc (converted, i++);
            *(converted + i - 1) = basechars[radix];
        }
    }
    i--;
    while (i != 0) {
        printf ("%c", converted [i]);
        --i;
    }
    free (converted);
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    PrintInt (65535, 16);
    PrintInt (65535, 10);
    PrintInt (65535, 2);
    PrintInt (INT_MAX, 10);
    PrintInt (0, 10);
    PrintInt (- 1, 16);
    PrintInt (INT_MIN, 10);
    int d, b;
    printf (" Enter an integer and press 'enter':\n");
    scanf ("%d", & d);
    printf (" Enter the desired base and press 'enter':\n");
    scanf ("%d", & b);
    PrintInt (d, b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28887130_28887406_6_44
28887130_28887431_11_32
Title: Counting keywords from text file in C 
----------------------------------------

int main (int argc, char **argv) {
    const char *lib [5] = {"auto", "break", "char", "case", "const"};
    char *str = NULL;
    size_t cap = 0;
    int c = 0;
    const char *srch;
    FILE *fp;
    int i, j;
    for (i = 1; i < argc; ++i, c = 0) {
        if (NULL == (fp = fopen (argv[i], "r"))) {
            perror (argv [i]);
            continue;
        }
        while (-1 != getline (&str, &cap, fp))
            for (j = 0, srch = str; j < 5; ++j, srch = str)
                while (NULL != (srch = strstr (srch, lib[j]))) {
                    const char *next_srch = srch + strlen (lib[j]);
                    if ((srch == str || !isalnum (srch[-1])) && !isalnum (next_srch[0]))
                        ++c;
                    srch = next_srch;
                }
        fclose (fp);
        printf ("%s: %d\n", argv [i], c);
    }
    if (str)
        free (str);
    return 0;
}
----------------------------------------

int main () {
    c = 0;
    fp = fopen ("filename.txt", "r");
    if (fp == NULL) {
        perror ("Error in reading file");
    }
    if (fp != NULL) {
        while (fgets (str, sizeof (buffer), fp) != NULL) {
            for (int j = 0; j < 5; j++) {
                if (strstr (str, lib[j]) != NULL) {
                    c++;
                }
            }
        }
        printf ("c: %d", c);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2890525_2890537_8_19
2890525_49314224_97_141
Title: Sorting odd in descending and even in ascending order 
----------------------------------------

int main () {
    int a [] = {1, 4, 5, 2, 3, 6, 7};
    size_t N = sizeof (a) / sizeof (a[0]);
std :
    : sort (a, a + N, Order);
    for (size_t i = 0; i < N; ++i)
    std :
    : cout << a [i] << ' ';
std :
    : cout << std : : endl;
}
----------------------------------------

int main (void) {
    int data1 [] = {+39, +36, +78, -92, +63, -21, -51, +49, 0, -77, -10, -49, -98, -17, +60, +83, +30, -97, -68, +86, +70, +84, -56, +3, +33, -34, +14, -40, -72, -86, -95, -87, -73, -20, -72, -86, -3, -71, -55, -80, -60, -4, -26, -64, -31, -84, -79, +25, +41, +80, -54, -51, +24, -48, +13, +61, -99, +60, -2, +16, -66, -30, +24, +88, +5, -77, +13, +3, +16, -69, -60, +26, +51, +16, -13, +71, -9, -2, +51, +72,};
    enum {NUM_DATA = sizeof (data1) / sizeof (data1[0])};
    int data2 [NUM_DATA];
    int data3 [NUM_DATA];
    int data4 [NUM_DATA];
    memmove (data2, data1, sizeof (data1));
    memmove (data3, data1, sizeof (data1));
    memmove (data4, data1, sizeof (data1));
    printf ("Sort odd numbers ascending before even numbers descending\n");
    dump_array ("Before", NUM_DATA, data1);
    qsort (data1, NUM_DATA, sizeof (data1 [0]), oddasc_evendesc);
    dump_array ("After", NUM_DATA, data1);
    printf ("Sort even numbers descending before odd numbers ascending\n");
    dump_array ("Before", NUM_DATA, data2);
    qsort (data2, NUM_DATA, sizeof (data2 [0]), evendesc_oddasc);
    dump_array ("After", NUM_DATA, data2);
    printf ("Sort odd numbers descending before even numbers ascending\n");
    dump_array ("Before", NUM_DATA, data3);
    qsort (data3, NUM_DATA, sizeof (data3 [0]), odddesc_evenasc);
    dump_array ("After", NUM_DATA, data3);
    printf ("Sort even numbers ascending before odd numbers descending\n");
    dump_array ("Before", NUM_DATA, data4);
    qsort (data4, NUM_DATA, sizeof (data4 [0]), evenasc_odddesc);
    dump_array ("After", NUM_DATA, data4);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28906308_28907735_5_37
28906308_28907844_1_33
Title: How do I calculate centroid of a polygon if the vertices of the polygon are given? 
----------------------------------------

int main () {
    int points;
    points = 4;
    pair < float, float > p [points];
    int i;
    p[0].first = 1;
    p[0].second = 0;
    p[1].first = 0;
    p[1].second = 1;
    p[2].first = -1;
    p[2].second = 0;
    p[3].first = 0;
    p[3].second = -1;
    float ar = 0, x = 0, y = 0, temp;
    for (i = 0; i < points - 1; i++) {
        temp = p[i].first * p[i + 1].second - p[i + 1].first * p[i].second;
        ar += temp;
        x += (p[i].first + p[i + 1].first) * temp;
        y += (p[i].second + p[i + 1].second) * temp;
    }
    temp = p[points - 1].first * p[0].second - p[0].first * p[points - 1].second;
    ar += temp;
    x += (p[points - 1].first + p[0].first) * temp;
    y += (p[points - 1].second + p[0].second) * temp;
    x /= (3 * ar);
    y /= (3 * ar);
    printf ("%.6f %.6f\n", x, y);
}
----------------------------------------

int main () {
    int points;
    scanf ("%d", & points);
    pair < float, float > p [points];
    int i;
    for (i = 0; i < points; i++) {
        scanf ("%f %f", & p [i].first, & p [i].second);
    }
    float ar = 0.0;
    float x = 0.0;
    float y = 0.0;
    for (i = 0; i < points; i++) {
        int j = (i + 1) % points;
        float common = (p[i].first * p[j].second - p[j].first * p[i].second);
        ar += common;
        x += (p[i].first + p[j].first) * common;
        y += (p[i].second + p[j].second) * common;
    }
    ar *= 0.5;
    x /= (6 * ar);
    y /= (6 * ar);
    printf ("area: %.2f, xc: %.2f, yc: %.2f\n", ar, x, y);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28918949_28919173_4_14
28918949_28919180_30_43
Title: Accepting only letters and no integers in C 
----------------------------------------

int main (void) {
    char str [100] = {0};
    int len;
    scanf ("%99s", str);
    len = strlen (str);
    if (len != strspn (str, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"))
        printf ("Your string contains non-alphabet characters.\n");
    else
        printf ("Your string is good.\n");
    return 0;
}
----------------------------------------

int main () {
    char cname [CNAME_MAX_LEN + 1];
    if (inputName (cname)) {
        perror ("error reading in name!\n");
        return 1;
    }
    printf ("cname is '%s'\n", cname);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28919776_28919808_12_24
28919776_28920394_11_22
Title: "How do I return ""struct"" data types in c user defined function?" 
----------------------------------------

int main () {
    size_t index;
    struct census citi [5];
    size_t count count = readCities (citi, sizeof (citi) / sizeof (*citi));
    for (index = 0; index < count; index++) {
        printf ("%s\n", citi [index].city);
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct census citi [5];
    int i;
    for (i = 0; i < 5; i++)
        citi[i] = read ();
    for (i = 0; i < 5; i++)
        printf ("%s\n", citi[i].city);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28928854_28930197_1_13
28928854_28930435_1_17
Title: Why this pthread code just hangs? 
----------------------------------------

void *function (void *p) {
    int expected = *(int*) p;
    while (expected < LIMIT) {
        pthread_mutex_lock (& mutex1);
        if (counter == expected) {
            printf ("%d\n", counter ++);
            expected += 2;
        }
        pthread_mutex_unlock (& mutex1);
    }
}
----------------------------------------

void *function (void *p) {
    int expected = *(int*) p;
    while (expected < LIMIT) {
        bool my_turn = false;
        while (! my_turn) {pthread_mutex_lock (& mutex1);
        my_turn = (counter == expected);
        pthread_mutex_unlock (& mutex1);
    }
    pthread_mutex_lock (& mutex1);
    printf ("%d\n", counter ++);
    pthread_mutex_unlock (& mutex1);
    expected += 2;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28928862_28929092_14_27
28928862_28929178_16_38
Title: "How to create square matrix of characters with random letters a..z in C" 
----------------------------------------

int main () {
    char matrix [SIZE] [SIZE];
    int i, j;
    srand ((unsigned int) time (NULL));
    Init (matrix);
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf ("%c", matrix [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    size_t n = 4;
    char matrix [n] [n];
    srand ((unsigned int) time (NULL));
    for (size_t i = 0; i < n; i++) {
        square_matrix_init (n, matrix);
        for (size_t k = 0; k < n; k++) {
            for (size_t l = 0; l < n; l++)
                printf ("%c ", matrix[k][l]);
            printf ("\n");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
289329_292689_1_15
289329_292703_6_16
Title: "Solution for ""dereferencing `void *' pointer"" warning in struct in C?" 
----------------------------------------

static int printCommonStatistics (void *cmncntin, int cmncnt_nelem, int cmncnt_elmsize) {
    char *cmncntinBytes;
    int ii;
    cmncntinBytes = (char *) cmncntin;
    for (ii = 0; ii < cmncnt_nelem; ii++) {
        CMNCNT *cmncnt = (CMNCNT *) (cmncntinBytes + ii * cmncnt_elmsize);
        fprintf (stdout, "STATISTICS_INP: %d\n", cmncnt -> _cnt [0]);
        fprintf (stdout, "STATISTICS_OUT: %d\n", cmncnt -> _cnt [1]);
        fprintf (stdout, "STATISTICS_ERR: %d\n", cmncnt -> _cnt [2]);
    }
    return SUCCESS;
}
----------------------------------------

static void printCommonStatistics (const void *data, size_t nelem, size_t elemsize) {
    int i;
    for (i = 0; i < nelem; i++) {
        const CMNCNT *cmncnt = (const CMNCNT *) ((const char *) data + (i * elemsize));
        fprintf (stdout, "STATISTICS_INP: %ld\n", cmncnt -> count [0]);
        fprintf (stdout, "STATISTICS_OUT: %ld\n", cmncnt -> count [1]);
        fprintf (stdout, "STATISTICS_ERR: %ld\n", cmncnt -> count [2]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28937745_28938053_5_19
28937745_29114350_8_17
Title: How to compile ELF binary so that it can be loaded as dynamic library? 
----------------------------------------

int main (int argc, char **argv) {
    void *handle = dlopen (argv[1], RTLD_LAZY);
    if (!handle) {
        fprintf (stderr, "%s\n", dlerror ());
        return 1;
    }
    void (*hello) () = dlsym (handle, "hello");
    if (!hello) {
        fprintf (stderr, "%s\n", dlerror ());
        return 1;
    }
    hello ();
    return 0;
}
----------------------------------------

int main () {
    void *lib = dlopen ("./test1", RTLD_LAZY);
    a_ptr = dlsym (lib, "a");
    c_ptr = dlsym (lib, "c");
    int d = c_ptr (6);
    int b = a_ptr (5);
    printf ("b is %d d is %d\n", b, d);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28944084_28944571_19_53
28944084_28959202_21_65
Title: "C linked list and nodes program why am I getting a unhanded exception?" 
----------------------------------------

int main () {
    int option = 0;
    struct node *head;
    head = NULL;
    option = 0;
    while (option != 6) {
        Menu ();
        scanf (" %d", & option);
        switch (option) {
        case 1 :
            addToStart (&head);
            break;
        case 3 :
            DisplayList (head);
            break;
        case 6 :
            exit (0);
            break;
        default :
            printf ("\nTry Again");
            break;
        }
    }
}
----------------------------------------

int main () {
    int option = 0;
    struct node *head;
    struct node *first;
    head = (struct node *) malloc (sizeof (struct node));
    first = (struct node *) malloc (sizeof (struct node));
    head = NULL;
    option = 0;
    while (option != 6) {
        Menu ();
        scanf (" %d", & option);
        switch (option) {
        case 1 :
            addToStart (&head);
            break;
        case 2 :
            addToEnd (&head);
            break;
        case 3 :
            DisplayList (head);
            break;
        case 4 :
            Size (head);
            break;
        case 5 :
            SearchList (head);
            break;
        case 6 :
            free (head);
            free (first);
            exit (0);
            break;
        default :
            printf ("\nTry Again");
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28944084_28944571_55_77
28944084_28959202_67_86
Title: "C linked list and nodes program why am I getting a unhanded exception?" 
----------------------------------------

void addToStart (struct node **head) {
    struct node *newNode;
    newNode = (struct node *) malloc (sizeof (struct node));
    printf ("\nEnter data for this node");
    scanf ("%d", & newNode -> data);
    newNode->next = NULL;
    if (*head == NULL) {
        *head = newNode;
    }
    else {
        struct node *lastNode = *head;
        while (lastNode->next != NULL)
            lastNode = lastNode->next;
        lastNode->next = newNode;
    }
}
----------------------------------------

void addToStart (struct node **head) {
    struct node *newNode;
    newNode = (struct node *) malloc (sizeof (struct node));
    printf ("\nEnter data for this node:\n");
    scanf ("%d", & newNode -> data);
    newNode->next = NULL;
    if (*head == NULL) {
        *head = newNode;
    }
    else {
        newNode->next = *head;
        *head = newNode;
    }
    printf ("%u,%u", & head, & newNode);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28944084_28944571_88_98
28944084_28959202_144_154
Title: "C linked list and nodes program why am I getting a unhanded exception?" 
----------------------------------------

void DisplayList (struct node *head) {
    struct node *temp;
    temp = (struct node *) malloc (sizeof (struct node));
    temp = head;
    while (temp != NULL) {
        printf ("Data: %d", temp -> data);
        temp = temp->next;
    }
}
----------------------------------------

void DisplayList (struct node *head) {
    struct node *temp;
    temp = (struct node *) malloc (sizeof (struct node));
    temp = head;
    while (temp != NULL) {
        printf ("Data: %d  ", temp -> data);
        temp = temp->next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28950622_28950684_4_27
28950622_28950947_3_20
Title: Reading lines until specific line in c programming 
----------------------------------------

int main (void) {
    char buffer [BUFSIZ];
    FILE *input;
    size_t lineCount;
    size_t maxLine;
    input = fopen ("input.txt", "r");
    if (input == NULL) {
        perror ("Error");
        return -1;
    }
    maxLine = 5;
    lineCount = 0;
    while ((lineCount < maxLine) && (fgets (buffer, sizeof (buffer), input) != NULL)) {
        puts (buffer);
        lineCount += 1;
    }
    return 0;
}
----------------------------------------

int main (void) {
    FILE *input;
    int c, line, numOfLine = 0;
    printf ("input line number : ");
    scanf ("%d", & line);
    input = fopen ("data.txt", "r");
    while ((c = fgetc (input)) != EOF) {
        putchar (c);
        if (c == '\n' && ++numOfLine == line)
            break;
    }
    fclose (input);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28972305_28972556_2_20
28972305_28972577_3_14
Title: Checking user input in C 
----------------------------------------

int main () {
    int inp, i, j;
    int foo = 0;
    int arr [] = {5, 10, 20, 30};
    for (j = 0; j < 3; j++) {
        scanf ("%d", & inp);
        for (i = 0; i < 4; i++) {
            if (inp == arr[i]) {
                foo = 1;
                break;
            }
        }
        if (foo == 0)
            break;
    }
}
----------------------------------------

int main (void) {
    int one, two, three;
    printf ("Enter first number: ");
    scanf ("%d", & one);
    printf ("Enter second number: ");
    scanf ("%d", & two);
    printf ("Enter third number: ");
    scanf ("%d", & three);
    printf ("one: %d, two: %d, three: %d\n", one, two, three);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28982289_28983152_25_34
28982289_28983714_47_61
Title: Returning array or results or array to main function C 
----------------------------------------

int main (void) {
    int n = 20;
    char *zodmas [20];
    fun_zod (strdup ("toto tutu tata"), & n, zodmas);
    for (int i = 0; i < n; i++) {
        printf ("%s ", zodmas [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char **zod;
    char input [201];
    int i = 0;
    if (fgets (input, 200, stdin) == NULL)
        return 0;
    zod = fun_zod (input);
    while (zod[i] != NULL)
        printf ("%s\n", zod[i++]);
    free_zod (zod);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_29021274_6_25
29020037_34585610_3_18
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c, nw = 0, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\t' || c == '\b') {
            printf ("\n");
            while (c == ' ' || c == '\t' || c == '\b')
                c = getchar ();
        }
        if (c != EOF)
            putchar (c);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_29021274_6_25
29020037_42237296_3_14
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c, nw = 0, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char ch;
    while ((ch = getchar ()) != EOF) {
        if (ch != '\n' && ch != ' ' && ch != '\t') {
            putchar (ch);
        }
        else {
            putchar ('\n');
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_29021274_6_25
29020037_49926971_3_12
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c, nw = 0, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    while ((c = getchar ()) != EOF)
        if (c == '\t' || c == '\n' || c == ' ')
            putchar ('\n');
        else
            putchar (c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_29021274_6_25
29020037_49928440_6_31
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c, nw = 0, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    unsigned long long wc = 0;
    int state = OUT;
    int ch;
    while ((ch = getchar ()) != EOF) {
        if (state == OUT) {
            if (!isspace (ch)) {
                wc++;
                state = IN;
                putchar (ch);
            }
        }
        else {
            if (isspace (ch)) {
                putchar ('\n');
                state = OUT;
            }
            else {
                putchar (ch);
            }
        }
    }
    if (state == IN) {
        putchar ('\n');
    }
    printf ("Word count:%llu\n", wc);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_29021274_6_25
29020037_53185087_8_39
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c, nw = 0, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int nw = 0, c, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == SPACE || c == NEWLINE || c == TAB) {
            if (c == NEWLINE) {
                putchar ('\n');
            }
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    printf ("\nTotal word count: %d\n", nw);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_34585610_3_18
29020037_42237296_3_14
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\t' || c == '\b') {
            printf ("\n");
            while (c == ' ' || c == '\t' || c == '\b')
                c = getchar ();
        }
        if (c != EOF)
            putchar (c);
    }
    return 0;
}
----------------------------------------

int main () {
    char ch;
    while ((ch = getchar ()) != EOF) {
        if (ch != '\n' && ch != ' ' && ch != '\t') {
            putchar (ch);
        }
        else {
            putchar ('\n');
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_34585610_3_18
29020037_49926971_3_12
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\t' || c == '\b') {
            printf ("\n");
            while (c == ' ' || c == '\t' || c == '\b')
                c = getchar ();
        }
        if (c != EOF)
            putchar (c);
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    while ((c = getchar ()) != EOF)
        if (c == '\t' || c == '\n' || c == ' ')
            putchar ('\n');
        else
            putchar (c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_34585610_3_18
29020037_49928440_6_31
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\t' || c == '\b') {
            printf ("\n");
            while (c == ' ' || c == '\t' || c == '\b')
                c = getchar ();
        }
        if (c != EOF)
            putchar (c);
    }
    return 0;
}
----------------------------------------

int main (void) {
    unsigned long long wc = 0;
    int state = OUT;
    int ch;
    while ((ch = getchar ()) != EOF) {
        if (state == OUT) {
            if (!isspace (ch)) {
                wc++;
                state = IN;
                putchar (ch);
            }
        }
        else {
            if (isspace (ch)) {
                putchar ('\n');
                state = OUT;
            }
            else {
                putchar (ch);
            }
        }
    }
    if (state == IN) {
        putchar ('\n');
    }
    printf ("Word count:%llu\n", wc);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_34585610_3_18
29020037_53185087_8_39
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' || c == '\t' || c == '\b') {
            printf ("\n");
            while (c == ' ' || c == '\t' || c == '\b')
                c = getchar ();
        }
        if (c != EOF)
            putchar (c);
    }
    return 0;
}
----------------------------------------

int main () {
    int nw = 0, c, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == SPACE || c == NEWLINE || c == TAB) {
            if (c == NEWLINE) {
                putchar ('\n');
            }
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    printf ("\nTotal word count: %d\n", nw);
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50632576_50632847_2_19
50632576_50634033_2_22
Title: I need help debugging a basic C program to calculate Fibonacci numbers 
----------------------------------------

int main () {
    unsigned int a;
    unsigned int b;
    unsigned int c;
    a = 0;
    b = 0;
    c = 1;
    while (1) {
        if (c < b)
            break;
        printf ("%u\n", c);
        a = b;
        b = c;
        c = a + b;
    }
}
----------------------------------------

int main () {
    int a = 1;
    int last = 0;
    int sum;
    for (;;) {
        printf ("fib : %d\n", last);
        sum = a + last;
        last = a;
        a = sum;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50632576_50632855_2_16
50632576_50634033_2_22
Title: I need help debugging a basic C program to calculate Fibonacci numbers 
----------------------------------------

void main () {
    int a;
    int b;
    int var_z;
    a = 1;
    b = 1;
    for (int i = 0; i < 10; i++) {
        printf ("%d\n", a);
        printf ("%d\n", b);
        a = a + b;
        b = a + b;
    }
}
----------------------------------------

int main () {
    int a = 1;
    int last = 0;
    int sum;
    for (;;) {
        printf ("fib : %d\n", last);
        sum = a + last;
        last = a;
        a = sum;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50665005_50665075_1_21
50665005_50665401_1_14
Title: error: assigning to 'int' from incompatible type 'void' 
----------------------------------------

int findLast (char string [], char letter) {
    int Num [20];
    int i;
    int count = -1;
    for (i = 0; i < strlen (string); i++) {
        if (letter == string[i]) {
            count = count + 1;
            Num[count] = i;
        }
    }
    int result = Num[count];
    return result;
}
----------------------------------------

int findLast (char string [], char letter) {
    int result, i;
    result = -1;
    i = 0;
    while (string[i] != '\0') {
        if (string[i] == letter) {
            result = i;
        }
        i++;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50704494_50704758_1_21
50704494_50705067_13_24
Title: Prime number from 1 to 100 in C 
----------------------------------------

int main () {
    int i, j, flag, rem;
    printf ("2\n");
    for (i = 3; i <= 100; i++) {
        flag = 0;
        for (j = 2; j <= i / 2; j++) {
            if (i % j == 0) {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
            printf ("%d\n", i);
    }
    getch ();
    return 0;
}
----------------------------------------

int main () {
    printf ("2\n");
    for (int i = 3; i <= 100; i += 2) {
        if (is_prime (i)) {
            printf ("%d\n", i);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50704494_50704758_1_21
50704494_50705365_3_25
Title: Prime number from 1 to 100 in C 
----------------------------------------

int main () {
    int i, j, flag, rem;
    printf ("2\n");
    for (i = 3; i <= 100; i++) {
        flag = 0;
        for (j = 2; j <= i / 2; j++) {
            if (i % j == 0) {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
            printf ("%d\n", i);
    }
    getch ();
    return 0;
}
----------------------------------------

int main () {
    int flag;
    printf ("Prime numbers:  2\t");
    for (int i = 3; i <= 100; i++) {
        flag = 0;
        for (int j = 2; j < i; j++) {
            if (i % j == 0) {
                flag = 1;
                break;
            }
        }
        if (flag == 0) {
            printf ("%d\t", i);
        }
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50704494_50705067_13_24
50704494_50705365_3_25
Title: Prime number from 1 to 100 in C 
----------------------------------------

int main () {
    printf ("2\n");
    for (int i = 3; i <= 100; i += 2) {
        if (is_prime (i)) {
            printf ("%d\n", i);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int flag;
    printf ("Prime numbers:  2\t");
    for (int i = 3; i <= 100; i++) {
        flag = 0;
        for (int j = 2; j < i; j++) {
            if (i % j == 0) {
                flag = 1;
                break;
            }
        }
        if (flag == 0) {
            printf ("%d\t", i);
        }
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50754553_50755087_1_28
50754553_50755321_1_18
Title: Time complexity of a function with while loops and an if statement 
----------------------------------------

int dup_chk (int a [], int length) {
    int j = 0;
    int i = length;
    char stringa [30];
    printf ("Before first while loop j = %d and i = %d \n", j, i);
    while (i > 0) {
        i--;
        j = i - 1;
        printf ("\tIn first while loop j = %d and i = %d\n", j, i);
        while (j >= 0) {
            printf ("\t\tIn second while loop j = %d and i = %d\n", j, i);
            if (a[i] == a[j]) {
                printf ("\t\tIn if statment j = %d and i = %d\n", j, i);
                return 1;
            }
            j--;
            printf ("\t\tEnd of second while loop j = %d and i = %d\n", j, i);
        }
    }
    printf ("After first while loop j = %d and i = %d \n", j, i);
    printf ("Press any key to finish the program and close the window\n");
    return 0;
}
----------------------------------------

int dup_chk (int a [], int length) {
    int i = length;
    while (i > 0) {
        i--;
        int j = i - 1;
        while (j >= 0) {
            if (a[i] == a[j]) {
                return 1;
            }
            j--;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50765345_50766398_1_44
50765345_50769626_1_48
Title: Connect returns -1 with getaddrinfo on client side 
----------------------------------------

void hostname_to_ip (char *hostname, int *connection_socket, int port_number) {
    int check_sfd;
    struct addrinfo hints, *p, *servinfo;
    memset (& hints, 0, sizeof (struct addrinfo));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = 0;
    hints.ai_protocol = 0;
    int res = getaddrinfo (hostname, NULL, &hints, &servinfo);
    if (res != 0) {
        fprintf (stderr, "Error: error in getaddrinfo on hostname: %s\n", gai_strerror (res));
        exit (EXIT_FAILURE);
    }
    for (p = servinfo; p != NULL; p = p->ai_next) {
        check_sfd = socket (p->ai_family, p->ai_socktype, p->ai_protocol);
        if (check_sfd == -1)
            continue;
        struct sockaddr_in *sockstruct = (struct sockaddr_in *) p->ai_addr;
        sockstruct->sin_port = htons (port_number);
        sockstruct->sin_family = AF_INET;
        socklen_t addrsize = sizeof (struct sockaddr_in);
        if (connect (check_sfd, (struct sockaddr *) sockstruct, addrsize) != -1) {
            *connection_socket = check_sfd;
            break;
        }
        close (check_sfd);
    }
    if (p == NULL) {
        printf ("Error: couldn't connect to hostname. %s\n", strerror (errno));
        exit (EXIT_FAILURE);
    }
    freeaddrinfo (servinfo);
}
----------------------------------------

void hostname_to_ip (char *hostname, int *connection_socket, unsigned short port_number) {
    int check_sfd;
    struct addrinfo hints, *p, *servinfo;
    char port_number_s [sizeof ("65535")];
    memset (& hints, 0, sizeof (struct addrinfo));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_NUMERICSERV;
    hints.ai_protocol = 0;
    snprintf (port_number_s, sizeof port_number_s, "%u", port_number);
    int res = getaddrinfo (hostname, port_number_s, &hints, &servinfo);
    if (res == EAI_SYSTEM) {
        fprintf (stderr, "Error looking up %s: %s\n", hostname, strerror (errno));
        exit (1);
    }
    else if (res != 0) {
        fprintf (stderr, "Error looking up %s: %s\n", hostname, gai_strerror (res));
        exit (1);
    }
    else if (servinfo == NULL) {
        fprintf (stderr, "Error looking up %s: No addresses found\n", hostname);
        exit (1);
    }
    for (p = servinfo; p != NULL; p = p->ai_next) {
        check_sfd = socket (p->ai_family, p->ai_socktype, p->ai_protocol);
        if (check_sfd == -1)
            continue;
        if (connect (check_sfd, p->ai_addr, p->ai_addrlen)) {
            *connection_socket = check_sfd;
            freeaddrinfo (servinfo);
            return;
        }
        close (check_sfd);
    }
    fprintf (stderr, "Couldn't connect to %s: %s\n", hostname, strerror (errno));
    exit (1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50805049_50806465_1_22
50805049_50807381_1_21
Title: Ansi C: High flow control/Replace just the first occurence with a *star* and delete each duplicate 
----------------------------------------

int replace (char *A, int N) {
    int first, next;
    for (first = 0; first < N; ++first) {
        for (next = first + 1; next < N; ++next) {
            if (A[next] == A[first]) {
                int del = next;
                while (++next < N) {
                    if (A[next] != A[first])
                        A[del++] = A[next];
                }
                N = del;
                A[first] = '*';
            }
        }
    }
    return N;
}
----------------------------------------

int replace (char *A) {
    unsigned char offset [UCHAR_MAX];
    memset (offset, UCHAR_MAX, UCHAR_MAX);
    int out = 0;
    char *scan;
    for (scan = A; *scan; ++scan) {
        unsigned char ch = *scan;
        if (offset[ch] == UCHAR_MAX) {
            offset[ch] = out;
            A[out++] = *scan;
        }
        else {
            A[offset[ch]] = '*';
        }
    }
    A[out] = 0;
    return out;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50849664_50849777_6_16
50849664_50849832_4_18
Title: How to get the next number infront of a searched string in a string in c programming 
----------------------------------------

int main () {
    char data [] = "This is just a text. Data: Is invalid. Restful information. Actual Position:1234 System requirements";
    char srcData [] = "Actual Position:";
    char *pos = strstr (data, srcData) + strlen (srcData);
    int value = 0;
    sscanf (pos, "%d", & value);
    printf ("%d", value);
    return 0;
}
----------------------------------------

int main () {
    int i = -1;
    char sentence [] = "This is just a text. Data: Is invalid. Restful information. Actual Position:1234 System requirements";
    char key [] = "Actual Position:";
    char *subst = strstr (sentence, key);
    if (subst != 0) {
        int n = sscanf (subst, "Actual Position:%i", &i);
        if (n > 0) {
            printf ("Found Actual Position => %d\n", i);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50866706_50867433_1_17
50866706_50868124_5_33
Title: How to copy a sentence from a longer string into a new array while including period? 
----------------------------------------

int main () {
    char buf [] = "My name is John. I have 1 dog.";
    int i = 0;
    int j = 0;
    while (buf[i] != '.' && buf[i] != '\0') {
        i++;
    }
    char newbuf [i + 1];
    while (j <= i) {
        newbuf[j] = buf[j];
        j++;
    }
    newbuf[j] = '\0';
    printf ("%s\n", newbuf);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *str1, *str2, *token, *subtoken;
    char *saveptr1, *saveptr2;
    int j;
    if (argc != 4) {
        fprintf (stderr, "Usage: %s string delim subdelim\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    for (j = 1, str1 = argv[1];; j++, str1 = NULL) {
        token = strtok_r (str1, argv[2], &saveptr1);
        if (token == NULL)
            break;
        printf ("%d: %s\n", j, token);
        for (str2 = token;; str2 = NULL) {
            subtoken = strtok_r (str2, argv[3], &saveptr2);
            if (subtoken == NULL)
                break;
            printf (" --> %s\n", subtoken);
        }
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50866706_50867433_1_17
50866706_50868640_5_23
Title: How to copy a sentence from a longer string into a new array while including period? 
----------------------------------------

int main () {
    char buf [] = "My name is John. I have 1 dog.";
    int i = 0;
    int j = 0;
    while (buf[i] != '.' && buf[i] != '\0') {
        i++;
    }
    char newbuf [i + 1];
    while (j <= i) {
        newbuf[j] = buf[j];
        j++;
    }
    newbuf[j] = '\0';
    printf ("%s\n", newbuf);
    return 0;
}
----------------------------------------

int main (void) {
    char buf [] = "My name is John. I have 1 dog.", *p = buf, new [MAXC] = "", *n = new;
    size_t ndx = 0;
    for (; ndx + 1 < MAXC && *p; p++, n++, ndx++) {
        *n = *p;
        if (*n == '.')
            break;
    }
    printf ("buf: %s\nnew: %s\n", buf, new);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50866706_50868124_5_33
50866706_50868640_5_23
Title: How to copy a sentence from a longer string into a new array while including period? 
----------------------------------------

int main (int argc, char *argv []) {
    char *str1, *str2, *token, *subtoken;
    char *saveptr1, *saveptr2;
    int j;
    if (argc != 4) {
        fprintf (stderr, "Usage: %s string delim subdelim\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    for (j = 1, str1 = argv[1];; j++, str1 = NULL) {
        token = strtok_r (str1, argv[2], &saveptr1);
        if (token == NULL)
            break;
        printf ("%d: %s\n", j, token);
        for (str2 = token;; str2 = NULL) {
            subtoken = strtok_r (str2, argv[3], &saveptr2);
            if (subtoken == NULL)
                break;
            printf (" --> %s\n", subtoken);
        }
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------

int main (void) {
    char buf [] = "My name is John. I have 1 dog.", *p = buf, new [MAXC] = "", *n = new;
    size_t ndx = 0;
    for (; ndx + 1 < MAXC && *p; p++, n++, ndx++) {
        *n = *p;
        if (*n == '.')
            break;
    }
    printf ("buf: %s\nnew: %s\n", buf, new);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50898084_50898210_5_23
50898084_50898361_3_20
Title: Finding approximate value of 'e' in C language 
----------------------------------------

int main () {
    int n, i;
    float e = 1;
    printf ("Enter the value of n:");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        e = e + (1.0 / factorial (i));
    }
    printf ("The value of e is %f", e);
    return (0);
}
----------------------------------------

int main (void) {
    double e, term;
    int t, n;
    printf ("Enter the value of n:");
    if (scanf ("%d", &n) != 1) {
        return 1;
    }
    e = 1;
    term = 1;
    for (t = 1; t <= n; t++) {
        term /= t;
        e += term;
    }
    printf ("%.15f\n", e);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50923208_50924047_9_36
50923208_50924384_10_46
Title: Writing a structure to a file giving segmentation fault after taking 1 input 
----------------------------------------

int main () {
    int i, n;
    struct movie info;
    FILE *database;
    database = fopen ("output", "w");
    if (database == NULL) {
        printf ("Cannot open file\n");
        return 1;
    }
    scanf ("%d", & n);
    for (i = 0; i < n; ++i) {
        scanf ("%s", info.name);
        scanf ("%d", & info.g1);
        scanf ("%d", & info.g2);
        scanf ("%d", & info.g3);
        fwrite (& info, sizeof (info), 1, database);
    }
    fclose (database);
}
----------------------------------------

void main () {
    int i, j, n;
    struct movie info [30];
    FILE *database;
    database = fopen ("database.dat", "w");
    if (database == NULL) {
        printf ("Error\n");
        exit (1);
    }
    scanf ("%d", & n);
    for (i = 0; i < n; ++i) {
        scanf ("%s", info [i].name);
        ` enter code here ` scanf ("%d", & info [i].g1);
        scanf ("%d", & info [i].g2);
        scanf ("%d", & info [i].g3);
        fprintf (database, "%s", info [i].name);
        fprintf (database, "%d", info [i].g1);
        fprintf (database, "%d", info [i].g2);
        fprintf (database, "%d", info [i].g3);
    }
    fclose (database);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50923208_50924047_9_36
50923208_50924631_12_45
Title: Writing a structure to a file giving segmentation fault after taking 1 input 
----------------------------------------

int main () {
    int i, n;
    struct movie info;
    FILE *database;
    database = fopen ("output", "w");
    if (database == NULL) {
        printf ("Cannot open file\n");
        return 1;
    }
    scanf ("%d", & n);
    for (i = 0; i < n; ++i) {
        scanf ("%s", info.name);
        scanf ("%d", & info.g1);
        scanf ("%d", & info.g2);
        scanf ("%d", & info.g3);
        fwrite (& info, sizeof (info), 1, database);
    }
    fclose (database);
}
----------------------------------------

int main (void) {
    int n, i, j;
    struct movie list [30];
    FILE *fptr;
    fptr = fopen ("C:/Users/yadhu/database.dat", "w");
    if (fptr == NULL) {
        printf ("File opening failed\n");
        fflush (stdout);
        return 0;
    }
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%s", list [i].name);
        scanf ("%d%d%d", & list [i].g1, & list [i].g2, & list [i].g3);
        fwrite (& list [i], sizeof (list [i]), 1, fptr);
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50923208_50924384_10_46
50923208_50924631_12_45
Title: Writing a structure to a file giving segmentation fault after taking 1 input 
----------------------------------------

void main () {
    int i, j, n;
    struct movie info [30];
    FILE *database;
    database = fopen ("database.dat", "w");
    if (database == NULL) {
        printf ("Error\n");
        exit (1);
    }
    scanf ("%d", & n);
    for (i = 0; i < n; ++i) {
        scanf ("%s", info [i].name);
        ` enter code here ` scanf ("%d", & info [i].g1);
        scanf ("%d", & info [i].g2);
        scanf ("%d", & info [i].g3);
        fprintf (database, "%s", info [i].name);
        fprintf (database, "%d", info [i].g1);
        fprintf (database, "%d", info [i].g2);
        fprintf (database, "%d", info [i].g3);
    }
    fclose (database);
}
----------------------------------------

int main (void) {
    int n, i, j;
    struct movie list [30];
    FILE *fptr;
    fptr = fopen ("C:/Users/yadhu/database.dat", "w");
    if (fptr == NULL) {
        printf ("File opening failed\n");
        fflush (stdout);
        return 0;
    }
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%s", list [i].name);
        scanf ("%d%d%d", & list [i].g1, & list [i].g2, & list [i].g3);
        fwrite (& list [i], sizeof (list [i]), 1, fptr);
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50961388_50961636_3_19
50961388_50961709_3_23
Title: Why am I not getting the desired output of my C program? 
----------------------------------------

int main (void) {
    int height;
    do {
        printf ("Enter the height of the wall:\n");
        scanf ("%d", & height);
    }
    while (height < 0 || height > 23);
    for (int i = 0; i < height; ++i) {
        printf ("%d: %*.*s\n", i + 1, height + i, 2 * i + 1, "########################################");
    }
    return 0;
}
----------------------------------------

int main () {
    int h, spaces, hash;
    h = 5;
    for (int i = 0; i < h; i++) {
        for (spaces = h - i; spaces > 1; spaces--) {
            printf (" ");
        }
        for (hash = 0; hash <= 2 * i; hash++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50961388_50961636_3_19
50961388_50961860_4_28
Title: Why am I not getting the desired output of my C program? 
----------------------------------------

int main (void) {
    int height;
    do {
        printf ("Enter the height of the wall:\n");
        scanf ("%d", & height);
    }
    while (height < 0 || height > 23);
    for (int i = 0; i < height; ++i) {
        printf ("%d: %*.*s\n", i + 1, height + i, 2 * i + 1, "########################################");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, height, spaces, hash;
    do {
        printf ("Enter the height of the wall:\n");
        scanf ("%d", & height);
    }
    while (height < 0 || height >= 23);
    for (i = 0; i < height; i++) {
        for (spaces = height - i; spaces > 1; spaces--) {
            printf (" ");
        }
        for (hash = 0;
        hash <= i;
        hash ++) {printf ("# ");
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50961388_50961709_3_23
50961388_50961860_4_28
Title: Why am I not getting the desired output of my C program? 
----------------------------------------

int main () {
    int h, spaces, hash;
    h = 5;
    for (int i = 0; i < h; i++) {
        for (spaces = h - i; spaces > 1; spaces--) {
            printf (" ");
        }
        for (hash = 0; hash <= 2 * i; hash++) {
            printf ("#");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, height, spaces, hash;
    do {
        printf ("Enter the height of the wall:\n");
        scanf ("%d", & height);
    }
    while (height < 0 || height >= 23);
    for (i = 0; i < height; i++) {
        for (spaces = height - i; spaces > 1; spaces--) {
            printf (" ");
        }
        for (hash = 0;
        hash <= i;
        hash ++) {printf ("# ");
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50962064_50962257_1_22
50962064_50967490_4_23
Title: Fibonacci Sequence C program error 
----------------------------------------

int main () {
    int n, i;
    int a, b;
    printf ("Enter two first two numbers:");
    scanf ("%d %d", & a, & b);
    printf ("Enter the value of n(3-100):");
    scanf ("%d", & n);
    int *s = malloc (n * sizeof (*s));
    s[0] = a;
    s[1] = b;
    for (i = 2; i < n; i++) {
        s[i] = s[i - 1] + s[i - 2];
    }
    printf ("The nth digit is %d", s [n - 1]);
    return (0);
}
----------------------------------------

int main () {
    int n, i;
    int a, b;
    printf ("Enter two first two numbers:");
    scanf ("%d%d", & a, & b);
    printf ("Enter the value of n(3-100):");
    scanf ("%d", & n);
    for (i = 1; i < n; i++) {
        b += a;
        a = b - a;
    }
    printf ("The nth digit is %d\n", a);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50969861_50970434_39_51
50969861_50970478_5_37
Title: Deleting Elements from an Array based on their Position every 3 Elements 
----------------------------------------

int main () {
    int elements_n [] = {0, 1};
    int arr [] = {0, 1, 3, 1, 2, 4};
    size_t newsize = fancy_delete_3 (elements_n, __arraycount (elements_n), arr, __arraycount (arr));
    printf ("arr size=%zu {", newsize);
    for (size_t i = 0; i < newsize; ++i)
        printf ("%d,", arr[i]);
    printf ("}\n");
    return 0;
}
----------------------------------------

int main () {
    unsigned *elements_n = malloc (N * sizeof (unsigned));
    for (int i = 0; i < N; i++) {
        elements_n[i] = i;
    }
    unsigned Arr [6] = {0, 1, 3, 1, 2, 4};
    int dest_index = 0;
    int src_index = 0;
    int count = sizeof (Arr) / sizeof (Arr [0]);
    for (; src_index < count; src_index++) {
        int group = src_index / 3;
        if (Arr[src_index] != elements_n[group]) {
            Arr[dest_index++] = Arr[src_index];
        }
    }
    for (int i = 0; i < dest_index; i++) {
        printf ("%d\t", Arr [i]);
    }
    printf ("\n");
    free (elements_n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50969861_50970434_39_51
50969861_50971147_4_19
Title: Deleting Elements from an Array based on their Position every 3 Elements 
----------------------------------------

int main () {
    int elements_n [] = {0, 1};
    int arr [] = {0, 1, 3, 1, 2, 4};
    size_t newsize = fancy_delete_3 (elements_n, __arraycount (elements_n), arr, __arraycount (arr));
    printf ("arr size=%zu {", newsize);
    for (size_t i = 0; i < newsize; ++i)
        printf ("%d,", arr[i]);
    printf ("}\n");
    return 0;
}
----------------------------------------

int main () {
    unsigned elements_n [N] = {0, 1};
    unsigned Arr [N * 3] = {0, 1, 3, 1, 2, 4};
    int i, j;
    for (i = 0, j = 0; i < N * 3; i++)
        if (Arr[i] != elements_n[i / 3])
            Arr[j++] = Arr[i];
    for (i = 0; i < j; i++)
        printf (" %d", Arr[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50969861_50970478_5_37
50969861_50971147_4_19
Title: Deleting Elements from an Array based on their Position every 3 Elements 
----------------------------------------

int main () {
    unsigned *elements_n = malloc (N * sizeof (unsigned));
    for (int i = 0; i < N; i++) {
        elements_n[i] = i;
    }
    unsigned Arr [6] = {0, 1, 3, 1, 2, 4};
    int dest_index = 0;
    int src_index = 0;
    int count = sizeof (Arr) / sizeof (Arr [0]);
    for (; src_index < count; src_index++) {
        int group = src_index / 3;
        if (Arr[src_index] != elements_n[group]) {
            Arr[dest_index++] = Arr[src_index];
        }
    }
    for (int i = 0; i < dest_index; i++) {
        printf ("%d\t", Arr [i]);
    }
    printf ("\n");
    free (elements_n);
    return 0;
}
----------------------------------------

int main () {
    unsigned elements_n [N] = {0, 1};
    unsigned Arr [N * 3] = {0, 1, 3, 1, 2, 4};
    int i, j;
    for (i = 0, j = 0; i < N * 3; i++)
        if (Arr[i] != elements_n[i / 3])
            Arr[j++] = Arr[i];
    for (i = 0; i < j; i++)
        printf (" %d", Arr[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50987547_50990074_44_57
50987547_50992941_3_41
Title: Printing an array sideways (transpose) only using pointers 
----------------------------------------

int main () {
    int A [] = {5, -5, 14, 5, 2};
    int B [] = {3, 6, 11};
    int C [] = {4, 1, -3, 4};
    int D [] = {6, 2, 7, 1, 8, 2};
    int E [] = {2, 15};
    int F [] = {3, 4, -2};
    int *All [] = {A, B, C, D, E, F, NULL};
    print_transposed (All);
}
----------------------------------------

int main (void) {
    int A [] = {5, -5, 14, 5, 2};
    int B [] = {3, 6, 11};
    int C [] = {4, 1, -3, 4};
    int D [] = {6, 2, 7, 1, 8, 2};
    int E [] = {2, 15};
    int F [] = {3, 4, -2};
    int *All [] = {A, B, C, D, E, F, NULL};
    int **line = All;
    int *col = *line;
    int *repeat = *line;
    int *astart = *line;
    int *acurr = astart;
    do {
        line = All;
        repeat = NULL;
        while (line && *line) {
            if (*line == astart) {
                ++acurr;
            }
            col = *line;
            col += acurr - astart;
            if (**line > (acurr - astart)) {
                printf ("%-5d", * col);
                if (**line > (acurr - astart) + 1) {
                    repeat = col;
                }
            }
            else {
                printf ("     ");
            }
            line++;
        }
        printf ("\n");
    }
    while (repeat);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50987547_50990074_44_57
50987547_50993684_3_36
Title: Printing an array sideways (transpose) only using pointers 
----------------------------------------

int main () {
    int A [] = {5, -5, 14, 5, 2};
    int B [] = {3, 6, 11};
    int C [] = {4, 1, -3, 4};
    int D [] = {6, 2, 7, 1, 8, 2};
    int E [] = {2, 15};
    int F [] = {3, 4, -2};
    int *All [] = {A, B, C, D, E, F, NULL};
    print_transposed (All);
}
----------------------------------------

int main () {
    int A [] = {5, -5, 14, 5, 2};
    int B [] = {3, 6, 11};
    int C [] = {4, 1, -3, 4};
    int D [] = {6, 2, 7, 1, 8, 2};
    int E [] = {2, 15};
    int F [] = {3, 4, -2};
    int *All [] = {A, B, C, D, E, F, NULL};
    int index = 1;
    int rem = 6;
    while (rem > 0) {
        for (int i = 0; i < 6; i++) {
            int *arr = All[i];
            if (index < arr[0])
                printf ("%-4d", arr[index]);
            else {
                rem--;
                printf ("    ");
            }
        }
        index++;
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50987547_50992941_3_41
50987547_50993684_3_36
Title: Printing an array sideways (transpose) only using pointers 
----------------------------------------

int main (void) {
    int A [] = {5, -5, 14, 5, 2};
    int B [] = {3, 6, 11};
    int C [] = {4, 1, -3, 4};
    int D [] = {6, 2, 7, 1, 8, 2};
    int E [] = {2, 15};
    int F [] = {3, 4, -2};
    int *All [] = {A, B, C, D, E, F, NULL};
    int **line = All;
    int *col = *line;
    int *repeat = *line;
    int *astart = *line;
    int *acurr = astart;
    do {
        line = All;
        repeat = NULL;
        while (line && *line) {
            if (*line == astart) {
                ++acurr;
            }
            col = *line;
            col += acurr - astart;
            if (**line > (acurr - astart)) {
                printf ("%-5d", * col);
                if (**line > (acurr - astart) + 1) {
                    repeat = col;
                }
            }
            else {
                printf ("     ");
            }
            line++;
        }
        printf ("\n");
    }
    while (repeat);
    return 0;
}
----------------------------------------

int main () {
    int A [] = {5, -5, 14, 5, 2};
    int B [] = {3, 6, 11};
    int C [] = {4, 1, -3, 4};
    int D [] = {6, 2, 7, 1, 8, 2};
    int E [] = {2, 15};
    int F [] = {3, 4, -2};
    int *All [] = {A, B, C, D, E, F, NULL};
    int index = 1;
    int rem = 6;
    while (rem > 0) {
        for (int i = 0; i < 6; i++) {
            int *arr = All[i];
            if (index < arr[0])
                printf ("%-4d", arr[index]);
            else {
                rem--;
                printf ("    ");
            }
        }
        index++;
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51004470_51005187_25_136
51004470_51012326_17_74
Title: Closing unused pipe file descriptors 
----------------------------------------

int main (int argc, char **argv) {
    err_setarg0 (argv [0]);
    bool sig_ignore = false;
    bool sig_handle = false;
    bool after_fork = false;
    bool before_fork = false;
    bool parent_doze = false;
    static const char usestr [] = "[-abdhi]";
    int opt;
    while ((opt = getopt (argc, argv, "abdhi")) != -1) {
        switch (opt) {
        case 'a' :
            after_fork = true;
            break;
        case 'b' :
            before_fork = true;
            break;
        case 'd' :
            parent_doze = true;
            break;
        case 'h' :
            sig_handle = true;
            break;
        case 'i' :
            sig_ignore = true;
            break;
        default :
            err_usage (usestr);
        }
    }
    if (optind != argc)
        err_usage (usestr);
    if (sig_handle && sig_ignore)
        sig_ignore = false;
    if (before_fork && after_fork)
        after_fork = false;
    printf ("Configuration:\n");
    print_bool ("Close read fd before fork", before_fork);
    print_bool ("Close read fd after  fork", after_fork);
    print_bool ("SIGPIPE handled", sig_handle);
    print_bool ("SIGPIPE ignored", sig_ignore);
    print_bool ("Parent doze", parent_doze);
    err_setlogopts (ERR_PID);
    errMsgPipeLen = strlen (errMsgPipe);
    char bufin [BUFSIZE] = "empty";
    char bufout [] = "hello soner";
    int bytesin;
    pid_t childpid;
    int fd [2];
    struct sigaction sa;
    memset (& sa, 0, sizeof (sa));
    sa.sa_flags = 0;
    sigfillset (& sa.sa_mask);
    sa.sa_handler = SIG_DFL;
    if (sig_ignore)
        sa.sa_handler = SIG_IGN;
    if (sig_handle)
        sa.sa_handler = handler;
    if (sigaction (SIGPIPE, &sa, 0) != 0)
        err_syserr ("sigaction(SIGPIPE) failed: ");
    printf ("Parent: %d\n", (int) getpid ());
    if (pipe (fd) == -1)
        err_syserr ("pipe failed: ");
    if (before_fork)
        close (fd[0]);
    int val = -999;
    bytesin = strlen (bufin);
    childpid = fork ();
    if (childpid == -1)
        err_syserr ("fork failed: ");
    if (after_fork)
        close (fd[0]);
    if (childpid) {
        if (parent_doze)
            sleep (1);
        val = write (fd[1], bufout, strlen (bufout) +1);
        if (val < 0)
            err_syserr ("write to pipe failed: ");
        err_remark ("Parent wrote %d bytes to pipe\n", val);
    }
    else {
        bytesin = read (fd[0], bufin, BUFSIZE);
        if (bytesin < 0)
            err_syserr ("read from pipe failed: ");
        err_remark ("Child read %d bytes from pipe\n", bytesin);
    }
    fprintf (stderr, "[%ld]:my bufin is {%.*s}, my bufout is {%s}\n", (long) getpid (), bytesin, bufin, bufout);
    return 0;
}
----------------------------------------

int main (void) {
    errMsgPipeLen = strlen (errMsgPipe);
    char bufin [BUFSIZE] = "empty";
    char bufout [] = "hello soner";
    int bytesin;
    pid_t childpid;
    int fd [2];
    struct sigaction sa;
    memset (& sa, 0, sizeof (sa));
    sa.sa_flags = 0;
    sigfillset (& sa.sa_mask);
    sa.sa_handler = handler;
    sigaction (SIGPIPE, & sa, 0);
    if (pipe (fd) == -1) {
        perror ("Failed to create the pipe");
        return 1;
    }
    close (fd [0]);
    int val = -999;
    bytesin = strlen (bufin);
    childpid = fork ();
    if (childpid == -1) {
        perror ("Failed to fork");
        return 1;
    }
    if (childpid) {
        val = write (fd[1], bufout, strlen (bufout) +1);
        if (val < 0) {
            perror ("writing process error");
        }
    }
    else {
        bytesin = read (fd[0], bufin, BUFSIZE);
    }
    fprintf (stderr, "[%ld]:my bufin is {%.*s}, my bufout is {%s}\n", (long) getpid (), bytesin, bufin, bufout);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51015240_51016163_3_38
51015240_51019821_102_142
Title: "Inputting splitting and sorting in C" 
----------------------------------------

int main () {
    int n, c, d, position, swap;
    printf ("Enter number of elements\n");
    scanf ("%d", & n);
    int array [n];
    printf ("Enter %d integers\n", n);
    for (c = 0; c < n; c++)
        scanf ("%d", &array[c]);
    for (c = 0; c < (n - 1); c++) {
        position = c;
        for (d = c + 1; d < n; d++) {
            if (array[position] > array[d])
                position = d;
        }
        if (position != c) {
            swap = array[c];
            array[c] = array[position];
            array[position] = swap;
        }
    }
    printf ("Sorted list in ascending order:\n");
    for (c = 0; c < n; c++)
        printf ("%d\n", array[c]);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char buff [128];
    const char **tokens;
    int size;
    int i;
    int *ints;
    fgets (buff, 128, stdin);
    tokens = split (buff, " \t\n", &size);
    ints = malloc (sizeof (int) * size);
    sort (str, tokens, size, strcmp, false);
    for (i = 0; i < size; i++) {
        printf ("[%02d]: <%s>\n", i, tokens [i]);
        ints[i] = atoi (tokens[i]);
    }
    sort (int, ints, size, intcmp, true);
    for (i = 0; i < size; i++) {
        printf ("[%02d]: <%d>\n", i, ints [i]);
    }
    free (ints);
    free (tokens);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51035054_51035241_7_17
51035054_51035679_5_16
Title: Get the value using the hexadecimal address in c 
----------------------------------------

int main () {
    char *address;
    char num [3] = "ab";
    address = (char *) num;
    printf ("Address of num: %p\n", address);
    getTheValue ();
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    void *address;
    char num [] = "ab";
    address = num;
    printf ("Address of num: %p\n", address);
    getTheValue ();
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51055250_51057382_1_33
51055250_51057493_20_38
Title: RLE algorithm should compress bytes in c 
----------------------------------------

void compress_file (FILE *source, FILE *destination) {
    char str [BUF_SIZE];
    int index = 0;
    int repeat_count = 0;
    int previous_character = EOF;
    int current_character;
    while ((current_character = fgetc (source)) != EOF) {
        if (current_character != previous_character) {
            if (previous_character != EOF) {
                str[index++] = repeat_count;
                str[index++] = previous_character;
            }
            previous_character = current_character;
            repeat_count = 1;
        }
        else {
            repeat_count++;
        }
    }
    if (repeat_count != 0) {
        str[index++] = repeat_count;
        str[index++] = previous_character;
    }
    fwrite (str, index, 1, destination);
}
----------------------------------------

void compress_file (FILE *source, FILE *destination) {
    int repeat_count = 0;
    int previous_character = EOF;
    int current_character;
    while ((current_character = fgetc (source)) != EOF) {
        if (current_character != previous_character) {
            if (previous_character != EOF) {
                write_char_to_file (destination, repeat_count, previous_character);
            }
            previous_character = current_character;
            repeat_count = 1;
        }
        else {
            repeat_count++;
        }
    }
    write_char_to_file (destination, repeat_count, previous_character);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51113958_51114037_2_29
51113958_51114077_1_35
Title: Sum of the odd digits and even digits from the input and compare them. If both are equal print stat1 else stat2 
----------------------------------------

int main () {
    int n, i, sum = 0, sum1 = 0, rem;
    printf ("enter values\n");
    scanf ("%d", & n);
    for (i = 0; i < n;) {
        rem = n % 10;
        if (rem % 2 == 0) {
            sum = sum + rem;
        }
        else {
            sum1 = sum1 + rem;
        }
        n = n / 10;
    }
    if (sum == sum1)
        printf ("I will win the Card Game\n");
    else
        printf ("I will not win the Card Game\n");
    return 0;
}
----------------------------------------

int main () {
    int n, i, sum = 0, sum1 = 0, rem, length, temp;
    printf ("enter values\n");
    scanf ("%d", & n);
    temp = n;
    length = 0;
    while (temp > 0) {
        length++;
        temp /= 10;
    }
    for (i = 0; i < length; i++) {
        rem = n % 10;
        if (rem % 2 == 0) {
            sum = sum + rem;
        }
        else {
            sum1 = sum1 + rem;
        }
        n = n / 10;
    }
    if (sum == sum1)
        printf ("I will win the Card Game, sum: %d", sum);
    else
        printf ("I will not win the Card Game, sum: %d, sum1: %d", sum, sum1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51113958_51114037_2_29
51113958_51114091_2_28
Title: Sum of the odd digits and even digits from the input and compare them. If both are equal print stat1 else stat2 
----------------------------------------

int main () {
    int n, i, sum = 0, sum1 = 0, rem;
    printf ("enter values\n");
    scanf ("%d", & n);
    for (i = 0; i < n;) {
        rem = n % 10;
        if (rem % 2 == 0) {
            sum = sum + rem;
        }
        else {
            sum1 = sum1 + rem;
        }
        n = n / 10;
    }
    if (sum == sum1)
        printf ("I will win the Card Game\n");
    else
        printf ("I will not win the Card Game\n");
    return 0;
}
----------------------------------------

int main () {
    int n, *arr, i, sum = 0, sum1 = 0;
    printf ("how many numbers\n");
    scanf ("%d", & n);
    printf ("enter values");
    for (i = 0; i < n; i++) {
        scanf ("%d", & arr [i]);
    }
    for (i = 0; i < n; i++) {
        if (arr[i] % 2 == 0)
            sum = sum + 1;
        else
            sum1 = sum1 + 1;
    }
    if (sum == sum1)
        printf ("I will win the Card Game");
    else
        printf ("I will not win the Card Game");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51113958_51114077_1_35
51113958_51114091_2_28
Title: Sum of the odd digits and even digits from the input and compare them. If both are equal print stat1 else stat2 
----------------------------------------

int main () {
    int n, i, sum = 0, sum1 = 0, rem, length, temp;
    printf ("enter values\n");
    scanf ("%d", & n);
    temp = n;
    length = 0;
    while (temp > 0) {
        length++;
        temp /= 10;
    }
    for (i = 0; i < length; i++) {
        rem = n % 10;
        if (rem % 2 == 0) {
            sum = sum + rem;
        }
        else {
            sum1 = sum1 + rem;
        }
        n = n / 10;
    }
    if (sum == sum1)
        printf ("I will win the Card Game, sum: %d", sum);
    else
        printf ("I will not win the Card Game, sum: %d, sum1: %d", sum, sum1);
    return 0;
}
----------------------------------------

int main () {
    int n, *arr, i, sum = 0, sum1 = 0;
    printf ("how many numbers\n");
    scanf ("%d", & n);
    printf ("enter values");
    for (i = 0; i < n; i++) {
        scanf ("%d", & arr [i]);
    }
    for (i = 0; i < n; i++) {
        if (arr[i] % 2 == 0)
            sum = sum + 1;
        else
            sum1 = sum1 + 1;
    }
    if (sum == sum1)
        printf ("I will win the Card Game");
    else
        printf ("I will not win the Card Game");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51118420_51118471_1_14
51118420_51122238_13_23
Title: Why isn't my solution to K&R exercise 2-3 working? 
----------------------------------------

int htoi (char *s) {
    int length = strlen (s), num = 0, i;
    for (i = 0; i < length; i++) {
        int factor = pow (16, length -i - 1), digit;
        int c = toupper (s[i]);
        if (c >= '0' && c <= '9')
            digit = c - '0';
        else if (c >= 'A' && c <= 'F')
            digit = c - 'A' + 10;
        num += digit * factor;
    }
    return num;
}
----------------------------------------

int htoi (const char *s) {
    unsigned int num = 0;
    int i;
    for (i = 0; isxdigit ((unsigned char) s[i]); i++) {
        if (c >= '0' && c <= '9')
            num = num * 16 + c - '0';
        else
            num = num * 16 + 10 + toupper (c) - 'A';
    }
    return num;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51118734_51119027_13_41
51118734_51122350_3_34
Title: Sum of prime factors 
----------------------------------------

int main () {
    int num, x, tmp, sum = 0;
    scanf ("%d", & num);
    tmp = num;
    printf ("Factors are: ");
    while (1) {
        x = getFirst (tmp);
        printf ("%d ", x);
        if (x == tmp)
            break;
        tmp /= x;
    }
    printf ("\n");
    printf ("Sum of factors is: ");
    tmp = num;
    while (1) {
        x = getFirst (tmp);
        printf ("%d ", x);
        sum += x;
        if (x == tmp)
            break;
        printf ("+ ");
        tmp /= x;
    }
    printf ("= %d\n", sum);
}
----------------------------------------

int main () {
    char expr [9 * 11 + 1];
    int i, j, pos, num, isPrime, sum;
    printf ("Input number: ");
    if (scanf ("%d", &num) != 1)
        return 1;
    printf ("Factors are: 1");
    pos = 0;
    expr[pos] = '\0';
    sum = 1;
    for (i = 2; i <= num; i++) {
        if (num % i == 0) {
            isPrime = 1;
            for (j = 2; j * j <= i; j++) {
                if (i % j == 0) {
                    isPrime = 0;
                    break;
                }
            }
            if (isPrime == 1) {
                pos += sprintf (expr +pos, "+%d", i);
                printf (" %d", i);
                sum += i;
            }
        }
    }
    printf ("\nSum of its factors: 1%s = %d\n", expr, sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51188836_51189498_4_12
51188836_51297812_4_18
Title: How to use the move function under curses.h 
----------------------------------------

int main () {
    refresh ();
    WINDOW *my_window;
    int a = wmove (my_window, 5, 10);
    refresh ();
    printf ("%d\n", a);
    printf ("hi\n");
    return 0;
}
----------------------------------------

int main () {
    initscr ();
    refresh ();
    WINDOW *win;
    win = stdscr;
    wmove (win, 10, 10);
    refresh ();
    printf ("hi\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51202755_51203328_3_21
51202755_51282518_3_18
Title: Quit the program with specific letter 
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter the interger: ");
        int x = getchar ();
        if (x == EOF || x == 'q') {
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int x;
    while (x != 'q') {
        printf ("Enter the integer: ");
        x = getchar ();
        getchar ();
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51224682_51229219_1_30
51224682_51229596_3_24
Title: Read file byte by byte using C 
----------------------------------------

int main (void) {
    FILE *fp = fopen ("tugasz.ksa", "rb");
    if (fp) {
        unsigned char buffer [4096];
        size_t sz;
        int line = 0;
        while ((sz = fread (buffer, 1, sizeof (buffer), fp)) > 0) {
            for (int i = 0; i < sz; i++) {
                for (int j = 0; j < 8; j++) {
                    int mask = 1 << (7 - j);
                    int bit = buffer[i] & mask;
                    printf ("%d", bit ? 1 : 0);
                }
                line++;
                if ((line % 4) == 0)
                    printf ("\n");
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    int c, i, max;
    fp = fopen ("tugasz.ksa", "rb");
    if (fp == NULL) {
        fprintf (stderr, "cannot open input file\n");
        return 1;
    }
    for (i = 0, max = 4900; i < max && (c = getc (fp)) != EOF; i++) {
        printf ("%02x", c);
        if (i % 16 == 15)
            putchar ('\n');
        else if (i % 2 == 1)
            putchar (' ');
    }
    if (i % 16 != 0)
        putchar ('\n');
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51232749_51236773_5_58
51232749_51274519_5_37
Title: C Program Limit the integer input range 
----------------------------------------

int main (void) {
    int no;
    do {
        char buffer [80];
        size_t len;
        printf ("Enter number of subjects you took for current semester, [2, 6]: ");
        if (!fgets (buffer, sizeof buffer, stdin)) {
            if (feof (stdin)) {
                fprintf (stderr, "Premature EOF.\n");
            }
            else {
                perror ("stdin");
            }
            return EXIT_FAILURE;
        }
        if (!(len = strlen (buffer)))
            continue;
        if (buffer[len - 1] != '\n') {
            if (len >= sizeof buffer - 1) {
                int c;
                fprintf (stderr, "Line too long.\n");
                while ((c = getchar ()) != '\n') {
                    if (c != EOF)
                        continue;
                    if (feof (stdin))
                        fprintf (stderr, "Premature EOF.\n");
                    else
                        perror ("stdin");
                    return EXIT_FAILURE;
                }
                continue;
            }
            else {
                fprintf (stderr, "Note: line without line break detected.\n");
            }
        }
        if (sscanf (buffer, "%d", &no) != 1 || no < 2 || no > 6) {
            fprintf (stderr, "Invalid input.\n");
            continue;
        }
        printf ("no: %d\n", no);
        break;
    }
    while (1);
    return EXIT_SUCCESS;
}
----------------------------------------

int main () {
    int n, invalidInput, status;
    char strInput [5];
    int i;
    do {
        invalidInput = 0;
        printf ("Enter a **number** between 1 and 100: ");
        fflush (stdin);
        status = scanf ("%4s", strInput);
        if (status > 3) {
            continue;
        }
        for (i = 0; i < strlen (strInput); ++i) {
            if (!isdigit (strInput[i])) {
                invalidInput = 1;
                break;
            }
        }
        if (!invalidInput) {
            n = atoi (strInput);
            if (n < 1 || n > 100) {
                printf ("Error: the input must be between 1 and 100.\n");
                invalidInput = 1;
            }
        }
    }
    while (invalidInput);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51235797_51236454_1_79
51235797_51236721_27_147
Title: MDI child window and status bar C win32 API 
----------------------------------------

LRESULT CALLBACK WndProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    static MDICREATESTRUCT mdicreate;
    static HINSTANCE hinstance;
    switch (msg) {
    case WM_CREATE :
        {
            hinstance = (HINSTANCE) GetWindowLong (hwnd, GWL_HINSTANCE);
            CLIENTCREATESTRUCT ccs = {0};
            ccs.hWindowMenu = GetSubMenu (GetMenu (hwnd), 1);
            ccs.idFirstChild = IDM_FIRSTCHILD;
            hWndClient = CreateWindow ("MDICLIENT", "", WS_CHILD | WS_CLIPCHILDREN | WS_VISIBLE, 0, 0, 0, 0, hwnd, NULL, 0, &ccs);
            CreateWindow (STATUSCLASSNAME, NULL, WS_CHILD | WS_VISIBLE | SBARS_SIZEGRIP, 0, 0, 0, 0, hwnd, (HMENU) IDC_STATUSBAR, hinstance, NULL);
            return 0;
        }
    case WM_SIZE :
        {
            RECT rc;
            GetClientRect (hwnd, & rc);
            int nHalf = rc.right / 2;
            int nParts [4];
            nParts[0] = nHalf;
            nParts[1] = nHalf + nHalf / 3;
            nParts[2] = nHalf + nHalf * 2 / 3;
            nParts[3] = -1;
            SendMessage (GetDlgItem (hwnd, IDC_STATUSBAR), SB_SETPARTS, 4, (LPARAM) & nParts);
            SendMessage (GetDlgItem (hwnd, IDC_STATUSBAR), WM_SIZE, 0, 0);
            RECT statusRect;
            GetClientRect (GetDlgItem (hwnd, IDC_STATUSBAR), & statusRect);
            rc.bottom -= statusRect.bottom;
            MoveWindow (hWndClient, 0, 0, rc.right, rc.bottom, TRUE);
            return 0;
        }
    case WM_DESTROY :
        PostQuitMessage (0);
        return 0;
    case WM_COMMAND :
        if (LOWORD (wParam) == IDM_EXIT) {
            SendMessage (hwnd, WM_CLOSE, 0, 0);
            return 0;
        }
        if (LOWORD (wParam) == IDM_ABOUT)
            MessageBox (hwnd, "ABOUT premuto", "ciao", MB_OK);
        if (LOWORD (wParam) == IDM_OPEN) {
            mdicreate.szClass = childClass;
            mdicreate.szTitle = "Title";
            mdicreate.hOwner = hinstance;
            mdicreate.x = CW_USEDEFAULT;
            mdicreate.y = CW_USEDEFAULT;
            mdicreate.cx = CW_USEDEFAULT;
            mdicreate.cy = CW_USEDEFAULT;
            mdicreate.style = 0;
            mdicreate.lParam = 0;
            SendMessage (hWndClient, WM_MDICREATE, 0, (LPARAM) (LPMDICREATESTRUCT) & mdicreate);
        }
        break;
    }
    return DefFrameProc (hwnd, hWndClient, msg, wParam, lParam);
}
----------------------------------------

LRESULT CALLBACK WndProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_CREATE :
        {
            hWndStatusBar = CreateWindowEx (0, STATUSCLASSNAME, NULL, WS_CHILD | WS_VISIBLE | SBARS_SIZEGRIP, 0, 0, 0, 0, hwnd, (HMENU) IDC_STATUSBAR, (HINSTANCE) GetWindowLong (hwnd, GWL_HINSTANCE), NULL);
            if (!hWndStatusBar) {
                MessageBox (NULL, "Failed To Create The Status Bar", "Error", MB_OK | MB_ICONERROR);
                return 0;
            }
            RECT rc;
            GetClientRect (hwnd, & rc);
            int nHalf = rc.right / 2;
            int nParts [4] = {nHalf, nHalf + nHalf / 3, nHalf + nHalf * 2 / 3, -1};
            SendMessage (hWndStatusBar, SB_SETPARTS, 4, (LPARAM) & nParts);
            CLIENTCREATESTRUCT ccs;
            ccs.hWindowMenu = GetSubMenu (GetMenu (hwnd), 1);
            ccs.idFirstChild = IDM_FIRSTCHILD;
            hWndClient = CreateWindowEx (WS_EX_CLIENTEDGE, clientClass, NULL, WS_CHILD | WS_CLIPCHILDREN | WS_VISIBLE, 0, 0, 0, 0, hwnd, (HMENU) ID_CLIENTWND, GetModuleHandle (NULL), &ccs);
            if (hWndClient == NULL) {
                MessageBox (NULL, "Client Window Creation Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);
                return 0;
            }
            break;
        }
    case WM_SIZE :
        {
            RECT rc;
            GetClientRect (hwnd, & rc);
            int nHalf = rc.right / 2;
            int nParts [4] = {nHalf, nHalf + nHalf / 3, nHalf + nHalf * 2 / 3, -1};
            SendMessage (hWndStatusBar, SB_SETPARTS, 4, (LPARAM) & nParts);
            RECT clientRect;
            GetClientRect (hwnd, & clientRect);
            int frame_dx = clientRect.right - clientRect.left;
            int frame_dy = clientRect.bottom - clientRect.top;
            RECT statusRect;
            GetClientRect (hWndStatusBar, & statusRect);
            int status_dy = statusRect.bottom - statusRect.top;
            MoveWindow (hWndClient, 0, 0, frame_dx, frame_dy - status_dy, TRUE);
            SendMessage (GetDlgItem (hwnd, IDC_STATUSBAR), WM_SIZE, 0, 0);
            return 0;
        }
    case WM_CLOSE :
        DestroyWindow (hwnd);
        break;
    case WM_DESTROY :
        PostQuitMessage (0);
        break;
    case WM_COMMAND :
        if (LOWORD (wParam) == IDM_EXIT)
            DestroyWindow (hwnd);
        if (LOWORD (wParam) == IDM_ABOUT)
            MessageBox (hwnd, "ABOUT premuto", "ciao", MB_OK);
        if (LOWORD (wParam) == IDM_OPEN) {
            MDICREATESTRUCT mdicreate = {0};
            mdicreate.szClass = childClass;
            mdicreate.szTitle = "class_mdichild";
            mdicreate.hOwner = (HINSTANCE) GetWindowLong (hwnd, GWL_HINSTANCE);
            mdicreate.x = CW_USEDEFAULT;
            mdicreate.y = CW_USEDEFAULT;
            mdicreate.cx = CW_USEDEFAULT;
            mdicreate.cy = CW_USEDEFAULT;
            mdicreate.style = 0;
            mdicreate.lParam = 0;
            HWND hwndChild = (HWND) SendMessage (hWndClient, WM_MDICREATE, 0, (LPARAM) (LPMDICREATESTRUCT) &mdicreate);
            if (hwndChild == NULL) {
                MessageBox (hwnd, "Impossibile creare la finestra Child", "Errore", MB_ICONERROR);
            }
        }
        break;
    default :
        return DefFrameProc (hwnd, hWndClient, msg, wParam, lParam);
    }
    return DefFrameProc (hwnd, hWndClient, msg, wParam, lParam);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51239806_51239945_1_28
51239806_51239951_1_11
Title: How can I reduce big O complexity of two for loops 
----------------------------------------

long playlist (int songs_count, int *songs) {
    int i, j, k = 0;
    for (int i = 1; i <= 10; i++) {
        a[i - 1] = i * 60;
    }
    unordered_map < int, int > mymap;
    for (int i = 0; i < songs_count; i++) {
        mymap[i] = songs[i];
    }
    for (i = 0; i < songs_count; i++) {
        for (j = 0; j < n; j++) {
            if (a[j] > songs[i] && mymap.find (a[j] - songs[i]) != mymap.end ()) {
                k++;
            }
        }
    }
    return k;
}
----------------------------------------

long playlist (int songs_count, int *songs) {
    long a [60] = {0};
    int i;
    long total;
    for (i = 0; i < songs_count; i++)
        a[songs[i] % 60]++;
    total = (a[0] * (a[0] - 1) + a[30] * (a[30] - 1)) / 2;
    for (i = 1; i <= 29; i++)
        total += a[i] * a[60 - i];
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51246438_51246610_2_23
51246438_51246658_1_17
Title: why does the following (finding pythagorean triplets) code not work 
----------------------------------------

int main () {
    int a = 1, b = 1, c = 1, d;
    while (a <= 30) {
        b = 1;
        while (b <= 30) {
            c = 1;
            while (c <= 30) {
                d = (a * a) + (b * b);
                if (d == c * c)
                    printf ("the triplet is a =%d  b=%d   c=%d \n", a, b, c);
                c++;
            }
            b++;
        }
        a++;
    }
}
----------------------------------------

int main () {
    for (int i = 1; i <= 30; i += 1) {
        for (int j = 1; j <= 30; j += 1) {
            for (int k = 1; k <= 30; k += 1) {
                int d = (i * i) + (j * j);
                if (d == k * k) {
                    printf ("the triplet is i =%d  j=%d   k=%d \n", i, j, k);
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51251583_51252189_5_32
51251583_51253806_3_21
Title: Swap string in c 
----------------------------------------

char *ft_strrev (char *st) {
    int i;
    int a;
    char temp, *str;
    str = (char *) malloc (sizeof (st));
    strcpy (str, st);
    i = 0;
    a = 0;
    while (str[a] != '\0') {
        a++;
    }
    printf ("%i\n", a);
    while (i < a / 2 && a > 0) {
        temp = str[a - i - 1];
        str[a - i - 1] = str[i];
        str[i] = temp;
        i++;
        printf ("%c\n", str [i]);
    }
    return (str);
}
----------------------------------------

char *ft_strrev (char *str) {
    int i = 0, a = 0;
    while (str[a])
        a++;
    printf ("%i\n", a --);
    while (i < a) {
        char temp = str[i];
        str[i] = str[a];
        str[a] = temp;
        i++, a--;
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51274996_51275078_19_70
51274996_51280443_17_74
Title: My delete function deletes the wrong record of struct 
----------------------------------------

int main () {
    FILE *fbr;
    FILE *temp;
    char ricetta_name [] = "ricette.bin";
    char temp_name [] = "temp.bin";
    fbr = fopen ("ricette.bin", "rb");
    temp = fopen ("temp.bin", "wb");
    int found = 0;
    char name_t [40];
    int i;
    char space = '\n';
    if (fbr == NULL) {
        printf ("Couldn't open the file.\n");
        exit (1);
    }
    if (fbr == NULL) {
        printf ("Couldn't open the file.\n");
        exit (1);
    }
    printf ("Write the name of the recipe you want to delete:\n");
    fgets (name_t, sizeof (name_t), stdin);
    space = getchar ();
    while (fread (&recipe, sizeof (recipe), 1, fbr) && found == 0) {
        if (stringCmpi (name_t, recipe.name) == 0) {
            found = 1;
            printf ("Match found. Recipe deleted.\n");
        }
        else {
            fwrite (& recipe, sizeof (recipe), 1, temp);
        }
        if (!found) {
            printf ("No match.\n");
        }
    }
    fclose (fbr);
    fclose (temp);
    remove (ricetta_name);
    rename (temp_name, ricetta_name);
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fbr;
    FILE *temp;
    char *ricetta_name = "recipe.bin";
    char *temp_name = "temp.bin";
    int found = 0;
    char name_t [40];
    if (argc == 2) {
        ricetta_name = argv[1];
    }
    if ((fbr = fopen (ricetta_name, "rb")) == NULL) {
        printf ("Couldn't open the file %s.\n", ricetta_name);
        exit (1);
    }
    if ((temp = fopen (temp_name, "wb")) == NULL) {
        printf ("Couldn't open the file %s.\n", temp_name);
        exit (1);
    }
    printf ("Write the name of the recipe you want to delete:\n");
    fgets (name_t, sizeof (name_t), stdin);
    if (name_t[strlen (name_t) - 1] == '\n')
        name_t[strlen (name_t) - 1] = 0;
    while (fread (&recipe, sizeof (recipe), 1, fbr)) {
        if (strcasecmp (name_t, recipe.name) == 0) {
            found = 1;
            printf ("Match found. Recipe deleted.\n");
        }
        else {
            fwrite (& recipe, sizeof (recipe), 1, temp);
        }
    }
    if (!found) {
        printf ("No match.\n");
    }
    fclose (fbr);
    fclose (temp);
    remove (ricetta_name);
    rename (temp_name, ricetta_name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51353222_51353343_1_12
51353222_51360726_1_13
Title: Deleting Certain Elements from a Char Array 
----------------------------------------

void stripPunctuators (char *str) {
    char *src = str;
    char *dst = str;
    while (*src != '\0') {
        if (isalpha (*src)) {
            *dst = *src;
            dst++;
        }
        src++;
    }
    *dst = '\0';
}
----------------------------------------

void stripPunctuators (char *str) {
    int i, j, len = strlen (str);
    for (i = 0; i < len; i++) {
        if (!isalpha (str[i])) {
            for (j = i; j < len; j++) {
                str[i] = str[j + 1];
            }
            len--;
        }
        str[i] = tolower (str[i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5136577_5136754_1_23
5136577_5161486_1_14
Title: Removing node from singly linked list 
----------------------------------------

void delete (struct bucket *thisBucket, unsigned char find [20]) {
    struct node *prev = null;
    struct node *curr = thisBucket->nodes;
    while (curr != null) {
        if (!strcmp (curr->id, find)) {
            if (prev == null) {
                thisBucket->nodes = curr->next;
            }
            else {
                prev->next = curr->next;
            }
            free (curr);
            curr = prev == null ? thisBucket->nodes : prev->next;
        }
        else {
            prev = curr;
            curr = curr->next;
        }
    }
}
----------------------------------------

int delete (struct _node *node) {
    struct _node *temp;
    memcpy (node -> id, node -> next -> id, 20);
    free_function (node -> data);
    node->data = node->next->data;
    temp = node->next;
    node -> next = node -> next -> next);
    free (temp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51393780_51394402_41_58
51393780_51394745_4_30
Title: How to deal with filling a structure in c language 
----------------------------------------

int main (void) {
    myPortfolio.balance = 12.34;
    myPortfolio.myStocks[3].shares = 111.222;
    printf ("My portfolio balance is %lf", myPortfolio.balance);
    for (int i = 0; i < (MAX_MY_STOCKS + 1); i++) {
        PrintPortfolio (i);
    }
    printf ("\n\n\n Lets use a pointer!");
    Portfolio *pmyPortfolio;
    pmyPortfolio = &myPortfolio;
    printf ("\n\nMy portfolio balance is %lf", pmyPortfolio -> balance);
    return 0;
}
----------------------------------------

int main (void) {
    Stock a = {
        .ticker = "Whatever",
        .shares = 0.0
    };
    printf ("Stock a has ticker %s and shares %f\n", a.ticker, a.shares);
    snprintf (a.ticker, sizeof a.ticker, "%s", "Meh");
    a.shares = 42.0;
    a = (Stock) {"under ten", -1.};
    a = (Stock) {
    .shares = 9001.,
    .ticker = "to the moon"};
    while (scanf ("%9[^ ] %lf", a.ticker, &a.shares) == 2) {
        printf ("You entered the ticker: { %9s, %lf }\n", a.ticker, a.shares);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51452473_51452851_1_43
51452473_51453282_10_26
Title: Linked list- getting segmentation fault 
----------------------------------------

void AlternatingSplit (struct Node *source, struct Node **aRef, struct Node **bRef) {
    struct Node *a, b;
    struct Node *current = source;
    if (current) {
        a = current;
        b = current->next;
        current = current->next;
        if (b)
            current = b->next;
        a->next = NULL;
        b->next = NULL;
        *aRef = a;
        *bRef = b;
    }
    else {
        *aRef = source;
        *bRef = source;
        return;
    }
    while (current) {
        a->next = current;
        a = a->next;
        b->next = current->next;
        b = b->next;
        current = current->next;
        if (b) {
            current = b->next;
        }
    }
    b->next = NULL;
    a->next = NULL;
}
----------------------------------------

void AlternatingSplit (struct Node *source, struct Node **a, struct Node **b) {
    while (source) {
        *a = source;
        a = &(*a)->next;
        if ((source = source->next)) {
            *b = source;
            b = &(*b)->next;
            source = source->next;
        }
    }
    *a = *b = NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51508362_51508625_6_34
51508362_51509180_18_84
Title: "Binary search implemention ( mostly code structure problems aka newbie problems)" 
----------------------------------------

int binary_search (int array [size], int givenNumber) {
    int middle;
    do {
        int start = 0;
        int end = size;
        int middle = start + end / 2;
        int left = size - 1;
        int right = size + 1;
        if (array[middle] == givenNumber) {
            printf ("location: %d, number: %i", middle, givenNumber);
            return middle;
        }
        else if (array[left] < givenNumber) {
            int start = 0;
            int end = array[left];
            int middle = start + end / 2;
            return middle;
        }
        else if (array[right] > middle) {
            int start = array[right];
            int end = size;
            int middle = start + end / 2;
            return middle;
        }
        else {
            return -1;
        }
    }
    while (middle != givenNumber);
}
----------------------------------------

int binary_search (int array [size], int givenValue) {
    middle = (start + end) / 2;
    printf ("\nstart: %d \nend: %d \nmiddle: %d \n\n", start, end, middle);
    do {
        if (start > end) {
            printf ("item isn't found");
            break;
            return -1;
        }
        middle = (start + end) / 2;
        left = middle - 1;
        right = middle + 1;
        if (array[middle] == givenValue) {
            printf ("Location: %d, Number: %d", middle, givenValue);
            return middle;
            break;
        }
        if (array[middle] > givenValue) {
            end = right;
            return binary_search (array, givenValue);
        }
        if (array[middle] < givenValue) {
            start = left;
            return binary_search (array, givenValue);
        }
    }
    while (start <= end);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51508362_51508625_6_34
51508362_51509184_5_20
Title: "Binary search implemention ( mostly code structure problems aka newbie problems)" 
----------------------------------------

int binary_search (int array [size], int givenNumber) {
    int middle;
    do {
        int start = 0;
        int end = size;
        int middle = start + end / 2;
        int left = size - 1;
        int right = size + 1;
        if (array[middle] == givenNumber) {
            printf ("location: %d, number: %i", middle, givenNumber);
            return middle;
        }
        else if (array[left] < givenNumber) {
            int start = 0;
            int end = array[left];
            int middle = start + end / 2;
            return middle;
        }
        else if (array[right] > middle) {
            int start = array[right];
            int end = size;
            int middle = start + end / 2;
            return middle;
        }
        else {
            return -1;
        }
    }
    while (middle != givenNumber);
}
----------------------------------------

int binary_search (int array [size], int givenNumber, int start, int end) {
    int middle;
    middle = (start + end) / 2;
    if (start > end)
        return -1;
    if (array[middle] == givenNumber) {
        printf ("location: %d, number: %i", middle, givenNumber);
        return middle;
    }
    else if (array[middle] < givenNumber) {
        return binary_search (array, givenNumber, middle +1, end);
    }
    else {
        return binary_search (array, givenNumber, start, middle -1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51508362_51509180_18_84
51508362_51509184_5_20
Title: "Binary search implemention ( mostly code structure problems aka newbie problems)" 
----------------------------------------

int binary_search (int array [size], int givenValue) {
    middle = (start + end) / 2;
    printf ("\nstart: %d \nend: %d \nmiddle: %d \n\n", start, end, middle);
    do {
        if (start > end) {
            printf ("item isn't found");
            break;
            return -1;
        }
        middle = (start + end) / 2;
        left = middle - 1;
        right = middle + 1;
        if (array[middle] == givenValue) {
            printf ("Location: %d, Number: %d", middle, givenValue);
            return middle;
            break;
        }
        if (array[middle] > givenValue) {
            end = right;
            return binary_search (array, givenValue);
        }
        if (array[middle] < givenValue) {
            start = left;
            return binary_search (array, givenValue);
        }
    }
    while (start <= end);
}
----------------------------------------

int binary_search (int array [size], int givenNumber, int start, int end) {
    int middle;
    middle = (start + end) / 2;
    if (start > end)
        return -1;
    if (array[middle] == givenNumber) {
        printf ("location: %d, number: %i", middle, givenNumber);
        return middle;
    }
    else if (array[middle] < givenNumber) {
        return binary_search (array, givenNumber, middle +1, end);
    }
    else {
        return binary_search (array, givenNumber, start, middle -1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51523276_51523867_2_24
51523276_51524548_1_28
Title: Seg fault due to strcpy and strcat 
----------------------------------------

int main () {
    char string [30], ops1 [30];
    char t [2];
    int op1, i, j;
    strcpy (string, "hey ssup");
    j = 0;
    i = 0;
    while (string[i] != '\0') {
        ops1[j++] = string[i];
        if (string[i] == ' ') {
            break;
        }
        i++;
    }
    ops1[j] = '\0';
    printf ("%s", ops1);
    return 0;
}
----------------------------------------

int main () {
    char string [30], ops1 [30], temp;
    char t [2];
    int i = 0;
    strcpy (string, "hey ssup");
    while (1) {
        if (string[i] != ' ') {
            temp = string[i];
            strcpy (& ops1 [i], & temp);
        }
        else {
            ops1[i] = '\0';
            break;
        }
        i++;
    }
    printf ("%s\n", ops1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51530524_51530624_5_17
51530524_51532842_4_16
Title: returning string of chars in C 
----------------------------------------

char *ft_strrev (char *str) {
    int len = strlen (str);
    char *reversed = malloc (sizeof (*reversed) * (len + 1));
    reversed[len] = '\0';
    while (*str != '\0') {
        reversed[--len] = *str++;
    }
    return reversed;
}
----------------------------------------

char *ft_strrev (char *str) {
    int len = strlen (str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51556986_51561460_1_31
51556986_51561651_3_14
Title: C - Ignore spaces in scanf() 
----------------------------------------

int main (void) {
    int field_count;
    do {
        char str [80];
        char tail;
        field_count = scanf ("%79[^ \n]%c", str, & tail)
        );
        if (field_count == 0) {
            field_count = scanf ("%c", &tail);
            if (field_count != 1 || tail == '\n') {
                break;
            }
        }
        else if (field_count > 0) {
            printf ("%s", str);
            if (field_count == 2) {
                if (tail == '\n') {
                    break;
                }
                else if (tail != ' ') {
                    putchar (tail);
                }
            }
        }
    }
    while (field_count != EOF);
}
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c != ' ') {
            putchar (c);
        }
        if (c == '\n') {
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51575157_51577365_1_11
51575157_51577478_3_18
Title: How to check if variable is NOT something 
----------------------------------------

void yesno () {
    char a;
    do {
        printf (":");
        scanf ("%c", a);
        if ((a != 'y') && (a != 'n')) {
            printf ("Incorrect awnser, try again\n");
        }
    }
    while ((a != 'y') && (a != 'n'));
}
----------------------------------------

int yesno (char a) {
    do {
        printf (":");
        scanf ("%s", & a);
        if ((a == 'y') || (a == 'n')) {
            break;
        }
        else {
            printf ("Incorrect answer, try again\n");
            continue;
        }
    }
    while ((a != 'y') || (a != 'n'));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51578127_51578248_1_19
51578127_51579125_1_12
Title: Need more information on this! aborted (core dumped) 
----------------------------------------

void sort_words (char **w, int n) {
    int i;
    int j;
    char key [STRING_LEN];
    for (i = 0; i < n; i++) {
        for (j = 0; j < n - 1 - i; j++) {
            if (strcmp (w[j], w[j + 1]) > 0) {
                strcpy (key, w [j + 1]);
                strcpy (w [j + 1], w [j]);
                strcpy (w [j], key);
            }
        }
    }
}
----------------------------------------

void sort_words (char **w, int n) {
    int i, j;
    char *key;
    for (i = 1; i < n; i++) {
        key = w[i];
        for (j = i - 1; j > 0 && strcmp (w[j], key) > 0; j--) {
            w[j + 1] = w[j];
            w[j] = key;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51579748_51579934_27_58
51579748_51584128_8_43
Title: Error check in y or no answer (C) 
----------------------------------------

int main () {
    char start;
    int load;
    printf ("************************************\n");
    printf ("*Welcome to 'noname' 0.01          *\n");
    printf ("*Do you want to start the game y/n?*\n");
    printf ("************************************\n");
    printf (":");
    scanf ("%s", & start);
    if ((start != 'y') && (start != 'n')) {
        start = check_anwser (start);
    }
    if (start == 'y') {
        for (load = 0; load < 100; load += 5) {
            printf ("Loading %d", load);
            delay (100);
            system ("cls");
        }
    }
    else {
        printf ("Shutting down");
        for (load = 0; load < 3; load++) {
            printf (".");
            delay (600);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char start;
    int load;
    printf ("************************************\n");
    printf ("*Welcome to 'noname' 0.01          *\n");
    printf ("*Do you want to start the game y/n?*\n");
    printf ("************************************\n");
    printf (":");
    if (fgetsanswer (&start, stdin)) {
        return 0;
    }
    if (start == 'y') {
        printf ("\rLoading  ");
        fflush (stdout);
        for (load = 0; load <= 100; load += 5) {
            delay (0, 600000000);
            printf ("\rLoading %d", load);
            fflush (stdout);
        }
    }
    else {
        printf ("Shutting down");
        fflush (stdout);
        for (load = 0; load < 3; load++) {
            printf (" .");
            fflush (stdout);
            delay (0, 700000000);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51581771_51582221_32_50
51581771_52993541_17_48
Title: C Program to decode Morse code to text using spaces to detect words or sentences 
----------------------------------------

int main (void) {
    char *morsestring = ".- -... -.-. -..     .- -... -.-. -.. ----------";
    int ch = 0;
    const char *nextpos = morsestring;
    while ((nextpos = getLetter (nextpos, &ch)) != NULL) {
        if (ch == -1) {
            printf (" *ERR* ");
        }
        else {
            printf ("%c%s", ch, IsSpace (nextpos) ? " " : "");
        }
    }
    printf ("\n");
}
----------------------------------------

int main () {
    clrscr ();
    char string [100];
    cout << "INSTRUCTIONS : \n\n";
    cout << "1. Enter leaving single SPACE     (like) : To enter MAN -> -- .- -. ";
    cout << endl << "2. To Give SPACE, Enter s (small s) with Space (like) : To Enter MR A -> -- .-. s .-";
    cout << endl << endl << "SIMPLE !";
    getch ();
    cout << endl;
    cout << "Enter the Code to Convert into STRING  : \n";
    gets (string);
    cout << endl << endl;
    cout << "Converting ....";
    getch ();
    clrscr ();
    convert (string);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51596516_51596685_3_20
51596516_51597735_3_23
Title: How can I find the first repeated character in a user-entered string? 
----------------------------------------

int main () {
    int i, j;
    char str [1000];
    scanf ("%s", str);
    for (i = 0; str[i] != '\0'; i++) {
        for (j = i + 1; str[j] != '\0'; j++) {
            if (str[i] == str[j]) {
                printf ("%c", str [i]);
                return 0;
            }
        }
    }
}
----------------------------------------

int main (void) {
    char all [256] = {0};
    char text [1000] = {0};
    int comp = 0;
    if (fgets (text, sizeof text, stdin)) {
        for (comp = 0; text[comp]; ++comp) {
            if (all[(unsigned char) text[comp]]) {
                printf ("matched \'%c\'\n", text [comp]);
                break;
            }
            all[(unsigned char) text[comp]]++;
        }
    }
    else {
        fprintf (stderr, "fgets EOF\n");
    }
    if (!text[comp]) {
        printf ("no matched characters\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51596516_51596685_3_20
51596516_51597853_4_22
Title: How can I find the first repeated character in a user-entered string? 
----------------------------------------

int main () {
    int i, j;
    char str [1000];
    scanf ("%s", str);
    for (i = 0; str[i] != '\0'; i++) {
        for (j = i + 1; str[j] != '\0'; j++) {
            if (str[i] == str[j]) {
                printf ("%c", str [i]);
                return 0;
            }
        }
    }
}
----------------------------------------

int main (void) {
    char str [1000];
    char map [UCHAR_MAX + 1] = {0};
    if (scanf ("%999s", str) == 1) {
        for (int i = 0; str[i] != '\0'; i++) {
            int n = (unsigned char) str[i];
            if (map[n]++ != 0) {
                printf ("first duplicate: %c\n", str [i]);
                break;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51596516_51597735_3_23
51596516_51597853_4_22
Title: How can I find the first repeated character in a user-entered string? 
----------------------------------------

int main (void) {
    char all [256] = {0};
    char text [1000] = {0};
    int comp = 0;
    if (fgets (text, sizeof text, stdin)) {
        for (comp = 0; text[comp]; ++comp) {
            if (all[(unsigned char) text[comp]]) {
                printf ("matched \'%c\'\n", text [comp]);
                break;
            }
            all[(unsigned char) text[comp]]++;
        }
    }
    else {
        fprintf (stderr, "fgets EOF\n");
    }
    if (!text[comp]) {
        printf ("no matched characters\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char str [1000];
    char map [UCHAR_MAX + 1] = {0};
    if (scanf ("%999s", str) == 1) {
        for (int i = 0; str[i] != '\0'; i++) {
            int n = (unsigned char) str[i];
            if (map[n]++ != 0) {
                printf ("first duplicate: %c\n", str [i]);
                break;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51600333_51600446_3_26
51600333_51600493_3_29
Title: Removing Punctuations in a string in C using Switch case 
----------------------------------------

int main () {
    char st [50];
    int i;
    printf ("ENter the string:\n");
    fgets (st, 50, stdin);
    for (i = 0; i < strlen (st); i++) {
        switch (st[i]) {
        case '!' :
        case '"' :
        case '#' :
        case '$' :
        case '%' :
        case '&' :
            st[i] = ' ';
            break;
        }
        printf ("String is:\n");
        puts (st);
    }
    return 0;
}
----------------------------------------

int main () {
    char sta [50];
    char stb [50];
    int i, j;
    printf ("ENter the string:\n");
    gets (sta);
    for (i = 0, j = 0; i < strlen (sta); i++) {
        switch (st[sta]) {
        case '!' :
        case '"' :
        case '#' :
        case '$' :
        case '%' :
        case '&' :
            break;
        default :
            stb[j++] = sta[i];
            break;
        }
        stb[j] = (char) 0;
        printf ("String is:\n");
        puts (stb);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51600333_51600446_3_26
51600333_51602595_6_33
Title: Removing Punctuations in a string in C using Switch case 
----------------------------------------

int main () {
    char st [50];
    int i;
    printf ("ENter the string:\n");
    fgets (st, 50, stdin);
    for (i = 0; i < strlen (st); i++) {
        switch (st[i]) {
        case '!' :
        case '"' :
        case '#' :
        case '$' :
        case '%' :
        case '&' :
            st[i] = ' ';
            break;
        }
        printf ("String is:\n");
        puts (st);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char st [MAX_STR_LEN + 1];
    printf ("ENter the string, max 50 characters\n");
    fgets (st, sizeof (st), stdin);
    for (size_t i = 0; i < strlen (st); i++) {
        switch (st[i]) {
        case '!' :
        case '"' :
        case '#' :
        case '$' :
        case '%' :
        case '&' :
            st[i] = ' ';
            break;
        default :
            break;
        }
    }
    printf ("Modified String is:\n %s\n", st);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51600333_51600493_3_29
51600333_51602595_6_33
Title: Removing Punctuations in a string in C using Switch case 
----------------------------------------

int main () {
    char sta [50];
    char stb [50];
    int i, j;
    printf ("ENter the string:\n");
    gets (sta);
    for (i = 0, j = 0; i < strlen (sta); i++) {
        switch (st[sta]) {
        case '!' :
        case '"' :
        case '#' :
        case '$' :
        case '%' :
        case '&' :
            break;
        default :
            stb[j++] = sta[i];
            break;
        }
        stb[j] = (char) 0;
        printf ("String is:\n");
        puts (stb);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char st [MAX_STR_LEN + 1];
    printf ("ENter the string, max 50 characters\n");
    fgets (st, sizeof (st), stdin);
    for (size_t i = 0; i < strlen (st); i++) {
        switch (st[i]) {
        case '!' :
        case '"' :
        case '#' :
        case '$' :
        case '%' :
        case '&' :
            st[i] = ' ';
            break;
        default :
            break;
        }
    }
    printf ("Modified String is:\n %s\n", st);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51612394_51613774_6_19
51612394_51614706_4_16
Title: How to convert IPv4 address to decimal 
----------------------------------------

int main (void) {
    struct in_addr result;
    if (inet_pton (AF_INET, "127.0.0.1", &result)) {
        printf ("%08x\n", result.s_addr);
    }
    else {
        printf ("Failed\n");
    }
    return (0);
}
----------------------------------------

int main (void) {
    char *pAddr = "192.168.0.1";
    unsigned long value = inet_addr (pAddr);
    if (value == INADDR_NONE)
        printf ("Invalid format of IP address");
    else
        printf ("Decimal representation of %s is: %lu", pAddr, value);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5162210_5162360_1_13
5162210_5162363_1_12
Title: Compare strings 
----------------------------------------

char *EnglishToMorse (char english) {
    int i;
    english = toupper (english);
    for (i = 0; i < LOOKUP_SIZE; i++) {
        if (lookup[i].character == english)
            return lookup[i].morse;
    }
    return NULL;
}
----------------------------------------

char *EnglishToMorse (char english) {
    static char save_english [2];
    int i;
    for (i = 0; i < LOOKUP_SIZE; i++)
        if (lookup[i].character == english)
            return lookup[i].morse;
    save_english[0] = english;
    return save_english;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51635323_51635685_10_18
51635323_51635856_6_39
Title: Program for Sum of Factors 
----------------------------------------

int main () {
    int nF = 0;
    for (int n = 1; n <= 360; ++n) {
        if (getSumFactors (n) == 360)
            printf ("%d.: %d\n", ++nF, n);
    }
    printf ("%d numbers with factors which sum up to 360.\n", nF);
    return 0;
}
----------------------------------------

int main () {
    int number_to_consider;
    int potential_factor;
    int factor_total = 0;
    int num_suitable_numbers_found = 0;
    int desired_factor_total = 360;
    int number_of_numbers_to_Find = 5;
    for (number_to_consider = 1; number_to_consider < 10 * desired_factor_total; number_to_consider++) {
        factor_total = 0;
        for (potential_factor = 1; potential_factor <= number_to_consider; potential_factor++) {
            if ((number_to_consider % potential_factor) == 0) {
                factor_total += potential_factor;
            }
        }
        if (factor_total == desired_factor_total) {
            num_suitable_numbers_found++;
            printf ("Found candidate %i : %i\n", num_suitable_numbers_found, number_to_consider);
        }
        if (num_suitable_numbers_found >= number_of_numbers_to_Find) {
            break;
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5165926_5166271_1_25
5165926_5166387_11_31
Title: Help with scanf and memory allocation 
----------------------------------------

int main (void) {
    int inputnum, innum;
    double *fPtr;
    printf ("How many values do you want to input into the array?");
    fflush (stdout);
    if (scanf ("%d", &inputnum) != 1) {
        fprintf (stderr, "Error in input. Program aborted.\n");
        exit (EXIT_FAILURE);
    }
    if (inputnum > MAX) {
    }
    fPtr = calloc (inputnum, sizeof *fPtr);
    if (fPtr == NULL) {
        fprintf (stderr, "Not enough memory. Program aborted.\n");
        exit (EXIT_FAILURE);
    }
    innum = data_get (fPtr, inputnum);
    data_print (fPtr, innum);
    free (fPtr);
    return 0;
}
----------------------------------------

int main (void) {
    float *array;
    int size;
    size = get_data (&array);
    printf ("Before weird things:\n");
    print_data (array, size);
    do_weird_things (array, size);
    printf ("After weird things:\n");
    print_data (array, size);
    clear_data (array);
    system ("PAUSE");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51692579_51694798_19_48
51692579_51698694_1_20
Title: How to improve my code (C/ Objective C) Ping Pong game 
----------------------------------------

int main (int argc, const char *argv []) {
    int player1 = 0;
    int player2 = 0;
    while (1) {
        if (player_won (player1, player2) || player_won (player2, player1))
            break;
        int pick = arc4random () % 2;
        switch (pick) {
        case 0 :
            player1++;
            break;
        case 1 :
            player2++;
            break;
        }
    }
    if (player1 > player2) {
        NSLog (@ "Player 1 has %i points and Player 2 %i", player1, player2);
    }
    else if (player2 > player1) {
        NSLog (@ "Player 2 has %i points and Player1 %i", player2, player1);
    }
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    int player1 = 0;
    int player2 = 0;
    while ((player1 < 21 && player2 < 21) || abs (player1 -player2) < 2) {
        int pick = arc4random () % 2;
        if (pick == 0) {
            player1 = player1 + 1;
        }
        else if (pick == 1) {
            player2 = player2 + 1;
        }
    }
    if (player1 > player2) {
        NSLog (@ "Player 1 has %i points and Player 2 %i", player1, player2);
    }
    else if (player2 > player1) {
        NSLog (@ "Player 2 has %i points and Player 1 %i", player2, player1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51699016_51699717_11_27
51699016_51720324_11_24
Title: "CGI program timeout when reading/writing respectively from/to stdin/stdout" 
----------------------------------------

int main (void) {
    int l;
    int i;
    if (setvbuf (stdin, NULL, _IOFBF, BUFSIZ) != 0)
        error (EXIT_FAILURE, errno, "sevbuf(), stdin");
    if (setvbuf (stdout, NULL, _IOFBF, BUFSIZ) != 0)
        error (EXIT_FAILURE, errno, "sevbuf(), stdout");
    printf ("Content-Type: text/plain\n\n");
    l = atoi (getenv ("CONTENT_LENGTH"));
    for (i = 0; i < l; ++i)
        putchar (getchar ());
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    int l;
    int i;
    printf ("Content-Type: text/plain\n\n");
    l = atoi (getenv ("CONTENT_LENGTH"));
    for (i = 0; i < l; ++i)
        putchar (getchar ());
    fflush (stdout);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51702107_51702157_3_13
51702107_51702214_3_13
Title: Missing First Character In Printing Array (While Loop) 
----------------------------------------

int main () {
    int x = 0;
    char iArray [7] = 'Charles';
    while (x < 7) {
        printf ("%c\n", iArray [x]);
        x++;
    }
    return 0;
}
----------------------------------------

int main () {
    int x = 0;
    char iArray [7] = "Charles";
    while (x < 7) {
        printf ("%c\n", iArray [x]);
        x++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51708327_51708676_1_18
51708327_51709354_3_20
Title: loops and switches in c my code 
----------------------------------------

int main () {
    int i;
    for (i = 1; i < 10; i++) {
        switch (i) {
        case 1 :
            i = i + 2;
        default :
            i = i + 3;
        }
    }
    printf ("%d", i);
    return 0;
}
----------------------------------------

int main () {
    int i = 1;
    while (i < 10) {
        switch (i) {
        case 1 :
            i = i + 2;
            printf ("case 1: %d\n", i);
            i++;
        default :
            i = i + 3;
            printf ("default: %d\n", i);
        }
    }
    printf ("finished: %d\n", i);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51715661_51716144_12_24
51715661_51716399_3_33
Title: C program printing newlines 
----------------------------------------

int reverse (void) {
    int i, j, c;
    char s [MAXLINE] = {0};
    for (i = 0; ((c = getchar ()) != '\n') && (i <= MAXLINE); ++i) {
        s[i] = c;
    }
    for (j = i; (s[j] != '0') && j >= 0; --j) {
        printf ("%c", s [j]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

void reverse (void) {
    char buf [BUFSIZ];
    size_t buf_idx;
    int c;
    for (buf_idx = 0; ((c = getchar ()) && (c != EOF) && (c != '\n')); buf_idx++) {
        buf[buf_idx] = (char) c;
    }
    buf[buf_idx--] = '\0';
    for (int i = (int) buf_idx; i >= 0; i--) {
        printf ("%c", buf [i]);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51737998_51738549_125_146
51737998_51738706_68_91
Title: C programming error in code 
----------------------------------------

int main () {
    struct list list;
    int i;
    list.size = 0;
    list.head = NULL;
    for (i = 0; i < 10; i++) {
        addLastElement (& list, i, (i + 1) * 10);
    }
    deleteElement (& list, 5);
    addFirstElement (& list, 100, 50);
    readList (& list);
    deleteList (& list);
    return 1;
}
----------------------------------------

int main (void) {
    create_list (10102, 19);
    print_list ();
    create_list (23147, 20);
    print_list ();
    create_list (30001, 21);
    print_list ();
    create_list (47721, 18);
    print_list ();
    create_list (59286, 20);
    print_list ();
    delete_list (2);
    print_list ();
    delete_list (3);
    print_list ();
    delete_list (2);
    print_list ();
    delete_list (1);
    print_list ();
    delete_list (1);
    print_list ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51769061_51769229_8_24
51769061_51770233_5_39
Title: Parse a text file into multiple variables with fgets in C 
----------------------------------------

int main () {
    FILE *file;
    char line1 [250], line2 [250];
    file = fopen ("ANTdata.txt", "r");
    if (!file) {
        return 1;
    }
    while (fgets (line1, sizeof line1, file) && fgets (line2, sizeof line2, file)) {
        line1[strcspn (line1, "\n")] = '\0';
        line2[strcspn (line2, "\n")] = '\0';
        my_function (line1, line2);
    }
    fclose (file);
    return 0;
}
----------------------------------------

int main (int argc, char const *argv []) {
    FILE *fp;
    fp = fopen ("ANTdata.txt", "r");
    char *line;
    char oddLine [100];
    char evenLine [100];
    if (fp == NULL)
        exit (EXIT_FAILURE);
    int i = 0;
    int endOfFile = 1;
    int res = 0;
    size_t len = 0;
    while (endOfFile) {
        if (i % 2 == 0) {
            res = getline (&line, &len, fp);
            strcpy (evenLine, line);
            printf ("even : %s", evenLine);
        }
        else {
            res = getline (&line, &len, fp);
            strcpy (oddLine, line);
            printf ("odd : %s", oddLine);
        }
        if (res == -1)
            endOfFile = 0;
        i++;
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51775056_51775146_3_18
51775056_51775473_3_29
Title: To find and assign primes to an array 
----------------------------------------

int main () {
    int primes [25];
    primes[0] = 2;
    int count = 1;
    for (int i = 3; i < 100; i += 2) {
        int k;
        for (k = 2; k < i; k++) {
            if (i % k == 0)
                break;
        }
        if (i == k) {
            primes[count] = i;
            count++;
        }
    }
}
----------------------------------------

int main () {
    int primes [25];
    int i, k;
    int j = 0;
    for (i = 2; i < 100; i++) {
        for (k = 2; k < i; k++) {
            if (i % k == 0) {
                break;
            }
        }
        if (i == k) {
            primes[j] = i;
            j++;
        }
    }
    for (j = 0; j < 25; j++) {
        printf ("%d\n", primes [j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51785085_51785428_7_33
51785085_51785553_5_35
Title: Concatenate double pointer char array in C 
----------------------------------------

int main () {
    const char * const array1 [] = {"aa", "bb"};
    const size_t array1_size = ARRAY_SIZE (array1);
    const char * const array2 [] = {"cc", "dd", "ee"};
    const size_t array2_size = ARRAY_SIZE (array2);
    const size_t concat_len = array1_size + array2_size;
    const char ** const concat = malloc (concat_len * sizeof (*concat));
    assert (concat != NULL);
    for (size_t i = 0; i < concat_len; ++i) {
        concat[i] = strdup (i < array1_size ? array1[i] : array2[i - array1_size]);
        assert (concat [i] != NULL);
    }
    for (size_t i = 0; i < concat_len; ++i) {
        printf ("concat[%zu] = (%zu) '%s'\n", i, strlen (concat [i]), concat [i]);
    }
    for (size_t i = 0; i < concat_len; ++i) {
        free (concat [i]);
    }
    free (concat);
    return 0;
}
----------------------------------------

void main () {
    const char *array1 [] = {"aa", "bb"};
    const char *array2 [] = {"cc", "dd", "ee"};
    int arraySize1 = (sizeof (array1) / sizeof (char *));
    int arraySize2 = (sizeof (array2) / sizeof (char *));
    char **resultArr = (char **) malloc (sizeof (char *) * (arraySize1 + arraySize2));
    int i = 0;
    for (i = 0; i < arraySize1; i++) {
        resultArr[i] = malloc (strlen (array1[i]) + 1);
        strcpy (resultArr [i], array1 [i]);
    }
    for (i = 0; i < arraySize2; i++) {
        resultArr[arraySize1 + i] = malloc (strlen (array2[i]) + 1);
        strcpy (resultArr [arraySize1 + i], array2 [i]);
    }
    for (i = 0; i < arraySize1 + arraySize2; i++) {
        printf ("%s ", * (resultArr + i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51790202_51790475_1_13
51790202_51790535_1_10
Title: free() to global linked list C 
----------------------------------------

void freelist (list **head) {
    list *tmp;
    if (head == NULL)
        return;
    while (*head != NULL) {
        tmp = *head;
        *head = (*head)->next;
        free (tmp);
    }
}
----------------------------------------

void freelist (list **head) {
    list *tmp, *p = *head;
    while (p != NULL) {
        tmp = head;
        p = p->next;
        free (tmp);
    }
    *head = NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51796695_51796720_1_18
51796695_51796803_1_17
Title: unused variable with if condition 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc != 2)
        return 1;
    float ratio = atof (argv[1]);
    float b, c;
    if (ratio > 0.0 && ratio <= 1.0) {
        b = 3.0 / 4;
        c = 4.0 / 5;
    }
    else if (ratio > 1.0) {
        b = 1;
        c = 2;
    }
    printf ("b and c are %f, %f", b, c);
}
----------------------------------------

int main (int argc, char *argv []) {
    float ratio = atof (argv[1]);
    if (argc != 2) {
        return 1;
    }
    float b = 0, c = 0;
    if (ratio > 0.0 && ratio <= 1.0) {
        b = 3./ 4;
        c = 4./ 5;
    }
    else if (ratio > 1.0) {
        b = 1;
        c = 2;
    }
    printf ("b and c are %f, %f", b, c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51803572_51803748_1_10
51803572_51803774_5_26
Title: How to get summation in C? 
----------------------------------------

int main () {
    int sum = 0;
    int num = 0;
    printf ("type in numbers to be summed up (type a non-number to exit):\n");
    while (scanf ("%d", &num) == 1) {
        sum += num;
    }
    printf ("sum: %d\n", sum);
}
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    int sum;
    if (argc > 1) {
        for (i = 1; i < argc; i++) {
            sum += (int) strtol (argv[i], NULL, 10);
        }
        printf ("%d\n", sum);
    }
    else {
        fprintf (stderr, "Invalid number of arguments\n");
        return (EXIT_FAILURE);
    }
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51803572_51803748_1_10
51803572_51808137_3_19
Title: How to get summation in C? 
----------------------------------------

int main () {
    int sum = 0;
    int num = 0;
    printf ("type in numbers to be summed up (type a non-number to exit):\n");
    while (scanf ("%d", &num) == 1) {
        sum += num;
    }
    printf ("sum: %d\n", sum);
}
----------------------------------------

void main () {
    int sum = 0, allocation [5], i, num;
    printf ("enter the number of elements");
    scanf ("%d", & num);
    printf ("Enter the elements");
    for (i = 0; i < num; i++) {
        scanf ("%d", & allocation [i]);
        sum = sum + allocation[i];
    }
    printf ("Sum= %d", sum);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51803572_51803774_5_26
51803572_51808137_3_19
Title: How to get summation in C? 
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    int sum;
    if (argc > 1) {
        for (i = 1; i < argc; i++) {
            sum += (int) strtol (argv[i], NULL, 10);
        }
        printf ("%d\n", sum);
    }
    else {
        fprintf (stderr, "Invalid number of arguments\n");
        return (EXIT_FAILURE);
    }
    return (EXIT_SUCCESS);
}
----------------------------------------

void main () {
    int sum = 0, allocation [5], i, num;
    printf ("enter the number of elements");
    scanf ("%d", & num);
    printf ("Enter the elements");
    for (i = 0; i < num; i++) {
        scanf ("%d", & allocation [i]);
        sum = sum + allocation[i];
    }
    printf ("Sum= %d", sum);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51811017_51811080_1_10
51811017_51811081_1_10
Title: C code only prints after ^Z 
----------------------------------------

int main () {
    int c, nl = 0;
    while ((c = getchar ()) != EOF) {
        if (c == '\n') {
            ++nl;
            printf ("%d\n", nl);
        }
    }
}
----------------------------------------

int main () {
    int c, nl = 0;
    while ((c = getchar ()) != EOF) {
        if (c == '\n') {
            ++nl;
            printf ("%d\n", nl);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51813509_51814174_3_44
51813509_51815034_3_42
Title: Finding the second largest element in array without sorting 
----------------------------------------

int main (void) {
    int i, n;
    printf ("Input the size of array :");
    scanf ("%d", & n);
    int x [n];
    printf ("Input %d elements in the array :\n", n);
    for (i = 0; i < n; i++) {
        printf ("x[%d]: ", i);
        scanf ("%d", & x [i]);
    }
    int first = x[0];
    int second = x[0];
    for (i = 0; i < n; ++i) {
        if (first < x[i]) {
            second = first;
            first = x[i];
        }
        else if (x[i] > second && x[i] != first) {
            second = x[i];
        }
    }
    if (second == first)
        printf ("There is no second largest element\n");
    else
        printf ("\nThe Second largest element in the array is: %d", second);
    return 0;
}
----------------------------------------

int main (void) {
    int x [10];
    int i, n, first, second;
    printf ("Input the size of array :");
    if (scanf ("%d", &n) != 1 || n < 0 || n > 10) {
        printf ("invalid input\n");
        return 1;
    }
    if (n <= 0) {
        first = second = 0;
    }
    else {
        printf ("Input %d elements in the array:\n", n);
        for (i = 0; i < n; i++) {
            printf ("x[%d]: ", i);
            if (scanf ("%d", &x[i]) != 1) {
                printf ("invalid input\n");
                return 1;
            }
        }
        first = second = x[0];
        for (i = 1; i < n; ++i) {
            if (first < x[i]) {
                second = first;
                first = x[i];
            }
            else if (x[i] > second && x[i] != first) {
                second = x[i];
            }
        }
    }
    if (second == first)
        printf ("There is no second largest element\n");
    else
        printf ("\nThe Second largest element in the array is: %d\n", second);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51848820_51866821_99_157
51848820_51867436_23_51
Title: Algorithms: To determine whether a given set has two subsets which are disjoint such that sum of elements in both subsets is same? 
----------------------------------------

static void partition (int arr [], int n) {
    int i;
    int iPow2n = pow (2, n);
    int *sum = calloc (iPow2n, sizeof (int));
    printf ("Generate and list sums\n");
    for (i = 0; i < iPow2n; i++) {
        int j;
        printf ("  {");
        for (j = 0; j < n; j++) {
            if (i & (1 << j)) {
                printf ("%2d ", arr [j]);
                sum[i] = sum[i] + arr[j];
            }
        }
        printf ("} = %3d\n", sum [i]);
    }
    printf ("\n\nGenerate list of disjoint sets for each sum.\n");
    for (i = 0; i < iPow2n - 1; i++) {
        int r;
        SetType tempI = {calloc (iPow2n, sizeof (SetType)), iPow2n, 0};
        SetType tempR = {calloc (iPow2n, sizeof (SetType)), iPow2n, 0};
        for (r = i + 1; r < iPow2n; r++) {
            if (sum[i] == sum[r]) {
                generateSet (i, arr, n, & tempI);
                generateSet (r, arr, n, & tempR);
                if (checkSetsByIndex (tempI, tempR)) {
                    if (checkSetsByValue (arr, tempI, tempR)) {
                        printf ("\n Printing solution for sum %d\n", sum [i]);
                        printItems (arr, tempI);
                        printItems (arr, tempR);
                        break;
                    }
                }
            }
        }
        free (tempI.pSet);
        free (tempR.pSet);
    }
}
----------------------------------------

void partition (int arr [], int n) {
    size_t i, j, count = 1ULL << n;
    struct s *array = calloc (sizeof (*array), count);
    int b, sum;
    if (array != NULL) {
        for (i = 1; i < count; i++) {
            sum = 0;
            for (b = 0; b < n; b++) {
                if (i & (1ULL << b))
                    sum += arr[b];
            }
            array[i].sig = i;
            array[i].sum = sum;
        }
        qsort (array, count, sizeof (* array), compare);
        for (i = 0; i < count; i++) {
            for (j = i + 1; j < count && array[i].sum == array[j].sum; j++) {
                if ((array[i].sig & array[j].sig) == 0) {
                    printf ("solution with sum=%d: ", array [i].sum);
                    print_set (arr, array [i].sig);
                    print_set (arr, array [j].sig);
                    printf ("\n");
                }
            }
        }
        free (array);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51850297_51850333_3_19
51850297_51850543_33_67
Title: How to initialise an variable sized int array to 0 in C? 
----------------------------------------

int main () {
    int *arr;
    int n;
    arr = malloc (sizeof (*arr) * n);
    if (arr == NULL) {
    }
    memset (arr, 0x00, sizeof (* arr) * n);
    free (arr);
}
----------------------------------------

int main () {
    int n, pos, i = 0, k;
    char c = 'y';
    printf ("\n Enter the no. of elements: ");
    scanf ("%d", & n);
    int arr [n];
    memset (arr, 0x00, sizeof (arr [0]) * n);
    printf ("\n Enter the array elements: ");
    while (c == 'y' || c == 'Y') {
        scanf ("%d", & arr [i]);
        i++;
        printf ("\n Continue (y/n): ");
        scanf (" %c", & c);
    }
    c = 'y';
    while (c == 'y' || c == 'Y') {
        printf ("\n Enter the element to be inserted: ");
        scanf ("%d", & k);
        printf ("\n Enter the position: ");
        scanf ("%d", & pos);
        pos--;
        insert (arr, k, pos, n);
        printf ("\n Continue (y/n): ");
        scanf (" %c", & c);
        if (c == 'n' || c == 'N')
            printf ("\n !!Thank You!!");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51860520_51860857_4_33
51860520_51861281_4_30
Title: Find longest substring that matches the end of one string and the start of the next 
----------------------------------------

void main () {
    char a [80], b [80];
    int i, j, t;
    scanf ("%s", a);
    scanf ("%s", b);
    int k = 0;
    int memo = 0;
    for (int i = 0; i < strlen (a); i++) {
        if (a[i] == b[k]) {
            k++;
            if (memo == 0) {
                memo = i;
            }
        }
        else {
            k = 0;
            i = memo + 1;
            memo = 0;
        }
    }
    if (memo != 0) {
        for (int i = memo; i < strlen (a); i++) {
            printf ("%c", a [i]);
        }
    }
}
----------------------------------------

void main () {
    char a [80], b [80];
    char *pa;
    scanf ("%s", a);
    scanf ("%s", b);
    for (pa = a; *pa != '\0'; pa++) {
        if (strncmp (pa, b, strlen (pa)) == 0)
            break;
    }
    if (strlen (pa) == 0) {
        printf ("Nothing found\n");
    }
    else {
        printf ("Found: %s\n", pa);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51862147_51862599_2_26
51862147_51862619_1_23
Title: Calculating Arithmetic and Geometric mean by introducing numbers until 0 is pressed 
----------------------------------------

int main () {
    int n, i, m, j, arr [50], sum = 0, prod = 1;
    printf ("Enter numbers until you press number 0:");
    for (i = 0; i < 50; i++) {
        scanf ("%d", & arr [i]);
        if (arr[i] == 0) {
            break;
        }
        sum = sum + arr[i];
        prod = prod * arr[i];
    }
    printf ("%d %d\n", sum, prod);
    n = i + 1;
    int armean = sum / n;
    float geomean = pow (prod, (float) 1 / n);
    printf ("Arithmetic Mean = %d\n", armean);
    printf ("Geometric Mean = %f\n", geomean);
    getch ();
    return 0;
}
----------------------------------------

int main () {
    int n, sum = 0, prod = 1, num;
    printf ("Enter numbers until you press number 0:\n");
    for (n = 0;; n++) {
        scanf ("%d", & num);
        if (num == 0)
            break;
        sum = sum + num;
        prod = prod * num;
    }
    printf ("sum is %d \n", sum);
    printf ("prod is %d \n", prod);
    printf ("n is %d \n", n);
    float armean = sum / n;
    float geomean = pow (prod, (float) 1 / n);
    printf ("Arithmetic Mean = %d\n", armean);
    printf ("Geometric Mean = %f\n", geomean);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51862147_51862599_2_26
51862147_51867238_4_19
Title: Calculating Arithmetic and Geometric mean by introducing numbers until 0 is pressed 
----------------------------------------

int main () {
    int n, i, m, j, arr [50], sum = 0, prod = 1;
    printf ("Enter numbers until you press number 0:");
    for (i = 0; i < 50; i++) {
        scanf ("%d", & arr [i]);
        if (arr[i] == 0) {
            break;
        }
        sum = sum + arr[i];
        prod = prod * arr[i];
    }
    printf ("%d %d\n", sum, prod);
    n = i + 1;
    int armean = sum / n;
    float geomean = pow (prod, (float) 1 / n);
    printf ("Arithmetic Mean = %d\n", armean);
    printf ("Geometric Mean = %f\n", geomean);
    getch ();
    return 0;
}
----------------------------------------

int main () {
    int n = 0;
    double value, sum = 0, product = 1;
    printf ("Enter numbers, end with 0: ");
    while (scanf ("%lf", &value) == 1 && value != 0) {
        sum += value;
        product *= value;
        n++;
    }
    if (n > 0) {
        printf ("Arithmetic mean = %g\n", sum / n);
        printf ("Geometric mean = %g\n", pow (product, 1.0 / n));
        getch ();
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51862147_51862619_1_23
51862147_51867238_4_19
Title: Calculating Arithmetic and Geometric mean by introducing numbers until 0 is pressed 
----------------------------------------

int main () {
    int n, sum = 0, prod = 1, num;
    printf ("Enter numbers until you press number 0:\n");
    for (n = 0;; n++) {
        scanf ("%d", & num);
        if (num == 0)
            break;
        sum = sum + num;
        prod = prod * num;
    }
    printf ("sum is %d \n", sum);
    printf ("prod is %d \n", prod);
    printf ("n is %d \n", n);
    float armean = sum / n;
    float geomean = pow (prod, (float) 1 / n);
    printf ("Arithmetic Mean = %d\n", armean);
    printf ("Geometric Mean = %f\n", geomean);
}
----------------------------------------

int main () {
    int n = 0;
    double value, sum = 0, product = 1;
    printf ("Enter numbers, end with 0: ");
    while (scanf ("%lf", &value) == 1 && value != 0) {
        sum += value;
        product *= value;
        n++;
    }
    if (n > 0) {
        printf ("Arithmetic mean = %g\n", sum / n);
        printf ("Geometric mean = %g\n", pow (product, 1.0 / n));
        getch ();
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51872086_51872369_23_40
51872086_51872924_1_20
Title: How to handle negative integer when converting them to strings? 
----------------------------------------

void tostring (char str [], int num) {
    int i, rem, len = 0, n;
    n = num;
    while (n != 0) {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++) {
        rem = num % 10;
        num = num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
}
----------------------------------------

void tostring (char *str, int number) {
    char *digit = "9876543210123456789" + 9;
    size_t len = 1;
    if (number < 0) {
    }
    for (int n = number; n <= -10 || 10 <= n; n /= 10) {
        ++len;
    }
    for (size_t i = 0; i < len; ++i) {
        str[len - i - 1] = digit[number % 10];
        number /= 10;
    }
    str[len] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51872086_51872369_23_40
51872086_51874992_25_83
Title: How to handle negative integer when converting them to strings? 
----------------------------------------

void tostring (char str [], int num) {
    int i, rem, len = 0, n;
    n = num;
    while (n != 0) {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++) {
        rem = num % 10;
        num = num / 10;
        str[len - (i + 1)] = rem + '0';
    }
    str[len] = '\0';
}
----------------------------------------

void tostring (char str [], int num) {
    int i, rem, len = 0, n;
    bool flag = 0;
    if (num < 0) {
        n = -num;
        flag = 1;
    }
    else {
        n = num;
        flag = 0;
    }
    while (n != 0) {
        len++;
        n /= 10;
    }
    if (flag == 1) {
        num = -1 * num;
        str[0] = '-';
    }
    for (i = 0; i < len; i++) {
        rem = num % 10;
        num = num / 10;
        if (flag == 1) {
            str[len - (i)] = rem + '0';
        }
        else {
            str[len - (i + 1)] = rem + '0';
        }
    }
    if (flag == 1) {
        str[len + 1] = '\0';
    }
    else {
        str[len] = '\0';
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51872086_51872369_8_21
51872086_51874992_11_23
Title: How to handle negative integer when converting them to strings? 
----------------------------------------

int main () {
    char str [10];
    int num, result;
    printf ("Enter a number: ");
    scanf ("%d", & num);
    sprintf (str, "%i", num);
    printf ("Number converted to string: %s\n", str);
    return 0;
}
----------------------------------------

int main () {
    char str [10];
    int num, result;
    printf ("Enter a number: ");
    scanf ("%d", & num);
    tostring (str, num);
    printf ("Number converted to string: %s\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51872086_51872924_1_20
51872086_51874992_25_83
Title: How to handle negative integer when converting them to strings? 
----------------------------------------

void tostring (char *str, int number) {
    char *digit = "9876543210123456789" + 9;
    size_t len = 1;
    if (number < 0) {
    }
    for (int n = number; n <= -10 || 10 <= n; n /= 10) {
        ++len;
    }
    for (size_t i = 0; i < len; ++i) {
        str[len - i - 1] = digit[number % 10];
        number /= 10;
    }
    str[len] = '\0';
}
----------------------------------------

void tostring (char str [], int num) {
    int i, rem, len = 0, n;
    bool flag = 0;
    if (num < 0) {
        n = -num;
        flag = 1;
    }
    else {
        n = num;
        flag = 0;
    }
    while (n != 0) {
        len++;
        n /= 10;
    }
    if (flag == 1) {
        num = -1 * num;
        str[0] = '-';
    }
    for (i = 0; i < len; i++) {
        rem = num % 10;
        num = num / 10;
        if (flag == 1) {
            str[len - (i)] = rem + '0';
        }
        else {
            str[len - (i + 1)] = rem + '0';
        }
    }
    if (flag == 1) {
        str[len + 1] = '\0';
    }
    else {
        str[len] = '\0';
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51881627_51881792_3_25
51881627_51883680_2_23
Title: Getting undesired result by using while loop to find the sum of n natural numbers 
----------------------------------------

int main () {
    char ch;
    do {
        int n;
        printf ("Enter the number upto which you want the sum of \n \n");
        if (scanf ("%d", &n) != 1)
            break;
        int j = 0;
        for (int i = 1; i <= n; ++i)
            j += i;
        printf ("%d \n", j);
        printf ("Do it with another number? Y/N \n \n");
        if (scanf (" %c", &ch) != 1)
            break;
    }
    while (ch != 'n' && ch != 'N');
    return 0;
}
----------------------------------------

int main () {
    int n;
    char ch;
    while (ch != 'n') {
        printf ("Enter the number upto which you want the sum of \n \n");
        scanf ("%d", & n);
        int i = 1;
        int j = 0;
        while (i <= n) {
            j = j + i;
            i++;
        }
        printf ("%d \n", j);
        printf ("Do it with another number? Y/N \n \n");
        scanf ("%c", & ch);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51887973_51888039_12_29
51887973_51888374_11_25
Title: how to use double pointer in this situation 
----------------------------------------

int main () {
    Heap *H;
    void *temp;
    H = malloc (sizeof (Heap));
    H->tree = NULL;
    if ((temp = malloc (5 * sizeof (void *))) == NULL)
        return -1;
    H->tree = temp;
    int a;
    a = 1;
    int b;
    b = 4;
    H->tree[0] = &a;
    H->tree[1] = &b;
    printf (" %d\n ", * (int *) H -> tree [0]);
    printf (" %d\n ", * (int *) H -> tree [1]);
    return 0;
}
----------------------------------------

int main () {
    Heap *H;
    H = (Heap *) malloc (sizeof (Heap));
    H->tree = malloc (sizeof (int **) * 2);
    H->tree[0] = (int *) malloc (sizeof (int));
    H->tree[1] = (int *) malloc (sizeof (int));
    *((int *) H->tree[0]) = 25;
    printf ("%d", * ((int *) H -> tree [0]));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51909520_51910113_8_59
51909520_51913377_17_45
Title: "Dynamic array passing adresses" 
----------------------------------------

int main (void) {
    int **Bord = NULL;
    Bord = malloc (N_MAX * sizeof (*Bord));
    if (Bord == NULL) {
        perror ("malloc failed");
        return -1;
    }
    for (int i = 0; i < N_MAX; i++) {
        printf ("%d\n", i);
        Bord
        [i] = malloc (N_MAX * sizeof (* (Bord [i]));
        if (Bord[i] == NULL) {
            perror ("malloc failed");
            i--;
            while (i >= 0) {
                free (Bord [i]);
                i--;
            }
            free (Bord);
            return -1;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    int **Bord = NULL;
    srand (time (0));
    Bord = malloc (N_MAX * sizeof (*Bord));
    if (Bord == NULL) {
        fprintf (stderr, "Error while allocating %zu bytes of memory\n", N_MAX * sizeof (* Bord));
        return -1;
    }
    for (i = 0; i < N_MAX; i++) {
        Bord[i] = malloc (N_MAX * sizeof (*(Bord[i])));
        if (Bord[i] == NULL) {
            fprintf (stderr, "Error while allocating %zu bytes of memory\n", N_MAX * sizeof (* Bord [i]));
            free_array (i, Bord);
            return -1;
        }
    }
    init_array (Bord);
    print_array (Bord);
    free_array (N_MAX, Bord);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51913767_51914017_1_24
51913767_51914210_32_63
Title: I want to print the number of times an element is repeated in an array of random numbers in C 
----------------------------------------

void display_repeats (int *a, int n) {
    int *repeats;
    repeats = malloc (n * sizeof repeats[0]);
    int i = 0;
    int j = 0;
    int count = 1;
    for (i = 0; i < n; i++) {
        if (a[i] == -1)
            continue;
        for (j = 0; j < n; j++) {
            if (i == j)
                continue;
            if (a[i] == a[j]) {
                count++;
                a[j] = -1;
            }
        }
        if (count > 1) {
            repeats[i] = count;
            printf ("%d occurs %d times\n", a [i], repeats [i]);
        }
        count = 1;
    }
    free (repeats);
}
----------------------------------------

void display_repeats (int *a, int n) {
    int *freq;
    freq = malloc (n * sizeof freq[0]);
    int i = 0;
    int j = 0;
    int count = 0;
    for (i = 0; i < n; i++) {
        freq[i] = -1;
    }
    for (i = 0; i < n; i++) {
        count = 1;
        for (j = i + 1; j < n; j++) {
            if (a[i] == a[j]) {
                count++;
                freq[j] = 0;
            }
        }
        if (freq[i] != 0) {
            freq[i] = count;
        }
    }
    for (i = 0; i < n; i++) {
        if (freq[i] != 1 && freq[i] != 0) {
            printf ("%d occurs %d times\n", a [i], freq [i]);
        }
    }
    free (freq);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31448552_31449787_6_42
31448552_31460046_32_48
Title: In the following c program if condition is not working 
----------------------------------------

int main (void) {
    char line [20];
    unsigned int iRandom;
    unsigned int iResponse;
    const unsigned int Base = 10;
    srand ((unsigned int) time (NULL));
    iRandom = rand () % Base + 1;
    printf ("\nGuess a number between 1 and %u: ", Base);
    scanf ("%20s", line);
    errno = 0;
    iResponse = (unsigned int) strtoul (line, NULL, Base);
    if (!errno && iResponse >= 1 && iResponse <= 10) {
        if (iResponse == iRandom) {
            puts ("\nYou guessed right.");
        }
        else {
            puts ("\nSorry, you guessed wrong.");
            printf ("The correct guess was %u\n", iRandom);
        }
    }
    else {
        puts ("\nYou did not enter a number");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int iResponse;
    int iRandom;
    srand ((unsigned int) time (NULL));
    iRandom = (rand () % Max_RANDOM + MIN_RANDOM);
    iResponse = inputCheck (MIN_RANDOM, Max_RANDOM);
    if (iRandom == iResponse) {
        printf ("\nYou guessed right.\n");
    }
    else {
        printf ("\nSorry, you guessed wrong.\n");
        printf ("\n\t\t\tThe correct guess was %u\n", iRandom);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31448552_31450015_4_21
31448552_31460046_32_48
Title: In the following c program if condition is not working 
----------------------------------------

int main () {
    srand (time (0));
    int iRandom = (rand () % 10) + 1, iResponse;
    printf ("\nGuess a number between 1 and 10: ");
    if (scanf ("%d", &iResponse)) {
        if (iResponse >= 1 && iResponse <= 10) {
            if (iResponse == iRandom)
                printf ("\nYou guessed right.\n");
            else
                printf ("\nSorry, The correct guess was %d\n", iRandom);
        }
        else
            printf ("You did not enter a number between 1 and 10.");
    }
    else
        printf ("\nYou did not enter a number.\n");
    return 0;
}
----------------------------------------

int main (void) {
    int iResponse;
    int iRandom;
    srand ((unsigned int) time (NULL));
    iRandom = (rand () % Max_RANDOM + MIN_RANDOM);
    iResponse = inputCheck (MIN_RANDOM, Max_RANDOM);
    if (iRandom == iResponse) {
        printf ("\nYou guessed right.\n");
    }
    else {
        printf ("\nSorry, you guessed wrong.\n");
        printf ("\n\t\t\tThe correct guess was %u\n", iRandom);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31459465_31460013_4_15
31459465_31462567_4_23
Title: compare 2 char arrays in c 
----------------------------------------

int main (void) {
    char filename [256] = "one.txt";
    char shortname [11] = "ONE     TXT";
    char *p = filename;
    char *q = shortname;
    size_t i = 0;
    while (i < 8 && (char) toupper ((unsigned char) *p) == *q)
        ++i, ++p, ++q;
    if (*q == ' ' || i == 8)
        puts ("They coincide");
}
----------------------------------------

int main (void) {
    char filename [256] = "one.txt";
    char shortname [11] = "ONE     TXT";
    size_t lenght = strlen (filename);
    unsigned int i;
    while (shortname[i] |= ' ', shortname[++i]) {
    }
    for (i = 0; i < lenght; i++) {
        if (filename[i] == shortname[i]) {
            printf ("%c", filename [i]);
        }
        else {
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31472062_31472227_13_32
31472062_31472230_1_17
Title: appending node to link list (I am almost there) in C 
----------------------------------------

void append (node *pHead, int data) {
    node *current = pHead;
    node *newNode = NULL;
    newNode = (node *) malloc (sizeof (node));
    newNode->data = data;
    newNode->next = NULL;
    if (current == NULL) {
        pHead = newNode;
        return;
    }
    else {
        while (current->next != NULL)
            current = current->next;
    }
    current->next = newNode;
}
----------------------------------------

void append (int data) {
    node *current = head;
    node *newNode = NULL;
    newNode = (node *) malloc (sizeof (node));
    newNode->data = data;
    newNode->next = NULL;
    if (current == NULL)
        head = newNode;
    else {
        while (current->next != NULL)
            current = current->next;
        current->next = newNode;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31473179_31473352_1_11
31473179_31473485_1_12
Title: How can I reproduce Ruby's Array.compact() in C without using any library? 
----------------------------------------

int strtab_compact (char **tab, int length) {
    int index = 0;
    int i;
    for (i = 0; i < length; i++) {
        if (tab[i])
            tab[index++] = tab[i];
    }
    return index;
}
----------------------------------------

int strtab_compact (char **tab, int length) {
    int i, index;
    for (index = i = 0; i < length; ++i) {
        if (tab[i] != NULL)
            tab[index++] = tab[i];
    }
    for (i = index; i < length; ++i)
        tab[i] = NULL;
    return index;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31488215_31488345_1_22
31488215_31488358_1_21
Title: binary search pointers dynamic memory allocation recursion 
----------------------------------------

int binary_search (int x, int start, int end, int *array) {
    int q;
    if (start >= end)
        return -1;
    q = (start + end) / 2;
    if (x == *(array + q)) {
        return q;
    }
    else if (x > *(array + q)) {
        return binary_search (x, q +1, end, array);
    }
    return binary_search (x, start, q -1, array);
}
----------------------------------------

int binary_search (int x, int start, int end, int *a) {
    int q;
    if (start > end)
        return -1;
    q = (start + end) / 2;
    if (x == *(a + q)) {
        return q;
    }
    else if (x > *(a + q)) {
        return binary_search (x, q +1, end, a);
    }
    else if (x < *(a + q)) {
        return binary_search (x, start, q -1, a);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31489339_31489550_5_40
31489339_31489857_9_19
Title: Display duplicates in array in C 
----------------------------------------

int main (void) {
    int dupArray [100], newArray [100], array [100], size = 0, number = 0, i = 0, j = 0, x = 0, y = 0, m = 0, n = 0, exists = 0;
    printf ("How many numbers do you want to compare? ");
    scanf ("%d", & size);
    for (i = 0; i < size; i++) {
        printf ("Enter number %d", i + 1);
        printf ("/%d: ", size);
        scanf ("%d", & array [i]);
    }
    for (y = 0; y < size; y++) {
        for (j = 0; j < size; j++) {
            exists = 0;
            for (m = 0; m <= x; m++) {
                if (array[j] == dupArray[m]) {
                    exists = 1;
                }
            }
            if (array[j] == array[y] && y != j && !exists) {
                dupArray[x] = array[j];
                printf ("duplicate: %d", dupArray [x]);
                printf ("\n");
                x++;
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int size, i, len = 0;
    scanf ("%d", & size);
    int array [size], dups [size];
    for (i = 0; i < size; ++i) {
        scanf ("%d", & array [i]);
        if (exists (array, i, array[i]) && !exists (dups, len, array[i]))
            printf ("%d ", dups[len++] = array[i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31494659_31494724_2_28
31494659_31494836_3_31
Title: Why compiler is showing unexpected result? 
----------------------------------------

int main () {
    int i = 1, j, temp;
    int a [10010];
    printf ("enter numbers:\n");
    while (i) {
        scanf ("%d", & temp);
        i++;
        a[i - 2] = temp;
        if (temp == 42) {
            for (j = 0; j < i - 2; j++) {
                if (a[j] == 42)
                    break;
                else
                    printf ("%d\n", a[j]);
            }
        }
        if (temp == 42)
            break;
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 1;
    int a [100];
    printf ("enter numbers:\n");
    while (i++ < 100) {
        if (scanf ("%d%*c", &a[i - 2]) != 1)
            return -1;
        if (a[i - 2] == 42) {
            if (scanf ("%d%*c", &a[i - 1]) != 1)
                return -1;
            for (int j = 0; j < i - 1; j++) {
                if (a[j] == 42)
                    break;
                else
                    printf ("%d\n", a[j]);
            }
        }
        if (a[i - 2] == 42)
            break;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31494659_31494724_2_28
31494659_31495270_4_37
Title: Why compiler is showing unexpected result? 
----------------------------------------

int main () {
    int i = 1, j, temp;
    int a [10010];
    printf ("enter numbers:\n");
    while (i) {
        scanf ("%d", & temp);
        i++;
        a[i - 2] = temp;
        if (temp == 42) {
            for (j = 0; j < i - 2; j++) {
                if (a[j] == 42)
                    break;
                else
                    printf ("%d\n", a[j]);
            }
        }
        if (temp == 42)
            break;
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct node {
        int value;
        struct node *next;
    } *head = NULL;
    struct node **current = &head;
    int value;
    int next = -1;
    while (next != 1 && scanf ("%d", &value) == 1) {
        if (next == 0 || value == 42)
            ++next;
        if (next == -1) {
            *current = malloc (sizeof (struct node));
            (*current)->value = value;
            (*current)->next = NULL;
            current = &(*current)->next;
        }
    }
    while (head) {
        printf ("%d\n", head -> value);
        struct node *tmp = head;
        head = head->next;
        free (tmp);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31494659_31494836_3_31
31494659_31495270_4_37
Title: Why compiler is showing unexpected result? 
----------------------------------------

int main () {
    int i = 1;
    int a [100];
    printf ("enter numbers:\n");
    while (i++ < 100) {
        if (scanf ("%d%*c", &a[i - 2]) != 1)
            return -1;
        if (a[i - 2] == 42) {
            if (scanf ("%d%*c", &a[i - 1]) != 1)
                return -1;
            for (int j = 0; j < i - 1; j++) {
                if (a[j] == 42)
                    break;
                else
                    printf ("%d\n", a[j]);
            }
        }
        if (a[i - 2] == 42)
            break;
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct node {
        int value;
        struct node *next;
    } *head = NULL;
    struct node **current = &head;
    int value;
    int next = -1;
    while (next != 1 && scanf ("%d", &value) == 1) {
        if (next == 0 || value == 42)
            ++next;
        if (next == -1) {
            *current = malloc (sizeof (struct node));
            (*current)->value = value;
            (*current)->next = NULL;
            current = &(*current)->next;
        }
    }
    while (head) {
        printf ("%d\n", head -> value);
        struct node *tmp = head;
        head = head->next;
        free (tmp);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31507690_31507823_27_36
31507690_31507827_25_33
Title: "Lab code logical error C program beginner" 
----------------------------------------

int xchg (int *a, int *b) {
    int s = (*a > *b);
    if (s) {
        int t = *a;
        *a = *b;
        *b = t;
    }
    return s;
}
----------------------------------------

int xchg (int *a, int *b) {
    if (*a > *b) {
        int tmp = *a;
        *a = *b;
        *b = tmp;
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31507690_31507823_7_25
31507690_31507827_6_23
Title: "Lab code logical error C program beginner" 
----------------------------------------

int main (void) {
    int i, j, k, count = 0;
    int Num [N] = {7, 1, 993, -5, 0, 16, -451, 12, 89, 28, 77, 384, -2, 38, -17, 201};
    for (i = 0; i < N - 1; i++) {
        for (j = i + 1; j < N; j++) {
            count += xchg (&Num[i], &Num[j]);
        }
        for (k = 0; k < N; k++) {
            if (k < N - 1) {
                printf ("%d ", Num [k]);
            }
            else {
                printf ("%d", Num [k]);
            }
        }
        printf ("\n");
    }
    printf ("total exchanges: %d\n", count);
}
----------------------------------------

int main () {
    int i, j, k, count = 0;
    int Num [N] = {7, 1, 993, -5, 0, 16, -451, 12, 89, 28, 77, 384, -2, 38, -17, 201};
    for (i = 0; i <= N - 1; i++) {
        for (j = i + 1; j <= N; j++) {
            count += xchg (&Num[i], &Num[j]);
        }
        for (k = 0; k < N; k++) {
            if (k < N - 1)
                printf ("%d ", Num[k]);
            else
                printf ("%d", Num[k]);
        }
        printf ("\n");
    }
    printf ("total exchanges: %d\n", count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31524489_31524759_4_22
31524489_31525008_5_25
Title: How to tokenize a string containing null values using strtok_r 
----------------------------------------

int main (void) {
    int i = 0;
    char result [512];
    char *str = result, *ptr;
    strcpy (result, "Hello,world,,,wow");
    while (1) {
        ptr = strchr (str, ',');
        if (ptr != NULL) {
            *ptr = 0;
        }
        printf ("%d\n", ++ i);
        printf ("%s\n", str);
        if (ptr == NULL) {
            break;
        }
        str = ptr + 1;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char result [512] = "Hello,world,,,wow";
    char *token, *endToken;
    int i = 0;
    token = result;
    do {
        endToken = strchr (token, ',');
        if (endToken)
            *endToken = '\0';
        printf ("%d\n", ++ i);
        if (*token == '\0')
            printf ("*\n");
        else
            printf ("%s\n", token);
        if (endToken)
            token = endToken + 1;
    }
    while (endToken);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31529124_31529262_3_23
31529124_45947634_4_24
Title: Making a Hash Pyramid 
----------------------------------------

int main (void) {
    int height, i, j;
    do {
        printf ("please give me a height between 1-23: ");
        height = GetInt ();
    }
    while (height < 1 || height > 23);
    printf ("\n");
    for (i = 0; i < height; i++) {
        for (j = 0; j < height - i - 1; j++)
            printf (" ");
        for (j = 0; j < i + 2; j++)
            printf ("#");
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    int height, n, j, k, i;
    printf ("Height: \n");
    height = GetInt ();
    n = height;
    for (i = 0; i < height; i++) {
        for (k = n; k > i; k--)
            printf ("%c", ' ');
        for (j = 0; j < i + 2; j++)
            printf ("#");
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31542494_31544106_3_14
31542494_38192170_2_34
Title: Exercise 1.9 of K&R book 
----------------------------------------

int main (int argc, char *argv []) {
    char c = 0;
    char prevchar = 0;
    while ((c = getchar ()) != '\n') {
        if (c != ' ' || prevchar != ' ')
            putchar (c);
        prevchar = c;
    }
}
----------------------------------------

int main () {
    int i, nb = 0;
    char sent [100];
    printf ("Enter a sentence: ");
    for (i = 0; (sent[i] = getchar ()) != '\n'; i++) {
        if (sent[i] == ' ') {
            nb++;
            if (nb >= 2) {
                i--;
                nb--;
            }
        }
        if (sent[i] != ' ')
            nb = 0;
    }
    sent[i] = '\0';
    printf ("\nResult: ");
    for (i = 0; sent[i] != '\0'; i++) {
        putchar (sent [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31542494_31544106_3_14
31542494_44442811_3_27
Title: Exercise 1.9 of K&R book 
----------------------------------------

int main (int argc, char *argv []) {
    char c = 0;
    char prevchar = 0;
    while ((c = getchar ()) != '\n') {
        if (c != ' ' || prevchar != ' ')
            putchar (c);
        prevchar = c;
    }
}
----------------------------------------

int main () {
    int c, nspaces;
    nspaces = 0;
    c = getchar ();
    while (c != EOF) {
        if (c == ' ') {
            if (nspaces > 0) {
                ++nspaces;
            }
            else {
                putchar (c);
                ++nspaces;
            }
        }
        else {
            putchar (c);
            nspaces = 0;
        }
        c = getchar ();
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31542494_38192170_2_34
31542494_44442811_3_27
Title: Exercise 1.9 of K&R book 
----------------------------------------

int main () {
    int i, nb = 0;
    char sent [100];
    printf ("Enter a sentence: ");
    for (i = 0; (sent[i] = getchar ()) != '\n'; i++) {
        if (sent[i] == ' ') {
            nb++;
            if (nb >= 2) {
                i--;
                nb--;
            }
        }
        if (sent[i] != ' ')
            nb = 0;
    }
    sent[i] = '\0';
    printf ("\nResult: ");
    for (i = 0; sent[i] != '\0'; i++) {
        putchar (sent [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int c, nspaces;
    nspaces = 0;
    c = getchar ();
    while (c != EOF) {
        if (c == ' ') {
            if (nspaces > 0) {
                ++nspaces;
            }
            else {
                putchar (c);
                ++nspaces;
            }
        }
        else {
            putchar (c);
            nspaces = 0;
        }
        c = getchar ();
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31554811_31554898_3_13
31554811_31554912_3_11
Title: Using a while loop to iterate through user input until specific number 
----------------------------------------

int main (void) {
    int i = 0;
    int x = 0;
    do {
        if (scanf ("%d", &x) < 0)
            break;
        printf ("%d\n", x);
    }
    while (x != 84);
}
----------------------------------------

int main (void) {
    int x;
    while (1) {
        scanf ("%d", & x);
        print ("%d\n", x);
        if (x == 84)
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31560778_31561087_1_21
31560778_31561118_2_34
Title: Why doesn't my atoi implementation work with negative numbers? 
----------------------------------------

int ft_atoi (char *str) {
    int i = 0;
    int sign = 1;
    int val = 0;
    while (str[i] == '-') {
        sign = -sign;
        i++;
    }
    while (str[i] >= '0' && str[i] <= '9') {
        int nbr = (int) (str[i] - '0');
        val = (val * 10) + nbr;
        i++;
    }
    return (val * sign);
}
----------------------------------------

int ft_atoi (char *str) {
    int i;
    int sign;
    int val;
    int nbr;
    i = 0;
    sign = 1;
    val = 0;
    nbr = 0;
    while (str[i] != '\0') {
        if (str[i] == '-') {
            sign = -sign;
            str++;
        }
        i++;
    }
    i = 0;
    while (str[i] >= '0' && str[i] <= '9' && str[i] != '\0') {
        nbr = (int) (str[i] - '0');
        val = (val * 10) + nbr;
        i++;
    }
    i++;
    return (val * sign);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31593153_31593545_3_13
31593153_31594195_2_19
Title: "Simple C Program Unknown output" 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    long long int a, sum = 0;
    while (n--) {
        scanf ("%lld", & a);
        sum += a;
    }
    printf ("%lld", sum);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    unsigned long long int a [5];
    unsigned long long int sum = 0;
    for (i = 0; i < n; i++) {
        scanf ("%llu", & a [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%llu\n", sum);
        sum = sum + a[i];
    }
    printf ("\nSum is : %llu", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31593153_31593545_3_13
31593153_35070462_6_20
Title: "Simple C Program Unknown output" 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    long long int a, sum = 0;
    while (n--) {
        scanf ("%lld", & a);
        sum += a;
    }
    printf ("%lld", sum);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    long int a [10];
    long long sum = 0;
    for (i = 0; i <= n - 1; i++) {
        scanf ("%ld", & a [i]);
    }
    for (i = 0; i <= n - 1; i++) {
        sum = sum + a[i];
    }
    printf ("%ld", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31593153_31593545_3_13
31593153_35070555_9_25
Title: "Simple C Program Unknown output" 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    long long int a, sum = 0;
    while (n--) {
        scanf ("%lld", & a);
        sum += a;
    }
    printf ("%lld", sum);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    cin >> n;
    long long int s = 0;
    long int a [10];
    if (n >= 1 && n <= 10) {
        for (i = 0; i < n; i++) {
            cin >> a[i];
            s = s + a[i];
        }
    }
    cout << s;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31593153_31594195_2_19
31593153_35070462_6_20
Title: "Simple C Program Unknown output" 
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    unsigned long long int a [5];
    unsigned long long int sum = 0;
    for (i = 0; i < n; i++) {
        scanf ("%llu", & a [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%llu\n", sum);
        sum = sum + a[i];
    }
    printf ("\nSum is : %llu", sum);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    long int a [10];
    long long sum = 0;
    for (i = 0; i <= n - 1; i++) {
        scanf ("%ld", & a [i]);
    }
    for (i = 0; i <= n - 1; i++) {
        sum = sum + a[i];
    }
    printf ("%ld", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31593153_31594195_2_19
31593153_35070555_9_25
Title: "Simple C Program Unknown output" 
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    unsigned long long int a [5];
    unsigned long long int sum = 0;
    for (i = 0; i < n; i++) {
        scanf ("%llu", & a [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%llu\n", sum);
        sum = sum + a[i];
    }
    printf ("\nSum is : %llu", sum);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    cin >> n;
    long long int s = 0;
    long int a [10];
    if (n >= 1 && n <= 10) {
        for (i = 0; i < n; i++) {
            cin >> a[i];
            s = s + a[i];
        }
    }
    cout << s;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31593153_35070462_6_20
31593153_35070555_9_25
Title: "Simple C Program Unknown output" 
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    long int a [10];
    long long sum = 0;
    for (i = 0; i <= n - 1; i++) {
        scanf ("%ld", & a [i]);
    }
    for (i = 0; i <= n - 1; i++) {
        sum = sum + a[i];
    }
    printf ("%ld", sum);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    cin >> n;
    long long int s = 0;
    long int a [10];
    if (n >= 1 && n <= 10) {
        for (i = 0; i < n; i++) {
            cin >> a[i];
            s = s + a[i];
        }
    }
    cout << s;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31632621_31633109_17_56
31632621_31633489_149_165
Title: Reading in a multi-line string from a file using sscanf in C 
----------------------------------------

int main (void) {
    char input [128], rec [6 * 128] = "";
    int n = 0;
    FILE *ifp = fopen ("data.txt", "r");
    while (fgets (input, sizeof input, ifp)) {
        if (strncmp (input, "----", 4) == 0) {
            if (6 != sscanf (rec, "Title: %79[^\n] " "Artist: %79[^\n] " "Year: %d " "Genre: %79[^\n] " "Label: %79[^\n] " "Price: %lf", record_inventory[n].title, record_inventory[n].artist, &record_inventory[n].year, record_inventory[n].genre, record_inventory[n].label, &record_inventory[n].price)) {
                fprintf (stderr, "bad format!\n");
            }
            else {
                if (++n == MAX_RECORDS) {
                    fprintf (stderr, "full.\n");
                    break;
                }
            }
            *rec = '\0';
        }
        else {
            strcat (rec, input);
        }
    }
    fclose (ifp);
    for (int i = 0; i < n; ++i) {
        printf ("%s : %f\n", record_inventory [i].title, record_inventory [i].price);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *buffer;
    int rc = 0;
    while ((buffer = get_record (stdin, "----")) != 0 && rc == 0) {
        printf ("Input %zu: [[%s]]\n", n_rec, buffer);
        rc = scan_record (buffer, &record_inventory[n_rec++]);
        free (buffer);
    }
    for (size_t i = 0; i < n_rec; i++)
        print_record (i, &record_inventory[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31667819_31667886_1_14
31667819_31668463_3_16
Title: Nested for-loop: why is the condition stated in for() ineffective? 
----------------------------------------

void main (void) {
    int counter = 0;
    for (int i = 0; i < 1000; ++i) {
        if (i % 2 != 0 && i % 3 != 0) {
            if (counter == 9) {
                printf ("\n");
                counter = 0;
            }
            printf ("%-3d ", i);
            ++counter;
        }
    }
}
----------------------------------------

int main () {
    int flag = (0, 0);
    printf ("%i ", flag);
    flag = (0, 1);
    printf ("%i ", flag);
    flag = (1, 0);
    printf ("%i ", flag);
    flag = (1, 1);
    printf ("%i ", flag);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31669451_31669582_2_11
31669451_31669655_3_15
Title: Why won't the output be 4 in this case? 
----------------------------------------

int main () {
    int arr [] = {1, 2, 3, 4, 5};
    int *p = arr;
    ++*p;
    p += 2;
    printf ("%d", * p);
    printf ("%d", arr [0]);
    return 0;
}
----------------------------------------

int main () {
    int arr [] = {1, 2, 3, 4, 5};
    int *p = arr;
    printf ("\n1- %p", p);
    ++*p;
    printf ("\n2- %d", arr [0]);
    printf ("\n3- %p", p);
    p += 2;
    printf ("\n4- %p", p);
    printf ("\n5- %d", * p);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31709584_31709721_3_13
31709584_31709959_1_15
Title: A method to delete the elements in a linkedlist using C 
----------------------------------------

void deleteList () {
    struct node *current = head;
    struct node *next;
    while (current != NULL) {
        next = current->next;
        free (current);
        current = next;
    }
}
----------------------------------------

void deleteList (struct node *start) {
    struct node *current = start;
    struct node *next;
    while (current != NULL) {
        next = current->next;
        pop (next);
        free (current);
        current = next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31806460_31806933_4_19
31806460_31807054_5_18
Title: How to iterate through arrays to copy them into another array of type uint32_t? 
----------------------------------------

int main () {
    int store [3] [4];
    int i;
    int states [3] [4] = {{1, 0, 0, 1}, {0, 0, 0, 2}};
    for (i = 0; i < 3; i++) {
        printf ("store[%d] = ", i);
        for (int inner = 0;
        inner < 4;
        inner ++) {store [i] [inner] = states [i] [inner];
        printf ("%d ", store [i] [inner]);
    }
    printf ("\n");
}
----------------------------------------

int main (void) {
    uint32_t *store [2];
    int i;
    int *states [2];
    states[0] = (int []) {1, 0, 0, 1};
    states[1] = (int []) {0, 0, 0, 2};
    for (i = 0; i < 2; i++) {
        store[i] = states[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31826746_31827025_3_29
31826746_31829089_6_23
Title: Trying to generate 9 digit numbers with each unique digits 
----------------------------------------

int main (void) {
    int indx;
    int num;
    for (indx = 123456789; indx <= 987654321; indx++) {
        num = indx;
        int ok = 1;
        unsigned bits = 0;
        int digit;
        unsigned powers10 = 1;
        for (digit = 0; digit < 9; ++digit) {
            unsigned bit = 1 << ((num / powers10) % 10);
            if ((bit == 1) || ((bits & bit) != 0)) {
                ok = 0;
                break;
            }
            bits |= bit;
            powers10 *= 10;
        }
        if (ok) {
            printf ("%d\n", num);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char digits [] = "123456789";
    srand (time (NULL));
    size_t i = sizeof digits - 1;
    while (i) {
        size_t j = rand () % i;
        char tmp = digits[--i];
        digits[i] = digits[j];
        digits[j] = tmp;
    }
    printf ("number is %s\n", digits);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31826746_31827025_3_29
31826746_31899829_7_77
Title: Trying to generate 9 digit numbers with each unique digits 
----------------------------------------

int main (void) {
    int indx;
    int num;
    for (indx = 123456789; indx <= 987654321; indx++) {
        num = indx;
        int ok = 1;
        unsigned bits = 0;
        int digit;
        unsigned powers10 = 1;
        for (digit = 0; digit < 9; ++digit) {
            unsigned bit = 1 << ((num / powers10) % 10);
            if ((bit == 1) || ((bits & bit) != 0)) {
                ok = 0;
                break;
            }
            bits |= bit;
            powers10 *= 10;
        }
        if (ok) {
            printf ("%d\n", num);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    uint32_t *unique_numbers = malloc (NINE_FACTORIAL * sizeof (uint32_t));
    if (!unique_numbers) {
        printf ("Could not allocate memory for the Unique Numbers array.\n");
        exit (1);
    }
    uint32_t n = 0;
    int a, b, c, d, e, f, g, h, i;
    for (a = 1; a < 10; a++) {
        for (b = 1; b < 10; b++) {
            if (b == a)
                continue;
            for (c = 1; c < 10; c++) {
                if (c == a || c == b)
                    continue;
                for (d = 1; d < 10; d++) {
                    if (d == a || d == b || d == c)
                        continue;
                    for (e = 1; e < 10; e++) {
                        if (e == a || e == b || e == c || e == d)
                            continue;
                        for (f = 1; f < 10; f++) {
                            if (f == a || f == b || f == c || f == d || f == e)
                                continue;
                            for (g = 1; g < 10; g++) {
                                if (g == a || g == b || g == c || g == d || g == e || g == f)
                                    continue;
                                for (h = 1; h < 10; h++) {
                                    if (h == a || h == b || h == c || h == d || h == e || h == f || h == g)
                                        continue;
                                    for (i = 1; i < 10; i++) {
                                        if (i == a || i == b || i == c || i == d || i == e || i == f || i == g || i == h)
                                            continue;
                                        unique_numbers[n++] = a * 100000000 + b * 10000000 + c * 1000000 + d * 100000 + e * 10000 + f * 1000 + g * 100 + h * 10 + i;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    free (unique_numbers);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31826746_31827025_3_29
31826746_31987936_36_52
Title: Trying to generate 9 digit numbers with each unique digits 
----------------------------------------

int main (void) {
    int indx;
    int num;
    for (indx = 123456789; indx <= 987654321; indx++) {
        num = indx;
        int ok = 1;
        unsigned bits = 0;
        int digit;
        unsigned powers10 = 1;
        for (digit = 0; digit < 9; ++digit) {
            unsigned bit = 1 << ((num / powers10) % 10);
            if ((bit == 1) || ((bits & bit) != 0)) {
                ok = 0;
                break;
            }
            bits |= bit;
            powers10 *= 10;
        }
        if (ok) {
            printf ("%d\n", num);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char buffer [SIZE];
    int i;
    srand ((unsigned) time (NULL));
    for (i = 0; i < SIZE; ++i)
        buffer[i] = (char) i;
    for (i = 0; i < NUMBER; ++i) {
        do
            shuffle (buffer, SIZE);
        while (buffer[0] == 0);
        printout (buffer, LENGTH);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31826746_31828305_3_13
31826746_32059779_9_40
Title: Trying to generate 9 digit numbers with each unique digits 
----------------------------------------

void uniq_digits (int places, int prefix, int mask) {
    if (!places) {
        printf ("%d\n", prefix);
        return;
    }
    for (int i = 0; i < 10; i++) {
        if (prefix == 0 && i == 0)
            continue;
        if ((1 << i) & mask)
            continue;
        uniq_digits (places - 1, prefix * 10 + i, mask | (1 << i));
    }
}
----------------------------------------

void uniq_digits (const int array [], const int length) {
    unsigned int unused [length - 1];
    unsigned int combos [length - 1];
    int digit [length];
    int mult [length];
    mult[length - 1] = 1;
    for (int i = length - 2; i >= 0; --i)
        mult[i] = mult[i + 1] * 10;
    unused[0] = combos[0] = ((1 << (length)) - 1);
    int depth = 0;
    digit[0] = 0;
    while (1) {
        if (combos[depth]) {
            unsigned int avail = combos[depth];
            combos[depth] = avail & (avail - 1);
            unsigned int bit = avail - combos[depth];
            digit[depth + 1] = digit[depth] + mult[depth] * array[bit_val (bit)];
            unsigned int rest = unused[depth] & (~bit);
            depth++;
            if (depth != length - 1) {
                unused[depth] = combos[depth] = rest;
            }
            else {
                show (digit [depth] + array [bit_val (rest)]);
                depth--;
            }
        }
        else {
            depth--;
            if (depth < 0)
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31826746_31829089_6_23
31826746_31899829_7_77
Title: Trying to generate 9 digit numbers with each unique digits 
----------------------------------------

int main (void) {
    char digits [] = "123456789";
    srand (time (NULL));
    size_t i = sizeof digits - 1;
    while (i) {
        size_t j = rand () % i;
        char tmp = digits[--i];
        digits[i] = digits[j];
        digits[j] = tmp;
    }
    printf ("number is %s\n", digits);
    return 0;
}
----------------------------------------

int main (void) {
    uint32_t *unique_numbers = malloc (NINE_FACTORIAL * sizeof (uint32_t));
    if (!unique_numbers) {
        printf ("Could not allocate memory for the Unique Numbers array.\n");
        exit (1);
    }
    uint32_t n = 0;
    int a, b, c, d, e, f, g, h, i;
    for (a = 1; a < 10; a++) {
        for (b = 1; b < 10; b++) {
            if (b == a)
                continue;
            for (c = 1; c < 10; c++) {
                if (c == a || c == b)
                    continue;
                for (d = 1; d < 10; d++) {
                    if (d == a || d == b || d == c)
                        continue;
                    for (e = 1; e < 10; e++) {
                        if (e == a || e == b || e == c || e == d)
                            continue;
                        for (f = 1; f < 10; f++) {
                            if (f == a || f == b || f == c || f == d || f == e)
                                continue;
                            for (g = 1; g < 10; g++) {
                                if (g == a || g == b || g == c || g == d || g == e || g == f)
                                    continue;
                                for (h = 1; h < 10; h++) {
                                    if (h == a || h == b || h == c || h == d || h == e || h == f || h == g)
                                        continue;
                                    for (i = 1; i < 10; i++) {
                                        if (i == a || i == b || i == c || i == d || i == e || i == f || i == g || i == h)
                                            continue;
                                        unique_numbers[n++] = a * 100000000 + b * 10000000 + c * 1000000 + d * 100000 + e * 10000 + f * 1000 + g * 100 + h * 10 + i;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    free (unique_numbers);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31826746_31829089_6_23
31826746_31987936_36_52
Title: Trying to generate 9 digit numbers with each unique digits 
----------------------------------------

int main (void) {
    char digits [] = "123456789";
    srand (time (NULL));
    size_t i = sizeof digits - 1;
    while (i) {
        size_t j = rand () % i;
        char tmp = digits[--i];
        digits[i] = digits[j];
        digits[j] = tmp;
    }
    printf ("number is %s\n", digits);
    return 0;
}
----------------------------------------

int main () {
    char buffer [SIZE];
    int i;
    srand ((unsigned) time (NULL));
    for (i = 0; i < SIZE; ++i)
        buffer[i] = (char) i;
    for (i = 0; i < NUMBER; ++i) {
        do
            shuffle (buffer, SIZE);
        while (buffer[0] == 0);
        printout (buffer, LENGTH);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31826746_31899829_7_77
31826746_31987936_36_52
Title: Trying to generate 9 digit numbers with each unique digits 
----------------------------------------

int main (void) {
    uint32_t *unique_numbers = malloc (NINE_FACTORIAL * sizeof (uint32_t));
    if (!unique_numbers) {
        printf ("Could not allocate memory for the Unique Numbers array.\n");
        exit (1);
    }
    uint32_t n = 0;
    int a, b, c, d, e, f, g, h, i;
    for (a = 1; a < 10; a++) {
        for (b = 1; b < 10; b++) {
            if (b == a)
                continue;
            for (c = 1; c < 10; c++) {
                if (c == a || c == b)
                    continue;
                for (d = 1; d < 10; d++) {
                    if (d == a || d == b || d == c)
                        continue;
                    for (e = 1; e < 10; e++) {
                        if (e == a || e == b || e == c || e == d)
                            continue;
                        for (f = 1; f < 10; f++) {
                            if (f == a || f == b || f == c || f == d || f == e)
                                continue;
                            for (g = 1; g < 10; g++) {
                                if (g == a || g == b || g == c || g == d || g == e || g == f)
                                    continue;
                                for (h = 1; h < 10; h++) {
                                    if (h == a || h == b || h == c || h == d || h == e || h == f || h == g)
                                        continue;
                                    for (i = 1; i < 10; i++) {
                                        if (i == a || i == b || i == c || i == d || i == e || i == f || i == g || i == h)
                                            continue;
                                        unique_numbers[n++] = a * 100000000 + b * 10000000 + c * 1000000 + d * 100000 + e * 10000 + f * 1000 + g * 100 + h * 10 + i;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    free (unique_numbers);
    return 0;
}
----------------------------------------

int main () {
    char buffer [SIZE];
    int i;
    srand ((unsigned) time (NULL));
    for (i = 0; i < SIZE; ++i)
        buffer[i] = (char) i;
    for (i = 0; i < NUMBER; ++i) {
        do
            shuffle (buffer, SIZE);
        while (buffer[0] == 0);
        printout (buffer, LENGTH);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31845497_31845581_1_20
31845497_31891426_26_51
Title: Creating a linked list using recursion 
----------------------------------------

int create (int x) {
    if (x == 0)
        return 0;
    else {
        NODE *node;
        node = ((NODE *) malloc (sizeof (NODE)));
        printf ("Enter the data:\n");
        scanf ("%d", & node -> data);
        node->next = NULL;
        if (start == NULL) {
            ptr = start = node;
        }
        else {
            ptr->next = node;
            ptr = node;
        }
        ptr->next = NULL;
    }
    create (x - 1);
}
----------------------------------------

void create (int x) {
    if (x == 0)
        return;
    NODE *node;
    if (!(node = malloc (sizeof *node))) {
        fprintf (stderr, "error: virtual memory exhausted\n");
        exit (EXIT_FAILURE);
    }
    printf ("Enter the data: ");
    scanf ("%d", & node -> data);
    node->next = NULL;
    if (start == NULL) {
        ptr = start = node;
    }
    else {
        ptr->next = node;
        ptr = ptr->next;
    }
    create (x - 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31854071_31854610_3_15
31854071_31855174_3_16
Title: Copying characters from a source string to a buffer - C 
----------------------------------------

size_t tokenCopy (char *dest, const char *src, size_t destSize) {
    size_t n = 0;
    if (destSize != 0) {
        while (n < destSize && *src && *src != ' ')
            dest[n++] = *src++;
        dest[n == destSize ? --n : n] = '\0';
    }
    return n;
}
----------------------------------------

int tokenCopy (char *dest, const char *src, int destSize) {
    while (*src && destSize > 1 && *src != ' ') {
        *dest = *src;
        dest++;
        src++;
        destSize--;
    }
    *dest = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3185770_3185916_8_22
3185770_3196951_14_30
Title: convert number to slash divided hex path 
----------------------------------------

void main () {
    long id = 53431453;
    char buffer [20];
    buffer[0] = convert (id >> 28);
    buffer[1] = convert ((id >> 24) & 0xf);
    buffer[2] = convert ((id >> 20) & 0xf);
    buffer[3] = convert ((id >> 16) & 0xf);
    buffer[4] = convert ((id >> 12) & 0xf);
    buffer[5] = convert ((id >> 8) & 0xf);
    buffer[6] = convert ((id >> 4) & 0xf);
    buffer[7] = convert ((id >> 0) & 0xf);
    buffer[8] = '\0';
}
----------------------------------------

int main () {
    lubf bf;
    unsigned long a = 0xABCDE123;
    memcpy (& bf, & a, sizeof (a));
    char arr [9];
    arr[0] = convert (bf.f0);
    arr[1] = convert (bf.f1);
    arr[2] = convert (bf.f2);
    arr[3] = convert (bf.f3);
    arr[4] = convert (bf.f4);
    arr[5] = convert (bf.f5);
    arr[6] = convert (bf.f6);
    arr[7] = convert (bf.f7);
    arr[8] = '\0';
    printf ("%lX : %s\n", a, arr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31860851_31879999_208_270
31860851_31882153_41_63
Title: how to escape special characters in a command that is used in popen() function in c? 
----------------------------------------

int main (void) {
    struct interface *before, *after;
    double interval = 5.0;
    if (install_done (SIGINT) || install_done (SIGTERM)) {
        fprintf (stderr, "Cannot install signal handlers: %s.\n", strerror (errno));
        return EXIT_FAILURE;
    }
    before = NULL;
    after = list_interfaces ();
    if (!after) {
        fprintf (stderr, "Cannot get network interface statistics: %s.\n", strerror (errno));
        return EXIT_FAILURE;
    }
    while (!done) {
        struct interface *curr, *prev;
        struct timespec req, rem;
        double duration = interval;
        double tx_rate, rx_rate;
        set_timespec (& req, duration);
        if (nanosleep (&req, &rem) == -1 && errno == EINTR)
            duration -= get_timespec (&rem);
        if (done)
            break;
        if (duration <= 0.0)
            continue;
        free_interfaces (before);
        before = after;
        after = list_interfaces ();
        if (!after) {
            fprintf (stderr, "Cannot get network interface statistics: %s.\n", strerror (errno));
            return EXIT_FAILURE;
        }
        rx_rate = 0.0;
        tx_rate = 0.0;
        for (curr = after; curr != NULL; curr = curr->next) {
            if (!strcmp (curr->name, "lo"))
                continue;
            prev = find_interface (before, curr->name);
            if (prev) {
                const double rx = ((double) curr->rx_bytes - (double) prev->rx_bytes) * 8.0 / 1024.0 / duration;
                const double tx = ((double) curr->tx_bytes - (double) prev->tx_bytes) * 8.0 / 1024.0 / duration;
                printf ("%s: %9.0f kbits/s sent, %9.0f kbits/s received\n", curr -> name, tx, rx);
                rx_rate += rx;
                tx_rate += tx;
            }
        }
        printf ("Total: %9.0f kbits/s sent, %9.0f kbits/s received\n\n", tx_rate, rx_rate);
        fflush (stdout);
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (int argc, char **argv) {
    const char *iface = "wlan0";
    if (argc > 1)
        iface = argv[1];
    FILE *recvf = open_stat (iface, "rx_bytes");
    if (!recvf)
        exit (1);
    FILE *xmitf = open_stat (iface, "tx_bytes");
    if (!xmitf)
        exit (1);
    unsigned long recv = read_stat (recvf);
    unsigned long xmit = read_stat (xmitf);
    for (int i = 0; i < COUNT; ++i) {
        sleep (1);
        unsigned long new_recv = read_stat (recvf);
        unsigned long new_xmit = read_stat (xmitf);
        printf ("in: %6.3f kB/s, out: %6.3f kB/s\n", (new_recv - recv) / 1024.0, (new_xmit - xmit) / 1024.0);
        recv = new_recv;
        xmit = new_xmit;
    }
    fclose (recvf);
    fclose (xmitf);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31869916_31871580_1_18
31869916_31871830_1_20
Title: Issues with outputs in C using struct and stdin 
----------------------------------------

Student *readOneStudent (FILE *file) {
    char buffer [MAX_LINE_LENGTH];
    Student *student = NULL;
    char *cp = fgets (buffer, MAX_LINE_LENGTH, file);
    if (cp != NULL) {
        char *commaPos = strchr (buffer, ',');
        if (commaPos != NULL && commaPos > buffer) {
            int age = atoi (commaPos +1);
            *commaPos = '\0';
            student = newStudent (buffer, age);
        }
    }
    return student;
}
----------------------------------------

Student *readOneStudent (FILE *file) {
    char *buffer;
    buffer = (char *) malloc (MAX_LINE_LENGTH);
    Student *student = NULL;
    char *cp = fgets (buffer, MAX_LINE_LENGTH, file);
    if (cp != NULL) {
        char *commaPos = strchr (buffer, ',');
        if (commaPos != NULL && commaPos > buffer) {
            buffer[strlen (buffer) - 1] = '\0';
            *commaPos = '\0';
            int age = atoi (buffer);
            student = newStudent (commaPos +2, age);
        }
    }
    return student;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31899284_31899554_1_19
31899284_31900125_21_37
Title: "atomic_bool value update not seen by other processes" 
----------------------------------------

int compare_and_swap_loop (atomic_bool *target, int value) {
    while (1) {
        bool snapshot = atomic_load (target);
        if (atomic_compare_exchange_weak (target, &snapshot, value) == true) {
            break;
        }
    }
    printf ("result: %d\n", atomic_load (target));
    return 0;
}
----------------------------------------

int compare_and_swap_loop (bool *target) {
    while (1) {
        bool snapshot = *target;
        if (snapshot) {
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31905454_31905745_6_28
31905454_31906426_5_25
Title: How to convert a string containing integers passed as command line arguements into an array of integers 
----------------------------------------

int main (int argc, char **argv) {
    int i = 0;
    int *intArray;
    const char s [2] = " ";
    char *token;
    token = strtok (argv[1], s);
    intArray = malloc (sizeof (int));
    while (token != NULL) {
        intArray[i++] = atoi (token);
        token = strtok (NULL, s);
    }
    int j;
    for (j = 0; j < i; j++) {
        printf (" %d\n", intArray [j]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc != 2) {
        exit (EXIT_FAILURE);
    }
    int n = 0;
    char prev = ' ', *s = argv[1];
    while (*s) {
        if (isspace (prev) && !isspace (*s))
            ++n;
        prev = *s++;
    }
    int nums [n];
    char *endp;
    s = argv[1];
    for (int i = 0; i < n; ++i) {
        nums[i] = strtol (s, &endp, 10);
        s = endp;
        printf ("%d\n", nums [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31948074_31948297_5_25
31948074_31948435_3_12
Title: How to solve pointer errors? 
----------------------------------------

int main () {
    int *p = (int *) malloc (sizeof (int));
    int *q = (int *) malloc (sizeof (int));
    if (p != NULL && q != NULL) {
        *p = 10;
        *q = 10;
        int c = sum (p, q);
        printf ("%d", c);
        free (p);
        free (q);
    }
    else {
        printf ("Could not allocate enough memory");
        return 1;
    }
    return 0;
}
----------------------------------------

int main () {
    int i1, i2;
    int *p = &i1;
    int *q = &i2;
    *p = 10;
    *q = 10;
    int c = sum (p, q);
    printf ("%d", c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31997371_31997457_1_13
31997371_31997525_1_19
Title: How can l initialize pointer type struct element 
----------------------------------------

int main (int argc, char const *argv []) {
    mstr p;
    type_tt t;
    int l = 42;
    t.m = &l;
    p.g.h = &t;
    printf ("l = %i\n", * p.g.h -> m);
    return 0;
}
----------------------------------------

int main (int argc, char const *argv []) {
    int l;
    mstr p;
    p.g.h = malloc (sizeof (*p.g.h));
    if (p.g.h == NULL)
        return -1;
    p.g.h->m = &l;
    free (p.g.h);
    type_tt t;
    p.g.h = &t;
    p.g.h->m = &l;
    printf ("*p.g.h->m is [%d]\n", * p.g.h -> m);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31999498_31999702_3_47
31999498_32003913_12_65
Title: Find consecutive rows of a 2D array with maximum number of 1s 
----------------------------------------

int main (void) {
    int a, b, answer, current, lower, upper;
    int n = 3;
    int lower_bound [6] = {0, 1, 2, 3, 1, 2};
    int upper_bound [6] = {3, 4, 3, 5, 2, 4};
    int m = 6;
    int harr [6] = {0};
    for (int i = 0; i < m; i++) {
        a = lower_bound[i];
        b = upper_bound[i];
        harr[a]++;
        if (b < m - 1)
            harr[b + 1]--;
    }
    for (int i = 1; i < m; i++) {
        harr[i] += harr[i - 1];
    }
    answer = 0;
    for (int i = 0; i < n; i++) {
        answer = answer + harr[i];
    }
    current = answer;
    lower = 0;
    upper = n - 1;
    for (int i = n; i < m; i++) {
        current = current + harr[i] - harr[i - n];
        if (current > answer) {
            answer = current;
            lower = i - n + 1;
            upper = i;
        }
    }
    printf ("Max %d rows are %d to %d with a total sum of %d ones\n", n, lower, upper, answer);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    size_t ncr = argc > 1 ? (size_t) atoi (argv[1]) : 3;
    int a [] [5] = {{1, 2, 3, 4, 5}, {2, 3, 4, 5, 6}, {3, 4, 5, 6, 7}, {4, 5, 6, 7, 8}, {3, 4, 5, 6, 7}, {0, 1, 2, 3, 4}, {1, 2, 3, 4, 5}};
    int sum [ncr];
    int sumn = 0;
    int max = INT_MIN;
    size_t m, n, i, j, k, row = 0, sidx;
    m = sizeof a / sizeof *a;
    n = sizeof *a / sizeof **a;
    for (k = 0; k < ncr; k++)
        sum[k] = 0;
    for (i = 0; i < m; i++) {
        sidx = i % ncr;
        if (i > ncr - 1) {
            for (k = 0; k < ncr; k++)
                sumn += sum[k];
            max = sumn > max ? row = i, sumn : max;
            sum[sidx] = sumn = 0;
        }
        for (j = 0; j < n; j++)
            sum[sidx] += a[i][j];
    }
    printf ("\n The maximum sum for %zu consecutive rows: %d\n\n", ncr, max);
    for (i = row - ncr; i < row; i++) {
        printf (" row[%zu] : ", i);
        for (j = 0; j < n; j++)
            printf (" %d", a[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32016815_32016977_4_14
32016815_32017073_3_15
Title: Split Integer into two separate Integers 
----------------------------------------

int main (void) {
    int x, y = 0, len, digit;
    int n = 123456;
    len = floor (log10 (abs (n))) + 1;
    x = n / pow (10, len / 2);
    y = n - x * pow (10, len / 2;
    printf ("First Half = %d", x);
    printf ("\nSecond Half = %d", y);
}
----------------------------------------

int main (void) {
    int a [] = {-12, 1234, -123456, 12345678, -1234567890};
    const int Base = 10;
    for (size_t i = 0; i < sizeof (a) / sizeof (*a); i++) {
        int divisor = Base;
        while (a[i] / (a[i] < 0 ? -divisor : divisor) > divisor)
            divisor *= Base;
        printf ("%d\t%d\n", a [i] / divisor, a [i] % divisor);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32016815_32016977_4_14
32016815_32017185_11_22
Title: Split Integer into two separate Integers 
----------------------------------------

int main (void) {
    int x, y = 0, len, digit;
    int n = 123456;
    len = floor (log10 (abs (n))) + 1;
    x = n / pow (10, len / 2);
    y = n - x * pow (10, len / 2;
    printf ("First Half = %d", x);
    printf ("\nSecond Half = %d", y);
}
----------------------------------------

int main (void) {
    int n = 123456;
    int divider = 1;
    for (int i = 0; i < getNumberOfDigits (n) / 2; i++) {
        divider *= 10;
    }
    printf ("%d, %d\n", n / divider, n % divider);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32016815_32016977_4_14
32016815_32018883_28_45
Title: Split Integer into two separate Integers 
----------------------------------------

int main (void) {
    int x, y = 0, len, digit;
    int n = 123456;
    len = floor (log10 (abs (n))) + 1;
    x = n / pow (10, len / 2);
    y = n - x * pow (10, len / 2;
    printf ("First Half = %d", x);
    printf ("\nSecond Half = %d", y);
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "USAGE: %s integer_value_with_even_number_of_digits\n", argv [0]);
        exit (0);
    }
    int val = (int) strtol (argv[1], NULL, 10);
    int lo, hi;
    if (split (val, &lo, &hi))
        printf ("val: %d, lo: %d, hi: %d\n", val, lo, hi);
    else
        fprintf (stderr, "USAGE: %s integer_value_with_even_number_of_digits\n", argv[0]);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32016815_32017073_3_15
32016815_32017185_11_22
Title: Split Integer into two separate Integers 
----------------------------------------

int main (void) {
    int a [] = {-12, 1234, -123456, 12345678, -1234567890};
    const int Base = 10;
    for (size_t i = 0; i < sizeof (a) / sizeof (*a); i++) {
        int divisor = Base;
        while (a[i] / (a[i] < 0 ? -divisor : divisor) > divisor)
            divisor *= Base;
        printf ("%d\t%d\n", a [i] / divisor, a [i] % divisor);
    }
}
----------------------------------------

int main (void) {
    int n = 123456;
    int divider = 1;
    for (int i = 0; i < getNumberOfDigits (n) / 2; i++) {
        divider *= 10;
    }
    printf ("%d, %d\n", n / divider, n % divider);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32016815_32017073_3_15
32016815_32018883_28_45
Title: Split Integer into two separate Integers 
----------------------------------------

int main (void) {
    int a [] = {-12, 1234, -123456, 12345678, -1234567890};
    const int Base = 10;
    for (size_t i = 0; i < sizeof (a) / sizeof (*a); i++) {
        int divisor = Base;
        while (a[i] / (a[i] < 0 ? -divisor : divisor) > divisor)
            divisor *= Base;
        printf ("%d\t%d\n", a [i] / divisor, a [i] % divisor);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "USAGE: %s integer_value_with_even_number_of_digits\n", argv [0]);
        exit (0);
    }
    int val = (int) strtol (argv[1], NULL, 10);
    int lo, hi;
    if (split (val, &lo, &hi))
        printf ("val: %d, lo: %d, hi: %d\n", val, lo, hi);
    else
        fprintf (stderr, "USAGE: %s integer_value_with_even_number_of_digits\n", argv[0]);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32016815_32017185_11_22
32016815_32018883_28_45
Title: Split Integer into two separate Integers 
----------------------------------------

int main (void) {
    int n = 123456;
    int divider = 1;
    for (int i = 0; i < getNumberOfDigits (n) / 2; i++) {
        divider *= 10;
    }
    printf ("%d, %d\n", n / divider, n % divider);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "USAGE: %s integer_value_with_even_number_of_digits\n", argv [0]);
        exit (0);
    }
    int val = (int) strtol (argv[1], NULL, 10);
    int lo, hi;
    if (split (val, &lo, &hi))
        printf ("val: %d, lo: %d, hi: %d\n", val, lo, hi);
    else
        fprintf (stderr, "USAGE: %s integer_value_with_even_number_of_digits\n", argv[0]);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32039127_32039195_4_23
32039127_32039230_4_17
Title: C: Program to delete characters other than alphabetical 
----------------------------------------

int main (void) {
    char name [] = " William B. Gates";
    printf ("\"%s\"\n", name);
    size_t j = 0;
    for (size_t i = 0; name[i] != '\0'; i++) {
        if (isalpha ((unsigned char) name[i])) {
            if (j != i)
                name[j] = name[i];
            ++j;
        }
    }
    name[j] = '\0';
    printf ("\"%s\"\n", name);
}
----------------------------------------

int main (void) {
    char name [] = " William B. Gates";
    char *dst = name, *src;
    for (src = name; *src; ++src) {
        if (isalpha ((unsigned char) *src))
            *dst++ = *src;
    }
    *dst = 0;
    printf ("result: %s\n", name);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32039127_32039195_4_23
32039127_32040446_4_26
Title: C: Program to delete characters other than alphabetical 
----------------------------------------

int main (void) {
    char name [] = " William B. Gates";
    printf ("\"%s\"\n", name);
    size_t j = 0;
    for (size_t i = 0; name[i] != '\0'; i++) {
        if (isalpha ((unsigned char) name[i])) {
            if (j != i)
                name[j] = name[i];
            ++j;
        }
    }
    name[j] = '\0';
    printf ("\"%s\"\n", name);
}
----------------------------------------

int main (void) {
    char name [] = " William B. Gates";
    printf ("\"%s\"\n", name);
    size_t src = 0;
    size_t dest = 0;
    for (; name[src]; src++) {
        if (isalpha (name[src])) {
            name[dest] = tolower (name[src]);
            dest++;
        }
    }
    name[dest] = '\0';
    printf ("\"%s\"\n", name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32039127_32039230_4_17
32039127_32040446_4_26
Title: C: Program to delete characters other than alphabetical 
----------------------------------------

int main (void) {
    char name [] = " William B. Gates";
    char *dst = name, *src;
    for (src = name; *src; ++src) {
        if (isalpha ((unsigned char) *src))
            *dst++ = *src;
    }
    *dst = 0;
    printf ("result: %s\n", name);
}
----------------------------------------

int main (void) {
    char name [] = " William B. Gates";
    printf ("\"%s\"\n", name);
    size_t src = 0;
    size_t dest = 0;
    for (; name[src]; src++) {
        if (isalpha (name[src])) {
            name[dest] = tolower (name[src]);
            dest++;
        }
    }
    name[dest] = '\0';
    printf ("\"%s\"\n", name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32046240_32047158_3_14
32046240_32047537_12_58
Title: Read Hex from a file and convert 2 Bytes into Signed int 
----------------------------------------

int main (int argc, char *argv []) {
    int msb = 0xff;
    int lsb = 0xcf;
    int value = (((msb & 0xff) << 8) | (lsb & 0xff));
    if (value >= 0x8000)
        value = -(0x10000 - value);
    printf ("%d\n", value);
    return 0;
}
----------------------------------------

int main () {
    char buffer [1024];
    char *record, *line;
    uint8_t val;
    char msb [16], lsb [16];
    int16_t rate;
    FILE *fstream = fopen ("log1.txt", "r");
    if (fstream == NULL) {
        printf ("\n file opening failed ");
        return -1;
    }
    while ((line = fgets (buffer, sizeof (buffer), fstream)) != NULL) {
        record = strtok (line, ",");
        int count = 0;
        while (record != NULL) {
            count++;
            if (count == 3) {
                printf ("string:%s\n", record);
                strcpy (msb, record);
            }
            if (count == 4) {
                printf ("string:%s\n", record);
                strcpy (lsb, record);
            }
            if (count == 5) {
                int16_t value = hexToInt (msb, lsb);
                printf ("rate: %.2f\n", value * 0.03125);
                getchar ();
            }
            record = strtok (NULL, ",");
        }
        ++i;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050413_1_18
32050068_32050513_1_20
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int height, i, row, j, no = 1;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (i = height; i > 0; i--) {
        if (no > 3)
            no = 1;
        for (row = 0; row < i - 1; row++)
            printf (" ");
        for (j = height + 1; j > i; --j)
            printf ("%d", no);
        no++;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int height, i, row, j;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (i = height; i > 0; i--) {
        for (row = 0; row < i; row++) {
            printf (" ");
        }
        for (j = i; j <= height; j++) {
            printf ("%d", (height - i) % 3 + 1);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050413_1_18
32050068_32050572_3_23
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int height, i, row, j, no = 1;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (i = height; i > 0; i--) {
        if (no > 3)
            no = 1;
        for (row = 0; row < i - 1; row++)
            printf (" ");
        for (j = height + 1; j > i; --j)
            printf ("%d", no);
        no++;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    int width = 7;
    int height = 7;
    int b = 3;
    for (i = 1; height >= i; ++i) {
        for (j = 1; width >= j; ++j) {
            if (width - i < j) {
                int x = (i % b);
                printf ("%d", x ? x : b);
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050413_1_18
32050068_32050720_3_25
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int height, i, row, j, no = 1;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (i = height; i > 0; i--) {
        if (no > 3)
            no = 1;
        for (row = 0; row < i - 1; row++)
            printf (" ");
        for (j = height + 1; j > i; --j)
            printf ("%d", no);
        no++;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter a non-negative number (0-exit): ");
        unsigned int n = 0;
        scanf ("%u", & n);
        if (!n)
            break;
        printf ("\n");
        for (unsigned int i = 0; i < n; i++) {
            const unsigned int k = i % 3 + 1;
            printf ("%*d", n - i, k);
            for (unsigned int j = 0; j < i; j++)
                printf ("%d", k);
            printf ("\n");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050413_1_18
32050068_32052105_3_15
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int height, i, row, j, no = 1;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (i = height; i > 0; i--) {
        if (no > 3)
            no = 1;
        for (row = 0; row < i - 1; row++)
            printf (" ");
        for (j = height + 1; j > i; --j)
            printf ("%d", no);
        no++;
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int height, j, n = 0;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (j = 0; j < height; n *= 10) {
        printf ("%*d\n", height + 1, ++ n * (1 + j ++ % 3));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050513_1_20
32050068_32050572_3_23
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int height, i, row, j;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (i = height; i > 0; i--) {
        for (row = 0; row < i; row++) {
            printf (" ");
        }
        for (j = i; j <= height; j++) {
            printf ("%d", (height - i) % 3 + 1);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    int width = 7;
    int height = 7;
    int b = 3;
    for (i = 1; height >= i; ++i) {
        for (j = 1; width >= j; ++j) {
            if (width - i < j) {
                int x = (i % b);
                printf ("%d", x ? x : b);
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050513_1_20
32050068_32050720_3_25
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int height, i, row, j;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (i = height; i > 0; i--) {
        for (row = 0; row < i; row++) {
            printf (" ");
        }
        for (j = i; j <= height; j++) {
            printf ("%d", (height - i) % 3 + 1);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter a non-negative number (0-exit): ");
        unsigned int n = 0;
        scanf ("%u", & n);
        if (!n)
            break;
        printf ("\n");
        for (unsigned int i = 0; i < n; i++) {
            const unsigned int k = i % 3 + 1;
            printf ("%*d", n - i, k);
            for (unsigned int j = 0; j < i; j++)
                printf ("%d", k);
            printf ("\n");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050513_1_20
32050068_32052105_3_15
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int height, i, row, j;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (i = height; i > 0; i--) {
        for (row = 0; row < i; row++) {
            printf (" ");
        }
        for (j = i; j <= height; j++) {
            printf ("%d", (height - i) % 3 + 1);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int height, j, n = 0;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (j = 0; j < height; n *= 10) {
        printf ("%*d\n", height + 1, ++ n * (1 + j ++ % 3));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050572_3_23
32050068_32050720_3_25
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int i, j;
    int width = 7;
    int height = 7;
    int b = 3;
    for (i = 1; height >= i; ++i) {
        for (j = 1; width >= j; ++j) {
            if (width - i < j) {
                int x = (i % b);
                printf ("%d", x ? x : b);
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter a non-negative number (0-exit): ");
        unsigned int n = 0;
        scanf ("%u", & n);
        if (!n)
            break;
        printf ("\n");
        for (unsigned int i = 0; i < n; i++) {
            const unsigned int k = i % 3 + 1;
            printf ("%*d", n - i, k);
            for (unsigned int j = 0; j < i; j++)
                printf ("%d", k);
            printf ("\n");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050572_3_23
32050068_32052105_3_15
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main () {
    int i, j;
    int width = 7;
    int height = 7;
    int b = 3;
    for (i = 1; height >= i; ++i) {
        for (j = 1; width >= j; ++j) {
            if (width - i < j) {
                int x = (i % b);
                printf ("%d", x ? x : b);
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int height, j, n = 0;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (j = 0; j < height; n *= 10) {
        printf ("%*d\n", height + 1, ++ n * (1 + j ++ % 3));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32050068_32050720_3_25
32050068_32052105_3_15
Title: C programming nested for loop print half pyramid 
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter a non-negative number (0-exit): ");
        unsigned int n = 0;
        scanf ("%u", & n);
        if (!n)
            break;
        printf ("\n");
        for (unsigned int i = 0; i < n; i++) {
            const unsigned int k = i % 3 + 1;
            printf ("%*d", n - i, k);
            for (unsigned int j = 0; j < i; j++)
                printf ("%d", k);
            printf ("\n");
        }
        printf ("\n");
    }
}
----------------------------------------

int main () {
    int height, j, n = 0;
    printf ("Enter the height: ");
    scanf ("%d", & height);
    for (j = 0; j < height; n *= 10) {
        printf ("%*d\n", height + 1, ++ n * (1 + j ++ % 3));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32062659_32063475_41_53
32062659_32086802_33_43
Title: How to implement Quicksort in C with pointers? 
----------------------------------------

void quickSort (int *a, int low, int high) {
    assert (a != NULL);
    if (high <= low) {
        return;
    }
    int k = partition (a, low, high);
    quickSort (a, low, k - 1);
    quickSort (a, k + 1, high);
}
----------------------------------------

void quickSort (int *a, int L, int R) {
    int k;
    if (R <= L) {
        return;
    }
    k = partition (a, L, R);
    quickSort (a, L, k);
    quickSort (a, k + 1, R);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32062659_32063475_55_84
32062659_32086802_52_84
Title: How to implement Quicksort in C with pointers? 
----------------------------------------

int partition (int *a, int low, int high) {
    assert (a != NULL);
    bool flag = false;
    int first = low;
    int last = high + 1;
    int pivot = a[low];
    while (!flag) {
        while (a[++first] < pivot) {
            if (first == high)
                flag = true;
        }
        while (a[--last] > pivot) {
            if (last == low)
                flag = true;
        }
        if (first >= last) {
            flag = true;
        }
        else {
            swap (& a [first], & a [last]);
        }
    }
    swap (& a [low], & a [last]);
    return last;
}
----------------------------------------

int partition (int *a, int L, int R) {
    int pivot;
    int help;
    int Small;
    int Big;
    Small = L;
    Big = R - 1;
    pivot = a[R - 1];
    while (Big > Small) {
        if (a[Big - 1] > pivot) {
            swap (& a [Big], & a [Big - 1]);
            Big--;
        }
        else {
            swap (& a [Big - 1], & a [Small]);
            Small++;
        }
    }
    return Big;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32067403_32067697_3_23
32067403_32067855_1_27
Title: Set variables by using fgetc(stdin) 
----------------------------------------

int main (void) {
    int ch;
    int firstNumber = 0, secondNumber = 0, b = 0;
    char str;
    printf ("Enter two numbers and a string: ");
    while ((ch = fgetc (stdin)) != '\n') {
        if (ch != ' ') {
            if (b == 0)
                firstNumber = firstnumber * 10 + ch - '0';
            else if (b == 1)
                secondNumber = secondnumber * 10 + ch - '0';
            else
                str = ch;
        }
        else
            b++;
    }
    printf ("%d %d %c", firstNumber, secondNumber, str);
    return 0;
}
----------------------------------------

int main () {
    int ch, i = 0;
    int firstNumber, secondNumber;
    const char seperator [2] = " -";
    char buffer [100];
    char *string;
    printf ("Enter two numbers and a string: ");
    while ((ch = fgetc (stdin)) != '\n') {
        buff[i++] = ch;
    }
    firstNumber = atoi (strtok (buff, seperator));
    printf ("%d\n", firstNumber);
    secondNumber = atoi (strtok (NULL, seperator));
    printf ("%d\n", secondNumber);
    string = strtok (NULL, seperator);
    printf ("%s\n", string);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32067403_32067697_3_23
32067403_32068836_4_17
Title: Set variables by using fgetc(stdin) 
----------------------------------------

int main (void) {
    int ch;
    int firstNumber = 0, secondNumber = 0, b = 0;
    char str;
    printf ("Enter two numbers and a string: ");
    while ((ch = fgetc (stdin)) != '\n') {
        if (ch != ' ') {
            if (b == 0)
                firstNumber = firstnumber * 10 + ch - '0';
            else if (b == 1)
                secondNumber = secondnumber * 10 + ch - '0';
            else
                str = ch;
        }
        else
            b++;
    }
    printf ("%d %d %c", firstNumber, secondNumber, str);
    return 0;
}
----------------------------------------

int main () {
    int firstNumber, secondNumber;
    char str [100];
    char buffer [100];
    printf ("Enter two numbers and a string: ");
    fgets (buffer, 1024, stdin);
    sscanf (buffer, "%d %d %s", & firstNumber, & secondNumber, str);
    printf ("%d %d %s\n", firstNumber, secondNumber, str);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32067403_32067855_1_27
32067403_32068836_4_17
Title: Set variables by using fgetc(stdin) 
----------------------------------------

int main () {
    int ch, i = 0;
    int firstNumber, secondNumber;
    const char seperator [2] = " -";
    char buffer [100];
    char *string;
    printf ("Enter two numbers and a string: ");
    while ((ch = fgetc (stdin)) != '\n') {
        buff[i++] = ch;
    }
    firstNumber = atoi (strtok (buff, seperator));
    printf ("%d\n", firstNumber);
    secondNumber = atoi (strtok (NULL, seperator));
    printf ("%d\n", secondNumber);
    string = strtok (NULL, seperator);
    printf ("%s\n", string);
    return (0);
}
----------------------------------------

int main () {
    int firstNumber, secondNumber;
    char str [100];
    char buffer [100];
    printf ("Enter two numbers and a string: ");
    fgets (buffer, 1024, stdin);
    sscanf (buffer, "%d %d %s", & firstNumber, & secondNumber, str);
    printf ("%d %d %s\n", firstNumber, secondNumber, str);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32070076_32070412_1_10
32070076_32070935_1_10
Title: Getting empty when using my own strcopy function 
----------------------------------------

void strcopy (char *src, char **_dst) {
    int len = strlen (src) + 1;
    char *dst = malloc (len);
    *_dst = dst;
    while (*src) {
        *dst = *src;
        src++;
        dst++;
    }
    *dst = '\0';
}
----------------------------------------

void strcopy (char **src, char **dst) {
    int len = strlen (*src) + 1;
    *dst = (char *) malloc (len);
    int j;
    for (j = 0; j < strlen (*src); j++) {
        dst[j] = src[j];
    }
    dst[j] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32123619_32123929_3_19
32123619_32124292_7_51
Title: C: store tokens in growing array 
----------------------------------------

int main (void) {
    char line [] = "43 2 6 120 5 23";
    size_t numCount = 1;
    char *ptr = line;
    while (*ptr != '\0') {
        if (*ptr == ' ') {
            numCount++;
        }
        ptr++;
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int *array = NULL;
    size_t idx = 0, max_idx = 0;
    size_t arraysize = MAXI;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed. '%s'\n", argc > 1 ? argv [1] : "stdin");
        return 1;
    }
    array = calloc (MAXI, sizeof *array);
    while (fscanf (fp, "%d", &array[idx]) == 1) {
        idx++;
        if (idx == arraysize) {
            int *tmp = realloc (array, arraysize * sizeof *array * 2);
            if (!tmp) {
                fprintf (stderr, "error: realloc - virtual memory exhausted.\n");
                return 1;
            }
            array = tmp;
            memset (array + arraysize, 0, arraysize);
            arraysize *= 2;
        }
    }
    if (fp != stdin)
        fclose (fp);
    max_idx = idx;
    for (idx = 0; idx < max_idx; idx++)
        printf (" array[%3zu] : %d\n", idx, array[idx]);
    free (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32123619_32123929_3_19
32123619_32125906_24_37
Title: C: store tokens in growing array 
----------------------------------------

int main (void) {
    char line [] = "43 2 6 120 5 23";
    size_t numCount = 1;
    char *ptr = line;
    while (*ptr != '\0') {
        if (*ptr == ' ') {
            numCount++;
        }
        ptr++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char s [] = " 43 2 6 120 5 23";
    int *a;
    size_t n = get_data (s, &a);
    if (n) {
        for (size_t i = 0; i < n; i++)
            printf ("%d ", a[i]);
        printf ("\n");
    }
    free (a);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32123619_32124292_7_51
32123619_32125906_24_37
Title: C: store tokens in growing array 
----------------------------------------

int main (int argc, char **argv) {
    int *array = NULL;
    size_t idx = 0, max_idx = 0;
    size_t arraysize = MAXI;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed. '%s'\n", argc > 1 ? argv [1] : "stdin");
        return 1;
    }
    array = calloc (MAXI, sizeof *array);
    while (fscanf (fp, "%d", &array[idx]) == 1) {
        idx++;
        if (idx == arraysize) {
            int *tmp = realloc (array, arraysize * sizeof *array * 2);
            if (!tmp) {
                fprintf (stderr, "error: realloc - virtual memory exhausted.\n");
                return 1;
            }
            array = tmp;
            memset (array + arraysize, 0, arraysize);
            arraysize *= 2;
        }
    }
    if (fp != stdin)
        fclose (fp);
    max_idx = idx;
    for (idx = 0; idx < max_idx; idx++)
        printf (" array[%3zu] : %d\n", idx, array[idx]);
    free (array);
    return 0;
}
----------------------------------------

int main (void) {
    char s [] = " 43 2 6 120 5 23";
    int *a;
    size_t n = get_data (s, &a);
    if (n) {
        for (size_t i = 0; i < n; i++)
            printf ("%d ", a[i]);
        printf ("\n");
    }
    free (a);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32127072_32128214_8_35
32127072_32129184_7_22
Title: scanf doesn't work because of dup2 
----------------------------------------

int main () {
    int listenfd = socket (AF_INET, SOCK_STREAM, 0);
    int dupfd = 0;
    int connfd, n;
    struct sockaddr_in servaddr, cliaddr;
    socklen_t clilen;
    bzero (& servaddr, sizeof (servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl (INADDR_ANY);
    servaddr.sin_port = htons (32000);
    bind (listenfd, (struct sockaddr *) & servaddr, sizeof (servaddr));
    listen (listenfd, 1024);
    connfd = accept (listenfd, (struct sockaddr *) &cliaddr, &clilen);
    dup2 (connfd, dupfd);
    puts ("Type something to exit");
    int exit = -1;
    scanf ("%d", & exit);
    printf ("%d\n", exit);
    puts ("Got exit signal");
    return 0;
}
----------------------------------------

int main () {
    int listenfd = socket (AF_INET, SOCK_STREAM, 0);
    int dupfd = 0;
    dup2 (listenfd, dupfd);
    puts ("Type something to exit");
    int exit = -1;
    char buf [16];
    int n = read (0, buf, 16);
    printf ("Got %d (%d)\n", n, errno);
    puts ("Got exit signal");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3212930_3213080_1_23
3212930_3213679_14_34
Title: Implementing producers/consumers using mutex 
----------------------------------------

int main () {
    pthread_t a_thread;
    pthread_mutex_init (& work_mutex, NULL);
    pthread_create (& a_thread, NULL, thread_start, NULL);
    memset (work_area, '\0', sizeof (work_area));
    char input [WORK_SIZE - 1];
    while (1) {
        printf ("Enter some text\n");
        fgets (input, WORK_SIZE, stdin);
        pthread_mutex_lock (& work_mutex);
        strcpy (work_area, input);
        pthread_mutex_unlock (& work_mutex);
    }
    return 0;
}
----------------------------------------

int main () {
    pthread_t a_thread;
    pthread_mutex_init (& work_mutex, NULL);
    work_area[0] = 0;
    pthread_create (& a_thread, NULL, thread_start, NULL);
    while (1) {
        printf ("Enter some text\n");
        fgets (input_area, WORK_SIZE, stdin);
        pthread_mutex_lock (& work_mutex);
        while (work_area[0] != 0) {
            pthread_mutex_unlock (& work_mutex);
            sleep (1);
            pthread_mutex_lock (& work_mutex);
        }
        memcpy (work_area, input_area, WORK_SIZE);
        pthread_mutex_unlock (& work_mutex);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3212930_3213080_25_41
3212930_3213679_36_50
Title: Implementing producers/consumers using mutex 
----------------------------------------

void *thread_start (void *arg) {
    sleep (1);
    while (1) {
        pthread_mutex_lock (& work_mutex);
        if (work_area[0] != '\0') {
            printf ("You enetered %d char\n", strlen (work_area));
            work_area[0] = '\0';
        }
        pthread_mutex_unlock (& work_mutex);
    }
}
----------------------------------------

void *thread_start (void *arg) {
    while (1) {
        pthread_mutex_lock (& work_mutex);
        if (work_area[0] > 0) {
            printf ("you enetered %d char\n", strlen (work_area));
            work_area[0] = 0;
            pthread_mutex_unlock (& work_mutex);
        }
        else {
            pthread_mutex_unlock (& work_mutex);
            sleep (1);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3214496_3289700_1_26
3214496_3363386_22_45
Title: While performing operations will the bookid's get changed? 
----------------------------------------

void add (void) {
    static int nextBookId = 0;
    int i = count;
    char ch [30];
    if (count >= 40)
        return;
    clrscr ();
    printf ("Enter books name:\n");
    gets (b [i].name);
    printf ("Enter author's name\n");
    gets (b [i].author);
    printf ("Enter price:\n");
    gets (ch);
    b[i].price = atoi (ch);
    b[i].bookid = nextBookId++;
    printf ("Dear User,the book has succesfully been added.The book id is %d", b [i].bookid);
    count++;
    getch ();
}
----------------------------------------

void add (void) {
    int i = findEmpty ();
    char ch [MAXSTR];
    if (i < 0)
        return;
    clrscr ();
    printf ("Enter books name:\n");
    fgets (b [i].name, MAXSTR, stdin);
    printf ("Enter author's name\n");
    fgets (b [i].author, MAXSTR, stdin);
    printf ("Enter price:\n");
    fgets (ch, MAXSTR, stdin);
    b[i].price = atoi (ch);
    b[i].bookid = i;
    b[i].valid = 1;
    printf ("Dear User,the book has succesfully been added.The book id is %d", b [i].bookid);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32151175_32151236_17_40
32151175_32151375_18_50
Title: C struct quick sort for strings 
----------------------------------------

int main (int argc, char **argv) {
    int c = 2;
    int i;
    struct book *ptr = malloc (c * sizeof (struct book));
    for (i = 0; i < c; i++) {
        printf ("Title: ");
        scanf ("%s", ptr [i].title);
        printf ("Autor: ");
        scanf ("%s", ptr [i].autor);
    }
    for (i = 0; i < c; i++) {
        printf ("Before Quick sort Autor: %s, Title: %s \n", ptr [i].autor, ptr [i].title);
    }
    qsort (ptr, 2, sizeof (struct book), comparator);
    printf ("QSORT DONe...\n\n");
    for (i = 0; i < c; i++) {
        printf ("TEST");
        printf ("After quick sort: Autor: %s, Title: %s \n", ptr [i].autor, ptr [i].title);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int c = 3;
    int i;
    struct book *ptr = (struct book *) malloc (c * sizeof (struct book));
    if (ptr == NULL) {
        printf ("Could not allocate data\n");
        return 1;
    }
    for (i = 0; i < c; i++) {
        printf ("Title: ");
        scanf ("%s", ptr [i].title);
        printf ("Autor: ");
        scanf ("%s", ptr [i].autor);
    }
    for (i = 0; i < c; i++) {
        printf ("Before Quick sort Autor: %s, Title : %s \n", ptr [i].autor, ptr [i].title);
    }
    qsort (ptr, c, sizeof (struct book), comparator);
    printf ("QSORT Done...\n\n");
    for (i = 0; i < c; i++) {
        printf ("TEST");
        printf ("After quick sort: Autor: %s, Title: %s \n", ptr [i].autor, ptr [i].title);
    }
    free (ptr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32151415_32151436_1_14
32151415_32151621_1_12
Title: C programming for loop start from right hand side 
----------------------------------------

int digitValue1 (int num, int k) {
    int result, i;
    char str [15];
    sprintf (str, "%d", num);
    int len = strlen (str);
    for (i = len - 1; i >= 0; i--) {
        printf ("%d ", i);
        if (len - i == k) {
            result = str[i] - '0';
        }
    }
    return result;
}
----------------------------------------

int digitValue1 (int num, int position) {
    do {
        int digit = num % 10;
        num /= 10;
        if (position-- == 0)
            return digit;
    }
    while (num != 0);
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32167067_32228361_14_86
32167067_32231588_49_59
Title: Encoding number to date time 
----------------------------------------

int main (int argc, char *argv []) {
    uint32_t datetime = strtoul (argv[1], NULL, 16);
    uint16_t mydate = datetime >> 16;
    uint16_t mytime = datetime & 0xFFFF;
    int new_encoding = (mytime & 0x8000) != 0;
    time_t linuxSeconds = (mydate / 3);
    uint8_t third_Count = mydate % 3;
    if (new_encoding) {
        linuxSeconds += 8765;
    }
    else {
        linuxSeconds += 5843;
    }
    linuxSeconds *= 24;
    linuxSeconds *= 3600;
    linuxSeconds += (mytime & 0x7FFF);
    linuxSeconds += (third_Count * 28800);
    struct tm *mytm = gmtime (&linuxSeconds);
    int daydiff = 0, year;
    for (year = new_encoding ? 1994 : 1986; year <= mytm->tm_year + 1900; year++) {
        if (year < mytm->tm_year + 1900) {
            if (new_encoding) {
                if (!isleap (year)) {
                    daydiff--;
                }
            }
            else {
                if (year != (mytm->tm_year + 1900) && isleap (year)) {
                    daydiff++;
                }
            }
        }
    }
    if (mydate < 0x0003) {
        linuxSeconds += 86400;
    }
    else {
        linuxSeconds += daydiff * 86400;
    }
    printf (ctime (& linuxSeconds));
    printf (asctime (gmtime (& linuxSeconds)));
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    decrypt (0x54FEC072);
    decrypt (0x5501DC8B);
    decrypt (0x5701DC8B);
    decrypt (0x42238F96);
    decrypt (0x3CF5284B);
    decrypt (0x3AF42849);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32167800_32167867_12_31
32167800_32170066_10_22
Title: Insertion at end in circular linked list not working in C 
----------------------------------------

node *insertatend (node *head, int value) {
    node *temp, *p;
    p = head;
    temp = (node *) malloc (sizeof (node));
    temp->data = value;
    if (head == NULL) {
        head = temp;
    }
    else {
        while (p->next != head)
            p = p->next;
        p->next = temp;
    }
    temp->next = head;
    return head;
}
----------------------------------------

node *insertatend (node *tail, int value) {
    node *p;
    p = malloc (sizeof (node));
    p->data = value;
    if (tail == NULL) {
        p->next = p;
    }
    else {
        p->next = tail->next;
        tail->next = p;
    }
    return p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32167800_32167867_33_47
32167800_32170066_24_37
Title: Insertion at end in circular linked list not working in C 
----------------------------------------

void display (node *head) {
    node *p = head;
    if (head == NULL) {
        printf ("\nlinked list is empty\n");
        return;
    }
    do {
        printf ("%d  ", p -> data);
        p = p->next;
    }
    while (p != head);
    printf ("\n");
}
----------------------------------------

void display (node *tail) {
    node *p = tail;
    if (p == NULL) {
        printf ("\nlinked list is empty\n");
        return;
    }
    do {
        p = p->next;
        printf ("%d  ", p -> data);
    }
    while (p != tail);
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3218232_3218258_1_21
3218232_3237503_178_206
Title: sorting not being performed 
----------------------------------------

void sort (void) {
    int in, out;
    struct book temp;
    for (out = 0; out < count - 1; out++) {
        for (in = out + 1; in < count; in++) {
            if (b[out].price > b[in].price) {
                temp = b [out] b [out] = b [in];
                b[in] = temp;
            }
        }
    }
    printf ("Dear user,the books are sorted by price.\n");
    getch ();
}
----------------------------------------

void sort (Library * const library) {
    printf ("Sort by :\n");
    printf ("1) Book name\n");
    printf ("2) Author name\n");
    printf ("3) Price\n");
    printf ("Your choice : ");
    int (*compare) (void const *, void const *) = NULL;
    int choice = get_choice (1, 3);
    switch (choice) {
    case 3 :
        compare = cmp_by_price;
        break;
    case 2 :
        compare = cmp_by_author;
        break;
    case 1 :
        compare = cmp_by_name;
        break;
    default :
        break;
    }
    qsort (library -> books, library -> inventory, sizeof (Book), compare);
    printf ("Sorted :\n");
    print_library (library);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32189856_32190392_1_15
32189856_32190502_1_18
Title: sigsegv on CloseHandle on an open pipe 
----------------------------------------

WINBOOL PipeClose (struct pipe_settings *pipe_settings) {
    BOOL bResult = TRUE;
    if (pipe_settings->ol.hEvent != NULL) {
        bResult = bResult && CloseHandle (pipe_settings->ol.hEvent);
        pipe_settings->ol.hEvent = NULL;
    }
    if (pipe_settings->hPipe != INVALID_HANDLE_VALUE) {
        bResult = bResult && CloseHandle (pipe_settings->hPipe);
        pipe_settings->hPipe = INVALID_HANDLE_VALUE;
    }
    return bResult;
}
----------------------------------------

WINBOOL PipeClose (struct pipe_settings *pipe_settings) {
    bool failed = false;
    if (pipe_settings->ol.hEvent != NULL) {
        if (!CloseHandle (pipe_settings->ol.hEvent))
            failed = true;
    }
    if (pipe_settings->hPipe != INVALID_HANDLE_VALUE) {
        if (!CloseHandle (pipe_settings->hPipe))
            failed = true;
    }
    return failed ? 0 : 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32198302_32198823_1_18
32198302_32202823_1_16
Title: Exit 1 if the total numbers input is not 8 
----------------------------------------

int main () {
    int i, numb, counter = 0;
    printf ("enter 8 numbers");
    while (scanf ("%d", &numb) != EOF) {
        counter++;
    }
    if (counter < 8) {
        printf ("not enough numbers\n");
        exit (1);
    }
    return (0);
}
----------------------------------------

int main () {
    int i, numb;
    int sum = 0;
    char separator = ' ';
    printf ("enter 8 numbers");
    for (i = 0; i < 8; i++) {
        if (separator == '\n')
            break;
        scanf ("%d%c", & numb, & separator);
    }
    if (i < 8)
        exit (1);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32218726_32218897_27_50
32218726_32218970_19_36
Title: Struct member char * initialized in a function call as a parameter 
----------------------------------------

int main () {
    mystruct *msp = malloc (sizeof (mystruct));
    if (msp == NULL) {
        printf ("Oops! malloc for msp failed!");
        return -1;
    }
    init_chars (& (msp -> a));
    init_chars (& (msp -> b));
    init_chars (& (msp -> c));
    printf ("%s, %s, %s\n", msp -> a, msp -> b, msp -> c);
    free (msp -> a);
    free (msp -> b);
    free (msp -> c);
    free (msp);
    return 0;
}
----------------------------------------

int main () {
    mystruct *msp = malloc (sizeof (mystruct));
    if (msp == NULL) {
        printf ("malloc failed");
        exit (- 1);
    }
    init_chars (& msp -> a);
    init_chars (& msp -> b);
    init_chars (& msp -> c);
    printf ("%s, %s, %s\n", msp -> a, msp -> b, msp -> c);
    free (msp -> a);
    free (msp -> b);
    free (msp -> c);
    free (msp)
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32218726_32218897_9_25
32218726_32218970_7_17
Title: Struct member char * initialized in a function call as a parameter 
----------------------------------------

void init_chars (char **arg) {
    *arg = malloc (11);
    if (*arg == NULL) {
        printf ("Oops! malloc for *arg failed!");
        exit (- 1);
    }
    strcpy (* arg, "0123456789");
    printf ("%s\n", * arg);
}
----------------------------------------

void init_chars (char **arg) {
    *arg = malloc (sizeof (char) * 11);
    if (*arg == NULL) {
        printf ("malloc failed!");
        exit (- 1);
    }
    strcpy (* arg, "0123456789");
    printf ("%s\n", * arg);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32239887_32239953_3_24
32239887_32240048_3_15
Title: "How can I specifically take out numbers in an integer in C?" 
----------------------------------------

int main () {
    unsigned number;
    scanf ("%u\n", & number);
    unsigned result = 0;
    unsigned tmp = number;
    unsigned numberOfDigits = 0;
    do
        numberOfDigits++;
    while ((tmp /= 10) != 0);
    if (numberOfDigits % 2 != 0)
        number /= 10;
    while (number >= 10) {
        result += number % 10;
        number /= 100;
    }
    printf ("%u\n", result);
}
----------------------------------------

int main () {
    int SIN = 193456787;
    int a = 0, b = 0, cnt = 0;
    while (SIN > 0) {
        if (cnt % 2)
            b += SIN % 10;
        else
            a += SIN % 10;
        cnt++;
        SIN /= 10;
    }
    printf ("%d\n", cnt % 2 ? b : a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32255633_32255784_5_17
32255633_32256133_4_17
Title: How to take a number of NUMERIC user input and WITHOUT KNOWING the range 
----------------------------------------

int main () {
    char ch;
    int num;
    int i = 0, c;
    while (scanf ("%d%c", &arr[i++], &ch))
        if (ch == '\n')
            break;
    for (c = 0; c < i; c++)
        printf ("%d ", arr[c]);
    return 0;
}
----------------------------------------

int main () {
    char ch;
    unsigned num = 0;
    while (1 == scanf ("%c", &ch)) {
        if (ch == '\n' || isalpha (ch))
            break;
        if (isdigit (ch))
            num = num * 10 + ch - '0';
    }
    printf ("Number is %u\n", num);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32258781_32258849_1_15
32258781_32258858_1_11
Title: Check if value entered has digits in it 
----------------------------------------

int CFD (char password_entered []) {
    int i;
    int hasdigits = 0;
    for (i = 0; i < strlen (password_entered); i++) {
        if (isdigit (password_entered[i])) {
            printf ("%c - digit\n", password_entered [i]);
            hasdigits = 1;
        }
        else {
            printf ("%c - no digit\n", password_entered [i]);
        }
    }
    return hasdigits;
}
----------------------------------------

int CFD (char password_entered []) {
    int i;
    for (i = 0; i < strlen (password_entered); i++) {
        if (isdigit (password_entered[i])) {
            printf ("\ndigit(s).\n");
            return 1;
        }
    }
    printf ("\nno digit(s).\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32258781_32258849_1_15
32258781_32261544_1_13
Title: Check if value entered has digits in it 
----------------------------------------

int CFD (char password_entered []) {
    int i;
    int hasdigits = 0;
    for (i = 0; i < strlen (password_entered); i++) {
        if (isdigit (password_entered[i])) {
            printf ("%c - digit\n", password_entered [i]);
            hasdigits = 1;
        }
        else {
            printf ("%c - no digit\n", password_entered [i]);
        }
    }
    return hasdigits;
}
----------------------------------------

int CFD (char password_entered []) {
    int i;
    for (i = 0; i < strlen (password_entered); i++) {
        if (isdigit (password_entered[i])) {
            printf ("\ndigit(s).\n");
            return true;
        }
        else {printf ("\nno digit(s).\n");
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32264736_32265044_8_35
32264736_32265128_7_38
Title: calling fgets twice for multiple files 
----------------------------------------

int main (int argc, const char *argv []) {
    if (argc != 3) {
        fprintf (stderr, "incorrect arguments");
        exit (1);
    }
    FILE *input;
    char id [MAX];
    char name [MAX];
    input = fopen (argv[1], "r");
    while (fgets (id, sizeof id, input) != NULL) {
        printf ("ID: %s\n", id);
    }
    fclose (input);
    input = fopen (argv[2], "r");
    while (fgets (name, sizeof name, input) != NULL) {
        printf ("Name: %s\n", name);
    }
    fclose (input);
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    char id [MAX];
    char name [MAX];
    FILE *fp1;
    FILE *fp2;
    if (argc == 3) {
        fp1 = fopen (argv[1], "r");
        fp2 = fopen (argv[2], "r");
        if ((fp1 == NULL) || (fp2 == NULL)) {
            printf ("one of the file is not openend");
        }
        while (fgets (id, sizeof id, fp1) != NULL) {
            printf ("ID: %s\n", id);
        }
        while (fgets (name, sizeof name, fp2) != NULL) {
            printf ("Name: %s\n", name);
        }
    }
    else {
        printf ("Please check command line arguments");
    }
    fclose (fp1);
    fclose (fp2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32272343_32272481_2_23
32272343_33426443_4_23
Title: function convert string to int - C 
----------------------------------------

int main (void) {
    char car [200 + 1];
    int number;
    int i, x;
    int sum = 0;
    printf ("Write in number: \n");
    scanf ("%200s", car);
    for (i = 0; car[i]; i++) {
        x = car[i] - '0';
        sum = 10 * sum + x;
    }
    printf ("%d\n", sum)
    return 0;
}
----------------------------------------

int main () {
    char input [9];
    int digit, number = 0, i = 1;
    printf ("Enter Number:\n");
    scanf ("%s", input);
    digit = strlen (input) - 1;
    while (digit >= 0) {
        number = number + i * (input[digit] - '0');
        digit = digit - 1;
        i = i * 10;
    }
    printf ("%d", number);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32273655_32273913_4_25
32273655_32273971_4_33
Title: Check vowels occurence in a string 
----------------------------------------

int main () {
    int len, a = 0, e = 0, i = 0, o = 0, u = 0, it;
    char string [10000];
    scanf ("%d", & len);
    scanf ("%s", string);
    for (it = 0; it < len; it++) {
        if (string[it] == 'a')
            a = 1;
        else if (string[it] == 'e')
            e = 1;
        else if (string[it] == 'i')
            i = 1;
        else if (string[it] == 'o')
            o = 1;
        else if (string[it] == 'u')
            u = 1;
    }
    if (a && e && i && o && u)
        printf ("YES\n");
    else
        printf ("NO\n");
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    int foundA = 0, foundE = 0, foundI = 0, foundO = 0, foundU = 0;
    int i, length;
    char string [10000];
    scanf ("%d", & length);
    scanf ("%s", string);
    for (i = 0; i < length; length++) {
        if (string[i] == ('a'))
            foundA = 1;
        else if (string[i] == ('e'))
            foundE = 1;
        else if (string[i] == ('i'))
            foundI = 1;
        else if (string[i] == ('o'))
            foundO = 1;
        else if (string[i] == ('u'))
            foundU = 1;
    }
    if ((foundA == 1) && (foundE == 1) && (foundI == 1) && (foundO == 1) && (foundU == 1))
        printf ("YES");
    else
        printf ("NO");
    return 0;
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32273655_32273913_4_25
32273655_32391187_4_33
Title: Check vowels occurence in a string 
----------------------------------------

int main () {
    int len, a = 0, e = 0, i = 0, o = 0, u = 0, it;
    char string [10000];
    scanf ("%d", & len);
    scanf ("%s", string);
    for (it = 0; it < len; it++) {
        if (string[it] == 'a')
            a = 1;
        else if (string[it] == 'e')
            e = 1;
        else if (string[it] == 'i')
            i = 1;
        else if (string[it] == 'o')
            o = 1;
        else if (string[it] == 'u')
            u = 1;
    }
    if (a && e && i && o && u)
        printf ("YES\n");
    else
        printf ("NO\n");
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    int i, flag = 0;
    char string [10000], *ptr;
    char cmp [] = "aeiou";
    printf ("Please enter string = ");
    scanf ("%s", string);
    i = 0;
    while (cmp[i]) {
        ptr = string;
        while (*ptr) {
            if (cmp[i] == *ptr)
                break;
            ptr++;
        }
        if (*ptr != cmp[i++]) {
            flag = 1;
            break;
        }
    }
    if (flag == 1)
        printf ("NO");
    else
        printf ("YES");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32273655_32273971_4_33
32273655_32391187_4_33
Title: Check vowels occurence in a string 
----------------------------------------

int main () {
    int foundA = 0, foundE = 0, foundI = 0, foundO = 0, foundU = 0;
    int i, length;
    char string [10000];
    scanf ("%d", & length);
    scanf ("%s", string);
    for (i = 0; i < length; length++) {
        if (string[i] == ('a'))
            foundA = 1;
        else if (string[i] == ('e'))
            foundE = 1;
        else if (string[i] == ('i'))
            foundI = 1;
        else if (string[i] == ('o'))
            foundO = 1;
        else if (string[i] == ('u'))
            foundU = 1;
    }
    if ((foundA == 1) && (foundE == 1) && (foundI == 1) && (foundO == 1) && (foundU == 1))
        printf ("YES");
    else
        printf ("NO");
    return 0;
    getch ();
}
----------------------------------------

int main () {
    int i, flag = 0;
    char string [10000], *ptr;
    char cmp [] = "aeiou";
    printf ("Please enter string = ");
    scanf ("%s", string);
    i = 0;
    while (cmp[i]) {
        ptr = string;
        while (*ptr) {
            if (cmp[i] == *ptr)
                break;
            ptr++;
        }
        if (*ptr != cmp[i++]) {
            flag = 1;
            break;
        }
    }
    if (flag == 1)
        printf ("NO");
    else
        printf ("YES");
}
----------------------------------------

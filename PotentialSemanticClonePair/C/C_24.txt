$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_42237296_3_14
29020037_49926971_3_12
Title: A program that prints its input one word per line 
----------------------------------------

int main () {
    char ch;
    while ((ch = getchar ()) != EOF) {
        if (ch != '\n' && ch != ' ' && ch != '\t') {
            putchar (ch);
        }
        else {
            putchar ('\n');
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    while ((c = getchar ()) != EOF)
        if (c == '\t' || c == '\n' || c == ' ')
            putchar ('\n');
        else
            putchar (c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_42237296_3_14
29020037_49928440_6_31
Title: A program that prints its input one word per line 
----------------------------------------

int main () {
    char ch;
    while ((ch = getchar ()) != EOF) {
        if (ch != '\n' && ch != ' ' && ch != '\t') {
            putchar (ch);
        }
        else {
            putchar ('\n');
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    unsigned long long wc = 0;
    int state = OUT;
    int ch;
    while ((ch = getchar ()) != EOF) {
        if (state == OUT) {
            if (!isspace (ch)) {
                wc++;
                state = IN;
                putchar (ch);
            }
        }
        else {
            if (isspace (ch)) {
                putchar ('\n');
                state = OUT;
            }
            else {
                putchar (ch);
            }
        }
    }
    if (state == IN) {
        putchar ('\n');
    }
    printf ("Word count:%llu\n", wc);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_42237296_3_14
29020037_53185087_8_39
Title: A program that prints its input one word per line 
----------------------------------------

int main () {
    char ch;
    while ((ch = getchar ()) != EOF) {
        if (ch != '\n' && ch != ' ' && ch != '\t') {
            putchar (ch);
        }
        else {
            putchar ('\n');
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int nw = 0, c, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == SPACE || c == NEWLINE || c == TAB) {
            if (c == NEWLINE) {
                putchar ('\n');
            }
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    printf ("\nTotal word count: %d\n", nw);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_49926971_3_12
29020037_49928440_6_31
Title: A program that prints its input one word per line 
----------------------------------------

int main () {
    int c;
    while ((c = getchar ()) != EOF)
        if (c == '\t' || c == '\n' || c == ' ')
            putchar ('\n');
        else
            putchar (c);
    return 0;
}
----------------------------------------

int main (void) {
    unsigned long long wc = 0;
    int state = OUT;
    int ch;
    while ((ch = getchar ()) != EOF) {
        if (state == OUT) {
            if (!isspace (ch)) {
                wc++;
                state = IN;
                putchar (ch);
            }
        }
        else {
            if (isspace (ch)) {
                putchar ('\n');
                state = OUT;
            }
            else {
                putchar (ch);
            }
        }
    }
    if (state == IN) {
        putchar ('\n');
    }
    printf ("Word count:%llu\n", wc);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_49926971_3_12
29020037_53185087_8_39
Title: A program that prints its input one word per line 
----------------------------------------

int main () {
    int c;
    while ((c = getchar ()) != EOF)
        if (c == '\t' || c == '\n' || c == ' ')
            putchar ('\n');
        else
            putchar (c);
    return 0;
}
----------------------------------------

int main () {
    int nw = 0, c, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == SPACE || c == NEWLINE || c == TAB) {
            if (c == NEWLINE) {
                putchar ('\n');
            }
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    printf ("\nTotal word count: %d\n", nw);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29020037_49928440_6_31
29020037_53185087_8_39
Title: A program that prints its input one word per line 
----------------------------------------

int main (void) {
    unsigned long long wc = 0;
    int state = OUT;
    int ch;
    while ((ch = getchar ()) != EOF) {
        if (state == OUT) {
            if (!isspace (ch)) {
                wc++;
                state = IN;
                putchar (ch);
            }
        }
        else {
            if (isspace (ch)) {
                putchar ('\n');
                state = OUT;
            }
            else {
                putchar (ch);
            }
        }
    }
    if (state == IN) {
        putchar ('\n');
    }
    printf ("Word count:%llu\n", wc);
    return 0;
}
----------------------------------------

int main () {
    int nw = 0, c, state = OUT;
    while ((c = getchar ()) != EOF) {
        if (c == SPACE || c == NEWLINE || c == TAB) {
            if (c == NEWLINE) {
                putchar ('\n');
            }
            if (state == IN) {
                state = OUT;
                putchar ('\n');
            }
        }
        else {
            if (state == OUT) {
                state = IN;
                ++nw;
            }
            putchar (c);
        }
    }
    printf ("\nTotal word count: %d\n", nw);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29024042_29024066_1_11
29024042_29025633_1_13
Title: Having trouble with compiling linear search function in C 
----------------------------------------

void searcher (int *array, int n, int key) {
    int i;
    for (i = 0; i < n && array[i] != key; ++i)
        ;
    if (i < n)
        printf (" %d is present at index %d.\n", key, i);
    else
        printf (" %d is not present in the array.\n", key);
}
----------------------------------------

void searcher (int *array, int n, int key) {
    int flag = 1;
    for (int i = 0; i < n; i++) {
        if (array[i] == key) {
            flag = 0;
            printf (" %d is present at location %d.\n", key, i + 1);
            break;
        }
    }
    if (flag)
        printf (" %d is not present in the array.\n", key);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29025599_29025737_7_29
29025599_29029752_8_32
Title: how to make two array strings into one array string in C 
----------------------------------------

int main () {
    int i = 0;
    char deck [30] = "";
    char suits [] [30] = {"Hearts", "Diamonds", "Clubs", "Spades"};
    char values [] [30] = {"Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"};
    int V, S;
    for (S = 0; S < 13; S++) {
        for (V = 0; V < 4; V++) {
            memset (deck, 0, sizeof (deck));
            strcpy (deck, values [S]);
            strcat (deck, suits [V]);
            printf ("%s\n", deck);
            i++;
        }
    }
    printf ("Number of playing cards: %d\n", i);
    return 0;
}
----------------------------------------

int main () {
    char deck [TOTAL_CARDS] [24];
    char *suits [NUM_SUITS] = {"Hearts", "Diamonds", "Clubs", "Spades"};
    char *values [CARDS_PER_SUIT] = {"Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"};
    int s, c, i;
    for (s = 0; s < NUM_SUITS; s++) {
        for (c = 0; c < CARDS_PER_SUIT; c++) {
            sprintf (deck [(s * CARDS_PER_SUIT) + c], "%s of %s", values [c], suits [s]);
        }
    }
    for (i = 0; i < TOTAL_CARDS; i++) {
        printf ("%s\n", deck [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29051068_29051264_3_36
29051068_29051460_4_44
Title: C Programming While Loop Assignment 
----------------------------------------

int main () {
    int n = 0, count = 0, sum = 0;
    int first = 1;
    printf ("How many numbers do you wish to sum? ");
    scanf ("%d", & n);
    while (count < n) {
        int m;
        scanf ("%d\b", & m);
        if (!first) {
            if (m < 0) {
                printf ("- %d ", - m);
            }
            else {
                printf ("+ %d ", m);
            }
        }
        else {
            first = !first;
            printf ("%d ", m);
        }
        sum += m;
        count++;
    }
    printf ("= %d\n\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    unsigned int n = 0;
    printf ("Enter number of items (0-exit): ");
    scanf ("%u", & n);
    if (n != 0) {
        int items [n];
        printf ("Enter %u numbers: ", n);
        unsigned int i = 0;
        while (i < n && scanf ("%d", &items[i]) == 1)
            ++i;
        int sum = 0;
        _Bool first = 1;
        n = i;
        for (i = 0; i < n; i++) {
            sum += items[i];
            if (!first || items[i] < 0) {
                printf ("%c ", items [i] < 0 ? '-' : '+');
            }
            if (first)
                first = 0;
            printf ("%u ", (unsigned int) abs (items [i]));
        }
        printf ("= %d\n", sum);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29051068_29051264_3_36
29051068_33936051_3_16
Title: C Programming While Loop Assignment 
----------------------------------------

int main () {
    int n = 0, count = 0, sum = 0;
    int first = 1;
    printf ("How many numbers do you wish to sum? ");
    scanf ("%d", & n);
    while (count < n) {
        int m;
        scanf ("%d\b", & m);
        if (!first) {
            if (m < 0) {
                printf ("- %d ", - m);
            }
            else {
                printf ("+ %d ", m);
            }
        }
        else {
            first = !first;
            printf ("%d ", m);
        }
        sum += m;
        count++;
    }
    printf ("= %d\n\n", sum);
    return 0;
}
----------------------------------------

int main () {
    int num;
    int answer = 0;
    do {
        printf ("\nEnter the number(s) to be added: (enter 0 to quit) ");
        scanf ("%d", & num);
        answer = answer + num;
    }
    while (num != 0);
    printf ("Answer is %d", answer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29051068_29051460_4_44
29051068_33936051_3_16
Title: C Programming While Loop Assignment 
----------------------------------------

int main (void) {
    unsigned int n = 0;
    printf ("Enter number of items (0-exit): ");
    scanf ("%u", & n);
    if (n != 0) {
        int items [n];
        printf ("Enter %u numbers: ", n);
        unsigned int i = 0;
        while (i < n && scanf ("%d", &items[i]) == 1)
            ++i;
        int sum = 0;
        _Bool first = 1;
        n = i;
        for (i = 0; i < n; i++) {
            sum += items[i];
            if (!first || items[i] < 0) {
                printf ("%c ", items [i] < 0 ? '-' : '+');
            }
            if (first)
                first = 0;
            printf ("%u ", (unsigned int) abs (items [i]));
        }
        printf ("= %d\n", sum);
    }
    return 0;
}
----------------------------------------

int main () {
    int num;
    int answer = 0;
    do {
        printf ("\nEnter the number(s) to be added: (enter 0 to quit) ");
        scanf ("%d", & num);
        answer = answer + num;
    }
    while (num != 0);
    printf ("Answer is %d", answer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29063120_29063133_41_189
29063120_34965380_1_26
Title: how to implement gmail's Oauth2.0 using c programming language 
----------------------------------------

void main (void) {
    int socket_fd = -1;
    struct sockaddr_in servaddr;
    struct sockaddr_in clientaddr;
    char buff [4096];
    int n;
    struct hostent *host = NULL;
    int reuse = 1;
    struct timeval tv;
    fd_set rset;
    int ret = 0;
    char requestbuffer [1024] = {0};
    if ((socket_fd = socket (AF_INET, SOCK_STREAM, 0)) == -1) {
        printf ("create socket error: %s(errno: %d)\n", strerror (errno), errno);
        exit (0);
    }
    memset (buff, 0, sizeof (buff));
    memset (& servaddr, 0, sizeof (servaddr));
    memset (& clientaddr, 0, sizeof (clientaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl (INADDR_ANY);
    servaddr.sin_port = htons (DEFAULT_PORT);
    clientaddr.sin_family = AF_INET;
    clientaddr.sin_port = htons (443);
    if (setsockopt (socket_fd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof (int)) < 0) {
        printf ("fail to set socket reuse\n");
    }
    else {
        printf ("successfully set sock reuse\n");
    }
    if (bind (socket_fd, (struct sockaddr *) &servaddr, sizeof (servaddr)) == -1) {
        printf ("bind socket error: %s(errno: %d)\n", strerror (errno), errno);
        exit (0);
    }
    host = gethostbyname (GMAIL_ACCOUNTS_SERVER);
    if (host != NULL) {
        printf ("successfully get google account name\n");
        clientaddr.sin_addr.s_addr = *(unsignedlong*) host->h_addr_list[0];
        printf ("the address is %s\n", inet_ntoa (clientaddr.sin_addr));
    }
    else {
        printf ("fail to get google account name\n");
        clientaddr.sin_addr.s_addr = inet_addr ("216.58.217.205");
    }
    if (connect (socket_fd, (struct sockaddr *) &clientaddr, sizeof (clientaddr)) < 0) {
        printf ("connect error: %s(errno: %d)\n", strerror (errno), errno);
        return;
    }
    else {
        printf ("successfull connect to the server\n");
    }
    if (send (socket_fd, gmail_get_tokens, sizeof (gmail_get_tokens), 0) == -1) {
        printf ("fail to send content to google");
    }
    else {
        printf ("successfulyy send request url %s\n", gmail_get_tokens);
    }
    FD_ZERO (& rset);
    FD_SET (socket_fd, & rset);
    while (1) {
        tv.tv_sec = 5;
        tv.tv_usec = 0;
        ret = select (socket_fd +1, &rset, NULL, NULL, &tv);
        printf ("the ret is %d\n", ret);
        if (ret > 0) {
            printf ("waiting for response from server\n");
            if (FD_ISSET (socket_fd, &rset)) {
                printf ("it is the fd,response");
                n = recv (socket_fd, buff, 1024, 0);
                if (n > 0) {
                    printf ("successfully recv content from the server\n");
                    buff[n] = '\0';
                    printf ("recv msg from client: %s %s\n", buff, strerror (errno));
                }
                else {
                    printf ("fail to recv any message from the server %s\n", strerror (errno));
                }
            }
        }
        else if (0 == ret) {
            printf ("time out\n");
            continue;
        }
        else {
            printf ("the ret is less than 0\n");
            continue;
        }
        sleep (1);
    }
    close (socket_fd);
}
----------------------------------------

int main (void) {
    CURL *curl;
    CURLcode res;
    curl_global_init (CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init ();
    if (curl) {
        curl_easy_setopt (curl, CURLOPT_URL, "https://example.com/");
        res = curl_easy_perform (curl);
        if (res != CURLE_OK)
            fprintf (stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror (res));
        curl_easy_cleanup (curl);
    }
    curl_global_cleanup ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067692_2_26
29067599_29067792_4_21
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    long number, binary, num2;
    int i = 0, j;
    char num [100];
    printf ("Enter an integer: ");
    scanf ("%ld", & number);
    while (number != 0) {
        num[i] = num2 % 2;
        number /= 2;
        i++;
    }
    for (j = 0; j < 32; j++) {
        if (j > i) {
            printf ("0");
        }
        else {
            printf ("%c", num [i]);
            i --
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    long number = 0;
    int i;
    printf ("Enter an integer: ");
    scanf ("%ld", & number);
    for (i = 0; i < sizeof (number) * CHAR_BIT; i++) {
        if (number < 0)
            printf ("1");
        else
            printf ("0");
        if ((i % CHAR_BIT) == CHAR_BIT - 1)
            printf (" ");
        number = (long) ((unsigned long) (number) << 1);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067692_2_26
29067599_29067806_24_34
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    long number, binary, num2;
    int i = 0, j;
    char num [100];
    printf ("Enter an integer: ");
    scanf ("%ld", & number);
    while (number != 0) {
        num[i] = num2 % 2;
        number /= 2;
        i++;
    }
    for (j = 0; j < 32; j++) {
        if (j > i) {
            printf ("0");
        }
        else {
            printf ("%c", num [i]);
            i --
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int y = 31;
    uint32_t x1 = (1 << y);
    uint32_t x2 = (1u << y);
    printf ("x1: %u\n", x1);
    printInBinary (x1, 0);
    printf ("x2: %u\n", x2);
    printInBinary (x2, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067692_2_26
29067599_29067901_3_20
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    long number, binary, num2;
    int i = 0, j;
    char num [100];
    printf ("Enter an integer: ");
    scanf ("%ld", & number);
    while (number != 0) {
        num[i] = num2 % 2;
        number /= 2;
        i++;
    }
    for (j = 0; j < 32; j++) {
        if (j > i) {
            printf ("0");
        }
        else {
            printf ("%c", num [i]);
            i --
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    unsigned long number;
    char binary [33] = {
        [0 ... 31] = 48,
        [32] = 0
    };
    printf ("Enter an integer: ");
    scanf ("%lu", & number);
    for (int i = 0; number > 0; ++i) {
        binary[31 - i] = number % 2;
        number /= 2;
    }
    printf ("%s\n", binary);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067692_2_26
29067599_29067917_4_18
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    long number, binary, num2;
    int i = 0, j;
    char num [100];
    printf ("Enter an integer: ");
    scanf ("%ld", & number);
    while (number != 0) {
        num[i] = num2 % 2;
        number /= 2;
        i++;
    }
    for (j = 0; j < 32; j++) {
        if (j > i) {
            printf ("0");
        }
        else {
            printf ("%c", num [i]);
            i --
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    long number;
    if (1 != scanf ("%ld", &number))
        return 1;
    putchar ('0' + (number < 0));
    for (long bit = 1L << (CHAR_BIT * sizeof number - 2); bit; bit >>= 1)
        putchar ('0' + !!(number & bit));
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067792_4_21
29067599_29067806_24_34
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    long number = 0;
    int i;
    printf ("Enter an integer: ");
    scanf ("%ld", & number);
    for (i = 0; i < sizeof (number) * CHAR_BIT; i++) {
        if (number < 0)
            printf ("1");
        else
            printf ("0");
        if ((i % CHAR_BIT) == CHAR_BIT - 1)
            printf (" ");
        number = (long) ((unsigned long) (number) << 1);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int y = 31;
    uint32_t x1 = (1 << y);
    uint32_t x2 = (1u << y);
    printf ("x1: %u\n", x1);
    printInBinary (x1, 0);
    printf ("x2: %u\n", x2);
    printInBinary (x2, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067792_4_21
29067599_29067901_3_20
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    long number = 0;
    int i;
    printf ("Enter an integer: ");
    scanf ("%ld", & number);
    for (i = 0; i < sizeof (number) * CHAR_BIT; i++) {
        if (number < 0)
            printf ("1");
        else
            printf ("0");
        if ((i % CHAR_BIT) == CHAR_BIT - 1)
            printf (" ");
        number = (long) ((unsigned long) (number) << 1);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    unsigned long number;
    char binary [33] = {
        [0 ... 31] = 48,
        [32] = 0
    };
    printf ("Enter an integer: ");
    scanf ("%lu", & number);
    for (int i = 0; number > 0; ++i) {
        binary[31 - i] = number % 2;
        number /= 2;
    }
    printf ("%s\n", binary);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067792_4_21
29067599_29067917_4_18
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    long number = 0;
    int i;
    printf ("Enter an integer: ");
    scanf ("%ld", & number);
    for (i = 0; i < sizeof (number) * CHAR_BIT; i++) {
        if (number < 0)
            printf ("1");
        else
            printf ("0");
        if ((i % CHAR_BIT) == CHAR_BIT - 1)
            printf (" ");
        number = (long) ((unsigned long) (number) << 1);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    long number;
    if (1 != scanf ("%ld", &number))
        return 1;
    putchar ('0' + (number < 0));
    for (long bit = 1L << (CHAR_BIT * sizeof number - 2); bit; bit >>= 1)
        putchar ('0' + !!(number & bit));
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067806_24_34
29067599_29067901_3_20
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    int y = 31;
    uint32_t x1 = (1 << y);
    uint32_t x2 = (1u << y);
    printf ("x1: %u\n", x1);
    printInBinary (x1, 0);
    printf ("x2: %u\n", x2);
    printInBinary (x2, 0);
}
----------------------------------------

int main () {
    unsigned long number;
    char binary [33] = {
        [0 ... 31] = 48,
        [32] = 0
    };
    printf ("Enter an integer: ");
    scanf ("%lu", & number);
    for (int i = 0; number > 0; ++i) {
        binary[31 - i] = number % 2;
        number /= 2;
    }
    printf ("%s\n", binary);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067806_24_34
29067599_29067917_4_18
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    int y = 31;
    uint32_t x1 = (1 << y);
    uint32_t x2 = (1u << y);
    printf ("x1: %u\n", x1);
    printInBinary (x1, 0);
    printf ("x2: %u\n", x2);
    printInBinary (x2, 0);
}
----------------------------------------

int main () {
    long number;
    if (1 != scanf ("%ld", &number))
        return 1;
    putchar ('0' + (number < 0));
    for (long bit = 1L << (CHAR_BIT * sizeof number - 2); bit; bit >>= 1)
        putchar ('0' + !!(number & bit));
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29067599_29067901_3_20
29067599_29067917_4_18
Title: convert integer to 32-bit binary in c 
----------------------------------------

int main () {
    unsigned long number;
    char binary [33] = {
        [0 ... 31] = 48,
        [32] = 0
    };
    printf ("Enter an integer: ");
    scanf ("%lu", & number);
    for (int i = 0; number > 0; ++i) {
        binary[31 - i] = number % 2;
        number /= 2;
    }
    printf ("%s\n", binary);
    return 0;
}
----------------------------------------

int main () {
    long number;
    if (1 != scanf ("%ld", &number))
        return 1;
    putchar ('0' + (number < 0));
    for (long bit = 1L << (CHAR_BIT * sizeof number - 2); bit; bit >>= 1)
        putchar ('0' + !!(number & bit));
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29079011_29079060_6_27
29079011_29082484_1_19
Title: copy file function in C 
----------------------------------------

int File_Copy (char FileSource [], char FileDestination []) {
    int c;
    FILE *stream_R;
    FILE *stream_W;
    stream_R = fopen (FileSource, "r");
    if (stream_R == NULL)
        return -1;
    stream_W = fopen (FileDestination, "w");
    if (stream_W == NULL) {
        fclose (stream_R);
        return -2;
    }
    while ((c = fgetc (stream_R)) != EOF)
        fputc (c, stream_W);
    fclose (stream_R);
    fclose (stream_W);
    return 0;
}
----------------------------------------

int File_Copy (char FileSource [], char FileDestination []) {
    char c [4096];
    FILE *stream_R = fopen (FileSource, "r");
    FILE *stream_W = fopen (FileDestination, "w");
    while (!feof (stream_R)) {
        size_t bytes = fread (c, 1, sizeof (c), stream_R);
        if (bytes) {
            fwrite (c, 1, bytes, stream_W);
        }
    }
    fclose (stream_R);
    fclose (stream_W);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29088550_29089065_3_35
29088550_29090054_1_19
Title: Print ellipse using characters 
----------------------------------------

int main (void) {
    float A = 0.04;
    float B = 0.001;
    float C = 0.01;
    int h = 6;
    int k = 6;
    int x = 0;
    int y = 0;
    while (y < 40) {
        if ((A * (x - h) * (x - h)) + (B * (x - h) * (y - k)) + (C * (y - k) * (y - k)) <= 1.0) {
            printf ("*");
            x++;
        }
        else if (x >= 80) {
            printf ("\n");
            y++;
            x = 0;
        }
        else {
            printf (" ");
            x++;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    double A = 20;
    double B = 15;
    double h = 0;
    double k = 0;
    for (double y = -B - k; y < B; y++) {
        for (double x = -A - h; x < A; x++) {
            if ((x * x * B * B + y * y * A * A) < A * A * B * B)
                printf ("*");
            else
                printf (" ");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29108965_29109017_1_11
29108965_29109022_1_17
Title: How to change character in char array 
----------------------------------------

void echanger (char word []) {
    int i;
    int n = strlen (word);
    for (i = 0; i < n; i++) {
        if (word[i] == 'e') {
            word[i] = 'a';
        }
    }
}
----------------------------------------

char echanger (char word []) {
    int total = 0;
    int i;
    char final [5];
    for (i = 0; i < 5; i++) {
        if (word[i] == 'e') {
            final[i] = 'a';
        }
        else {
            final[i] = word[i];
        }
    }
    return final;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29113500_29113761_4_37
29113500_29115521_3_25
Title: How to create an array when the size of the array is unknown 
----------------------------------------

int main () {
    int n = 0, n_chunks = 0;
    int *arr = 0;
    do {
        if (n == (n_chunks * CHUNK_SIZE)) {
            ++n_chunks;
            arr = realloc (arr, sizeof arr[0] * n_chunks * CHUNK_SIZE);
            if (!arr) {
                return 1;
            }
        }
    }
    while (1 == scanf ("%d", &arr[n]) && ++n);
    arr = realloc (arr, sizeof arr[0] * n);
    if (!arr && n > 0) {
        return 1;
    }
    printf ("Read %d value%s\n", n, (n == 1) ? "" : "s");
    for (int x = 0; x < n - 1; ++x) {
        printf ("%d,", arr [x]);
    }
    if (n > 0) {
        printf ("%d\n", arr [n - 1]);
    }
    free (arr);
    arr = 0;
    return 0;
}
----------------------------------------

int main (void) {
    int arraysize, i;
    printf ("Please input an array size.\n");
    scanf ("%d", & arraysize);
    getchar ();
    i = arraysize;
    int array [i];
    printf ("Please input %d numbers to fill the array.\n", i);
    for (i = 0; i < arraysize; i++) {
        scanf ("%d", & array [i]);
        getchar ();
    }
    printf ("Your numbers were: \n");
    for (i = 0; i < arraysize; i++) {
        printf ("| %d |", array [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29123226_29124139_6_39
29123226_29124514_13_50
Title: strstr() function get the position 
----------------------------------------

int main () {
    typedef struct {
        char stack [MAXLENGTH] [WORDMAXLENGTH];
        int top;
    } stack;
    stack query;
    query.top = 0;
    int i = 0, j = 0, q = 0;
    char myArr [MAXLENGTH];
    char *PosStr = NULL;
    FILE *inFile = fopen ("query.txt", "r");
    FILE *inFile2 = fopen ("hello.txt", "r");
    while (fgets (query.stack[query.top], WORDMAXLENGTH, inFile) != NULL) {
        query.top++;
    }
    fgets (myArr, MAXLENGTH, inFile2);
    myArr[strlen (myArr) - 1] = 0;
    for (i = 0; i < query.top; i++) {
        PosStr = strstr (query.stack[i], myArr);
        printf ("%d\n", PosStr - query.stack [i] + 1);
    }
    fclose (inFile);
    fclose (inFile2);
    return 0;
}
----------------------------------------

int main () {
    FILE *inFile;
    FILE *inFile2;
    int i, w;
    char myArr [MAXLENGTH];
    char *sptr;
    stack query;
    query.top = 0;
    inFile = fopen ("query.txt", "r");
    inFile2 = fopen ("hello.txt", "r");
    if (inFile == NULL || inFile2 == NULL) {
        printf ("Cannot open both files\n");
        return 1;
    }
    while (fgets (query.stack[query.top], WORDMAXLENGTH, inFile) != NULL) {
        i = strcspn (query.stack[query.top], "\r\n");
        query.stack[query.top][i] = 0;
        if (++query.top >= MAXENTRY)
            break;
    }
    fgets (myArr, MAXLENGTH, inFile2);
    w = 1;
    sptr = strtok (myArr, " \t\r\n");
    while (sptr) {
        for (i = 0; i < query.top; i++) {
            if (stricmp (sptr, query.stack[i]) == 0)
                printf ("%-4d %s\n", w, query.stack[i]);
        }
        w++;
        sptr = strtok (NULL, " \t\r\n");
    }
    fclose (inFile);
    fclose (inFile2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29124188_29124584_5_43
29124188_29124638_7_53
Title: Problems with a Do-While Loop in C 
----------------------------------------

int main (int argc, const char argv []) {
    int i = 0, plen = 0;
    bool hasUpper = false, hasLower = false, hasDigit = false;
    char password [20] = {0};
    printf ("Please enter an alpha-numeric password with upper and lower case\n");
    do {
        hasUpper = false;
        hasLower = false;
        hasDigit = false;
        scanf ("%s", password);
        password[19] = 0;
        plen = strlen (password);
        for (i = 0; i < plen; ++i) {
            if (isdigit (password[i])) {
                hasDigit = true;
            }
            else if (isupper (password[i])) {
                hasUpper = true;
            }
            else if (islower (password[i])) {
                hasLower = true;
            }
        }
        if ((!hasDigit) || (!hasLower) || (!hasUpper)) {
            printf ("Not so good, try again!");
            for (i = 0; i < 20; ++i) {
                password[i] = 0;
            }
        }
    }
    while ((!hasDigit) || (!hasLower) || (!hasUpper));
    printf ("Great password!");
    return 0;
}
----------------------------------------

int main () {
    int i;
    int hasUpper, hasLower, hasDigit;
    char password [20];
    hasUpper = hasLower = hasDigit = 0;
    printf ("Please enter a alpha numeric password with upper and lower case\n");
    scanf (" %s", password);
    do {
        hasUpper = hasLower = hasDigit = 0;
        for (i = 0; i < strlen (password); i++) {
            if (isdigit (password[i])) {
                hasDigit = 1;
            }
            if (isupper (password[i])) {
                hasUpper = 1;
            }
            if (islower (password[i])) {
                hasLower = 1;
            }
        }
        if (((hasUpper) &&(hasLower)&&(hasDigit)) != 1) {
            printf ("Not so good, try again!");
            scanf (" %s", password);
        }
    }
    while (((hasDigit) &&(hasLower)&&(hasUpper)) != 1);
    printf ("Great password!");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29127319_29127502_2_29
29127319_29127622_30_56
Title: C List Segmentation Fault 
----------------------------------------

struct nodo *Crealista (void) {
    struct nodo *p, *primo, *back;
    int i, n;
    p = NULL;
    primo = NULL;
    back = NULL;
    printf ("Numero di elementi: ");
    scanf ("%d", & n);
    printf ("inserisci %d numeri interi positivi: ", n);
    p = (struct nodo *) malloc (sizeof (struct nodo));
    scanf ("%d", & p -> info);
    p->prec = back;
    p->succ = NULL;
    back = p;
    for (i = 1; i < n; i++) {
        p = (struct nodo *) malloc (sizeof (struct nodo));
        scanf ("%d", & p -> info);
        p->prec = back;
        p->prec->succ = p;
        p->succ = NULL;
        back = p;
    }
    primo = p;
    while (primo->prec != NULL) {
        primo = primo->prec;
    }
    return (primo);
}
----------------------------------------

struct nodo *Crealista (void) {
    int i, n;
    struct nodo *p = NULL;
    struct nodo *primo = NULL;
    struct nodo *back = NULL;
    printf ("Numero di elementi: ");
    scanf ("%d", & n);
    assert (n != 0);
    printf ("inserisci %d numeri interi positivi: ", n);
    for (i = 0; i < n; i++) {
        p = malloc (sizeof (struct nodo));
        scanf ("%d", & p -> info);
        p->prec = back;
        p->succ = NULL;
        if (p->prec)
            p->prec->succ = p;
        back = p;
    }
    primo = p;
    while (primo != NULL && primo->prec != NULL)
        primo = primo->prec;
    return primo;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29168133_29168329_1_17
29168133_29168347_1_12
Title: Check if linked list was initialized 
----------------------------------------

deque *initDeque (deque *d) {
    if (d == NULL) {
        d = (deque *) malloc (sizeof (deque));
        d->isInit = false;
    }
    if ((d->isInit) == false) {
        if (!d) {
            perror ("malloc");
            exit (EXIT_FAILURE);
        }
        d->isInit = true;
        d->front = NULL;
        d->rear = NULL;
    }
    else
        printf ("Deque is already initialized!");
    return d;
}
----------------------------------------

deque *initDeque (deque *d) {
    if (d == NULL) {
        deque *d = malloc (sizeof (deque));
        if (!d) {
            perror ("malloc");
            exit (EXIT_FAILURE);
        }
        d->front = NULL;
        d->rear = NULL;
    }
    return d;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29173673_29173821_8_35
29173673_29173938_11_27
Title: Is it possible to pass a variable as a structure member? 
----------------------------------------

int main () {
    Mystruct example;
    example.x = 1;
    example.y = 2;
    example.z = 3;
    char c;
    int xyz;
    printf ("\nchoose witch membeer you want to print [ x, y or z]");
    scanf ("%c", & c);
    switch (c) {
    case 'x' :
        xyz = example.x;
        break;
    case 'y' :
        xyz = example.y;
        break;
    case 'z' :
        xyz = example.z;
        break;
    default :
        puts ("Oops\n");
        return 1;
    }
    printf ("%d", xyz);
    return 0;
}
----------------------------------------

int main () {
    size_t addr [] = {offsetof (MyStruct, x), offsetof (MyStruct, y), offsetof (MyStruct, z),};
    MyStruct example;
    example.x = 1;
    example.y = 2;
    example.z = 3;
    char c;
    printf ("\nchoose witch membeer you want to print [ x, y or z]");
    scanf ("%c", & c);
    printf ("%d\n", * (int *) ((char *) (& example) + addr [c - 'x']));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29182249_29182265_3_19
29182249_29182300_1_15
Title: C-programming loop wont stop with scanf!=0 
----------------------------------------

int main (void) {
    int a;
    int r = 0;
    char buffer [BUFF_SIZE] = {0};
    while (1) {
        fgets (buffer, sizeof buffer, stdin);
        sscanf (buffer, "%d", & a);
        if (!a)
            break;
        r = r + a;
    }
    printf ("the sum is %d\n", r);
    return 0;
}
----------------------------------------

int main (void) {
    int a;
    int r = 0;
    while (1 == scanf ("%d", &a) && a != 0) {
        r = r + a;
    }
    printf ("the sum is %d\n", r);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29186725_29186793_4_31
29186725_29186883_4_26
Title: Moving all zeros to the begining of array 
----------------------------------------

int main () {
    int array [SIZE_MAX] = {1, 2, 3, 4, 5, 0, 0, 0, 0};
    int a [SIZE_MAX];
    int i;
    int temp [SIZE_MAX];
    int ind1 = 0, ind2 = 0;
    for (i = 0; i < SIZE_MAX; i++) {
        if (array[i] == 0)
            a[ind1++] = 0;
        else
            temp[ind2++] = array[i];
    }
    for (i = 0; i < ind2; i++) {
        a[ind1++] = temp[i];
    }
    for (i = 0; i < SIZE_MAX; i++) {
        printf ("%d", a [i]);
    }
}
----------------------------------------

int main () {
    int array [SIZE_MAX] = {1, 2, 0, 0, 3, 4, 5, 0, 0, 0};
    int a [SIZE_MAX];
    int i;
    int p = 0;
    for (i = 0; i < SIZE_MAX; ++i) {
        if (array[i] == 0) {
            a[p++] = 0;
        }
    }
    for (i = 0; i < SIZE_MAX; ++i) {
        if (array[i] != 0) {
            a[p++] = array[i];
        }
    }
    for (i = 0; i < SIZE_MAX; i++) {
        printf ("%d", a [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29186725_29186793_4_31
29186725_32676561_22_35
Title: Moving all zeros to the begining of array 
----------------------------------------

int main () {
    int array [SIZE_MAX] = {1, 2, 3, 4, 5, 0, 0, 0, 0};
    int a [SIZE_MAX];
    int i;
    int temp [SIZE_MAX];
    int ind1 = 0, ind2 = 0;
    for (i = 0; i < SIZE_MAX; i++) {
        if (array[i] == 0)
            a[ind1++] = 0;
        else
            temp[ind2++] = array[i];
    }
    for (i = 0; i < ind2; i++) {
        a[ind1++] = temp[i];
    }
    for (i = 0; i < SIZE_MAX; i++) {
        printf ("%d", a [i]);
    }
}
----------------------------------------

int main () {
    int array [SIZE_MAX] = {1, 2, 3, 4, 5, 0, 0, 0, 0};
    int i;
    int length = 9;
    moveZerosLeft (length, array);
    for (i = 0; i < length; i++) {
        printf ("%d ", array [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29186725_29186883_4_26
29186725_32676561_22_35
Title: Moving all zeros to the begining of array 
----------------------------------------

int main () {
    int array [SIZE_MAX] = {1, 2, 0, 0, 3, 4, 5, 0, 0, 0};
    int a [SIZE_MAX];
    int i;
    int p = 0;
    for (i = 0; i < SIZE_MAX; ++i) {
        if (array[i] == 0) {
            a[p++] = 0;
        }
    }
    for (i = 0; i < SIZE_MAX; ++i) {
        if (array[i] != 0) {
            a[p++] = array[i];
        }
    }
    for (i = 0; i < SIZE_MAX; i++) {
        printf ("%d", a [i]);
    }
}
----------------------------------------

int main () {
    int array [SIZE_MAX] = {1, 2, 3, 4, 5, 0, 0, 0, 0};
    int i;
    int length = 9;
    moveZerosLeft (length, array);
    for (i = 0; i < length; i++) {
        printf ("%d ", array [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29193049_29193149_43_55
29193049_29193438_10_29
Title: creating a linked list + add new node + print the list and cannot figure out why it's not working 
----------------------------------------

int main (void) {
    struct node *head = NULL;
    head = addNew (head, 'a');
    head = addNew (head, 'b');
    head = addNew (head, 'c');
    printList (head);
    printf ("\n");
    head = freeList (head);
}
----------------------------------------

int main () {
    struct node *header = NULL;
    struct node *second = NULL;
    struct node *third = NULL;
    header->d = 'a';
    header->next = second;
    second->d = 'b';
    second->next = third;
    third->d = 'c';
    third->next = NULL;
    struct addnew;
    printList (header);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29197730_29197787_1_14
29197730_29197831_1_27
Title: Reading from argv in C 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 5)
        fprintf (stderr, "usage: %s <file1> <file2> <file3> <num>\n", argv[0]), exit (1);
    char *file1 = argv[1];
    char *file2 = argv[2];
    char *file3 = argv[3];
    long num = strtol (argv[4], NULL, 0);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *file1, *file2, *file3;
    long num = 0;
    if (argc > 1) {
        file1 = malloc (strlen (argv[1]) + 1);
        strcpy (file1, argv [1]);
    }
    if (argc > 2) {
        file2 = malloc (strlen (argv[2]) + 1);
        strcpy (file2, argv [2]);
    }
    if (argc > 3) {
        file3 = malloc (strlen (argv[3]) + 1);
        strcpy (file3, argv [3]);
    }
    if (argc > 4) {num = strtol (argv [4], NULL, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29215998_29218077_5_26
29215998_29218166_3_22
Title: C - Input Verification in loop acting weird 
----------------------------------------

int main () {
    int uNum = 0;
    printf ("\nEnter a number between 1 and %d:\n", MAXNUM);
    while (printf ("\n  uNum: ")) {
        int rtn = scanf ("%d", &uNum);
        int c = 0;
        if (rtn == 0)
            do {
                c = getchar ();
            }
            while (c != '\n' && c != EOF);
        if (uNum > 0 && uNum < MAXNUM + 1)
            break;
    }
    printf ("\nValue : %d\n\n", uNum);
    return 0;
}
----------------------------------------

int main () {
    int n;
    char c;
    printf ("Enter a number: ");
    if (2 != scanf ("%d%c", &n, &c)) {
        printf ("Invalid number input\n");
        return 1;
    }
    if (c != '\n') {
        printf ("Invalid number input\n");
        return 1;
    }
    if (n < 1 || n > 30) {
        printf ("Valid range is 1..30\n");
        return 1;
    }
    printf ("You entered %d\n", n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29239533_29241195_16_66
29239533_29241374_12_51
Title: Read from standard input into a C array 
----------------------------------------

int main () {
    FILE *fp;
    char line [1000];
    char *delims = ", {}\t\r\n";
    char *sptr;
    customer *mark = NULL;
    int marks = 0;
    int len;
    fp = fopen ("input.txt", "r");
    if (fp == NULL)
        fatal ("Cannot open file");
    while (fgets (line, 1000, fp) != NULL) {
        mark = realloc (mark, sizeof (customer) * (marks + 1));
        if (mark == NULL)
            fatal ("Cannot extend array");
        sptr = strtok (line, delims);
        if (sptr == NULL)
            fatal ("Cannot get first field");
        len = strlen (sptr);
        mark[marks].nome = malloc (len +1);
        if (mark[marks].nome == NULL)
            fatal ("Cannot allocate string array");
        strcpy (mark [marks].nome, sptr);
        sptr = strtok (NULL, delims);
        if (sptr == NULL)
            fatal ("Cannot get second field");
        mark[marks].rating = atoi (sptr);
        sptr = strtok (NULL, delims);
        if (sptr == NULL)
            fatal ("Cannot get third field");
        mark[marks].ref = atoi (sptr);
        marks++;
    }
    fclose (fp);
    for (len = 0; len < marks; len++)
        printf ("%s %d %d\n", mark[len].nome, mark[len].rating, mark[len].ref);
    for (len = 0; len < marks; len++)
        free (mark[len].nome);
    free (mark);
    return 0;
}
----------------------------------------

int main (void) {
    mix array [MAXLN] = {{{0}, 0, 0}};
    size_t i = 0;
    size_t read = 0;
    while (scanf ("%s %d %d", array[i].name, &array[i].num1, &array[i].num2) == 3) {
        i++;
        if (i >= MAXLN) {
            fprintf (stderr, "warning: lines read from stdin exceed MAXLN.\n");
            break;
        }
    }
    read = i;
    printf ("\nIterating array using 'while (i < read)'\n\n");
    i = 0;
    while (i < read) {
        printf (" array[%zu]  %-41s  %4d  %4d\n", i, array [i].name, array [i].num1, array [i].num2);
        i++;
    }
    i = 0;
    printf ("\nIterating array using 'while (array[i].name[0])'\n\n");
    while (array[i].name[0]) {
        printf (" array[%zu]  %-41s  %4d  %4d\n", i, array [i].name, array [i].num1, array [i].num2);
        i++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29239645_29239672_1_20
29239645_29239944_30_43
Title: Create n number of variables where n is an argument 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Program needs an int argument!\n");
        return 1;
    }
    int n = atoi (argv[1]);
    if (n < 1 || n > 10) {
        printf ("The argument must be in the range 1-10!\n");
        return 2;
    }
    int test [n];
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        return 1;
    }
    char *err_pos = NULL;
    long n = strtol (argv[1], &err_pos, 10);
    if (err_pos == argv[1] || *err_pos || n < 0) {
        return 2;
    }
    return alloc_vars (n, NULL);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29239645_29239672_1_20
29239645_29240068_6_45
Title: Create n number of variables where n is an argument 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Program needs an int argument!\n");
        return 1;
    }
    int n = atoi (argv[1]);
    if (n < 1 || n > 10) {
        printf ("The argument must be in the range 1-10!\n");
        return 2;
    }
    int test [n];
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input.  usage: %s int (no. of array elements)\n", argv [0]);
        return 1;
    }
    size_t nelements = atoi (argv[1]);
    size_t i = 0;
    if (nelements < 1 || nelements > MAXELE) {
        fprintf (stderr, "error: input not within 1 - %d.\n", MAXELE);
        return 1;
    }
    int *array = calloc (nelements, sizeof *array);
    if (!array) {
        fprintf (stderr, "error: memory allocation failed.\n");
        return 1;
    }
    for (i = 0; i < nelements; i++)
        array[i] = (i + 2) * i;
    for (i = 0; i < nelements; i++)
        printf (" array[%2zu]  %d\n", i, array[i]);
    if (array)
        free (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29239645_29239944_30_43
29239645_29240068_6_45
Title: Create n number of variables where n is an argument 
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        return 1;
    }
    char *err_pos = NULL;
    long n = strtol (argv[1], &err_pos, 10);
    if (err_pos == argv[1] || *err_pos || n < 0) {
        return 2;
    }
    return alloc_vars (n, NULL);
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input.  usage: %s int (no. of array elements)\n", argv [0]);
        return 1;
    }
    size_t nelements = atoi (argv[1]);
    size_t i = 0;
    if (nelements < 1 || nelements > MAXELE) {
        fprintf (stderr, "error: input not within 1 - %d.\n", MAXELE);
        return 1;
    }
    int *array = calloc (nelements, sizeof *array);
    if (!array) {
        fprintf (stderr, "error: memory allocation failed.\n");
        return 1;
    }
    for (i = 0; i < nelements; i++)
        array[i] = (i + 2) * i;
    for (i = 0; i < nelements; i++)
        printf (" array[%2zu]  %d\n", i, array[i]);
    if (array)
        free (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29244170_29245647_6_35
29244170_29248047_1_21
Title: Display number of processes in loop with fork 
----------------------------------------

int main (void) {
    pid_t before_pid, after_pid;
    pid_t forked_pid;
    int count;
    int i;
    int status;
    before_pid = getpid ();
    count = 1;
    for (i = 0; i < 3; i++) {
        forked_pid = fork ();
        if (forked_pid > 0) {
            waitpid (forked_pid, & status, 0);
            count += WEXITSTATUS (status);
        }
        else {
            count = 1;
        }
    }
    after_pid = getpid ();
    if (after_pid == before_pid) {
        printf ("%d processes created\n", count);
    }
    return (count);
}
----------------------------------------

int main (void) {
    int fd [2];
    int depth = 0;
    int i;
    pipe (fd);
    for (i = 0; i < 3; i++) {
        if (fork () == 0) {
            write (fd [1], & i, 1);
            depth += 1;
        }
    }
    close (fd [1]);
    if (depth == 0) {
        i = 0;
        while (read (fd[0], &depth, 1) != 0)
            i += 1;
        printf ("%d total processes spawned", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29246436_29246832_2_21
29246436_29246899_2_29
Title: C-Program Determine the largest substring in a char array without 'e' or 'E' 
----------------------------------------

int main () {
    char myStr [30], Str [30];
    char ch;
    int i = 0, j = 0;
    gets (myStr);
    while (myStr[j] != '\0') {
        if (myStr[j] == 'e' || myStr[j] == 'E') {
            j++;
            continue;
        }
        else {
            Str[i] = myStr[j];
            i++;
        }
        j++;
    }
    printf ("%s  length:%d", Str, i --);
    return 0;
}
----------------------------------------

int main () {
    char myStr [30];
    char *ptr;
    ...char * delim = myStr;
    int longest = 0;
    char *longestSubStr = null;
    for (ptr = myStr; *ptr != '\0'; ptr++) {
        if (*ptr == 'e' || *ptr == 'E') {
            int substrLength = ptr - delim;
            if (substrLength > longest) {
                longest = substrLength;
                longestSubstr = delim;
            }
            delim = ptr + 1;
        }
    }
    ...return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29255700_29257475_14_34
29255700_29257537_18_40
Title: Making an array that represents an integer array's indices 
----------------------------------------

int *func (int array [], int n) {
    struct pair pair [n];
    int *result;
    int i;
    for (i = 0; i < n; i++) {
        pair[i].val = array[i];
        pair[i].pos = i;
    }
    qsort (pair, n, sizeof (* pair), paircmp);
    result = malloc (n * sizeof (*result));
    for (i = 0; i < n; i++) {
        result[pair[i].pos] = i;
    }
    return result;
}
----------------------------------------

int *func (int *list, int size) {
    int i, *iarray;
    sorter *sarray = malloc (size * sizeof (sorter));
    if (sarray == NULL)
        return NULL;
    for (i = 0; i < size; i++) {
        sarray[i].index = i;
        sarray[i].value = list[i];
    }
    qsort (sarray, size, sizeof (sorter), cmp);
    for (i = 0; i < size; i++)
        sarray[i].index2 = i;
    qsort (sarray, size, sizeof (sorter), cmp2);
    iarray = malloc (size * sizeof (int));
    if (iarray == NULL) {
        free (sarray);
        return NULL;
    }
    for (i = 0; i < size; i++)
        iarray[i] = sarray[i].index2;
    free (sarray);
    return iarray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29262686_29263147_1_11
29262686_29263441_1_12
Title: C program counting number of words with pointers inside a function 
----------------------------------------

int wordcount (char *text) {
    char *p;
    int nwords;
    nwords = 0;
    p = text;
    for (; *p != '\0'; p++)
        if (*p == ' ' && *p + 1 != ' ')
            nwords++;
    return nwords;
}
----------------------------------------

int wordcount (const char *p) {
    char prev = ' ';
    int nwords = 0;
    while (*p) {
        if (isspace (prev) && !isspace (*p)) {
            ++nwords;
        }
        prev = *p++;
    }
    return nwords;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29265506_29265680_1_14
29265506_29265810_5_19
Title: String reversal without altering original string 
----------------------------------------

char *reverse (char *inString) {
    int len = strlen (inString);
    char *retString = malloc (len +1);
    if (retString != NULL) {
        for (int i = 0; i < len; ++i) {
            retString[len - 1 - i] = inString[i];
        }
        retString[len] = '\0';
    }
    return retString;
}
----------------------------------------

char *reverse (const char *s) {
    size_t n = strlen (s);
    char *t = malloc ((n + 1) * sizeof (char));
    if (t) {
        size_t i = 0;
        for (; i < n; i++)
            t[i] = s[n - i - 1];
        t[i] = '\0';
    }
    return t;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29283029_29283379_1_26
29283029_29283440_1_21
Title: How to pass an array of strings to a function in this program? 
----------------------------------------

void sort (char *ptr []) {
    int i, j;
    char *temp;
    for (i = 0; i < 4; i++) {
        for (j = i + 1; j < 4; j++) {
            if (strcmp (ptr[j - 1], ptr[j]) > 0) {
                temp = ptr[j - 1];
                ptr[j - 1] = ptr[j];
                ptr[j] = temp;
            }
        }
    }
    for (i = 0; i < 4; i++) {
        printf ("%s", ptr [i]);
        printf ("\n");
    }
}
----------------------------------------

void sort (char *ptr []) {
    int i, j;
    char *temp;
    for (i = 0; i < 4; i++) {
        for (j = 1; j < 4; j++) {
            if (strcmp (ptr[j - 1], ptr[j]) > 0) {
                tmp = ptr[j];
                ptr[j] = ptr[j - 1];
                ptr[j - 1] = ptr[j];
            }
        }
    }
    for (i = 0; i < 4; i++)
        printf ("%s\n", ptr[i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29285883_29286613_12_47
29285883_29286769_44_78
Title: mpi_allreduce sum over a derived datatype vector 
----------------------------------------

int main (int argc, char *argv []) {
    int rank, size, i, j;
    double a [3] [3];
    MPI_Init (& argc, & argv);
    MPI_Comm_size (MPI_COMM_WORLD, & size);
    MPI_Comm_rank (MPI_COMM_WORLD, & rank);
    MPI_Datatype diag3;
    MPI_Type_vector (3, 1, 4, MPI_DOUBLE, & diag3);
    MPI_Type_commit (& diag3);
    MPI_Op diagSum;
    MPI_Op_create ((MPI_User_function *) mySum, 1, & diagSum);
    if (rank == 0)
        for (i = 0; i < 3; i++)
            for (j = 0; j < 3; j++)
                a[i][j] = i + j;
    if (rank == 1)
        for (i = 0; i < 3; i++)
            for (j = 0; j < 3; j++)
                a[i][j] = -1;
    MPI_Allreduce (MPI_IN_PLACE, & a [0] [0], 1, diag3, diagSum, MPI_COMM_WORLD);
    for (i = 0; i < 3; i++)
        for (j = 0; j < 3; j++)
            printf ("rank=%d\ta[%d][%d]=%f\n", rank, i, j, a[i][j]);
    MPI_Op_free (& diagSum);
    MPI_Finalize ();
}
----------------------------------------

int main (int argc, char *argv []) {
    int rank, size, i, j;
    const int n = 3;
    double a [n] [n];
    MPI_Init (& argc, & argv);
    MPI_Comm_size (MPI_COMM_WORLD, & size);
    MPI_Comm_rank (MPI_COMM_WORLD, & rank);
    MPI_Datatype diag3;
    MPI_Type_vector (n, 1, n + 1, MPI_DOUBLE, & diag3);
    MPI_Type_commit (& diag3);
    if (rank == 0)
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                a[i][j] = 1;
    if (rank == 1)
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                a[i][j] = -1;
    MPI_Op vector_add;
    MPI_Op_create (add_double_vector, 1, & vector_add);
    MPI_Allreduce (MPI_IN_PLACE, & a [0] [0], 1, diag3, vector_add, MPI_COMM_WORLD);
    MPI_Op_free (& vector_add);
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            printf ("rank=%d\ta[%d][%d]=%f\n", rank, i, j, a[i][j]);
    MPI_Finalize ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29293749_29293914_12_23
29293749_29293949_4_42
Title: String Output shows null but why? 
----------------------------------------

int main (void) {
    if (isPalindrome ("hello"))
        printf ("what the ???\n");
    else
        printf ("nope\n");
    if (isPalindrome ("racecar"))
        printf ("yup\n");
    else
        printf ("hey ?!?!\n");
}
----------------------------------------

int main () {
    char string [25];
    char rev_string [25];
    int i, length, flag;
    printf ("Enter a string : ");
    scanf ("%s", string);
    length = strlen (string);
    for (i = 0; i < length; i++) {
        rev_string[i] = string[length - i - 1];
    }
    rev_string[length] = '\0';
    printf ("Reversed string: %s\n", rev_string);
    for (flag = 1, i = 0; i < length; i++) {
        if (rev_string[i] != string[i]) {
            flag = 0;
        }
    }
    if (flag == 1)
        printf ("%s is a palindrome \n", string);
    else
        printf ("%s is not a palindrome \n", string);
    printf ("Length: %d\n", length);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29294675_29294740_3_21
29294675_29297505_2_12
Title: copy string multiple times 
----------------------------------------

int main () {
    char toCopy [81];
    int numCopies;
    int i;
    printf ("Enter string: ");
    scanf ("%80s", toCopy);
    printf ("Enter number of copies: ");
    scanf ("%d", & numCopies);
    for (i = 0; i < numCopies; i++) {
        printf ("%s ", toCopy);
    }
    puts ("\nEnd");
    return 0;
}
----------------------------------------

int main (void) {
    int numCopy;
    scanf ("%d", & numCopy);
    char strings [50];
    scanf ("%s", strings);
    int i;
    for (i = 0; i < numCopy; i++) {
        printf ("%s\n", strings);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29308337_29319681_1_21
29308337_29444763_1_23
Title: Casting char * to byte 
----------------------------------------

bool parseTemp (char *str, float *x, float *y, float *z) {
    int number;
    sscanf (str, "%d", & number);
    int *m = (int *) x;
    int *i = (int *) y;
    int *o = (int *) z;
    *m = (number & 0XFF000000) >> 24;
    *i = (number & 0x00FF0000) >> 16;
    *o = (number & 0x0000FF00) >> 8;
    *x = (float) (*m);
    *y = (float) (*i);
    *z = (float) (*o);
    if (isdigit (*m) && isdigit (*i) && isdigit (*o))
        return true;
    else
        return false;
}
----------------------------------------

bool parseTemp (char *str, float *motor, float *indoor, float *outdoor) {
    char *ptr;
    char *nptr;
    char tmp [100];
    int temp;
    bool ret = false;
    nptr = strdup (str);
    ptr = strtok (nptr, ";");
    while (ptr != NULL) {
        if (strstr (ptr, "temp") != NULL) {
            ret = true;
            break;
        }
        ptr = strtok (NULL, ";");
    }
    free (nptr);
    sscanf (ptr, "%s %d", tmp, & temp);
    *motor = (float) ((temp & 0xff000000) >> 24);
    *indoor = (float) ((temp & 0x00ff0000) >> 16);
    *outdoor = (float) ((temp & 0x0000ff00) >> 8);
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29317632_29317692_16_28
29317632_29317971_19_34
Title: Function to return a pointer to the largest number in an array 
----------------------------------------

int main (void) {
    double myarr [10];
    int i;
    printf ("Please insert 10 numbers to the array\n");
    for (i = 0; i < 10; i++) {
        scanf ("%lf", & myarr [i]);
    }
    printf ("%f\n", * BigEl (myarr, 10));
    return 0;
}
----------------------------------------

int main (void) {
    double a [N];
    int i;
    printf ("Please insert %d numbers to the array: ", N);
    for (i = 0; i < N; i++) {
        scanf ("%lf", & a [i]);
    }
    printf ("\nThe largest element of the array is %lf\n", * largest_element (a, N));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29317632_29317692_2_15
29317632_29317723_1_14
Title: Function to return a pointer to the largest number in an array 
----------------------------------------

double *BigEl (double *arr, int arrSize) {
    int i;
    double *maximum;
    maximum = &arr[0];
    for (i = 1; i < arrSize; i++) {
        if (arr[i] > *maximum) {
            maximum = &arr[i];
        }
    }
    return maximum;
}
----------------------------------------

double *BigEl (double *arr, const size_t iSize) {
    if (iSize == 0)
        return 0;
    double max = arr[0], *x = &arr[0];
    for (unsigned int i = 1; i < iSize; ++i) {
        if (arr[i] > max) {
            max = arr[i];
            x = &arr[i];
        }
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29317632_29317692_2_15
29317632_29317729_5_22
Title: Function to return a pointer to the largest number in an array 
----------------------------------------

double *BigEl (double *arr, int arrSize) {
    int i;
    double *maximum;
    maximum = &arr[0];
    for (i = 1; i < arrSize; i++) {
        if (arr[i] > *maximum) {
            maximum = &arr[i];
        }
    }
    return maximum;
}
----------------------------------------

double *BigEl (double *arr, double arrSize) {
    int i;
    double maximum = arr[0], *max_pos = arr;
    for (i = 1; i < arrSize; i++) {
        if (arr[i] > maximum) {
            maximum = arr[i];
            max_pos = &arr[i];
        }
    }
    return max_pos;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29317632_29317723_1_14
29317632_29317729_5_22
Title: Function to return a pointer to the largest number in an array 
----------------------------------------

double *BigEl (double *arr, const size_t iSize) {
    if (iSize == 0)
        return 0;
    double max = arr[0], *x = &arr[0];
    for (unsigned int i = 1; i < iSize; ++i) {
        if (arr[i] > max) {
            max = arr[i];
            x = &arr[i];
        }
    }
    return x;
}
----------------------------------------

double *BigEl (double *arr, double arrSize) {
    int i;
    double maximum = arr[0], *max_pos = arr;
    for (i = 1; i < arrSize; i++) {
        if (arr[i] > maximum) {
            maximum = arr[i];
            max_pos = &arr[i];
        }
    }
    return max_pos;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29317632_29317729_24_38
29317632_29317971_19_34
Title: Function to return a pointer to the largest number in an array 
----------------------------------------

int main () {
    double myarr [10];
    double *max_pos;
    int i;
    printf ("Please insert 10 numbers to the array\n");
    for (i = 0; i < 10; i++) {
        scanf ("%lf", & myarr [i]);
    }
    max_pos = BigEl (myarr, 10);
    return 0;
}
----------------------------------------

int main (void) {
    double a [N];
    int i;
    printf ("Please insert %d numbers to the array: ", N);
    for (i = 0; i < N; i++) {
        scanf ("%lf", & a [i]);
    }
    printf ("\nThe largest element of the array is %lf\n", * largest_element (a, N));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29321822_29321833_7_52
29321822_29322264_7_28
Title: The scanf function is accepting values infinately 
----------------------------------------

int main (void) {
    unsigned int index;
    unsigned int size;
    int result;
    fprintf (stderr, "input the desired array size: ");
    while (((result = scanf ("%u", &size)) != 1) && (result != EOF)) {
        fprintf (stderr, "invalid input, try again\n");
        clearstdin ();
    }
    if (result == EOF) {
        fprintf (stderr, "EOF recieved, ending the program\n");
        return -1;
    }
    if (size < SOMELARGESIZE) {
        int array [size];
        for (index = 0; index < size; index++) {
            fprintf (stderr, "input an integer: ");
            if (((result = scanf ("%d", &array[index])) == 1) && (result != EOF))
                fprintf (stdout, "\tarray[%d] = %d\n", index, array[index]);
            else if (result == EOF) {
                fprintf (stderr, "EOF recieved, ending the program\n");
                return -1;
            }
            else {
                fprintf (stderr, "invalid input, try again\n");
                index -= 1;
            }
            clearstdin ();
        }
    }
    else {
        fprintf (stderr, "sorry, you requested a very large array\n");
        return -1;
    }
    return 0;
}
----------------------------------------

int main () {
    int i;
    int n;
    int a [SIZE];
    printf ("enter number of elements(disks) 0-%d\n", SIZE - 1);
    while (scanf ("%d", &n) != 1 || n >= SIZE) {
        scanf ("%*[^0-9\n]");
        printf ("problem with input, try again\n");
    }
    printf ("number was %d\n", n);
    printf ("enter the elements in ascending  order\n");
    for (i = 0; i < n; i++) {
        while (scanf ("%d", &a[i]) != 1) {
            scanf ("%*[^-0-9\n]");
            printf ("problem with input, try again\n");
        }
        printf ("number for a[%d] was %d\n", i, a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29322485_29322870_5_24
29322485_29323119_25_40
Title: How to get the GCD of command line argument integers entered by the user after './a.out' in any order? 
----------------------------------------

int main (int argc, char *argv []) {
    int i, x, y, gcd;
    printf ("Number of command line args is %d\n", argc);
    printf ("The GCD is:\t");
    x = atoi (argv[1]);
    for (i = 2; i < argc; i++) {
        y = atoi (argv[i]);
        while (x != 0 && y != 0 && y != x) {
            if (x < y) {
                y = y - x;
            }
            else if (y < x) {
                x = x - y;
            }
        }
        gcd = x;
    }
    printf ("%d", gcd);
}
----------------------------------------

int main (int argc, const char *argv []) {
    int i;
    printf ("Number of command line args is %d\n", argc);
    printf ("The GCD is:\t");
    int numbers [argc];
    for (i = 1; i < argc; i++) {
        numbers[i] = atoi (argv[i]);
    }
    int result = GCD (numbers, argc);
    printf ("%d\n", result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29334552_29335385_16_47
29334552_29336257_7_70
Title: 2d dynamic arrays sent to a function in C 
----------------------------------------

int main (void) {
    FILE *file;
    char filename [25];
    printf ("Please type in the exact name of the data file you with to use and please make sure it is within the program folder.\nFor example: \"matrix1.txt\"\n");
    scanf ("%[^\n]%*c", filename);
    if ((file = fopen (filename, "r")) == NULL) {
        system ("cls");
        printf ("Could not find the file you've requested, please make sure the file is on the same partition.\n\n");
        getch ();
        exit (EXIT_FAILURE);
    }
    int howmany;
    fscanf (file, "%d", & howmany);
    int (*matrix) [howmany] = malloc (howmany * sizeof (*matrix));
    for (int i = 0;
    i < howmany;
    i ++) for (int j = 0;
    j < howmany;
    j ++) {fscanf (file, "%d", & matrix [i] [j]);
    if (checkdiag (howmany, matrix))
        printf ("The matrix is %dx%d and all the numbers on the main diagonal are the same.", howmany, howmany);
    else
        printf ("The matrix is %dx%d. All the numbers on the main diagonal are not the same.", howmany, howmany);
    free (matrix);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input. Usage: %s filename\n", argv [0]);
        return 1;
    }
    FILE *file = NULL;
    char *filename = argv[1];
    int howmany = 0;
    int **matrix = NULL;
    int i = 0;
    int j = 0;
    if (!(file = fopen (filename, "r"))) {
        fprintf (stderr, "error: file open failed '%s'.\n\n", filename);
        exit (EXIT_FAILURE);
    }
    if (!fscanf (file, "%d", &howmany) && howmany > 0) {
        fprintf (stderr, "error: invalid howmany value. (size not number > 0)\n\n");
        fclose (file);
        exit (EXIT_FAILURE);
    }
    if (!(matrix = calloc (howmany, sizeof *matrix))) {
        fprintf (stderr, "error: memory allocation failed '%s'.\n\n", filename);
        exit (EXIT_FAILURE);
    }
    for (i = 0; i < howmany; i++)
        if (!(matrix[i] = calloc (howmany, sizeof **matrix))) {
            fprintf (stderr, "error: memory allocation failed '%s'.\n\n", filename);
            exit (EXIT_FAILURE);
        }
    for (i = 0; i < howmany; i++)
        for (j = 0; j < howmany; j++)
            fscanf (file, "%d", &matrix[i][j]);
    printf ("\nThe %dx%d matrix is:\n\n", howmany, howmany);
    prn_mtrx (howmany, howmany, matrix);
    if (checkdiag (howmany, matrix))
        printf ("\nThe numbers on the main diagonal are the same.\n\n");
    else
        printf ("\nThe numbers on the main diagonal are NOT the same.\n\n");
    if (file)
        fclose (file);
    for (i = 0; i < howmany; i++)
        free (matrix[i]);
    free (matrix);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29337798_29337831_1_15
29337798_29337842_3_12
Title: Newbie math checker for C. Why won't it work? 
----------------------------------------

int main (void) {
    int res;
    printf ("What is the sum of 5 + 5?\n");
    scanf ("%d", & res)
    if (res == 10) {
        printf ("Correct.\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int a;
    printf ("What is the sum of 5 + 5?\n");
    scanf ("%d", & a);
    if (a == 10) {
        printf ("Correct.\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29345628_29345959_1_17
29345628_29346092_1_19
Title: Number of Lines Mystery? 
----------------------------------------

int linecount (const char *filename) {
    FILE *f = fopen (filename, "r");
    if (!f)
        return -1;
    int lines = 0;
    int c = 0;
    int flag = 1;
    while ((c = fgetc (f)) != EOF) {
        if (flag = (c == '\n'))
            lines++;
    }
    if (!flag)
        lines++;
    fclose (f);
    return lines;
}
----------------------------------------

int linecount (const char *filename) {
    FILE *stream;
    char *line = NULL;
    size_t len = 0;
    ssize_t read;
    int numOfLines = 0;
    stream = fopen (filename, "r");
    if (stream == NULL)
        exit (EXIT_FAILURE);
    while ((read = getline (&line, &len, stream)) != -1) {
        numOfLines++;
    }
    free (line);
    fclose (stream);
    return numOfLines;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29355467_29356896_16_71
29355467_29357335_12_36
Title: Reading words from file into dynamic char with linked lists 
----------------------------------------

int main (void) {
    static const char filename [] = "C:\\a.txt";
    FILE *file = fopen (filename, "r");
    Node *list = 0;
    Node **last = &list;
    Word *word = 0;
    int list_size = 0;
    int word_size = 0;
    if (file != NULL) {
        int ch, inword = 0;
        while (1) {
            ch = fgetc (file);
            if (isspace (ch) || ispunct (ch) || ch == EOF) {
                if (inword) {
                    inword = 0;
                    char *string = (char *) malloc (word_size +1);
                    for (int i = word_size - 1; i >= 0; i--) {
                        string[i] = word->chr;
                        Word *aux = word;
                        word = word->next;
                        free (aux);
                    }
                    string[word_size] = '\0';
                    Node *aux = (Node *) malloc (sizeof (Node));
                    aux->word = string;
                    aux->next = 0;
                    *last = aux;
                    last = &aux->next;
                    word_size = 0;
                }
                if (ch == EOF)
                    break;
            }
            else {
                inword = 1;
                Word *aux = word;
                word = (Word *) malloc (sizeof (Word));
                word->chr = ch;
                word->next = aux;
                word_size++;
            }
        }
        fclose (file);
        for (Node *aux = list; aux; aux = aux->next) {
            puts (aux -> word);
        }
        getchar ();
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *stream = NULL;
    struct node *head;
    struct node *temp;
    struct node *loop;
    head = loadWords (stream);
    if (head == NULL) {
        return 1;
    }
    temp = head;
    while (temp != NULL) {
        printf ("%s\n", temp -> word);
        temp = temp->next;
    }
    temp = head;
    while (temp != NULL) {
        loop = temp->next;
        free (temp -> word);
        free (temp);
        temp = loop;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29355467_29356896_16_71
29355467_29357655_14_30
Title: Reading words from file into dynamic char with linked lists 
----------------------------------------

int main (void) {
    static const char filename [] = "C:\\a.txt";
    FILE *file = fopen (filename, "r");
    Node *list = 0;
    Node **last = &list;
    Word *word = 0;
    int list_size = 0;
    int word_size = 0;
    if (file != NULL) {
        int ch, inword = 0;
        while (1) {
            ch = fgetc (file);
            if (isspace (ch) || ispunct (ch) || ch == EOF) {
                if (inword) {
                    inword = 0;
                    char *string = (char *) malloc (word_size +1);
                    for (int i = word_size - 1; i >= 0; i--) {
                        string[i] = word->chr;
                        Word *aux = word;
                        word = word->next;
                        free (aux);
                    }
                    string[word_size] = '\0';
                    Node *aux = (Node *) malloc (sizeof (Node));
                    aux->word = string;
                    aux->next = 0;
                    *last = aux;
                    last = &aux->next;
                    word_size = 0;
                }
                if (ch == EOF)
                    break;
            }
            else {
                inword = 1;
                Word *aux = word;
                word = (Word *) malloc (sizeof (Word));
                word->chr = ch;
                word->next = aux;
                word_size++;
            }
        }
        fclose (file);
        for (Node *aux = list; aux; aux = aux->next) {
            puts (aux -> word);
        }
        getchar ();
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct node *head;
    FILE *stream = fopen ("hw8.data", "r");
    head = loadWords (stream);
    fclose (stream);
    {
        struct node *p = head;
        while (p) {
            struct node *temp = p->next;
            puts (p -> word);
            free (p -> word);
            free (p);
            p = temp;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29355467_29357335_12_36
29355467_29357655_14_30
Title: Reading words from file into dynamic char with linked lists 
----------------------------------------

int main () {
    FILE *stream = NULL;
    struct node *head;
    struct node *temp;
    struct node *loop;
    head = loadWords (stream);
    if (head == NULL) {
        return 1;
    }
    temp = head;
    while (temp != NULL) {
        printf ("%s\n", temp -> word);
        temp = temp->next;
    }
    temp = head;
    while (temp != NULL) {
        loop = temp->next;
        free (temp -> word);
        free (temp);
        temp = loop;
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct node *head;
    FILE *stream = fopen ("hw8.data", "r");
    head = loadWords (stream);
    fclose (stream);
    {
        struct node *p = head;
        while (p) {
            struct node *temp = p->next;
            puts (p -> word);
            free (p -> word);
            free (p);
            p = temp;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29355467_29357335_38_76
29355467_29357655_32_58
Title: Reading words from file into dynamic char with linked lists 
----------------------------------------

struct node *loadWords (FILE *stream) {
    struct node *loop = NULL;
    struct node *temp = NULL;
    struct node *head = NULL;
    char *words = NULL;
    char *currentWord;
    size_t chrCount = 0;
    if ((stream = fopen ("hw8.data", "r")) == NULL) {
        printf ("could not open file\n");
        return NULL;
    }
    while (getline (&words, &chrCount, stream) > 0) {
        currentWord = strtok (words, " ");
        while (currentWord != NULL) {
            if ((temp = calloc (1, sizeof (struct node))) == NULL) {
                printf ("ERROR - Could not allocate memory.\n");
                exit (0);
            }
            temp->word = strdup (currentWord);
            if (head == NULL) {
                head = temp;
            }
            else {
                loop = head;
                while (loop->next != NULL) {
                    loop = loop->next;
                }
                loop->next = temp;
            }
            currentWord = strtok (NULL, " ");
        }
        free (words);
        chrCount = 0;
        words = NULL;
    }
    fclose (stream);
    return head;
}
----------------------------------------

struct node *loadWords (FILE *stream) {
    struct node *head = NULL, *curr, *temp;
    char *words = NULL, *currentWord;
    size_t chrCount = 0;
    rewind (stream);
    while (getline (&words, &chrCount, stream) != -1) {
        currentWord = strtok (words, " \t\n");
        while (currentWord != NULL) {
            if ((temp = calloc (1, sizeof (struct node))) == NULL) {
                fprintf (stderr, "ERROR - Could not allocate memory.\n");
                exit (EXIT_FAILURE);
            }
            temp->word = strdup (currentWord);
            if (head == NULL) {
                curr = head = temp;
            }
            else {
                curr = curr->next = temp;
            }
            currentWord = strtok (NULL, " \t\n");
        }
    }
    free (words);
    return head;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29375859_29376105_1_11
29375859_29377120_11_29
Title: C - Segmentation fault with struct 
----------------------------------------

void initialize (stack **s) {
    stack *newStack;
    if (!(newStack = malloc (sizeof (*newStack)))) {
        fprintf (stderr, "%s() error: memory allocation failed.\n", __func__);
        exit (EXIT_FAILURE);
    }
    newStack->count = 0;
    *s = newStack;
}
----------------------------------------

void initialize (stack **s) {
    stack *newStack;
    newStack = malloc (sizeof (*newStack));
    if (NULL == newStack) {
        s = NULL;
        return;
    }
    newStack->count = 0;
    *s = newStack;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29385309_29385511_1_16
29385309_29385674_1_13
Title: Finding the minimum number in a Binary Tree recursively 
----------------------------------------

int min (node *root, int mini) {
    if (root == NULL) {
        return -1;
    }
    int a;
    a = min (root->left, mini);
    if (a < mini)
        mini = a;
    a = min (root->right, mini);
    if (a < mini)
        mini = a;
    if (root->data < mini)
        mini = root->data;
    return mini;
}
----------------------------------------

int min (node *root) {
    int least = root->data;
    if (root->left != NULL) {
        least = std : : min (least, min (root -> left));
    }
    if (root->right != NULL) {
        least = std : : min (least, min (root -> right));
    }
    return least;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29391525_29391790_4_19
29391525_29393716_4_33
Title: String length Error 
----------------------------------------

int main (void) {
    char song [500];
    int t, i, len;
    printf ("Enter the no of test cases: ");
    fgets (song, 500, stdin);
    t = atoi (song);
    for (i = 0; i < t; ++i) {
        fgets (song, 500, stdin);
        if ((len = strlen (song)) > 0) {
            song[--len] = '\0';
            printf ("len=%d\n", len);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c = 0;
    int i = 0;
    int t = 0;
    printf ("\n Enter the no of test cases: ");
    if (!scanf ("%d", &t)) {
        fprintf (stderr, "error: invalid type or number for test cases.\n");
        return 1;
    }
    while ((c = getchar ()) != '\n' && c != EOF)
        ;
    for (i = 0; i < t; ++i) {
        char song [500] = {0};
        size_t len = 0;
        if (printf ("\n    case [%d] : ", i) && fgets (song, 500, stdin)) {
            len = strlen (song);
            while (len && song[len - 1] == '\n')
                song[--len] = 0;
        }
        printf ("         len : %zu\n", len);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29395935_29396087_2_22
29395935_29396144_4_18
Title: Int Array[ ] not printing good. 
----------------------------------------

int main () {
    int indeks, a [11], j, rezultat [50];
    int n = 0;
    printf ("Unesite elemenate niza\n");
    for (indeks = 0; indeks < 10; indeks++)
        scanf ("%d", &a[indeks]);
    for (n = 0; n < 10; n++) {
        printf ("%d\n", a [n]);
    }
    return 0;
}
----------------------------------------

void main () {
    const unsigned int A_SIZE (10);
    int a [A_SIZE];
    printf ("Unesite elemenate niza\n");
    for (unsigned int indeks (0); indeks < A_SIZE; ++indeks)
        scanf ("%d", &a[indeks]);
    for (unsigned int indeks (0); indeks < A_SIZE; ++indeks)
        printf ("%d\n", a[indeks]);
std :
    : cout << "Enter a character to exit: ";
    char c;
std :
    : cin >> c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29398073_29398575_1_12
29398073_29399287_51_80
Title: how to print values from file after appending 
----------------------------------------

int append (struct student *studenti, FILE *f, int studs) {
    int i;
    printf ("Nume: ");
    fflush (stdin);
    gets ((studenti + studs) -> nume);
    printf ("Varsta: ");
    scanf ("%d", & ((studenti + studs) -> varsta));
    printf ("Medie: ");
    scanf ("%f", & ((studenti + studs) -> medie));
    fprintf (f, "Nume: %s\n", (studenti + studs) -> nume);
    fprintf (f, "Varsta: %d\n", (studenti + studs) -> varsta);
    fprintf (f, "Medie: %.2f\n", (studenti + studs) -> medie);
    fprintf (f, "\n");
    return studs + 1;
}
----------------------------------------

void append (struct student *studenti, FILE *f, size_t *n) {
    int i = 0;
    while (1) {
        printf ("\nEnter student information ([Enter] when done)\n\n");
        printf ("  Nume: ");
        if (!scanf ("%[^\n]%*c", (studenti + *n)->nume)) {
            flush_stdin ();
            break;
        }
        printf ("  Varsta: ");
        scanf ("%d", & ((studenti + * n) -> varsta));
        if ((studenti + i)->varsta == '\n')
            break;
        flush_stdin ();
        printf ("  Medie: ");
        scanf ("%f", & ((studenti + * n) -> medie));
        if ((studenti + i)->medie == '\n')
            break;
        flush_stdin ();
        fprintf (f, "Nume: %s\n", (studenti + * n) -> nume);
        fprintf (f, "Varsta: %d\n", (studenti + * n) -> varsta);
        fprintf (f, "Medie: %.2f\n", (studenti + * n) -> medie);
        fprintf (f, "\n");
        (*n)++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29405012_29405248_3_45
29405012_29405528_1_14
Title: Printing a specific pattern in C Programming using for loops 
----------------------------------------

int main (int argc, char **argv) {
    int rows;
    int limit;
    int twiceFlag = 0;
    char c = '*';
    int i, j;
    printf ("enter the number of rows:");
    scanf ("%d", & rows);
    if (rows % 2 == 0) {
        twiceFlag = 1;
        limit = rows / 2;
    }
    else {
        limit = rows / 2 + 1;
    }
    for (i = 1; i <= limit; i++) {
        printf ("%c", c);
        for (j = 1; j < i; j++) {
            printf ("%c%c", c, c);
        }
        printf ("\n");
    }
    if (twiceFlag == 1) {
        printf ("%c", c);
        for (j = 1; j < limit; j++) {
            printf ("%c%c", c, c);
        }
        printf ("\n");
    }
    limit -= 2;
    for (i = limit; i >= 0; i--) {
        printf ("%c", c);
        for (j = i; j > 0; j--) {
            printf ("%c%c", c, c);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int row = 6, n;
    n = row / 2;
    for (int i = n; i >= -n; i--) {
        if (row % 2 == 0 && i == 0)
            i--;
        for (int j = 1; j <= (2 * (n - (i < 0 ? -i : i))) + 1; j++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29405012_29405248_3_45
29405012_29405994_5_19
Title: Printing a specific pattern in C Programming using for loops 
----------------------------------------

int main (int argc, char **argv) {
    int rows;
    int limit;
    int twiceFlag = 0;
    char c = '*';
    int i, j;
    printf ("enter the number of rows:");
    scanf ("%d", & rows);
    if (rows % 2 == 0) {
        twiceFlag = 1;
        limit = rows / 2;
    }
    else {
        limit = rows / 2 + 1;
    }
    for (i = 1; i <= limit; i++) {
        printf ("%c", c);
        for (j = 1; j < i; j++) {
            printf ("%c%c", c, c);
        }
        printf ("\n");
    }
    if (twiceFlag == 1) {
        printf ("%c", c);
        for (j = 1; j < limit; j++) {
            printf ("%c%c", c, c);
        }
        printf ("\n");
    }
    limit -= 2;
    for (i = limit; i >= 0; i--) {
        printf ("%c", c);
        for (j = i; j > 0; j--) {
            printf ("%c%c", c, c);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int N;
    if (scanf ("%d", &N) == 1) {
        for (int i = 0; i < N; i++) {
            int m = 2 * min (i, N -1 - i) + 1;
            for (int j = 0; j < m; j++)
                putchar ('*');
            putchar ('\n');
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29405012_29405528_1_14
29405012_29405994_5_19
Title: Printing a specific pattern in C Programming using for loops 
----------------------------------------

int main () {
    int row = 6, n;
    n = row / 2;
    for (int i = n; i >= -n; i--) {
        if (row % 2 == 0 && i == 0)
            i--;
        for (int j = 1; j <= (2 * (n - (i < 0 ? -i : i))) + 1; j++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int N;
    if (scanf ("%d", &N) == 1) {
        for (int i = 0; i < N; i++) {
            int m = 2 * min (i, N -1 - i) + 1;
            for (int j = 0; j < m; j++)
                putchar ('*');
            putchar ('\n');
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29423772_29424297_11_23
29423772_29426420_7_22
Title: Fixing a letter frequency analyser in C 
----------------------------------------

int main (int argc, char *argv []) {
    int position;
    char alphabet [ALPHABET_SIZE] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    int alphabetCount [ALPHABET_SIZE] = {0};
    freqAnalysis (stdin, alphabetCount);
    for (position = 0; position < ALPHABET_SIZE; position++) {
        printf ("Letter %c: %d\n", alphabet [position], alphabetCount [position]);
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    int position = 0;
    char *alphabet = "abcdefghijklmnopqrstuvwxyz";
    int alphabetCount [ALPHABET_SIZE] = {0};
    printf ("\nThe frequency analysis of the input characters:\n\n");
    freqAnalysis (stdin, alphabetCount);
    for (position = 0; position < ALPHABET_SIZE; position++)
        printf ("    %c/%c  : %d\n", alphabet[position] - 32, alphabet[position], alphabetCount[position]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29423772_29424297_25_46
29423772_29426420_24_44
Title: Fixing a letter frequency analyser in C 
----------------------------------------

void freqAnalysis (FILE *fp, int alphabetCount []) {
    int inputChar;
    int numbers, spaces, specialChar;
    numbers = spaces = specialChar = 0;
    while ((inputChar = fgetc (fp)) != EOF) {
        if (islower (inputChar)) {
            alphabetCount[inputChar - FIRST_LC_LETTER]++;
        }
        else if (isupper (inputChar)) {
            alphabetCount[inputChar - FIRST_UC_LETTER]++;
        }
        else if (isdigit (inputChar)) {
            numbers++;
        }
        else if (inputChar == ' ') {
            spaces++;
        }
        else {
            specialChar++;
        }
    }
    printf ("Numbers: %d\nSpaces: %d\nSpecial characters: %d\n", numbers, spaces, specialChar);
}
----------------------------------------

void freqAnalysis (FILE *fp, int *cnt) {
    int c, numbers, spaces, specialChar;
    c = numbers = spaces = specialChar = 0;
    while ((c = fgetc (fp)) != '\n' && c != EOF) {
        if (c >= 'A' && c <= 'Z')
            cnt[c - 'A']++;
        else if (c >= 'a' && c <= 'z')
            cnt[c - 'a']++;
        else if (c >= '0' && c <= '9')
            numbers++;
        else if (c == ' ')
            spaces++;
        else
            specialChar++;
    }
    printf (" Numbers : %d\n Spaces  : %d\n Special : %d\n\n", numbers, spaces, specialChar);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29426731_29427053_1_15
29426731_29428545_30_46
Title: Read an int value using a char pointer and return it 
----------------------------------------

unsigned int read24 (unsigned char *ptr) {
    unsigned char b0;
    unsigned char b1;
    unsigned char b2;
    b0 = *ptr++;
    b1 = *ptr++;
    b2 = *ptr;
    return ((b0 & 0x0ff) >> 16 | (b1 & 0x0ff) >> 8 | (b2 & 0x0ff));
}
----------------------------------------

static unsigned int read24 (unsigned char *ptr) {
    unsigned char b0;
    unsigned char b1;
    unsigned char b2;
    unsigned char b3;
    b0 = *ptr++;
    b1 = *ptr++;
    b2 = *ptr++;
    b3 = *ptr;
    return ((b0 & 0x000000ffU) | ((b1 << 8) & 0x0000ff00U) | ((b2 << 16) & 0x00ff0000U) | ((b3 << 24) & 0xff000000U));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29432565_29432747_3_20
29432565_29432817_4_19
Title: How can I make an array of intengers where each array position is a digit of my number? 
----------------------------------------

int main (void) {
    char line [64];
    int bit [32];
    int i, n;
    scanf ("%32[01]", line);
    for (i = 0; i < 32; ++i) {
        if (1 != sscanf (&line[i], "%1d", &bit[i]))
            break;
    }
    n = i;
    for (i = 0; i < n; ++i) {
        printf ("%d", bit [i]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int bits [31];
    char input [2];
    int i;
    int j;
    fprintf (stdout, "Enter at most 31 bits: ");
    for (i = 0; i < 31 && 1 == fscanf (stdin, "%1[01]", input); ++i)
        bits[i] = (input[0] == '1' ? 1 : 0);
    fprintf (stdout, "You entered: \n");
    for (j = 0; j < i; ++j)
        fputc (bits[j] ? '1' : '0', stdout);
    fprintf (stdout, "\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29437525_29437599_12_22
29437525_29437705_18_32
Title: Not able to read elements of array of pointer expcept of 0th element 
----------------------------------------

int main () {
    struct abc **k = malloc (2 * sizeof (struct abc *));
    k[0] = malloc (sizeof (struct abc));
    k[1] = malloc (sizeof (struct abc));
    k[0]->a = 2;
    k[1]->a = 3;
    a (k);
    return 0;
}
----------------------------------------

int main () {
    struct abc **k = malloc (3 * sizeof (struct abc *));
    k[0] = malloc (sizeof (struct abc));
    k[0]->a = 3;
    k[1] = malloc (sizeof (struct abc));
    k[1]->a = 2;
    k[2] = NULL;
    a (k);
    free (k [0]);
    free (k [1]);
    free (k);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2943779_2944015_12_21
2943779_2944015_1_9
Title: const read only local copies 
----------------------------------------

char *strcat (char *d, const char *s) {
    char *p = d;
    const char *s2 = s;
    while (*p)
        p++;
    while (*s2)
        *p++ = *s2++;
    *p = 0;
    return d;
}
----------------------------------------

char *strcat (char *d, const char *s) {
    char *p = d;
    while (*p)
        p++;
    while (*s)
        *p++ = *s++;
    *p = 0;
    return d;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29439150_29439572_6_18
29439150_29439816_27_48
Title: How to get a substring from a string in C? 
----------------------------------------

int main (void) {
    char *test = (char *) malloc (sizeof (char) * 5);
    char *sub = (char *) malloc (sizeof (char) * 3);
    strcpy (test, "test");
    substr (test, sub, 1, 2);
    printf ("%s\n", sub);
    free (test);
    free (sub);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 4) {
        fprintf (stderr, "error: insufficient input, usage: %s string ss_start ss_length\n", argv [0]);
        return 1;
    }
    char *test = argv[1];
    size_t ss_start = (size_t) atoi (argv[2]);
    size_t ss_lenght = (size_t) atoi (argv[3]);
    char *sub = substr (test, ss_start, ss_lenght);
    if (sub)
        printf ("\n sub: %s\n\n", sub);
    if (sub)
        free (sub);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29442881_29442911_32_60
29442881_29442917_23_48
Title: Structures: Undeclared identifiers 
----------------------------------------

int main (void) {
    struct time t1, t2;
    printf ("Enter hours1 (hh): ");
    scanf ("%d", & t1.hours);
    printf ("Enter minutes1 (mm): ");
    scanf ("%d", & t1.minutes);
    printf ("Enter seconds1 (ss): ");
    scanf ("%d", & t1.seconds);
    printf ("Enter hours2 (hh): ");
    scanf ("%d", & t2.hours);
    printf ("Enter minutes2 (mm): ");
    scanf ("%d", & t2.minutes);
    printf ("Enter seconds2 (ss): ");
    scanf ("%d", & t2.seconds);
    struct time_dif dif = timeDif (t1, t2);
    printf ("The difference is %d:%d:%d\n", dif.hourDif, dif.minDif, dif.secDif);
    return 0;
}
----------------------------------------

int main (void) {
    struct time1 time1;
    struct time2 time2;
    printf ("Enter seconds1 (ss)\n");
    scanf ("%d", & time1.seconds1);
    printf ("Enter minutes1 (mm)\n");
    scanf ("%d", & time1.minutes1);
    printf ("Enter hours1 (hh)\n");
    scanf ("%d", & time1.hours1);
    printf ("Enter seconds2 (ss)\n");
    scanf ("%d", & time2.seconds2);
    printf ("Enter minutes2 (mm)\n");
    scanf ("%d", & time2.minutes2);
    printf ("Enter hours2 (hh)\n");
    scanf ("%d", & time2.hours2);
    timeDif (time1, time2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29442881_29442911_32_60
29442881_29443010_19_42
Title: Structures: Undeclared identifiers 
----------------------------------------

int main (void) {
    struct time t1, t2;
    printf ("Enter hours1 (hh): ");
    scanf ("%d", & t1.hours);
    printf ("Enter minutes1 (mm): ");
    scanf ("%d", & t1.minutes);
    printf ("Enter seconds1 (ss): ");
    scanf ("%d", & t1.seconds);
    printf ("Enter hours2 (hh): ");
    scanf ("%d", & t2.hours);
    printf ("Enter minutes2 (mm): ");
    scanf ("%d", & t2.minutes);
    printf ("Enter seconds2 (ss): ");
    scanf ("%d", & t2.seconds);
    struct time_dif dif = timeDif (t1, t2);
    printf ("The difference is %d:%d:%d\n", dif.hourDif, dif.minDif, dif.secDif);
    return 0;
}
----------------------------------------

int main (void) {
    struct time time1, time2, diff;
    printf ("Enter seconds1 (ss)\n");
    scanf ("%d", & time1.seconds);
    printf ("Enter minutes1 (mm)\n");
    scanf ("%d", & time1.minutes);
    printf ("Enter hours1 (hh)\n");
    scanf ("%d", & time1.hours);
    printf ("Enter seconds2 (ss)\n");
    scanf ("%d", & time2.seconds);
    printf ("Enter minutes2 (mm)\n");
    scanf ("%d", & time2.minutes);
    printf ("Enter hours2 (hh)\n");
    scanf ("%d", & time2.hours);
    timeDif (time1, time2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29442881_29442917_23_48
29442881_29443010_19_42
Title: Structures: Undeclared identifiers 
----------------------------------------

int main (void) {
    struct time1 time1;
    struct time2 time2;
    printf ("Enter seconds1 (ss)\n");
    scanf ("%d", & time1.seconds1);
    printf ("Enter minutes1 (mm)\n");
    scanf ("%d", & time1.minutes1);
    printf ("Enter hours1 (hh)\n");
    scanf ("%d", & time1.hours1);
    printf ("Enter seconds2 (ss)\n");
    scanf ("%d", & time2.seconds2);
    printf ("Enter minutes2 (mm)\n");
    scanf ("%d", & time2.minutes2);
    printf ("Enter hours2 (hh)\n");
    scanf ("%d", & time2.hours2);
    timeDif (time1, time2);
    return 0;
}
----------------------------------------

int main (void) {
    struct time time1, time2, diff;
    printf ("Enter seconds1 (ss)\n");
    scanf ("%d", & time1.seconds);
    printf ("Enter minutes1 (mm)\n");
    scanf ("%d", & time1.minutes);
    printf ("Enter hours1 (hh)\n");
    scanf ("%d", & time1.hours);
    printf ("Enter seconds2 (ss)\n");
    scanf ("%d", & time2.seconds);
    printf ("Enter minutes2 (mm)\n");
    scanf ("%d", & time2.minutes);
    printf ("Enter hours2 (hh)\n");
    scanf ("%d", & time2.hours);
    timeDif (time1, time2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29450564_29450666_4_21
29450564_29451933_10_40
Title: My simple code doesn't give an output 
----------------------------------------

int main (void) {
    int year;
    float principal, amount, inrate, period, value;
    printf ("Please enter principal ");
    scanf ("%f", & principal);
    amount = principal;
    printf ("Please enter interest rate ");
    scanf ("%f", & inrate);
    year = 0;
    printf ("Please enter period ");
    scanf ("%f", & period);
    while (year <= period) {printf ("%d %f\n", year, amount);
    value = amount + amount * inrate;
    year = year + 1;
    amount = value;
}
----------------------------------------

int main (void) {
    int year = 0;
    float principal, amount, inrate, period, value;
    principal = amount = inrate = period = value = 0;
    printf ("Please enter principal: ");
    scanf ("%f", & principal);
    amount = principal;
    printf ("Please enter interest rate: ");
    scanf ("%f", & inrate);
    year = 0;
    printf ("Please enter period: ");
    scanf ("%f", & period);
    while (year <= period) {
        printf ("%3d %10.2f\n", year, amount);
        value = amount + amount * inrate;
        year = year + 1;
        amount = value;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29455170_29455350_11_30
29455170_29455846_61_85
Title: C Threads to print sequence of numbers : with even and odd number printing threads running parallely 
----------------------------------------

int main (void) {
    pthread_t pthread1, pthread2;
    int ret1, ret2;
    ret1 = pthread_create (&pthread1, NULL, printfun1, NULL);
    if (ret1) {
        printf ("thread creation failed");
    }
    ret2 = pthread_create (&pthread2, NULL, printfun2, NULL);
    if (ret2) {
        printf ("thread creation failed");
    }
    pthread_join (pthread1, NULL);
    pthread_join (pthread2, NULL);
}
----------------------------------------

int main (void) {
    pthread_t id1, id2;
    pthread_mutex_lock (& mainMutex);
    if (pthread_create (&id1, NULL, printOdd, NULL) != 0)
        exit (1);
    pthread_cond_wait (& mainCond, & mainMutex);
    if (pthread_create (&id2, NULL, printEven, NULL) != 0)
        exit (1);
    pthread_cond_wait (& mainCond, & mainMutex);
    pthread_mutex_unlock (& mainMutex);
    pthread_mutex_lock (& oddMutex);
    pthread_cond_signal (& oddCond);
    pthread_mutex_unlock (& oddMutex);
    pthread_join (id1, NULL);
    pthread_join (id2, NULL);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29455170_29455350_34_50
29455170_29461752_49_65
Title: C Threads to print sequence of numbers : with even and odd number printing threads running parallely 
----------------------------------------

void *printfun1 (void *ptr) {
    while (counter < 50) {
        pthread_mutex_lock (& mutex);
        while ((counter & 1) == 1)
            pthread_cond_wait (&even, &mutex);
        printf ("%d \n", counter);
        counter++;
        pthread_cond_signal (& odd);
        pthread_mutex_unlock (& mutex);
        usleep (1000000);
    }
    return NULL;
}
----------------------------------------

void *printfun1 (void *ptr) {
    do {
        while ((counter & 1) == 0) {
            usleep (100);
        }
        pthread_mutex_lock (& mutex);
        printf ("%d \n", counter);
        counter++;
        pthread_mutex_unlock (& mutex);
    }
    while (counter < 50);
    pthread_exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29455170_29455350_52_68
29455170_29461752_69_85
Title: C Threads to print sequence of numbers : with even and odd number printing threads running parallely 
----------------------------------------

void *printfun2 (void *ptr) {
    while (counter < 50) {
        pthread_mutex_lock (& mutex);
        while ((counter & 1) == 0)
            pthread_cond_wait (&odd, &mutex);
        printf ("%d \n", counter);
        counter++;
        pthread_cond_signal (& even);
        pthread_mutex_unlock (& mutex);
        usleep (1000000);
    }
    return NULL;
}
----------------------------------------

void *printfun2 (void *ptr) {
    do {
        while ((counter & 1) == 1) {
            usleep (100);
        }
        pthread_mutex_lock (& mutex);
        printf ("%d \n", counter);
        counter++;
        pthread_mutex_unlock (& mutex);
    }
    while (counter < 50);
    pthread_exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29459523_29459731_1_21
29459523_29459817_1_20
Title: C program to find substring in string 
----------------------------------------

int main (void) {
    char text [] = "I am James, James the Great, a pretty cool guy named James";
    char name [] = "James";
    char store [sizeof (text)];
    char *p = strstr (text, name);
    if (p == NULL) {
        printf ("Your name wasn't found!\n");
    }
    else {
        int len = strlen (name);
        int index = 0;
        do {
            memcpy (store + index, name, len);
            index += len;
            p = strstr (p +len, name);
        }
        while (p != NULL);
        store[index] = 0;
        printf ("%s\n", store);
    }
    return 0;
}
----------------------------------------

int main () {
    char text [58];
    strcpy (text, "I am James, James the Great, a pretty cool guy named James");
    char store [20];
    int len = strlen (text);
    int savePosition = 0;
    int i, k;
    for (i = 0; i < len; i++) {
        if (text[i] == 'J') {
            for (k = i; k < i + 5; k++) {
                store[savePosition] = text[k];
                ++savePosition;
            }
        }
    }
    store[savePosition] = '\0';
    printf ("%s\n", store);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29463759_29464048_6_34
29463759_29469098_7_35
Title: C: Trouble starting a program designed to recognize a string pattern 
----------------------------------------

int main (void) {
    char string [MAXLEN];
    for (;;) {
        memset (string, '\0', MAXLEN);
        printf ("Hello, I can tell if you are laughing or not, you can exit by typing 'bye': \n");
        readline (string, MAXLEN, stdin);
        int i = 0;
        int aborted = 0;
        char buf [3] = {0};
        while (i < strlen (string) - 1) {
            buf[i % 2] = string[i];
            if (i % 2 == 1) {
                if (strncmp (buf, "ha", 2) != 0 && strncmp (buf, "ho", 2) != 0) {
                    printf ("\nYou are NOT laughing [1]\n\n");
                    aborted = 1;
                    break;
                }
            }
            i++;
        }
        if (!aborted) {
            if (string[i] != '!') {
                printf ("\nYou are NOT laughing [2]\n\n");
                continue;
            }
            printf ("\nYou ARE laughing!\n\n");
        }
    }
}
----------------------------------------

int main (void) {
    char string [string_len + 1];
    while (1) {
        printf ("Hello, I can tell if you are laughing or not, you can exit by typing 'bye': \n");
        scanf ("%" n2s (string_len) "s", string);
        if (strcmp (string, "bye") == 0)
            break;
        int i, match = 1, ch;
        for (i = 0; match && (ch = string[i]) && ch != '!'; ++i) {
            if (i & 1) {
                if (string[i] != 'a' && string[i] != 'o') {
                    match = 0;
                }
            }
            else {
                if (string[i] != 'h') {
                    match = 0;
                }
            }
        }
        if (match && i != 0 && ch == '!')
            printf ("You are laughing!\n");
        else
            printf ("You are not laughing\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29464603_29465360_29_41
29464603_29467231_16_42
Title: C: Read a file and store them into a data structure 
----------------------------------------

int main () {
    int i;
    Stack st;
    st.top = -1;
    read (& st);
    for (i = 0; i <= st.top; i++) {
        printf ("%s\n", st.data [i].query);
    }
    fflush (stdin);
    getchar ();
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input, usage: %s <filename1>\n", argv [0]);
        return 1;
    }
    size_t index = 0;
    entry contacts [EMAX] = {{{0}, {0}, {0}}};
    index = readtxtfile (argv[1], contacts);
    if (index > 0) {
        printf ("\nNumber of entries in contacts : %zu\n\n", index);
        prn_entries (contacts);
    }
    else
        fprintf (stderr, "error: no entries read from file '%s'\n.", argv[1]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29493247_29494259_13_33
29493247_29497388_11_19
Title: Print first N numbers in BASE62 
----------------------------------------

int main () {
    const char ALPHABET [63] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int i, N = 100;
    char STR [10];
    for (i = 0; i < N; i++) {
        int num = i;
        int digits = num_digits (num);
        STR[digits] = '\0';
        while (num > 0) {
            char base62 = ALPHABET[num % 62];
            STR[--digits] = base62;
            num /= 62;
        }
        if (i == 0)
            STR[--digits] = ALPHABET[0];
        printf ("%s\n", i, STR);
    }
}
----------------------------------------

int main (void) {
    print_base (100, 10);
    puts ("");
    print_base (100, 16);
    puts ("");
    print_base (100, 62);
    puts ("");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29498573_29498574_1_16
29498573_29506125_1_14
Title: Convert a double* one-dimensional matrix to double** 2D square matrix 
----------------------------------------

double **vector_to_matrix (int sz, double *matrix_1d) {
    double **matrix_2d;
    matrix_2d = (double **) malloc (sz * sizeof (double *));
    for (int k = 0; k < sz; k++) {
        matrix_2d[k] = (double *) malloc (sz * sizeof (double));
    }
    for (int i = 0; i < sz; i++) {
        for (int j = sz * i; j < sz * (i + 1); j++) {
            matrix_2d[i][j % sz] = matrix_1d[j];
        }
    }
    return matrix_2d;
}
----------------------------------------

double **vector_to_matrix (int sz, double *matrix_1d) {
    double **matrix_2d = (double **) malloc (sz * sizeof (double *));
    for (int i = 0; i < sz; i++)
        matrix_2d[i] = (double *) malloc (sz * sizeof (double));
    for (int i = 0; i < sz; i++)
        for (int j = 0; j < sz; j++)
            matrix_2d[i][j] = matrix_id[i * sz + j];
    return matrix_2d;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29526868_29527036_1_11
29526868_29527071_1_13
Title: Reversing an array of the first n numbers in C programming 
----------------------------------------

int *reverse (int *arr, int n) {
    int i, temp;
    for (i = 0; i < --n; i++) {
        temp = arr[i];
        arr[i] = arr[n];
        arr[n] = temp;
    }
    return arr;
}
----------------------------------------

int *reverse (int *arr, int n) {
    int w, q = arr[0];
    if (q > n) {
        return NULL;
    }
    for (w = 0; w < --q; w++) {
        int e = arr[w];
        arr[w] = arr[q];
        arr[q] = e;
    }
    return arr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29529476_29529648_27_38
29529476_29529706_26_37
Title: C print ping-pong using semaphores and threads 
----------------------------------------

int main (void) {
    sem_init (& pingsem, 0, 0);
    sem_init (& pongsem, 0, 1);
    pthread_t ping_thread, pong_thread;
    pthread_create (& ping_thread, NULL, ping, NULL);
    pthread_create (& pong_thread, NULL, pong, NULL);
    pthread_join (ping_thread, NULL);
    pthread_join (pong_thread, NULL);
    return 0;
}
----------------------------------------

int main () {
    sem_destroy (& pingsem);
    sem_init (& pingsem, 0, 1);
    pthread_t ping_thread, pong_thread;
    pthread_create (& ping_thread, NULL, ping, (void *) 0);
    pthread_create (& pong_thread, NULL, pong, (void *) 1);
    pthread_exit (NULL);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29535255_29535495_5_22
29535255_29535753_4_17
Title: how to get minute of the system time from C program 
----------------------------------------

int main (void) {
    char buffer [0x100];
    time_t curtime;
    curtime = time (NULL);
    if (curtime == -1) {
        perror ("time()");
        return 1;
    }
    strftime (buffer, 0x100, "%M", localtime (& curtime));
    printf ("minutes: %s\n", buffer);
    return 0;
}
----------------------------------------

int main () {
    time_t curtime;
    char buffer [30];
    struct tm *tm_info;
    time (& curtime);
    tm_info = localtime (&curtime);
    strftime (buffer, 30, "%Y-%m-%d %H:%M:%S", tm_info);
    puts (buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29537616_29549271_4_45
29537616_29550812_19_116
Title: Ncurses background waiting for exit 
----------------------------------------

int main (void) {
    int parent_x, parent_y;
    int score_size = 10;
    int counter = 0;
    bool loop = TRUE;
    WINDOW *field;
    WINDOW *score;
    initscr ();
    cbreak ();
    noecho ();
    curs_set (FALSE);
    getmaxyx (stdscr, parent_y, parent_x);
    field = newwin (parent_y -score_size, parent_x, 0, 0);
    score = newwin (score_size, parent_x, parent_y -score_size, 0);
    keypad (field, TRUE);
    halfdelay (1);
    while (loop) {
        int c = wgetch (field);
        switch (c) {
        case KEY_F (10) :
            loop = FALSE;
            continue;
        default :
            break;
        }
        mvwprintw (field, 0, counter, "Field");
        mvwprintw (score, 0, counter, "Score");
        wrefresh (field);
        wrefresh (score);
        napms (5000);
        wclear (score);
        wclear (field);
        counter++;
    }
    delwin (field);
    delwin (score);
    endwin ();
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    int parent_x, parent_y;
    int score_size = 10;
    int counter = 0;
    struct sigaction sa;
    sa.sa_handler = handler;
    sa.sa_flags = 0;
    sigemptyset (& sa.sa_mask);
    if (sigaction (SIGALRM, &sa, NULL) == -1) {
        perror ("error calling sigaction()");
        exit (EXIT_FAILURE);
    }
    struct itimerval itv;
    itv.it_interval.tv_sec = 5;
    itv.it_interval.tv_usec = 0;
    itv.it_value.tv_sec = 5;
    itv.it_value.tv_usec = 0;
    if (setitimer (ITIMER_REAL, &itv, NULL) != 0) {
        perror ("seeor calling setitimer()");
        exit (EXIT_FAILURE);
    }
    WINDOW *mainwin = initscr ();
    noecho ();
    crmode ();
    keypad (mainwin, TRUE);
    wrefresh (mainwin);
    curs_set (FALSE);
    getmaxyx (stdscr, parent_y, parent_x);
    WINDOW *field = newwin (parent_y -score_size, parent_x, 0, 0);
    WINDOW *score = newwin (score_size, parent_x, parent_y -score_size, 0);
    while (true) {
        mvwprintw (field, 0, counter, "Field");
        mvwprintw (score, 0, counter, "Score");
        wrefresh (field);
        wrefresh (score);
        fd_set fds;
        FD_ZERO (& fds);
        FD_SET (STDIN_FILENO, & fds);
        int status = select (STDIN_FILENO +1, &fds, NULL, NULL, NULL);
        if (status == -1) {
            if (errno == EINTR) {
                wclear (score);
                wclear (field);
                counter++;
            }
            else {
                delwin (field);
                delwin (score);
                endwin ();
                perror ("error calling select()");
                exit (EXIT_FAILURE);
            }
        }
        else if (status == 1) {
            if (wgetch (mainwin) == KEY_F (10)) {
                break;
            }
        }
    }
    delwin (field);
    delwin (score);
    endwin ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29546926_29547022_1_21
29546926_29547429_1_18
Title: List structure - checking for sublist 
----------------------------------------

int Contains (struct Node **l1, struct Node **l2) {
    struct Node *tmp;
    while ((*l2) != NULL) {
        tmp = *l1;
        while (tmp != NULL) {
            if (tmp->data.id == (*l2)->data.id && strcmp (tmp->data.name, (*l2)->data.name) == 0) {
                return 1;
            }
            tmp = tmp->next;
        }
        *l2 = (*l2)->next;
    }
    return 0;
}
----------------------------------------

int Contains (struct Node *l1, struct Node *l2) {
    while (l2 != NULL) {
        struct Node *p = l1;
        while (p != NULL) {
            if (p->data.id == l2->data.id && strcmp (p->data.name, l2->data.name) == 0)
                return 1;
            p = p->next;
        }
        l2 = l2->next;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29554615_29554839_1_16
29554615_29554915_1_18
Title: Shifting a char value by 24 bits 
----------------------------------------

static unsigned int read24 (unsigned char *ptr) {
    unsigned char b0;
    unsigned char b1;
    unsigned int b2;
    b0 = *ptr++;
    b1 = *ptr++;
    b2 = *ptr;
    b2 <<= 16;
    b2 |= (b1 << 8) & 0xFF00;
    b2 |= b0;
    return b2;
}
----------------------------------------

static unsigned int read24 (unsigned char *ptr) {
    unsigned char b0;
    unsigned int b1;
    unsigned int b2;
    b0 = *ptr++;
    b1 = *ptr++;
    b2 = *ptr;
    b0 = (b0 & 0x000000ff);
    b1 = (b1 << 8) & 0x0000ff00);
    b2 = (b2 & 0x000000ff) << 16;
    return (b0 | b1 | b2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3519959_37350908_4_66
3519959_41474839_36_59
Title: Computing the inverse of a matrix using lapack in C 
----------------------------------------

int main () {
    int N = 3;
    int NN = 9;
    double M [3] [3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 19}};
    int pivotArray [3];
    int errorHandler;
    double lapackWorkspace [9];
    extern void dgetrf_ (int * m, int * n, double * A, int * LDA, int * IPIV, int * INFO);
    extern void dgetri_ (int * n, double * A, int * LDA, int * IPIV, double * WORK, int * LWORK, int * INFO);
    dgetrf_ (& N, & N, M [0], & N, pivotArray, & errorHandler);
    printf ("dgetrf eh, %d, should be zero\n", errorHandler);
    dgetri_ (& N, M [0], & N, pivotArray, lapackWorkspace, & NN, & errorHandler);
    printf ("dgetri eh, %d, should be zero\n", errorHandler);
    for (size_t row = 0; row < N; ++row) {
        for (size_t col = 0; col < N; ++col) {
            printf ("%g", M [row] [col]);
            if (N - 1 != col) {
                printf (", ");
            }
        }
        if (N - 1 != row) {
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    double A [] = {0.378589, 0.971711, 0.016087, 0.037668, 0.312398, 0.756377, 0.345708, 0.922947, 0.846671, 0.856103, 0.732510, 0.108942, 0.476969, 0.398254, 0.507045, 0.162608, 0.227770, 0.533074, 0.807075, 0.180335, 0.517006, 0.315992, 0.914848, 0.460825, 0.731980};
    for (int i = 0; i < 25; i++) {
        if ((i % 5) == 0)
            putchar ('\n');
        printf ("%+12.8f ", A [i]);
    }
    putchar ('\n');
    matInv (A, 5);
    for (int i = 0; i < 25; i++) {
        if ((i % 5) == 0)
            putchar ('\n');
        printf ("%+12.8f ", A [i]);
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
352055_352202_1_28
352055_4611430_1_42
Title: Best algorithm to strip leading and trailing spaces in C 
----------------------------------------

void strstrip (char *s) {
    char *start;
    char *end;
    start = s;
    while ((*start) && isspace (*start))
        start++;
    if (!(*start)) {
        *s = '\0';
        return;
    }
    end = start;
    while (!*end)
        end++;
    end--;
    while (end ! = start && isspace (* end)) end --;
    *(end + 1) = '\0';
    memmove (s, start, end - start + 1);
    return;
}
----------------------------------------

void strstrip (char *s) {
    char *start;
    char *end;
    if (s == NULL)
        return;
    start = s;
    while ((*start) && isspace (*start))
        start++;
    if (!(*start)) {
        *s = 0x00;
        return;
    }
    end = start;
    while (*end)
        end++;
    end--;
    while ((end != start) && isspace (*end))
        end--;
    *(end + 1) = 0x00;
    if (s != start)
        memmove (s, start, end -start + 1);
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35216087_35216506_4_39
35216087_35217352_5_26
Title: C - How to split a string that a user inputs 
----------------------------------------

int main () {
    char input_string [100];
    char firstStr [100], secondStr [100];
    printf ("Write a sentence \n");
    gets (input_string);
    int length = strlen (input_string);
    int i = 0;
    if (length % 2 == 0) {
        for (i = 0; i < length / 2; i++) {
            firstStr[i] = input_string[i];
        }
        firstStr[i] = '\0';
    }
    else {
        for (i = 0; i < (length / 2) + 1; i++) {
            firstStr[i] = input_string[i];
        }
        firstStr[i] = '\0';
    }
    int k = 0;
    for (int j = i; input_string[j]; j++) {
        secondStr[k++] = input_string[j];
    }
    secondStr[k] = '\0';
    printf ("%s %s\n", firstStr, secondStr);
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    if (fgets (string, sizeof (string), stdin) != NULL) {
        int len = strlen (string) - 1;
        int splitAt = len / 2;
        for (char *p = string; *p != '\n' && p < string + len; ++p) {
            fputc (* p, stdout);
            if (--splitAt == 0)
                fputc ('\n', stdout);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35216508_35216683_11_21
35216508_35216695_17_29
Title: Reverse command-line arguments (C) 
----------------------------------------

int main (int argc, char **argv) {
    for (int i = 0; i < argc; i++) {
        if (i != 0)
            putchar (' ');
        print_reversed (argv [i], strlen (argv [i]));
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int i;
    char *copy;
    for (i = 1; i < argc; i++) {
        copy = strdup (argv[i]);
        copy = reverse (copy);
        printf ("argv[%d] = \"%s\"\n", i, copy);
        free (copy);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35218154_35218462_3_16
35218154_35218583_11_57
Title: Reading hex values from and saving it to unsigned char array 
----------------------------------------

int main () {
    int license [20];
    char *hex = "0x020x000x000x000x000x000x680x000x000x000x020x000x000x000x000x00";
    int used = 0;
    int i = 0;
    while ((sscanf (hex +used, "%x", &license[i])) == 1) {
        printf ("%x", license [i]);
        i++;
        used += 4;
    }
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    char line [MAXL] = {0};
    unsigned values [MAXL] = {0};
    int base = argc > 2 ? atoi (argv[2]) : 16;
    size_t i, idx = 0;
    if (!fp) {
        fprintf (stderr, "error: file open failen '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (line, MAXL, fp)) {
        char *p = line;
        char *ep = p;
        char digits [3] = {0};
        errno = 0;
        while (errno == 0) {
            if (!(p = strchr (p, 'x')))
                break;
            strncpy (digits, ++ p, 2);
            digits[2] = 0;
            values[idx++] = (unsigned) xstrtoul (digits, &ep, base);
            if (errno || idx == MAXL) {
                fprintf (stderr, "warning: MAXL values reached.\n");
                break;
            }
            p += 2;
        }
    }
    if (fp != stdin)
        fclose (fp);
    for (i = 0; i < idx; i++)
        printf (" values[%2zu] : 0x%02x\n", i, values[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35224111_35224416_1_21
35224111_35224684_27_52
Title: C - why cant i read a linked list in a module and return the header in main? 
----------------------------------------

Poly *add_poly () {
    Poly *ret = (Poly *) malloc (sizeof (Poly));
    ret->next = NULL;
    Poly *temp = ret;
    while (1) {
        scanf ("%d %d", & temp -> x, & temp -> y);
        printf ("%dx^%d", temp -> x, temp -> y);
        if (temp->y == 0)
            break;
        temp->next = (Poly *) malloc (sizeof (Poly));
        temp = temp->next;
        temp->next = NULL;
    }
    return ret;
}
----------------------------------------

Poly *add_poly (Poly *head) {
    Poly **current = &head;
    int x, y;
    while (*current)
        current = &(*current)->next;
    do {
        if (scanf ("%d %d", &x, &y) != 2 || x == 0) {
            x = 0;
            y = 0;
        }
        *current = malloc (sizeof (Poly));
        (*current)->x = x;
        (*current)->y = y;
        current = &(*current)->next;
    }
    while (x != 0);
    return head;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35225981_35226150_6_16
35225981_35227967_39_56
Title: How to use fgets() in 2d-arrays (multiple dimension arrays)? 
----------------------------------------

int main (void) {
    char lines [N] [M];
    size_t n = 0;
    while (n < N && fgets (lines[n], sizeof (*lines), stdin) != NULL)
        ++n;
    for (size_t i = 0; i < n; i++)
        puts (lines[i]);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, nlines, value = argc > 1 ? atoi (argv[1]) : 2;
    char **array;
    array = salloc (value);
    if (!(nlines = input (value, array)))
        return 1;
    for (i = 0; i < nlines; i++)
        printf (" array[%2d] : %s\n", i, array[i]);
    for (i = 0; i < nlines; i++)
        free (array[i]);
    free (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35236272_35236349_1_12
35236272_35236459_1_16
Title: Converting a character pointer to uppercase in C 
----------------------------------------

void func (char *name) {
    List *l;
    l = malloc (sizeof (List));
    name = strdup (name);
    for (char *p = name; *p; p++) {
        *p = toupper (*p);
    }
    l->name = name;
}
----------------------------------------

void func (char *name) {
    int i;
    List *l;
    l = malloc (sizeof (List));
    char *buffer [strlen (name)];
    for (i = 0; i < strlen (name); i++) {
        buffer[i] = toupper (name[i]);
    }
    buffer[i] = '\0';
    strcpy (l -> name, buffer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35244042_35244361_2_16
35244042_35248118_3_20
Title: To find if entered no. is prime or not. The output i am getting is quite weird 
----------------------------------------

main () {
    int n, i;
    printf ("enter a no.");
    scanf ("%d", & n);
    for (i = 2; i <= n / 2; i++) {
        if (n % i == 0) {
            printf ("not prime");
            return 0;
        }
    }
    printf ("Number is prime.");
}
----------------------------------------

main () {
    int n, x;
    printf ("Enter a number");
    scanf ("%d", & n);
    for (x = 2; x <= n / 2; x++) {
        if (n % x == 0) {
            printf ("Not prime");
            break;
        }
        else {
            printf ("Prime");
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35244833_35245538_4_44
35244833_35254746_21_40
Title: Array organization (C Programming) 
----------------------------------------

int main (int argc, char *argv []) {
    int arr [] = {1, 1, 1, 1, 2, 5, 6, 8, 8, 2, 5, 6, 2, 1, 8, 3};
    size_t len = 16;
    int *new_array = (int *) calloc (len, sizeof (int)), new_len = 0;
    for (int i = 0; i < len; i++) {
        int unique = 1;
        for (int j = i - 1; j > -1; j--) {
            if (arr[i] == arr[j]) {
                unique = 0;
                break;
            }
        }
        if (unique) {
            new_array[new_len] = arr[i];
            new_len++;
        }
    }
    if (new_len < len) {
        new_array = (int *) realloc (new_array, sizeof (int) * new_len);
    }
    free (new_array);
    return 0;
}
----------------------------------------

int main (void) {
    int a [] = {1, 1, 1, 1, 2, 5, 6, 8, 8, 2, 5, 6, 2, 1, 8, 3};
    int size = sizeof (a) / sizeof (a[0]);
    int i, newsize;
    printf ("original array:");
    for (i = 0; i < size; i++) {
        printf (" %d", a [i]);
    }
    printf ("\n");
    newsize = fixArr (a, size);
    printf ("fixed array:");
    for (i = 0; i < newsize; i++) {
        printf (" %d", a [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35249403_35249719_3_40
35249403_35250999_8_35
Title: "Is it possible to sort in ascending order a 2D array in C? If so how?" 
----------------------------------------

int main () {
    int a [] [6] = {{25, 64, 96, 32, 78, 27}, {50, 12, 69, 78, 32, 92}};
    int i, j, k, temp, temp1;
    for (j = 1; j < 6; j++) {
        for (i = 0; i < 5; i++) {
            if (a[0][i] > a[0][i + 1]) {
                temp = a[0][i];
                a[0][i] = a[0][i + 1];
                a[0][i + 1] = temp;
                temp1 = a[1][i];
                a[1][i] = a[1][i + 1];
                a[1][i + 1] = temp1;
            }
        }
    }
    printf ("\n\nArray after sorting:\n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 6; j++) {
            printf ("%d\t", a [i] [j]);
        }
        printf ("\n");
    }
}
----------------------------------------

int main () {
    int array [] [NCOL] = {{3, 2, 1}, {5, 8, 7}, {4, 9, 3}};
    int i, j, nrows, nelem;
    nrows = sizeof array / sizeof *array;
    nelem = sizeof array / sizeof **array;
    printf ("\noriginal:\n\n");
    for (i = 0; i < nrows; i++) {
        for (j = 0; j < NCOL; j++)
            printf (" %2d", array[i][j]);
        putchar ('\n');
    }
    bubblesort (* array, nelem);
    printf ("\nsorted:\n\n");
    for (i = 0; i < nrows; i++) {
        for (j = 0; j < NCOL; j++)
            printf (" %2d", array[i][j]);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35249853_35249906_1_10
35249853_35250252_42_83
Title: Why do I get the same readout on my ASCII to number program? 
----------------------------------------

int main () {
    int i;
    char buffer [256];
    printf ("Enter a number: ");
    fgets (buffer, 256, stdin);
    i = atoi (buffer);
    printf ("The value entered is %d. Its double is %d.\n", i, i * 2);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char inputBuffer [1024];
    char *ptr = NULL;
    int integer = 8888;
    FILE *xfin;
    --argc;
    ++argv;
    if (argc > 0)
        xfin = fopen (*argv, "r");
    else
        xfin = stdin;
    while (fgets (inputBuffer, sizeof (inputBuffer), xfin)) {
        ptr = inputBuffer;
        int done = 0;
        while (!done) {
            char *newPtr = ASCIItoInt (ptr, &integer);
            if (newPtr == NULL) {
                if (*ptr != '\0')
                    ++ptr;
                else
                    done = 1;
            }
            else {
                printf ("%d\n", integer);
                ptr = newPtr;
            }
        }
    }
    if (argc > 0)
        fclose (xfin);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35336801_35337045_3_12
35336801_35337202_3_16
Title: Converting bits in an array to a decimal number 
----------------------------------------

int main (void) {
    char myArray [8] = {1, 1, 1, 1, 1, 1, 1, 1};
    int i;
    int result = 0;
    for (i = 0; i < sizeof (myArray); i++) {
        result += myArray[sizeof (myArray) - i - 1] << i;
    }
    printf ("%d\n", result);
    return 0;
}
----------------------------------------

int main () {
    int a [8] = {1, 1, 1, 1, 1, 1, 1, 1};
    int n = 8, dec = 0;
    int j = 0, f;
    for (int i = (n - 1); i >= 0; i--) {
        dec = (a[i] * (int) pow (2, j)) + dec;
        j++;
    }
    printf ("The converted Decimal number is:  %d", dec);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35337420_35337936_1_24
35337420_35340454_19_44
Title: How to read data form an UART 
----------------------------------------

void getdata (char *receivedChars) {
    static uint8_t detected, ndx;
    int retchar;
    retchar = getchar ();
    if ((retchar == 'R') && (detected == 0)) {
        detected = 1;
        ndx = 0;
    }
    if ((detected == 1) && (ndx < 4)) {
        receivedChars[ndx] = retchar;
        ndx++;
    }
    if (retchar == '\r') {
        receivedChars[ndx] = '\0';
        ndx = 0;
        ti_uart_writebuffer (UART_0, (uint8_t *) receivedChars, sizeof (receivedChars));
    }
}
----------------------------------------

bool getdata (char *receivedChars) {
    int count = 0;
    char retchar;
    char buffer [5] = {0};
    while (1) {
        retchar = getchar ();
        if ((retchar == 'R') && (count == 0)) {
            buffer[count] = 'R';
            count++;
        }
        else if ((count > 0) && (count < 5) && isdigit (retchar) != 0) {
            buffer[count] = retchar;
            count++;
        }
        else if (retchar == -1) {
            return false;
        }
        else {
            continue;
        }
        if (count == 5) {
            strncpy (receivedChars, buffer, count);
            return true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35356844_35357221_1_11
35356844_35358210_1_12
Title: Rotated strings 
----------------------------------------

int isRotated (char *s1, char *s2) {
    char s [200];
    strcpy (s, s1);
    strcat (s, s1);
    if (strstr (s, s2))
        return 1;
    else
        return 0;
}
----------------------------------------

int isRotated (char *s1, char *s2) {
    char s [199];
    if (strlen (s1) != strlen (s2))
        return 0;
    else if (strcmp (s1, s2) == 0)
        return 1;
    else
        strcpy (s, s1);
    strcat (s, s1);
    return isSubString (s, s2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35356844_35357221_1_11
35356844_35358855_1_12
Title: Rotated strings 
----------------------------------------

int isRotated (char *s1, char *s2) {
    char s [200];
    strcpy (s, s1);
    strcat (s, s1);
    if (strstr (s, s2))
        return 1;
    else
        return 0;
}
----------------------------------------

int isRotated (const char *s1, const char *s2) {
    const size_t l1 = strlen (s1);
    const size_t l2 = strlen (s2);
    if (l1 != l2)
        return 0;
    char joined [2 * l1 + 1];
    memcpy (joined, s1, l1);
    memcpy (joined + l1, s1, l1);
    joined[2 * l1] = '\0';
    return strstr (joined, s2) != NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35356844_35358210_1_12
35356844_35358855_1_12
Title: Rotated strings 
----------------------------------------

int isRotated (char *s1, char *s2) {
    char s [199];
    if (strlen (s1) != strlen (s2))
        return 0;
    else if (strcmp (s1, s2) == 0)
        return 1;
    else
        strcpy (s, s1);
    strcat (s, s1);
    return isSubString (s, s2);
}
----------------------------------------

int isRotated (const char *s1, const char *s2) {
    const size_t l1 = strlen (s1);
    const size_t l2 = strlen (s2);
    if (l1 != l2)
        return 0;
    char joined [2 * l1 + 1];
    memcpy (joined, s1, l1);
    memcpy (joined + l1, s1, l1);
    joined[2 * l1] = '\0';
    return strstr (joined, s2) != NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35370200_35370753_11_30
35370200_35411999_6_41
Title: Converting decimal to BCD 
----------------------------------------

int main (void) {
    int value;
    value = 42;
    display (value, "forty two");
    value = 0;
    display (value, "zero");
    value = 99;
    display (value, "ninety nine");
    value = (value + 1) % 100;
    display (value, "zero");
    value = (value - 1 + 100) % 100;
    display (value, "ninety nine");
    return 0;
}
----------------------------------------

int main (void) {
    WDTCTL = WDTPW | WDTHOLD;
    P1DIR = 0xFF;
    P2DIR = 0x00;
    unsigned int c;
    unsigned int count = 0x00;
    while (1) {
        if ((P2IN & BIT0) == BIT0) {
            count++;
            if (count == (99 + 1)) {
                count = 0x00;
            }
            c = dec2bcd (count);
        }
        else if ((P2IN & BIT1) == BIT1) {
            count--;
            if (count == (0 - 1)) {
                count = 0x63;
            }
            c = dec2bcd (count);
        }
        else if ((P2IN & BIT2) == BIT2) {
            count = 0x00;
            c = dec2bcd (count);
        }
        delay ();
        P1OUT = c;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35370200_35371705_1_12
35370200_35411999_43_54
Title: Converting decimal to BCD 
----------------------------------------

unsigned int dec2bcd (unsigned int num) {
    unsigned int ones = 0;
    unsigned int tens = 0;
    unsigned int temp = 0;
    ones = num % 10;
    temp = num / 10;
    tens = temp << 4;
    return (tens + ones);
}
----------------------------------------

unsigned int dec2bcd (unsigned int num) {
    unsigned int ones = 0;
    unsigned int tens = 0;
    unsigned int temp = 0;
    ones = num % 10;
    temp = num / 10;
    tens = (temp % 10) << 4;
    return (tens + ones);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35376070_35376231_3_25
35376070_35376259_3_40
Title: C program for palindrome 
----------------------------------------

int main () {
    char str [30];
    int i, len = 0;
    int flag = 1;
    printf ("Enter a string: \n");
    scanf ("%s", & str);
    for (i = 0; str[i] != '\0'; i++) {
        len++;
    }
    len--;
    for (i = 0; i <= len / 2; i++)
        if (str[i] != str[len - i]) {
            flag = 0;
            break;
        }
    if (flag == 1)
        printf ("%s is a palindrome. \n", str);
    return 0;
}
----------------------------------------

int main () {
    char str [30], temp [30];
    int first, last, e;
    printf ("Enter a string: ");
    scanf ("%s", str);
    for (first = 0; str[first] != '\0'; first++) {
        e = first;
    }
    for (first = 0, last = e; str[first] != '\0'; first++, last--) {
        temp[first] = str[last];
    }
    temp[first] = '\0';
    for (first = 0; str[first] != '\0'; first++) {
        if (str[first] != temp[first]) {
            printf ("%s is not a palindrome!\n", str);
            break;
        }
    }
    if (str[first] == '\0') {
        printf ("%s is a palindrome.\n", str);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35376070_35376231_3_25
35376070_50516700_3_29
Title: C program for palindrome 
----------------------------------------

int main () {
    char str [30];
    int i, len = 0;
    int flag = 1;
    printf ("Enter a string: \n");
    scanf ("%s", & str);
    for (i = 0; str[i] != '\0'; i++) {
        len++;
    }
    len--;
    for (i = 0; i <= len / 2; i++)
        if (str[i] != str[len - i]) {
            flag = 0;
            break;
        }
    if (flag == 1)
        printf ("%s is a palindrome. \n", str);
    return 0;
}
----------------------------------------

int main (void) {
    char name [10];
    int x, i, r, count = 0;
    printf ("Enter the Name : ");
    scanf ("%s", & name);
    x = strlen (name);
    r = x - 1;
    for (i = 0; i < x; i++) {
        if (name[i] == name[r]) {
            count = count + 1;
        }
        else {
            break;
        }
        r = r - 1;
    }
    if (count == x)
        printf ("%s is a Palindrome\n", name);
    else
        printf ("%s is not a Palindrome\n", name);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35376070_35376259_3_40
35376070_50516700_3_29
Title: C program for palindrome 
----------------------------------------

int main () {
    char str [30], temp [30];
    int first, last, e;
    printf ("Enter a string: ");
    scanf ("%s", str);
    for (first = 0; str[first] != '\0'; first++) {
        e = first;
    }
    for (first = 0, last = e; str[first] != '\0'; first++, last--) {
        temp[first] = str[last];
    }
    temp[first] = '\0';
    for (first = 0; str[first] != '\0'; first++) {
        if (str[first] != temp[first]) {
            printf ("%s is not a palindrome!\n", str);
            break;
        }
    }
    if (str[first] == '\0') {
        printf ("%s is a palindrome.\n", str);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char name [10];
    int x, i, r, count = 0;
    printf ("Enter the Name : ");
    scanf ("%s", & name);
    x = strlen (name);
    r = x - 1;
    for (i = 0; i < x; i++) {
        if (name[i] == name[r]) {
            count = count + 1;
        }
        else {
            break;
        }
        r = r - 1;
    }
    if (count == x)
        printf ("%s is a Palindrome\n", name);
    else
        printf ("%s is not a Palindrome\n", name);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35376769_35376895_3_15
35376769_35376997_1_24
Title: Sorting one array into another- C 
----------------------------------------

void sort_another_array (int *param, int *target, int size) {
    for (int i = 0; i < size; i++) {
        int j = i - 1;
        while (j >= 0 && target[j] > param[i]) {
            target[j + 1] = target[j];
            j--;
        }
        target[j + 1] = param[i];
    }
}
----------------------------------------

void sort_another_array (int *param, int *target, int size) {
    int i, j, lowest;
    for (i = 0; i < size; i++) {
        int k = 0;
        if (i > 0) {
            while (param[k] <= target[i - 1])
                k++;
        }
        lowest = param[k];
        for (j = 1; j < size; j++) {
            if ((i == 0 && param[j] < lowest) || (i > 0 && param[j] < lowest && param[j] > target[i - 1])) {
                lowest = param[j];
            }
        }
        target[i] = lowest;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35376769_35376895_3_15
35376769_35377085_1_20
Title: Sorting one array into another- C 
----------------------------------------

void sort_another_array (int *param, int *target, int size) {
    for (int i = 0; i < size; i++) {
        int j = i - 1;
        while (j >= 0 && target[j] > param[i]) {
            target[j + 1] = target[j];
            j--;
        }
        target[j + 1] = param[i];
    }
}
----------------------------------------

void sort_another_array (int *param, int *target, int size) {
    int j, past_min, current_min, write = 0, round_write = 0;
    while (round_write != size) {
        for (j = 0; j < size; ++j) {
            if (round_write == 0 || param[j] > past_min) {
                if (write == round_write || param[j] < current_min) {
                    current_min = param[j];
                    write = round_write;
                    target[write] = current_min;
                    ++write;
                }
                else if (param[j] == current_min) {
                    target[write] = current_min;
                    ++write;
                }
            }
        }
        round_write = write;
        past_min = current_min;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35376769_35376997_1_24
35376769_35377085_1_20
Title: Sorting one array into another- C 
----------------------------------------

void sort_another_array (int *param, int *target, int size) {
    int i, j, lowest;
    for (i = 0; i < size; i++) {
        int k = 0;
        if (i > 0) {
            while (param[k] <= target[i - 1])
                k++;
        }
        lowest = param[k];
        for (j = 1; j < size; j++) {
            if ((i == 0 && param[j] < lowest) || (i > 0 && param[j] < lowest && param[j] > target[i - 1])) {
                lowest = param[j];
            }
        }
        target[i] = lowest;
    }
}
----------------------------------------

void sort_another_array (int *param, int *target, int size) {
    int j, past_min, current_min, write = 0, round_write = 0;
    while (round_write != size) {
        for (j = 0; j < size; ++j) {
            if (round_write == 0 || param[j] > past_min) {
                if (write == round_write || param[j] < current_min) {
                    current_min = param[j];
                    write = round_write;
                    target[write] = current_min;
                    ++write;
                }
                else if (param[j] == current_min) {
                    target[write] = current_min;
                    ++write;
                }
            }
        }
        round_write = write;
        past_min = current_min;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35402472_35403185_4_36
35402472_35405799_9_34
Title: How would I scan over a string with someone's name and create initials for it? 
----------------------------------------

int main (void) {
    char name [100];
    while (printf ("Please enter the name (First Middle Last): ") > 0 && fgets (name, sizeof (name), stdin) != 0) {
        char *s = name;
        int inword = 0;
        unsigned char c;
        char initials [20] = "";
        char *p = initials;
        char *e = initials + sizeof (initials) - 2;
        while ((c = (unsigned char) *s++) != '\0') {
            if (!isalpha (c))
                inword = 0;
            else if (inword == 0) {
                *p++ = toupper (c);
                *p++ = '.';
                inword = 1;
                if (p >= e)
                    break;
            }
        }
        if (p > initials)
            *(p - 1) = '\0';
        printf ("Initials: %s\n", initials);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    char intls [MAXI + 1] = {0};
    char name [MAXC] = {0};
    size_t len = 0;
    printf ("Enter your full name ('First Middle Last'): ");
    if (!fgets (name, MAXC, stdin)) {
        fprintf (stderr, "error: invalid name\n");
        return 1;
    }
    len = strlen (name);
    if (len > 1)
        name[len - 1] = 0;
    else {
        fprintf (stderr, "error: empty string for name.\n");
        return 1;
    }
    if (!initials (intls, name))
        return 1;
    printf ("\n name     : %s\n initials : %s\n\n", name, intls);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3540440_14801691_4_28
3540440_3540534_5_15
Title: Finding out the sum of first and the last digit of any number 
----------------------------------------

int main (void) {
    int firstdigit, lastdigit, number, sum;
    printf ("Enter the number whose sum of first and last digit to be found: \n\n");
    scanf ("%d", & number);
    if (number >= 10) {
        firstdigit = number;
        while (firstdigit >= 10)
            firstdigit /= 10;
        lastdigit = number % 10;
        sum = firstdigit + lastdigit;
        printf ("The sum of first=%d and last=%d digit is %d\n", firstdigit, lastdigit, sum);
    }
    else {
        printf ("wrong input given\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char number [MAX_LENGTH];
    int first, last, sum;
    while (scanf ("%s", number) == 1) {
        first = number[0];
        last = number[strlen (number) - 1];
        sum = atoi (&first) + atoi (&last);
        printf ("Sum = %d\n", sum);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3540440_14801691_4_28
3540440_3540610_3_18
Title: Finding out the sum of first and the last digit of any number 
----------------------------------------

int main (void) {
    int firstdigit, lastdigit, number, sum;
    printf ("Enter the number whose sum of first and last digit to be found: \n\n");
    scanf ("%d", & number);
    if (number >= 10) {
        firstdigit = number;
        while (firstdigit >= 10)
            firstdigit /= 10;
        lastdigit = number % 10;
        sum = firstdigit + lastdigit;
        printf ("The sum of first=%d and last=%d digit is %d\n", firstdigit, lastdigit, sum);
    }
    else {
        printf ("wrong input given\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int sum = 0;
    int first, last;
    int n;
    cin >> n;
    first = n % 10;
    while (n != 0) {
        last = n / 10;
    }
    sum = first + last;
    cout << sum << endl;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3540440_3540534_5_15
3540440_3540610_3_18
Title: Finding out the sum of first and the last digit of any number 
----------------------------------------

int main () {
    char number [MAX_LENGTH];
    int first, last, sum;
    while (scanf ("%s", number) == 1) {
        first = number[0];
        last = number[strlen (number) - 1];
        sum = atoi (&first) + atoi (&last);
        printf ("Sum = %d\n", sum);
    }
    return 0;
}
----------------------------------------

int main () {
    int sum = 0;
    int first, last;
    int n;
    cin >> n;
    first = n % 10;
    while (n != 0) {
        last = n / 10;
    }
    sum = first + last;
    cout << sum << endl;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35411471_35412038_3_25
35411471_35412839_26_34
Title: adding an outer while loop to my c program - beginner 1 to continue 0 to stop 
----------------------------------------

int main (void) {
    int boundary, choice, isq, ssq;
    while (1) {
        printf ("Enter an integer: ");
        scanf ("%d", & boundary);
        ssq = 0;
        for (isq = 1; isq <= boundary; isq++) {
            ssq = ssq + (isq * isq);
        }
        printf ("The sum of the squares of integers from 0 to %d is %d\n", boundary, ssq);
        printf ("Would you like to go again? (1 for yes, 0 for no): ");
        scanf ("%d", & choice);
        if (choice == 0)
            break;
    }
    return 0;
}
----------------------------------------

int main (void) {
    do {
        int boundary = getBoundary ();
        int ssq = computeSSQ (boundary);
        printf ("The sum of the squares of integers from 0 to %d is %d\n", boundary, ssq);
    }
    while (again ());
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35412387_35412868_1_16
35412387_35413179_1_15
Title: String sort doesn't work properly 
----------------------------------------

int should_be_swapped (char ch1, char ch2) {
    if (ch1 < ch2 && ch1 <= 'Z' && ch1 >= 'A' && ch2 <= 'z' && ch2 >= 'a') {
        return 1;
    }
    if (ch1 > ch2 && ch1 <= 'z' && ch1 >= 'a' && ch2 <= 'z' && ch2 >= 'a') {
        return 1;
    }
    if (ch1 > ch2 && ch1 <= 'Z' && ch1 >= 'A' && ch2 <= 'Z' && ch2 >= 'A') {
        return 1;
    }
    else {
        return 0;
    }
}
----------------------------------------

int should_be_swapped (char ch1, char ch2) {
    const char cn1 = (ch1 <= 'z' && ch1 >= 'a') ? ch1 - ('A' - 'a') : ch1;
    const char c1 = (ch1 <= 'Z' && ch1 >= 'A') ? ch1 + ('A' - 'a') : cn1;
    const char cn2 = (ch2 <= 'z' && ch2 >= 'a') ? ch2 - ('A' - 'a') : ch2;
    const char c2 = (ch2 <= 'Z' && ch2 >= 'A') ? ch2 + ('A' - 'a') : cn2;
    if (c1 > c2) {
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35412387_35412879_1_11
35412387_35413179_1_15
Title: String sort doesn't work properly 
----------------------------------------

int should_be_swapped (char ch1, char ch2) {
    if (ch1 <= 'Z' && ch1 >= 'A' && ch2 <= 'z' && ch2 >= 'a') {
        return 1;
    }
    else if (ch1 <= 'z' && ch1 >= 'a' && ch2 <= 'Z' && ch2 >= 'A') {
        return 0;
    }
    else if (ch1 > ch2) {
        return 1;
    }
    else {
        return 0;
    }
}
----------------------------------------

int should_be_swapped (char ch1, char ch2) {
    const char cn1 = (ch1 <= 'z' && ch1 >= 'a') ? ch1 - ('A' - 'a') : ch1;
    const char c1 = (ch1 <= 'Z' && ch1 >= 'A') ? ch1 + ('A' - 'a') : cn1;
    const char cn2 = (ch2 <= 'z' && ch2 >= 'a') ? ch2 - ('A' - 'a') : ch2;
    const char c2 = (ch2 <= 'Z' && ch2 >= 'A') ? ch2 + ('A' - 'a') : cn2;
    if (c1 > c2) {
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35427594_35428491_28_38
35427594_35429245_13_32
Title: Printing a Diamond of Numbers in C 
----------------------------------------

int main (int argc, char **argv) {
    int n = 0;
    if (argc > 1)
        n = atoi (argv[1]);
    if (n <= 0)
        n = 5;
    print_pattern (n);
    return 0;
}
----------------------------------------

void main () {
    int i, j, m;
    int num = 5;
    for (i = 1; i <= num; i += 2) {
        for (j = num; j >= i; j--)
            printf (" ");
        for (m = 1; m <= i; m++)
            myprintf (" *");
        myprintf ("\n");
    }
    num -= 2;
    for (i = 1; i <= num; i += 2) {
        printf ("  ");
        for (j = 1; j <= i; j++)
            printf (" ");
        for (m = num; m >= i; m--)
            myprintf (" *");
        myprintf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35439456_35439990_1_16
35439456_35440113_1_12
Title: how to print an unsized array in C 
----------------------------------------

int main () {
    int i;
    char *prt_1st;
    char list_ch [] [2] = {'1', 'a', '2', 'b', '3', 'c', '4', 'd', '5', 'e', '6', 'f'};
    prt_1st = list_ch[0];
    for (i = 0; i < sizeof (list_ch); i++) {
        printf ("The content of the array is %c under %d position\n", * prt_1st, i);
        prt_1st = prt_1st + 1;
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    char (*prt_1st) [2];
    char list_ch [] [2] = {{'1', 'a'}, {'2', 'b'}, {'3', 'c'}, {'4', 'd'}, {'5', 'e'}, {'6', 'f'}};
    for (i = 0; i < sizeof (list_ch) / sizeof (list_ch[2]); i++) {
        for (j = 0; j < sizeof (list_ch[2]); j++)
            printf ("The content of the array is %c under %d,%d position\n", list_ch[i][j], i, j);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3546569_3546710_6_30
3546569_3547974_5_32
Title: How can I split strings into different types (int for numerical values and char for letters)? 
----------------------------------------

int main () {
    char str [] = "SMUL 9 A B";
    char *pch;
    char *operation;
    int number;
    pch = strtok (str, " ");
    while (pch != NULL) {
        if (is_operation (pch)) {
            operation = strdup (pch);
        }
        else if (is_number (pch)) {
            number = atoi (pch);
        }
        else {
            add_operand (pch);
        }
        pch = strtok (NULL, " ");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char buffer [1024];
    char matrix1;
    char matrix2;
    int scalar;
    fgets (buffer, sizeof (buffer), stdin);
    if (strncmp (buffer, "SMUL ", 5) == 0) {
        if (sscanf (buffer, "%*s %d %c %c", &scalar, &matrix1, &matrix2) != 3) {
            printf ("Unexpected Input: %s\n", buffer);
            return EXIT_FAILURE;
        }
        printf ("Using scalar %d on matrices %c and %c.\n", scalar, matrix1, matrix2);
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35467965_35468160_4_19
35467965_35468191_1_22
Title: Using While loop to complete the following equation 
----------------------------------------

int main (void) {
    double x = 0;
    double y = 0;
    double z = 0;
    if (scanf ("%lf", &x) != 1)
        return -1;
    for (double n = 0; y < x; ++n) {
        z = y;
        y = y + pow (n, 2);
    }
    fprintf (stdout, "%f\n", z);
    return 0;
}
----------------------------------------

int main (void) {
    int number;
    printf ("Please enter a number\n");
    scanf ("%d", & number);
    double c = 1;
    double n = 0;
    double prev = 0;
    while (n < number) {
        prev = n;
        n += pow (c, 2);
        c++;
    }
    printf ("The largest n is %lf\n", prev);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35467965_35468160_4_19
35467965_35468270_3_23
Title: Using While loop to complete the following equation 
----------------------------------------

int main (void) {
    double x = 0;
    double y = 0;
    double z = 0;
    if (scanf ("%lf", &x) != 1)
        return -1;
    for (double n = 0; y < x; ++n) {
        z = y;
        y = y + pow (n, 2);
    }
    fprintf (stdout, "%f\n", z);
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter a positive number (0-exit): ");
        unsigned int number;
        if (!(scanf ("%u", &number) == 1) || number == 0)
            break;
        unsigned int n = 0;
        unsigned long long sum = 0;
        while ((sum + (unsigned long long) (n + 1) * (n + 1)) < number) {
            ++n;
            sum += (unsigned long long) n * n;
        }
        printf ("The largest n is %u and the corresponding sum is %llu\n", n, sum);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35467965_35468160_4_19
35467965_35468475_5_22
Title: Using While loop to complete the following equation 
----------------------------------------

int main (void) {
    double x = 0;
    double y = 0;
    double z = 0;
    if (scanf ("%lf", &x) != 1)
        return -1;
    for (double n = 0; y < x; ++n) {
        z = y;
        y = y + pow (n, 2);
    }
    fprintf (stdout, "%f\n", z);
    return 0;
}
----------------------------------------

int main (void) {
    int number;
    printf ("Please enter a number\n");
    scanf ("%i", & number);
    int c = 1;
    int n = 0;
    while (n < number) {
        n += c * c;
        c++;
    }
    printf ("The largest n is %i\n", -- c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35467965_35468191_1_22
35467965_35468270_3_23
Title: Using While loop to complete the following equation 
----------------------------------------

int main (void) {
    int number;
    printf ("Please enter a number\n");
    scanf ("%d", & number);
    double c = 1;
    double n = 0;
    double prev = 0;
    while (n < number) {
        prev = n;
        n += pow (c, 2);
        c++;
    }
    printf ("The largest n is %lf\n", prev);
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter a positive number (0-exit): ");
        unsigned int number;
        if (!(scanf ("%u", &number) == 1) || number == 0)
            break;
        unsigned int n = 0;
        unsigned long long sum = 0;
        while ((sum + (unsigned long long) (n + 1) * (n + 1)) < number) {
            ++n;
            sum += (unsigned long long) n * n;
        }
        printf ("The largest n is %u and the corresponding sum is %llu\n", n, sum);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35467965_35468191_1_22
35467965_35468475_5_22
Title: Using While loop to complete the following equation 
----------------------------------------

int main (void) {
    int number;
    printf ("Please enter a number\n");
    scanf ("%d", & number);
    double c = 1;
    double n = 0;
    double prev = 0;
    while (n < number) {
        prev = n;
        n += pow (c, 2);
        c++;
    }
    printf ("The largest n is %lf\n", prev);
    return 0;
}
----------------------------------------

int main (void) {
    int number;
    printf ("Please enter a number\n");
    scanf ("%i", & number);
    int c = 1;
    int n = 0;
    while (n < number) {
        n += c * c;
        c++;
    }
    printf ("The largest n is %i\n", -- c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35467965_35468270_3_23
35467965_35468475_5_22
Title: Using While loop to complete the following equation 
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter a positive number (0-exit): ");
        unsigned int number;
        if (!(scanf ("%u", &number) == 1) || number == 0)
            break;
        unsigned int n = 0;
        unsigned long long sum = 0;
        while ((sum + (unsigned long long) (n + 1) * (n + 1)) < number) {
            ++n;
            sum += (unsigned long long) n * n;
        }
        printf ("The largest n is %u and the corresponding sum is %llu\n", n, sum);
    }
}
----------------------------------------

int main (void) {
    int number;
    printf ("Please enter a number\n");
    scanf ("%i", & number);
    int c = 1;
    int n = 0;
    while (n < number) {
        n += c * c;
        c++;
    }
    printf ("The largest n is %i\n", -- c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35472163_35472399_4_21
35472163_35473441_6_35
Title: How to show lines from a text file matching the first five character taking as input? 
----------------------------------------

int main () {
    char inp [100], line [100], temp [6];
    FILE *file = fopen ("input.txt", "r");
    fgets (inp, sizeof (inp), stdin);
    inp[5] = 0;
    while (fgets (line, sizeof (line), file)) {
        if (strlen (line) < 5)
            continue;
        strncpy (temp, line, 5);
        temp[5] = 0;
        if (!strcmp (inp, temp))
            printf ("%s", line);
    }
    fclose (file);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char s1 [MAXC] = "";
    char buf [MAXC] = "";
    size_t idx = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (buf, MAXC, fp)) {
        if (!idx++) {
            strcpy (s1, buf);
            printf ("%s", s1);
            if (strlen (s1) < 5) {
                fprintf (stderr, "error: invalid first line.\n");
                return 1;
            }
            else
                continue;
        }
        if (strncmp (s1, buf, 5) == 0)
            printf ("%s", s1);
    }
    if (fp != stdin)
        fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3547633_3583243_3_45
3547633_3583623_3_66
Title: "finding summinmax with array" 
----------------------------------------

int main (void) {
    float temp;
    int val, i, j, k;
    double sum = 0;
    double max, min;
    printf ("Enter the number of values: ");
    scanf ("%d", & val);
    double number [val];
    for (i = 0; i < val; i++) {
        printf ("enter a value: ");
        scanf ("%lf", & number [i]);
        sum = sum + number[i];
    }
    min = number[0];
    max = number[0];
    for (j = 0; j < val; j++) {
        if (number[j] < min)
            min = number[j];
    }
    for (k = 0; k < val; k++) {
        if (number[k] > max)
            max = number[k];
    }
    printf ("Sum = %.lf\n", sum);
    printf ("Maximum element: %.f\n", max);
    printf ("Minimum element: %.lf\n", min);
}
----------------------------------------

int main (void) {
    float temp;
    int val, i, j, k;
    double sum = 0;
    double number [val];
    printf ("Enter the number of values: ");
    scanf ("%d", & val);
    double number [val];
    for (i = 1; i <= val; i++) {
        printf ("enter a value: ");
        scanf ("%lf", & number [i]);
        sum = sum + number[i];
    }
    for (i = 1; i <= val; i++) {
        for (j = i + 1; j <= val; j++) {
            if (number[i] > number[j]) {
                temp = number[i];
                number[i] = number[j];
                number[j] = temp;
            }
        }
    }
    printf ("Sum = %.lf\n", sum);
    printf ("Maximum element: %f\n", number [val]);
    printf ("Minimum element: %lf\n", number [1]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35479834_35480190_5_30
35479834_35480396_1_22
Title: Extract a column of a list from a text file in C 
----------------------------------------

int main (int argc, char const *argv []) {
    FILE *in = stdin;
    FILE *out = stdout;
    int want = 1;
    int col = 0;
    int sep = ',';
    for (;;) {
        int c = getc (in);
        if (c == EOF)
            break;
        if (c == sep) {
            col++;
        }
        else if (c == '\n') {
            col = 0;
            putc (c, out);
        }
        else if (col == want) {
            putc (c, out);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char const *argv []) {
    FILE *input_file;
    FILE *output_file;
    char buf [128];
    char *ptr;
    input_file = fopen ("timestamps.txt", "r");
    output_file = fopen ("singles.dat", "w");
    if (!input_file)
        return -1;
    while (fgets (buf, sizeof buf, input_file)) {
        ptr = strchr (buf, ',');
        if (ptr != NULL) {
            fputs (ptr + 1, output_file);
        }
    }
    fclose (input_file);
    fclose (output_file);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35482834_35483110_1_20
35482834_35483578_3_15
Title: "The longest sequence of the same value C array" 
----------------------------------------

int longest_sequence (int *array, int count) {
    int length;
    int longest;
    longest = length = 0;
    for (int i = 0; i < count - 1; i++) {
        if (array[i + 1] == array[i])
            length++;
        else {
            if (longest < length + 1)
                longest = length + 1;
            length = 0;
        }
    }
    return longest;
}
----------------------------------------

size_t longest_sequence (const int *a, size_t n) {
    size_t len = 0;
    for (const int *p = a; p != a + n;) {
        const int *q = p++;
        while (p != a + n && *p == *q)
            ++p;
        if (len < (size_t) (p - q))
            len = p - q;
    }
    return len;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35488915_35489746_16_26
35488915_35489832_19_41
Title: Incorrect usage of pointers resulting in wrong output? 
----------------------------------------

int main (void) {
    char *arrayOfPointers [100] = {0};
    Student *student1 = calloc (1, sizeof (*student1));
    student1->name = strdup ("Tom");
    storeAdrress (student1, arrayOfPointers);
    free (student1 -> name);
    free (student1);
    return 0;
}
----------------------------------------

int main (void) {
    struct Student *student1 = calloc (1, sizeof (*student1));
    if (!student1) {
        perror ("couldn't allocate memory for struct Student");
        exit (EXIT_FAILURE);
    }
    student1->name = strdup ("Tom");
    if (!student1->name) {
        perror ("couldn't allocate memory for student name");
        exit (EXIT_FAILURE);
    }
    char *arrayOfPointers [100] = {0};
    storeAddress (student1, arrayOfPointers, 0);
    free (student1 -> name);
    free (student1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35500171_35500360_15_23
35500171_35501291_37_65
Title: Convert hex to binary from command line arguments C 
----------------------------------------

int main (void) {
    hex_to_bin_print (1);
    hex_to_bin_print (2);
    hex_to_bin_print (15);
    hex_to_bin_print (127);
    hex_to_bin_print (256);
    hex_to_bin_print (12345);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int badargs = 0;
    unsigned long value;
    if (argc == 3)
        if (strcmp (argv[1], "-p") == 0)
            if (sscanf (argv[2], "0x%x", &value) == 1)
                printBits (value);
            else
                badargs = 1;
        else
            badargs = 1;
    else
        badargs = 1;
    if (badargs) {
        printf ("Incorrect argument syntax\n\n\t");
        usage (argv [0]);
        putchar ('\n');
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35500171_35500360_15_23
35500171_35516912_30_51
Title: Convert hex to binary from command line arguments C 
----------------------------------------

int main (void) {
    hex_to_bin_print (1);
    hex_to_bin_print (2);
    hex_to_bin_print (15);
    hex_to_bin_print (127);
    hex_to_bin_print (256);
    hex_to_bin_print (12345);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    unsigned long hexval = processopts (argc, argv);
    printf ("\n hexval : 0x%lx (%lu)  =>  ", hexval, hexval);
    binprn (hexval);
    printf ("\n");
    printf ("\n hexval : 0x%lx (%lu)  =>  ", hexval, hexval);
    binprnpad (hexval, sizeof (int) * CHAR_BIT);
    printf ("\n");
    printf ("\n hexval : 0x%lx (%lu)  =>  %s\n\n", hexval, hexval, binfmt (hexval, sizeof (int) * CHAR_BIT, CHAR_BIT, '-'));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35500171_35501291_37_65
35500171_35516912_30_51
Title: Convert hex to binary from command line arguments C 
----------------------------------------

int main (int argc, char **argv) {
    int badargs = 0;
    unsigned long value;
    if (argc == 3)
        if (strcmp (argv[1], "-p") == 0)
            if (sscanf (argv[2], "0x%x", &value) == 1)
                printBits (value);
            else
                badargs = 1;
        else
            badargs = 1;
    else
        badargs = 1;
    if (badargs) {
        printf ("Incorrect argument syntax\n\n\t");
        usage (argv [0]);
        putchar ('\n');
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (int argc, char **argv) {
    unsigned long hexval = processopts (argc, argv);
    printf ("\n hexval : 0x%lx (%lu)  =>  ", hexval, hexval);
    binprn (hexval);
    printf ("\n");
    printf ("\n hexval : 0x%lx (%lu)  =>  ", hexval, hexval);
    binprnpad (hexval, sizeof (int) * CHAR_BIT);
    printf ("\n");
    printf ("\n hexval : 0x%lx (%lu)  =>  %s\n\n", hexval, hexval, binfmt (hexval, sizeof (int) * CHAR_BIT, CHAR_BIT, '-'));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35511607_35512117_3_14
35511607_35512167_5_36
Title: print each letter after '.' for example if I enter a..bcde..fg..h the program will print bfh 
----------------------------------------

int main () {
    int c, flag = 0;
    while ((c = getchar ()) != EOF) {
        if (c == '.')
            flag = 1;
        else if (flag) {
            putchar (c);
            flag = 0;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char letter;
    char *c;
    c = malloc (256);
    printf ("enter the string : ");
    scanf ("%s", c);
    while ((letter = *(c)) != '\0') {
        if (letter == '.') {
            c++;
            letter = *c;
            if (letter != '.')
                printf ("%c", letter);
            else {
                while (letter == '.') {
                    c++;
                    letter = *c;
                }
                printf ("%c", letter);
            }
        }
        c++;
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35511607_35512117_3_14
35511607_35512184_5_18
Title: print each letter after '.' for example if I enter a..bcde..fg..h the program will print bfh 
----------------------------------------

int main () {
    int c, flag = 0;
    while ((c = getchar ()) != EOF) {
        if (c == '.')
            flag = 1;
        else if (flag) {
            putchar (c);
            flag = 0;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char s [N];
    const char DOT = '.';
    printf ("Enter some characters: ");
    fgets (s, N, stdin);
    for (char *p = s; *p; ++p) {
        if (p[0] == DOT && p[1] != DOT)
            putchar (p[1]);
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35511607_35512117_3_14
35511607_35512411_4_37
Title: print each letter after '.' for example if I enter a..bcde..fg..h the program will print bfh 
----------------------------------------

int main () {
    int c, flag = 0;
    while ((c = getchar ()) != EOF) {
        if (c == '.')
            flag = 1;
        else if (flag) {
            putchar (c);
            flag = 0;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int c = 0;
    bool printNext = false;
    printf ("enter some characters");
    do {
        c = getchar ();
        if (c == '.') {
            printNext = true;
        }
        else if (c != EOF) {
            if (printNext) {
                printf ("%c", c);
                printNext = false;
            }
        }
    }
    while (c != EOF);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35511607_35512167_5_36
35511607_35512184_5_18
Title: print each letter after '.' for example if I enter a..bcde..fg..h the program will print bfh 
----------------------------------------

int main () {
    char letter;
    char *c;
    c = malloc (256);
    printf ("enter the string : ");
    scanf ("%s", c);
    while ((letter = *(c)) != '\0') {
        if (letter == '.') {
            c++;
            letter = *c;
            if (letter != '.')
                printf ("%c", letter);
            else {
                while (letter == '.') {
                    c++;
                    letter = *c;
                }
                printf ("%c", letter);
            }
        }
        c++;
    }
    printf ("\n");
}
----------------------------------------

int main (void) {
    char s [N];
    const char DOT = '.';
    printf ("Enter some characters: ");
    fgets (s, N, stdin);
    for (char *p = s; *p; ++p) {
        if (p[0] == DOT && p[1] != DOT)
            putchar (p[1]);
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35511607_35512167_5_36
35511607_35512411_4_37
Title: print each letter after '.' for example if I enter a..bcde..fg..h the program will print bfh 
----------------------------------------

int main () {
    char letter;
    char *c;
    c = malloc (256);
    printf ("enter the string : ");
    scanf ("%s", c);
    while ((letter = *(c)) != '\0') {
        if (letter == '.') {
            c++;
            letter = *c;
            if (letter != '.')
                printf ("%c", letter);
            else {
                while (letter == '.') {
                    c++;
                    letter = *c;
                }
                printf ("%c", letter);
            }
        }
        c++;
    }
    printf ("\n");
}
----------------------------------------

int main (int argc, char *argv []) {
    int c = 0;
    bool printNext = false;
    printf ("enter some characters");
    do {
        c = getchar ();
        if (c == '.') {
            printNext = true;
        }
        else if (c != EOF) {
            if (printNext) {
                printf ("%c", c);
                printNext = false;
            }
        }
    }
    while (c != EOF);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35511607_35512184_5_18
35511607_35512411_4_37
Title: print each letter after '.' for example if I enter a..bcde..fg..h the program will print bfh 
----------------------------------------

int main (void) {
    char s [N];
    const char DOT = '.';
    printf ("Enter some characters: ");
    fgets (s, N, stdin);
    for (char *p = s; *p; ++p) {
        if (p[0] == DOT && p[1] != DOT)
            putchar (p[1]);
    }
    putchar ('\n');
}
----------------------------------------

int main (int argc, char *argv []) {
    int c = 0;
    bool printNext = false;
    printf ("enter some characters");
    do {
        c = getchar ();
        if (c == '.') {
            printNext = true;
        }
        else if (c != EOF) {
            if (printNext) {
                printf ("%c", c);
                printNext = false;
            }
        }
    }
    while (c != EOF);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35518337_35518555_4_45
35518337_35518885_6_40
Title: How do I convert a string to a numeric value in C? 
----------------------------------------

int main () {
    int num_of_orders, i, j;
    char orders [25];
    char str1 [25];
    strcpy (str1, "Double");
    char str2 [25];
    strcpy (str2, "Triple");
    char str3 [25];
    strcpy (str3, "Quadruple");
    scanf ("%d", & num_of_orders);
    getchar ();
    int *results = malloc (num_of_orders * sizeof (int));
    for (i = 0; i < num_of_orders; i++) {
        results[i] = 1;
        strcpy (orders, "");
        while (strcmp (orders, "End") != 0) {
            scanf ("%s", orders);
            getchar ();
            if (strcmp (orders, str1) == 0)
                results[i] *= 2;
            else if (strcmp (orders, str2) == 0)
                results[i] *= 3;
            else if (strcmp (orders, str3) == 0)
                results[i] *= 4;
        }
    }
    for (i = 0; i < num_of_orders; i++)
        printf ("%d\n", results[i]);
    free (results);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char buf [MAXC] = "";
    char *delims = " \n";
    int idx = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (buf, MAXC, fp)) {
        if (!idx++)
            continue;
        char *p = buf;
        size_t len = strlen (p);
        int prod = 1;
        if (len && buf[len - 1] == '\n')
            buf[--len] = 0;
        printf (" %s", buf);
        for (p = strtok (p, delims); p; p = strtok (NULL, delims)) {
            if (strcmp (p, "Double") == 0)
                prod *= 2;
            if (strcmp (p, "Triple") == 0)
                prod *= 3;
            if (strcmp (p, "Quadruple") == 0)
                prod *= 4;
        }
        printf ("  =  %d\n", prod);
    }
    if (fp != stdin)
        fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35518337_35518555_4_45
35518337_35524765_4_39
Title: How do I convert a string to a numeric value in C? 
----------------------------------------

int main () {
    int num_of_orders, i, j;
    char orders [25];
    char str1 [25];
    strcpy (str1, "Double");
    char str2 [25];
    strcpy (str2, "Triple");
    char str3 [25];
    strcpy (str3, "Quadruple");
    scanf ("%d", & num_of_orders);
    getchar ();
    int *results = malloc (num_of_orders * sizeof (int));
    for (i = 0; i < num_of_orders; i++) {
        results[i] = 1;
        strcpy (orders, "");
        while (strcmp (orders, "End") != 0) {
            scanf ("%s", orders);
            getchar ();
            if (strcmp (orders, str1) == 0)
                results[i] *= 2;
            else if (strcmp (orders, str2) == 0)
                results[i] *= 3;
            else if (strcmp (orders, str3) == 0)
                results[i] *= 4;
        }
    }
    for (i = 0; i < num_of_orders; i++)
        printf ("%d\n", results[i]);
    free (results);
    return 0;
}
----------------------------------------

int main (void) {
    int num_of_orders, i;
    char orders [25];
    int result;
    char *ptr;
    scanf ("%d", & num_of_orders);
    getchar ();
    for (i = 0; i < num_of_orders; i++) {
        fgets (orders, sizeof orders, stdin);
        result = 1;
        ptr = orders;
        while (ptr = strstr (ptr, "Double")) {
            result *= 2;
            ptr++;
        }
        ptr = orders;
        while (ptr = strstr (ptr, "Triple")) {
            result *= 3;
            ptr++;
        }
        ptr = orders;
        while (ptr = strstr (ptr, "Quadruple")) {
            result *= 4;
            ptr++;
        }
        printf ("%d\n", result);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35518337_35518885_6_40
35518337_35524765_4_39
Title: How do I convert a string to a numeric value in C? 
----------------------------------------

int main (int argc, char **argv) {
    char buf [MAXC] = "";
    char *delims = " \n";
    int idx = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (buf, MAXC, fp)) {
        if (!idx++)
            continue;
        char *p = buf;
        size_t len = strlen (p);
        int prod = 1;
        if (len && buf[len - 1] == '\n')
            buf[--len] = 0;
        printf (" %s", buf);
        for (p = strtok (p, delims); p; p = strtok (NULL, delims)) {
            if (strcmp (p, "Double") == 0)
                prod *= 2;
            if (strcmp (p, "Triple") == 0)
                prod *= 3;
            if (strcmp (p, "Quadruple") == 0)
                prod *= 4;
        }
        printf ("  =  %d\n", prod);
    }
    if (fp != stdin)
        fclose (fp);
    return 0;
}
----------------------------------------

int main (void) {
    int num_of_orders, i;
    char orders [25];
    int result;
    char *ptr;
    scanf ("%d", & num_of_orders);
    getchar ();
    for (i = 0; i < num_of_orders; i++) {
        fgets (orders, sizeof orders, stdin);
        result = 1;
        ptr = orders;
        while (ptr = strstr (ptr, "Double")) {
            result *= 2;
            ptr++;
        }
        ptr = orders;
        while (ptr = strstr (ptr, "Triple")) {
            result *= 3;
            ptr++;
        }
        ptr = orders;
        while (ptr = strstr (ptr, "Quadruple")) {
            result *= 4;
            ptr++;
        }
        printf ("%d\n", result);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35518755_35518837_3_11
35518755_35518867_3_11
Title: Simple char output from string 
----------------------------------------

int main () {
    char input [200];
    char test;
    printf ("Text input: ");
    scanf ("%s", input);
    test = input[0];
    printf ("%c\n", test);
    return 0;
}
----------------------------------------

int main () {
    char input [200];
    char test;
    printf ("Text input: ");
    scanf ("%s", input);
    test = input[0];
    printf ("%c\n", test);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35525931_35526293_3_13
35525931_38213131_2_17
Title: Multiple Console Input in C 
----------------------------------------

int main (void) {
    int num, sum = 0;
    while (scanf (" %d", &num) == 1)
        sum += num;
    if (getchar () == EOF)
        printf ("%d\n", sum);
    else
        puts ("Invalid Input");
    return 0;
}
----------------------------------------

int main () {
    int sum = 0, a, d;
    char f;
    while (d = scanf ("%d%c", &a, &f)) {
        sum = a + sum;
        if (f == '\n')
            break;
    }
    if (d == 2)
        printf ("%d\n", sum);
    else
        printf ("Invalid Input\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35527293_35527397_5_21
35527293_35529277_3_39
Title: "How to read in an array of numbers split the array in 2 and then find the average of those two separate arrays?" 
----------------------------------------

int main () {
    int n, i;
    float num [100], sum [2] = {0, 0}, average [2];
    printf ("Enter the total amount of numbers: ");
    scanf ("%d", & n);
    for (i = 0; i < n; ++i) {
        scanf ("%f", & num [i]);
        sum[(i * 2) / n] += num[i];
    }
    average[0] = sum[0] / n;
    average[1] = sum[1] / n;
    printf ("The average of the first half of the array is = %.3f\n", average [0]);
    printf ("The average of the second half of the array is = %.3f", average [1]);
    return 0;
}
----------------------------------------

int main (void) {
    int n, i;
    float num [100], sum [2] = {0.0}, average [2] = {0.0};
    printf ("Enter the total amount of numbers: ");
    if (scanf ("%d", &n) != 1) {
        fprintf (stderr, "error: invalid input.\n");
        return 1;
    }
    for (i = 0; i < n / 2; ++i) {
        printf (" enter sum[%2d] ", i);
        if (scanf ("%f", &num[i]) != 1) {
            fprintf (stderr, "error: invalid input.\n");
            return 1;
        }
        sum[0] += num[i];
    }
    average[0] = sum[0] * 2 / n;
    for (i = n / 2; i < n; ++i) {
        printf (" enter sum[%2d] ", i);
        if (scanf ("%f", &num[i]) != 1) {
            fprintf (stderr, "error: invalid input.\n");
            return 1;
        }
        sum[1] += num[i];
    }
    average[1] = sum[1] * 2 / n;
    printf ("\nThe 1st-half average is = %.3f\n", average [0]);
    printf ("The 2nd-half average is = %.3f\n\n", average [1]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35528008_35528056_1_13
35528008_35528256_1_15
Title: C - manipulating pointers 
----------------------------------------

int mem_set (Cmd *cp, char *arguments) {
    char p [100];
    char *temp;
    int ifNum = sscanf (arguments, "%x", p);
    printf (" arguments address : %x and value of ifNum: %d\n", arguments, ifNum);
    temp = arguments;
    printf (" temp before add 1 : %x\n", temp);
    temp = arguments + 1;
    printf (" temp before loop : %x\n", temp);
    while (* temp != ' ') {temp ++;
}
----------------------------------------

int mem_set (Cmd *cp, char *arguments) {
    int p;
    char *temp;
    int ifNum = sscanf (arguments, "%x", &p);
    printf (" arguments address : %p and value of ifNum: %d\n", arguments, ifNum);
    temp = arguments;
    printf (" temp before loop : %p\n", temp);
    while (*temp != ' ') {
        temp++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35532001_35532033_1_11
35532001_35535531_27_37
Title: Changing to Pointer Arithmetic 
----------------------------------------

void function (int n, int *a, int *b) {
    *b = 0;
    for (int *p = a + 1, *q = b; p < a + n; ++p, ++q) {
        if (*p == *(p - 1))
            *q = 0;
        else
            *q = 1;
    }
}
----------------------------------------

void function (int n, int *a, int *b) {
    int i;
    *b = 0;
    for (i = 1; i < n; i++)
        if (*(a + i) == *(a + i - 1))
            *(b + i) = 0;
        else
            *(b + i) = 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35532123_35532339_27_37
35532123_35533732_7_24
Title: "Comparing two integers and insert a comparison sign <>= between the two numbers" 
----------------------------------------

int main (void) {
    const int input [] = {1, 3, 4, 5, 5, 2, 3, 4};
    size_t input_size = sizeof (input) / sizeof (int);
    for (size_t i = 0; cmpgt (input_size -1, i); i++) {
        printf ("%d %s ", input [i], mark (input [i], input [i + 1]));
    }
    printf ("%d\n", input [input_size - 1]);
    return 0;
}
----------------------------------------

int main (void) {
    unsigned a, b;
    printf ("%u\n", UINT_MAX);
    scanf ("%u %u", & a, & b);
    _Bool hasZero = NOTEQUAL (ISEQUAL (a, 0) + ISEQUAL (b, 0), 0);
    _Bool hasMax = NOTEQUAL (ISEQUAL (a, UINT_MAX) + ISEQUAL (b, UINT_MAX), 0);
    int hasBoth = ISEQUAL (hasZero +hasMax, 2);
    int cmp = (_Bool) ((a + hasZero + hasBoth) / (b + hasZero + hasBoth)) \ - (_Bool) ((b + hasZero + hasBoth) / (a + hasZero + hasBoth));
    hasBoth = 1 - hasBoth * 2;
    char relation = "<=>"[hasBoth * cmp + 1];
    printf ("%u %c %u\n", a, relation, b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35535570_35535805_1_10
35535570_35535892_1_14
Title: I wrote a simple function to reverse a linked list recursively. It returns the updated head pointer 
----------------------------------------

struct node *reverse (struct node *head) {
    if (head == NULL)
        return NULL;
    struct node *q = head->next;
    if (q == NULL)
        return head;
    struct node *r = reverse (q);
    q->next = head;
    head->next = NULL;
    return r;
}
----------------------------------------

struct node *reverse (struct node *current, isHead) {
    if (current->next == NULL) {
        return current;
    }
    struct node *ret = reverse (current->next);
    if (isHead) {
        current->next = NULL;
    }
    current->next->next = current;
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3554120_3554147_4_24
3554120_38563903_3_24
Title: Open directory using C 
----------------------------------------

int main (int c, char *v []) {
    int len;
    struct dirent *pDirent;
    DIR *pDir;
    if (c < 2) {
        printf ("Usage: testprog <dirname>\n");
        return 1;
    }
    pDir = opendir (v[1]);
    if (pDir == NULL) {
        printf ("Cannot open directory '%s'\n", v [1]);
        return 1;
    }
    while ((pDirent = readdir (pDir)) != NULL) {
        printf ("[%s]\n", pDirent -> d_name);
    }
    closedir (pDir);
    return 0;
}
----------------------------------------

void main (int argc, char *argv []) {
    DIR *dir;
    struct dirent *dent;
    dir = opendir (argv[1]);
    if (dir != NULL) {
        while ((dent = readdir (dir)) != NULL) {
            if ((strcmp (dent->d_name, ".") == 0 || strcmp (dent->d_name, "..") == 0 || (*dent->d_name) == '.')) {
            }
            else {
                printf (dent -> d_name);
                printf ("\n");
            }
        }
    }
    close (dir);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35548901_35549845_2_20
35548901_35549908_14_40
Title: Passing matrix as a parameter 
----------------------------------------

int main (int argc, char **argv) {
    int **data [N];
    for (int i = 0; i < N; i++) {
        int matrixSize = i + 1;
        data[i] = malloc (matrixSize * sizeof *data[i]);
        for (int j = 0; j < matrixSize; j++) {
            data[i][j] = malloc (matrixSize * sizeof *data[i][j]);
            for (int k = 0; k < matrixSize; k++) {
                data[i][j][k] = rand () % 256;
            }
        }
    }
    printMatrix (data [0], 1, 1);
    return 0;
}
----------------------------------------

int main (void) {
    const size_t N = 5;
    const int UPPER_VALUE = 256;
    srand ((unsigned int) time (NULL));
    for (size_t n = 1; n <= N; n++) {
        int **a = malloc (n * sizeof (int *));
        for (size_t i = 0; i < n; i++) {
            a[i] = malloc (n * sizeof (int));
            for (size_t j = 0; j < n; j++)
                a[i][j] = rand () % UPPER_VALUE;
        }
        printf ("Matrix A[%zu][%zu]:\n", n, n);
        printMatrix (a, n, n);
        printf ("\n");
        for (size_t i = 0; i < n; i++)
            free (a[i]);
        free (a);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35581844_35582560_1_26
35581844_35584442_4_17
Title: C - Linked Lists - Deleting Head - Segmentation Fault 
----------------------------------------

int delete (struct node **head, char *s) {
    int success;
    struct node *target = lookup (*head, s);
    if ((success = target != NULL)) {
        if (target->prev != NULL) {
            target->prev->next = target->next;
        }
        else {
            *head = target->next;
        }
        if (target->next != NULL) {
            target -> next -> prev = target -> prev);
        }
        free (target);
    }
    return success;
}
----------------------------------------

int delete (struct node **head, char *s) {
    struct node *tmp;
    for (; *head; head = &(*head)->next) {
        if (!strcmp ((*head)->data, s))
            break;
    }
    if (!*head)
        return 0;
    tmp = *head * head = tmp->nextfree(tmp);
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35595389_35596271_4_35
35595389_35596534_8_35
Title: Efficiently replace a substring in a string 
----------------------------------------

int main (int argc, char **argv) {
    char string [] = "HELLO hello WORLD world HELLO hello ell";
    char substring [] = "ell";
    int stringLength = strlen (string);
    int substringLength = strlen (substring);
    printf ("Before: %s\n", string);
    if (substringLength <= stringLength) {
        int i;
        int j;
        for (i = 0, j = stringLength - substringLength + 1; i < j;) {
            if (memcmp (&string[i], substring, substringLength) == 0) {
                memset (& string [i], '~', substringLength);
                i += substringLength;
            }
            else {
                i++;
            }
        }
    }
    printf ("After: %s\n", string);
    return 0;
}
----------------------------------------

int main () {
    int substr_size = strlen (substr);
    char *ptr = string;
    while (1) {
        ptr = strstr (ptr, substr);
        if (ptr == NULL) {
            break;
        }
        memset (ptr, replace, substr_size);
        ptr += substr_size;
    }
    printf ("%s\n", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35595389_35596271_4_35
35595389_35596797_5_24
Title: Efficiently replace a substring in a string 
----------------------------------------

int main (int argc, char **argv) {
    char string [] = "HELLO hello WORLD world HELLO hello ell";
    char substring [] = "ell";
    int stringLength = strlen (string);
    int substringLength = strlen (substring);
    printf ("Before: %s\n", string);
    if (substringLength <= stringLength) {
        int i;
        int j;
        for (i = 0, j = stringLength - substringLength + 1; i < j;) {
            if (memcmp (&string[i], substring, substringLength) == 0) {
                memset (& string [i], '~', substringLength);
                i += substringLength;
            }
            else {
                i++;
            }
        }
    }
    printf ("After: %s\n", string);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char *str = strdup ("The fox jumps the dog\n");
    char *search = "fox";
    char *replace = "cat";
    size_t replace_len = strlen (replace);
    char *begin = strstr (str, search);
    if (begin == NULL)
        errx (1, "substring not found");
    if (strlen (begin) < replace_len)
        errx (1, "replacement too long");
    printf ("%s", str);
    memcpy (begin, replace, replace_len);
    printf ("%s", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35595389_35596534_8_35
35595389_35596797_5_24
Title: Efficiently replace a substring in a string 
----------------------------------------

int main () {
    int substr_size = strlen (substr);
    char *ptr = string;
    while (1) {
        ptr = strstr (ptr, substr);
        if (ptr == NULL) {
            break;
        }
        memset (ptr, replace, substr_size);
        ptr += substr_size;
    }
    printf ("%s\n", string);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char *str = strdup ("The fox jumps the dog\n");
    char *search = "fox";
    char *replace = "cat";
    size_t replace_len = strlen (replace);
    char *begin = strstr (str, search);
    if (begin == NULL)
        errx (1, "substring not found");
    if (strlen (begin) < replace_len)
        errx (1, "replacement too long");
    printf ("%s", str);
    memcpy (begin, replace, replace_len);
    printf ("%s", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35596448_35596759_5_26
35596448_35596948_1_11
Title: Parse arguments into an array 
----------------------------------------

int main (int argc, char *argv []) {
    int players = atoi (argv[1]);
    char deck [52] [3];
    int i, j, pid, cid;
    if (players > 5 || players < 3) {
        printf ("%d is not the allowed number of players, min is 3 and max is 5\n", players);
        exit (0);
    }
    for (i = 0; i < argc - 2; i++) {
        strcpy (deck [i], argv [i + 2]);
    }
    for (i = 0; i < argc - 2; i++) {
        printf ("%s\n", deck [i]);
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    char game [10] = argv[0];
    int players = atoi (argv[1]);
    char deck [52] [3];
    for (int i = 0; i < argc - 2; i++) {
        strcpy (deck [i], argv [i + 2]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35618480_35618600_1_14
35618480_35618712_3_14
Title: C How to make a user input sentence into all capital letters 
----------------------------------------

int main () {
    char sen [80];
    printf ("Enter sentence: ");
    scanf ("%s", sen);
    for (int i = 0; i < 80; i++) {
        sen[i] = toupper (sen[i]);
    }
    printf ("The caps are: %s\n", sen);
    return 0;
}
----------------------------------------

int main () {
    char c, u;
    printf ("Enter sentence, press [enter] key to end");
    while (c = getchar () != '\n') {
        u = toupper (c);
        putchar (u);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35618480_35618600_1_14
35618480_53059929_4_16
Title: C How to make a user input sentence into all capital letters 
----------------------------------------

int main () {
    char sen [80];
    printf ("Enter sentence: ");
    scanf ("%s", sen);
    for (int i = 0; i < 80; i++) {
        sen[i] = toupper (sen[i]);
    }
    printf ("The caps are: %s\n", sen);
    return 0;
}
----------------------------------------

int main () {
    char letter [80];
    int tag, count;
    for (count = 0; (letter[count] = getchar ()) != EOL; ++count)
        tag = count;
    for (count = 0; count <= tag; ++count)
        putchar (toupper (letter[count]));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35618480_35618712_3_14
35618480_53059929_4_16
Title: C How to make a user input sentence into all capital letters 
----------------------------------------

int main () {
    char c, u;
    printf ("Enter sentence, press [enter] key to end");
    while (c = getchar () != '\n') {
        u = toupper (c);
        putchar (u);
    }
    return 0;
}
----------------------------------------

int main () {
    char letter [80];
    int tag, count;
    for (count = 0; (letter[count] = getchar ()) != EOL; ++count)
        tag = count;
    for (count = 0; count <= tag; ++count)
        putchar (toupper (letter[count]));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35621149_35621567_1_54
35621149_35621759_1_19
Title: String segmentation fault with va_arg 
----------------------------------------

char *form (char *format, ... ) {
    va_list ap;
    char sign;
    int br = 0, lasti, memo = 0;
    char *help;
    int ints;
    float floats;
    double doubles;
    char chars;
    char *strings;
    va_start (ap, format);
    char *result = (char *) calloc (100, strlen (format));
    for (int i = 0; format[i]; i++) {
        if (format[i] == '%') {
            switch (format[i + 1]) {
            case 'd' :
                {
                    ints = va_arg (ap, int);
                    int b, save = ints, dec = 1, j;
                    char *p = result + i;
                    for (b = 0; save; b++) {
                        save /= 10;
                        dec *= 10;
                    }
                    for (dec /= 10, j = 0; dec; j++) {
                        p[j] = ((ints / dec) % 10) + 0x30;
                        dec /= 10;
                    }
                    strcpy (result + i + b, format + i - memo + 2);
                    memo += b - 2;
                }
                break;
            case 'f' :
                {
                    floats = va_arg (ap, double);
                }
                break;
            case 'l' :
                {
                    doubles = va_arg (ap, double);
                }
                break;
            case 'c' :
                {
                    chars = va_arg (ap, int);
                    result[i] = chars;
                }
                break;
            case 's' :
                {
                    strings = va_arg (ap, char *);
                    strcpy (result + memo, strings);
                    memo += strlen (strings);
                }
                break;
            default :
                printf ("Unknown type.\n");
                break;
            }
            i++;
        }
        else {
            result[memo++] = format[i];
        }
    }
    return result;
}
----------------------------------------

char *form (const char *format, ... ) {
    va_list va;
    va_start (va, format);
    int result = vsnprintf (NUll, 0, format, va);
    if (result < 0)
        return NULL;
    char *string = malloc (result +1);
    vsnprintf (string, result + 1, format, va);
    return string;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35623291_35623542_21_39
35623291_35625121_1_37
Title: Finding the index of a value from a random dimensional array 
----------------------------------------

int main () {
    arr[1][2] = 1;
    int index = getIndex (arr[0], DIM1 *DIM2, 1);
    if (index >= 0) {
        int dim1 = index / DIM2;
        int dim2 = index % DIM2;
        printf ("found a 1 at [%d][%d]\n", dim1, dim2);
    }
    else {
        printf ("Could not find 1 in arr\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int res;
    uint32_t dims [5];
    int a [12] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
    dims[0] = 12;
    res = get_idx (a, dims, 1, 10);
    if (res == -1)
        goto fail;
    printf ("dim1 [%u]\n", dims [0]);
    dims[0] = 2;
    dims[1] = 6;
    res = get_idx (a, dims, 2, 10);
    if (res == -1)
        goto fail;
    printf ("dim1 [%u] dim2 [%u]\n", dims [0], dims [1]);
    dims[0] = 3;
    dims[1] = 2;
    dims[2] = 2;
    res = get_idx (a, dims, 3, 10);
    if (res == -1)
        goto fail;
    printf ("dim1 [%u] dim2 [%u] dim3 [%u]\n", dims [0], dims [1], dims [2]);
    dims[0] = 2;
    dims[1] = 2;
    dims[2] = 2;
    dims[3] = 2;
    res = get_idx (a, dims, 4, 10);
    if (res == -1)
        goto fail;
    printf ("dim1 [%u] dim2 [%u] dim3 [%u] dim4 [%u]\n", dims [0], dims [1], dims [2], dims [3]);
    return 0;
fail :
    printf ("Not found\n");
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35634057_36779043_5_20
35634057_36779431_10_25
Title: use of rand function to assign a value randomly 
----------------------------------------

int main (void) {
    int counter = 1;
    int variable1 = 0;
    srand (time (NULL));
    while (counter <= 10) {
        variable1 = rand () % 5 + 1;
        printf ("%d ", variable1);
        counter = counter + 1;
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    srand (time (NULL));
    int arrsz = argc > 1 ? (int) strtol (argv[1], NULL, 10) : 50;
    int array [arrsz];
    insideout_fill (array, arrsz);
    printf ("\n array initialized with inside-out fill:\n\n");
    prnarray (array, arrsz, 10, 4);
    qsort (array, arrsz, sizeof * array, intcmp);
    printf ("\n value confirmation for inside-out fill:\n\n");
    prnarray (array, arrsz, 10, 4);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35634057_36779043_5_20
35634057_36779456_1_18
Title: use of rand function to assign a value randomly 
----------------------------------------

int main (void) {
    int counter = 1;
    int variable1 = 0;
    srand (time (NULL));
    while (counter <= 10) {
        variable1 = rand () % 5 + 1;
        printf ("%d ", variable1);
        counter = counter + 1;
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    int counter;
    int variable;
    for (counter = 1; counter <= 10; counter++) {
        if (counter <= 1) {
            variable = rand () % 5 + 1;
        }
        else {
            int previous = variable;
            variable = rand () % (5 - 1) + 1;
            if (variable >= previous)
                variable++;
        }
        printf ("%d\n", variable);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35634057_36779431_10_25
35634057_36779456_1_18
Title: use of rand function to assign a value randomly 
----------------------------------------

int main (int argc, char **argv) {
    srand (time (NULL));
    int arrsz = argc > 1 ? (int) strtol (argv[1], NULL, 10) : 50;
    int array [arrsz];
    insideout_fill (array, arrsz);
    printf ("\n array initialized with inside-out fill:\n\n");
    prnarray (array, arrsz, 10, 4);
    qsort (array, arrsz, sizeof * array, intcmp);
    printf ("\n value confirmation for inside-out fill:\n\n");
    prnarray (array, arrsz, 10, 4);
    return 0;
}
----------------------------------------

int main (void) {
    int counter;
    int variable;
    for (counter = 1; counter <= 10; counter++) {
        if (counter <= 1) {
            variable = rand () % 5 + 1;
        }
        else {
            int previous = variable;
            variable = rand () % (5 - 1) + 1;
            if (variable >= previous)
                variable++;
        }
        printf ("%d\n", variable);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35663153_35664876_4_36
35663153_35670664_99_149
Title: How to count amount of elements in a row of a matrix in C 
----------------------------------------

int main (void) {
    int number_of_rows;
    int number_of_columns;
    printf ("Enter the number of rows: ");
    scanf ("%d", & number_of_rows);
    printf ("Ok, enter the number of columns: ");
    scanf ("%d", & number_of_columns);
    int matrix [number_of_rows] [number_of_columns];
    int i;
    int j;
    for (i = 0; i < number_of_rows; ++i) {
        printf ("This is %d row.\n", i + 1);
        for (j = 0; j < number_of_columns; ++j) {
            scanf ("%d", & matrix [i] [j]);
        }
    }
    for (i = 0; i < number_of_rows; ++i) {
        printf ("\n");
        for (j = 0; j < number_of_columns; ++j) {
            printf ("%d   ", matrix [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char line [900] = {'\0'};
    int valid = 0;
    int rows = 0;
    int cols = 0;
    int eachrow = 0;
    int eachcol = 0;
    do {
        printf ("Enter number of array rows or quit\n");
        fgets (line, sizeof (line), stdin);
        if (strcmp (line, "quit\n") == 0) {
            return 1;
        }
        valid = get_int_range (line, NULL, "\n", &rows, 0, INT_MAX);
    }
    while (!valid);
    do {
        printf ("Enter number of array columns or quit\n");
        fgets (line, sizeof (line), stdin);
        if (strcmp (line, "quit\n") == 0) {
            return 1;
        }
        valid = get_int_range (line, NULL, "\n", &cols, 0, INT_MAX);
    }
    while (!valid);
    int array [rows] [cols];
    for (eachrow = 0; eachrow < rows; eachrow++) {
        do {
            printf ("Enter %d integers for row %d or quit. Ex 1 2 3\n", cols, eachrow + 1);
            fgets (line, sizeof (line), stdin);
            if (strcmp (line, "quit\n") == 0) {
                return 1;
            }
            valid = get_int_series (cols, array, eachrow, INT_MIN, INT_MAX, line, " \n");
        }
        while (!valid);
    }
    for (eachrow = 0; eachrow < rows; eachrow++) {
        for (eachcol = 0; eachcol < cols; eachcol++) {
            printf ("[%d] ", array [eachrow] [eachcol]);
        }
        printf ("\n");
    }
    printf ("\nDone\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35675255_35677093_35_53
35675255_35677253_66_86
Title: Assign variable void* to array of void C 
----------------------------------------

int main (void) {
    struct gen_array buff [2];
    struct gen_array elm_0;
    elm_0.elm_type = INT;
    elm_0.data = (void *) 10;
    buff[0] = elm_0;
    struct gen_array elm_1;
    elm_1.elm_type = STRING;
    elm_1.data = (void *) "helloWorld!";
    buff[1] = elm_1;
    printer (buff, 2);
    return (0);
}
----------------------------------------

int main (void) {
    int narray [] = {3, 1, 4, 1, 5, 9};
    const size_t nsize = sizeof (narray) / sizeof (narray[0]);
    struct generic_array *garray = generic_array_create (sizeof (int), nsize);
    for (size_t i = 0; i < nsize; ++i) {
        generic_array_set (garray, & narray [i], i);
    }
    for (size_t i = 0; i < nsize; ++i) {
        int n;
        generic_array_get (garray, & n, i);
        printf ("Value of element %zu: %d\n", i, n);
    }
    generic_array_destroy (garray);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35678247_35678395_24_33
35678247_35678400_28_57
Title: How to concatenate letter by letter from 2 different strings 
----------------------------------------

int main () {
    const int buff_path = 64;
    char *buffer;
    int ret;
    buffer = (char *) malloc (sizeof (char) * buff_path);
    ret = concatenate (buffer, buff_path, "hello", " world");
    printf ("This is the string: [%s]\nstring len: %i\n", buffer, ret);
    free (buffer);
    return 0;
}
----------------------------------------

int main (void) {
    char w [100] = "", a [100] = "", concat [200] = "";
    printf ("Input 1st string: ");
    if (NULL == fgets (w, sizeof (w), stdin)) {
        perror ("Invalid input");
        return -1;
    }
    w[strlen (w) - 1] = '\0';
    printf ("Input 2nd string: ");
    if (NULL == fgets (a, sizeof (a), stdin)) {
        perror ("Invalid input");
        return -1;
    }
    a[strlen (a) - 1] = '\0';
    concatenate2 (w, a, concat);
    printf ("String obtained on concatenation is \"%s\"\n", concat);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35680755_35680818_1_18
35680755_35680829_1_17
Title: Linked list in C – methods 
----------------------------------------

Node *insert (LinkedList *list, int value) {
    Node *node = malloc (sizeof (Node));
    if (node == NULL)
        return NULL;
    node->value = value;
    node->prev = list->last;
    node->next = NULL;
    if (list->first == NULL)
        list->first = node;
    else
        list->last->next = node;
    list->last = node;
    return node;
}
----------------------------------------

Node *insert (LinkedList *list, int value) {
    Node *node = malloc (sizeof (Node));
    if (node == NULL)
        return NULL;
    node->value = value;
    node->prev = list->last;
    node->next = NULL;
    if (list->last != NULL) {
        (list->last)->next = node;
    }
    else {
        list->first = node;
        list->last = node;
    }
    return node;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35680755_35680818_1_18
35680755_35681120_1_24
Title: Linked list in C – methods 
----------------------------------------

Node *insert (LinkedList *list, int value) {
    Node *node = malloc (sizeof (Node));
    if (node == NULL)
        return NULL;
    node->value = value;
    node->prev = list->last;
    node->next = NULL;
    if (list->first == NULL)
        list->first = node;
    else
        list->last->next = node;
    list->last = node;
    return node;
}
----------------------------------------

Node *insert (LinkedList *list, int value) {
    Node *node = malloc (sizeof (Node));
    if (node != NULL) {
        node->value = value;
        node->prev = list->last;
        node->next = NULL;
        if (list->last != NULL) {
            list->last->next = node;
        }
        else {
            list->first = node;
        }
        list->last = node;
    }
    return node;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3568634_14269138_5_42
3568634_37838809_5_18
Title: how do you transpose a non-square matrix? in C 
----------------------------------------

int main () {
    int a [7] [6], b [6] [7], x, i, j, k;
    cout << "Enter elements for matrix A\n";
    for (i = 0; i < 7; i++) {
        for (j = 0; j < 6; j++) {
            cin >> a[i][j];
        }
    }
    cout << "MATRIX A:-" << endl;
    for (i = 0; i < 7; i++) {
        for (j = 0; j < 6; j++) {
            cout << a[i][j];
        }
        cout << endl;
    }
    for (i = 0; i < 7; i++) {
        for (j = 0, k = 5; j < 6; j++, k--) {
            x = j + (k - j);
            b[x][i] = a[i][j];
        }
    }
    cout << "matrix B:-\n";
    for (i = 0; i < 6; i++) {
        for (j = 0; j < 7; j++) {
            cout << b[i][j];
        }
        cout << endl;
    }
}
----------------------------------------

int main () {
    int a [10] [10], n, m, i, j;
    clrscr ();
    cout << "Enter the no. of rows and Columns: ";
    cin >> n >> m;
    cout << "\n Enter the Matrix now:";
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            cin >> a[i][j];
    trans (a, n, m);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35689237_35689326_5_22
35689237_35689344_6_23
Title: Parsing and Storing Tokens in C program 
----------------------------------------

int main (void) {
    char *args [MAXLINE / 2 + 1];
    char buf [MAXLINE / 2 + 1];
    int i = 0, num;
    char *token;
    token = buf;
    while (scanf ("%s", token) == 1) {
        args[i++] = token;
        token += strlen (token) + 1;
    }
    num = i;
    for (i = 0; i < num; i++) {
        printf ("%s\n", args [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *args [MAXLINE / 2];
    char buf [MAXLINE + 1];
    while (fgets (buf, sizeof buf, stdin)) {
        int i = 0, j;
        char *token = strtok (buf, " \t\n");
        while (token != NULL) {
            args[i++] = token;
            token = strtok (NULL, " \t\n");
        }
        for (j = 0; j < i; j++) {
            printf ("%s\n" args [j]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35693327_35693573_1_33
35693327_35693597_8_76
Title: "C program. Taking top number from input file creating 2d array then reading grid from file" 
----------------------------------------

int main () {
    FILE *fp;
    fp = fopen ("blobfile.txt", "r");
    if ((fp = fopen ("blobfile.txt", "r")) == NULL) {
        printf ("File not read \n");
        return 1;
    }
    int c;
    int i, j;
    fscanf (fp, "%d", & c);
    char myarray [c] [c];
    for (i = 0; i < c; i++)
        for (j = 0; j < c; j++)
            fscanf (fp, " %c", &myarray[i][j]);
    for (i = 0; i < c; i++) {
        for (j = 0; j < c; j++)
            printf ("%c", myarray[i][j]);
        printf ("\n");
    }
    printf ("\n Now checking for blobs \n");
    fclose (fp);
}
----------------------------------------

int main (void) {
    FILE *fp;
    fp = fopen ("blobfile.txt", "r");
    if ((fp = fopen ("blobfile.txt", "r")) == NULL) {
        fputs ("Failed to open file 'blobfile.txt'", stderr);
        return EXIT_FAILURE;
    }
    int c;
    char **myarray;
    int i, j;
    fscanf (fp, "%d", & c);
    myarray = malloc (c * sizeof *myarray);
    if (NULL == myarray) {
        fputs ("Failed to malloc 'myarray'", stderr);
        return EXIT_FAILURE;
    }
    for (i = 0; i < c; i++) {
        myarray[i] = malloc (c);
        if (NULL == myarray[i]) {
            for (j = i - 1; j >= 0; j--)
                free (myarray[j]);
            free (myarray);
            fputs ("Failed to malloc 'myarray[i]'", stderr);
            return EXIT_FAILURE;
        }
    }
    for (i = 0; i < c; i++)
        for (j = 0; j < c; j++)
            fscanf (fp, " %c", &myarray[i][j]);
    for (i = 0; i < c; i++)
        for (j = 0; j < c; j++)
            printf ("%c", myarray[i][j]);
    printf ("\n Now checking for blobs \n");
    fclose (fp);
    for (i = 0; i < c; i++)
        free (myarray[i]);
    free (myarray);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35695358_35696465_2_19
35695358_35699005_8_31
Title: "Learning C segmentation fault" 
----------------------------------------

int getTokens (char inp []) {
    char *p;
    int counter = 0;
    strcpy (y, inp);
    p = strtok (y, " ");
    while (p != NULL) {
        if (counter < tRow) {
            strcpy (tokens [counter], p);
            counter++;
        }
        else {
            printf ("Cannot process more lines");
            counter = 0;
            break;
        }
    }
    return counter;
}
----------------------------------------

void getTokens (char *input, char tokenized [] [MAXINPUTLEN]) {
    int counter = 0;
    char *token = strtok (input, " ");
    while (token != NULL) {
        if (counter < MAXTOKENS) {
            strncpy (tokenized [counter], token, MAXINPUTLEN);
            counter++;
        }
        else {
            printf ("Cannot process more lines");
            counter = 0;
            break;
        }
        token = strtok (NULL, " ");
    }
    counter = 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35695376_35695504_1_35
35695376_35695580_1_22
Title: change the nodes of a linked list 
----------------------------------------

void swap (node *head, int v) {
    node * prev, * curr, * NEXT, * temp curr = head;
    prev = curr;
    NEXT = curr->next;
    while (curr != NULL) {
        if (curr->data == v) {
            if (curr->next != NULL) {
                prev->next = NEXT;
                temp = NEXT->next;
                NEXT->next = curr;
                curr->next = temp;
                break;
            }
            else {
                printf ("\nThere is no further node to swap ");
            }
        }
        prev = curr;
        curr = curr->next;
        NEXT = curr->next;
    }
}
----------------------------------------

void swap (struct list *head, int v) {
    int temporary_number;
    struct list *found = NULL;
    if (head == NULL) {
        printf ("%s", "Case of empty list !\n");
    }
    found = head;
    while (found->next != NULL) {
        if (found->value == v) {
            temporary_value = found -> next -> value found -> next -> value = found -> value found -> value = temporary_value
        }
        found = found -> next
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35695376_35695504_1_35
35695376_35697855_31_45
Title: change the nodes of a linked list 
----------------------------------------

void swap (node *head, int v) {
    node * prev, * curr, * NEXT, * temp curr = head;
    prev = curr;
    NEXT = curr->next;
    while (curr != NULL) {
        if (curr->data == v) {
            if (curr->next != NULL) {
                prev->next = NEXT;
                temp = NEXT->next;
                NEXT->next = curr;
                curr->next = temp;
                break;
            }
            else {
                printf ("\nThere is no further node to swap ");
            }
        }
        prev = curr;
        curr = curr->next;
        NEXT = curr->next;
    }
}
----------------------------------------

void swap (struct list **head, int value) {
    while (*head && (*head)->value != value) {
        head = &(*head)->next;
    }
    if (*head && (*head)->next) {
        struct list *next = (*head)->next->next;
        (*head)->next->next = *head;
        *head = (*head)->next;
        (*head)->next->next = next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35695376_35695580_1_22
35695376_35697855_31_45
Title: change the nodes of a linked list 
----------------------------------------

void swap (struct list *head, int v) {
    int temporary_number;
    struct list *found = NULL;
    if (head == NULL) {
        printf ("%s", "Case of empty list !\n");
    }
    found = head;
    while (found->next != NULL) {
        if (found->value == v) {
            temporary_value = found -> next -> value found -> next -> value = found -> value found -> value = temporary_value
        }
        found = found -> next
    }
    return;
}
----------------------------------------

void swap (struct list **head, int value) {
    while (*head && (*head)->value != value) {
        head = &(*head)->next;
    }
    if (*head && (*head)->next) {
        struct list *next = (*head)->next->next;
        (*head)->next->next = *head;
        *head = (*head)->next;
        (*head)->next->next = next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35702407_35702793_1_16
35702407_35702826_1_15
Title: Use recursion to find the 1st occurrence of a target number in an array 
----------------------------------------

int rLookupAr (const int ar [], int n, int target) {
    if (n < 1) {
        return -1;
    }
    else if (ar[0] == target) {
        return 0;
    }
    else {
        int i = rLookupAr (ar +1, n -1, target);
        return i == -1 ? i : i + 1;
    }
}
----------------------------------------

int rLookupAr (int ar [], int n, int target) {
    if (n <= 0)
        return -1;
    int m = n / 2;
    if (ar[m] == target)
        return m;
    int res = rLookupAr (ar, m, target);
    if (res >= 0)
        return res;
    res = rLookupAr (ar +m + 1, n -m - 1, target);
    if (res >= 0)
        return res + m + 1;
    else
        return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35702407_35702793_1_16
35702407_35703121_1_10
Title: Use recursion to find the 1st occurrence of a target number in an array 
----------------------------------------

int rLookupAr (const int ar [], int n, int target) {
    if (n < 1) {
        return -1;
    }
    else if (ar[0] == target) {
        return 0;
    }
    else {
        int i = rLookupAr (ar +1, n -1, target);
        return i == -1 ? i : i + 1;
    }
}
----------------------------------------

int rLookupAr (int *ar, int n, int target) {
    if (n == 0)
        return -1;
    if (ar[0] == target)
        return 0;
    int _ret = rLookupAr (ar +1, n -1, target);
    if (_ret != -1)
        return ++_ret;
    else
        return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35702407_35702826_1_15
35702407_35703121_1_10
Title: Use recursion to find the 1st occurrence of a target number in an array 
----------------------------------------

int rLookupAr (int ar [], int n, int target) {
    if (n <= 0)
        return -1;
    int m = n / 2;
    if (ar[m] == target)
        return m;
    int res = rLookupAr (ar, m, target);
    if (res >= 0)
        return res;
    res = rLookupAr (ar +m + 1, n -m - 1, target);
    if (res >= 0)
        return res + m + 1;
    else
        return -1;
}
----------------------------------------

int rLookupAr (int *ar, int n, int target) {
    if (n == 0)
        return -1;
    if (ar[0] == target)
        return 0;
    int _ret = rLookupAr (ar +1, n -1, target);
    if (_ret != -1)
        return ++_ret;
    else
        return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35735587_35735697_3_29
35735587_35735913_6_29
Title: Convert a string with someone's name into initials? 
----------------------------------------

int main () {
    char name [50];
    char initials [7];
    int i = 0;
    int j = 0;
    printf ("Enter your name: ");
    fgets (name, 49, stdin);
    char c = name[i];
    while (name[i] != '\0') {
        if (name [i] == ' ') {initials [j] = c;
        initials[j + 1] = '.';
        j += 2;
        c = name[i + 1];
    }
    i++;
}
----------------------------------------

int main (void) {
    char name [MAX_LEN];
    char initials [MAX_LEN / 2];
    char prev = ' ';
    int i, j = 0;
    printf ("Enter your name: ");
    fgets (name, sizeof name, stdin);
    for (i = 0; name[i] != '\0'; ++i) {
        if (name[i] != ' ' && prev == ' ') {
            initials[j++] = toupper (name[i]);
            initials[j++] = '.';
        }
        prev = name[i];
    }
    if (j)
        --j;
    initials[j] = '\0';
    printf ("\"%s\"\n", initials);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35735587_35735697_3_29
35735587_35736464_3_29
Title: Convert a string with someone's name into initials? 
----------------------------------------

int main () {
    char name [50];
    char initials [7];
    int i = 0;
    int j = 0;
    printf ("Enter your name: ");
    fgets (name, 49, stdin);
    char c = name[i];
    while (name[i] != '\0') {
        if (name [i] == ' ') {initials [j] = c;
        initials[j + 1] = '.';
        j += 2;
        c = name[i + 1];
    }
    i++;
}
----------------------------------------

int main () {
    char name [50] = " ", initials [10] = " ";
    int counter_n = 1;
    int counter_i = 2;
    printf ("Enter your name: ");
    fgets (name, sizeof (name), stdin);
    initials[0] = name[0];
    initials[1] = '.';
    while (name[counter_n] != '\0') {
        if (name[counter_n] == ' ') {
            initials[counter_i] = name[counter_n + 1];
            counter_n++;
            initials[counter_i + 1] = '.';
            counter_i += 2;
        }
        counter_n++;
    }
    initials[counter_i] = '\0';
    printf ("Your initials are: %s\n", initials);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35735587_35735913_6_29
35735587_35736464_3_29
Title: Convert a string with someone's name into initials? 
----------------------------------------

int main (void) {
    char name [MAX_LEN];
    char initials [MAX_LEN / 2];
    char prev = ' ';
    int i, j = 0;
    printf ("Enter your name: ");
    fgets (name, sizeof name, stdin);
    for (i = 0; name[i] != '\0'; ++i) {
        if (name[i] != ' ' && prev == ' ') {
            initials[j++] = toupper (name[i]);
            initials[j++] = '.';
        }
        prev = name[i];
    }
    if (j)
        --j;
    initials[j] = '\0';
    printf ("\"%s\"\n", initials);
    return 0;
}
----------------------------------------

int main () {
    char name [50] = " ", initials [10] = " ";
    int counter_n = 1;
    int counter_i = 2;
    printf ("Enter your name: ");
    fgets (name, sizeof (name), stdin);
    initials[0] = name[0];
    initials[1] = '.';
    while (name[counter_n] != '\0') {
        if (name[counter_n] == ' ') {
            initials[counter_i] = name[counter_n + 1];
            counter_n++;
            initials[counter_i + 1] = '.';
            counter_i += 2;
        }
        counter_n++;
    }
    initials[counter_i] = '\0';
    printf ("Your initials are: %s\n", initials);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35787492_35787547_3_23
35787492_35787648_4_16
Title: how to Read large input - 8MBdata in C 
----------------------------------------

int main (void) {
    FILE *f;
    int msg;
    int inputExists = 0;
    f = fopen ("file.txt", "r");
    if (f == NULL) {
        perror ("fopen");
        return 1;
    }
    printf ("\nThe data from the file is :");
    while ((msg = fgetc (f)) != EOF) {
        putchar (msg);
        inputExists = 1;
    }
    if (!inputExists)
        putchar (' ');
    printf ("\n");
    fclose (f);
    return 0;
}
----------------------------------------

int main () {
    char *data = malloc (MAX);
    int in;
    size_t position = 0;
    while ((in = fgetc (stdin)) != EOF && position < MAX) {
        data[position++] = in & 0xFF;
    }
    free (data);
    return 0;
}
----------------------------------------

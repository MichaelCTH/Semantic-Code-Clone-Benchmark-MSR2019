$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22868487_22868649_3_19
22868487_22870484_4_23
Title: word entry in an array of strings 
----------------------------------------

int main (void) {
    char words [20] [100];
    int i = 0;
    printf ("Enter up to 20 words to hide in the puzzle.\n");
    printf ("Enter the word 'done' after your last word if entering less than 20 words.\n");
    while (i < 20) {
        printf ("Entered words:\n");
        if (scanf ("%99s", words[i]) != 1 || strcmp (words[i], "done") == 0)
            break;
        printf ("%s\n", words [i]);
        i++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char words [20] [100];
    int i = 0;
    int n;
    printf ("Enter up to 20 words to hide in the puzzle.\n");
    printf ("Enter the word 'done' after your last word if entering less than 20 words.\n");
    for (i = 0; i < 20; i++) {
        printf ("Enter word %2d:\n", i + 1);
        if (scanf ("%99s", words[i]) != 1 || strcmp (words[i], "done") == 0)
            break;
    }
    n = i;
    printf ("%d words entered\n", n);
    for (i = 0; i < n; i++)
        printf ("Word %2d = [%s]\n", i +1, words[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22868487_22869103_5_53
22868487_22870344_3_26
Title: word entry in an array of strings 
----------------------------------------

int main (void) {
    int wlimit = 20;
    int wcount = 0;
    int retval;
    char wstring [100 + 1];
    char **wlist = malloc (wlimit * sizeof *wlist);
    if (wlist == NULL) {
        printf ("not enough memory to allocate\n");
        return 1;
    }
    char *temp;
    while (1) {
        if (wcount >= wlimit) {
            wlimit *= 2;
            temp = wlist;
            wlist = realloc (wlist, wlimit);
            if (temp == NULL) {
                printf ("not enough memory to allocate\n");
                wlist = temp;
            }
        }
        retval = scanf ("%100s", wstring);
        if (retval != 1 || strcmp (wstring, "done") == 0)
            break;
        wlist[wcount++] = strdup (wstring);
    }
    for (int i = 0; i < wcount; i++)
        free (wlist[i]);
    free (wlist);
    wlist = NULL;
    return 0;
}
----------------------------------------

int main (void) {
    char words [20] [100];
    char temp [100] = "\0";
    int i = 0;
    int end = 0;
    printf ("Enter 20 words or enter done to exit.\n");
    while (i <= 19 && end == 0) {
        strset (temp, '\0');
        scanf (" %99[^\n]", temp);
        printf ("Given:%s\n\n", temp);
        if (strcmpi (temp, "done") == 0)
            end = 1;
        else {
            strcpy (words [i], temp);
            i++;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22868487_22869103_5_53
22868487_22870484_4_23
Title: word entry in an array of strings 
----------------------------------------

int main (void) {
    int wlimit = 20;
    int wcount = 0;
    int retval;
    char wstring [100 + 1];
    char **wlist = malloc (wlimit * sizeof *wlist);
    if (wlist == NULL) {
        printf ("not enough memory to allocate\n");
        return 1;
    }
    char *temp;
    while (1) {
        if (wcount >= wlimit) {
            wlimit *= 2;
            temp = wlist;
            wlist = realloc (wlist, wlimit);
            if (temp == NULL) {
                printf ("not enough memory to allocate\n");
                wlist = temp;
            }
        }
        retval = scanf ("%100s", wstring);
        if (retval != 1 || strcmp (wstring, "done") == 0)
            break;
        wlist[wcount++] = strdup (wstring);
    }
    for (int i = 0; i < wcount; i++)
        free (wlist[i]);
    free (wlist);
    wlist = NULL;
    return 0;
}
----------------------------------------

int main (void) {
    char words [20] [100];
    int i = 0;
    int n;
    printf ("Enter up to 20 words to hide in the puzzle.\n");
    printf ("Enter the word 'done' after your last word if entering less than 20 words.\n");
    for (i = 0; i < 20; i++) {
        printf ("Enter word %2d:\n", i + 1);
        if (scanf ("%99s", words[i]) != 1 || strcmp (words[i], "done") == 0)
            break;
    }
    n = i;
    printf ("%d words entered\n", n);
    for (i = 0; i < n; i++)
        printf ("Word %2d = [%s]\n", i +1, words[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22868487_22870344_3_26
22868487_22870484_4_23
Title: word entry in an array of strings 
----------------------------------------

int main (void) {
    char words [20] [100];
    char temp [100] = "\0";
    int i = 0;
    int end = 0;
    printf ("Enter 20 words or enter done to exit.\n");
    while (i <= 19 && end == 0) {
        strset (temp, '\0');
        scanf (" %99[^\n]", temp);
        printf ("Given:%s\n\n", temp);
        if (strcmpi (temp, "done") == 0)
            end = 1;
        else {
            strcpy (words [i], temp);
            i++;
        }
    }
}
----------------------------------------

int main (void) {
    char words [20] [100];
    int i = 0;
    int n;
    printf ("Enter up to 20 words to hide in the puzzle.\n");
    printf ("Enter the word 'done' after your last word if entering less than 20 words.\n");
    for (i = 0; i < 20; i++) {
        printf ("Enter word %2d:\n", i + 1);
        if (scanf ("%99s", words[i]) != 1 || strcmp (words[i], "done") == 0)
            break;
    }
    n = i;
    printf ("%d words entered\n", n);
    for (i = 0; i < n; i++)
        printf ("Word %2d = [%s]\n", i +1, words[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22871116_22871337_1_29
22871116_22876546_13_34
Title: Malloc with scope and global variables 
----------------------------------------

void addNode (int no) {
    struct node *temp = NULL;
    if (head == NULL) {
        head = memAlo ();
        head->num = no;
        head->next = NULL;
    }
    curr = head;
    while (curr->next != NULL) {
        curr = curr->next;
    }
    temp = memAlo ();
    if (temp == NULL) {
        printf ("\nmemory up\n");
        return;
    }
    else {
        temp->num = no;
        temp->next = NULL;
        printf ("%d\n", temp -> num);
        curr->next = temp;
    }
}
----------------------------------------

void addNode (int n) {
    if (head == NULL) {
        head = (struct node *) malloc (sizeof (struct node));
        head->num = n;
        head->next = NULL;
        curr = head;
    }
    else {
        while (curr != NULL) {
            pos = curr;
            curr = curr->next;
        }
        curr = (struct node *) malloc (sizeof (struct node));
        curr->num = n;
        curr->next = NULL;
        pos->next = curr;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22871237_22872965_3_26
22871237_22874252_22_58
Title: "File interleaving file scanning file printing" 
----------------------------------------

int main (int argc, char *argv []) {
    char buffer [4096];
    char *ptr;
    int i = 0;
    FILE *file1 = fopen ("/tmp/file1.txt", "r");
    FILE *file2 = fopen ("/tmp/file2.txt", "r");
    while (!feof (file1) || !feof (file2)) {
        if (i % 2 == 0) {
            ptr = fgets (buffer, sizeof (buffer), file1);
        }
        else {
            ptr = fgets (buffer, sizeof (buffer), file2);
        }
        if (ptr)
            printf ("%s", buffer);
        ++i;
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 4) {
        fprintf (stderr, "Usage: %s in-file1 in-file2 outfile\n", argv [0]);
        return 1;
    }
    FILE *if1 = fopen (argv[1], "r");
    FILE *if2 = fopen (argv[2], "r");
    FILE *ofp = fopen (argv[3], "w");
    if (if1 == 0)
        fprintf (stderr, "Failed to open %s for reading\n", argv[1]);
    if (if2 == 0)
        fprintf (stderr, "Failed to open %s for reading\n", argv[2]);
    if (ofp == 0)
        fprintf (stderr, "Failed to open %s for reading\n", argv[3]);
    if (if1 == 0 || if2 == 0 || ofp == 0)
        return 1;
    int r1 = 0;
    int r2 = 0;
    while ((r1 = read_and_print_line (if1, ofp)) != EOF && (r2 = read_and_print_line (if2, ofp)) != EOF)
        ;
    assert (r1 == EOF || r2 == EOF);
    assert (r1 != r2);
    while (read_and_print_line (if1, ofp) != EOF)
        ;
    while (read_and_print_line (if2, ofp) != EOF)
        ;
    fclose (if1);
    fclose (if2);
    fclose (ofp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22873998_22874101_17_29
22873998_22874133_8_36
Title: Scrambled Arrays in C 
----------------------------------------

static int scrambled (int a [], int b [], int len) {
    bubble_sort_ints (a, len);
    bubble_sort_ints (b, len);
    int i;
    for (i = 0; i < len; i++) {
        if (a[i] != b[i]) {
            return 0;
        }
    }
    return 1;
}
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i = 0;
    int j = 0;
    int flag = 0;
    if (len == 0) {
        return 1;
    }
    for (i = 0; i < len; i++) {
        flag = 0;
        for (j = 0; j < len; j++) {
            if (a[i] == b[j]) {
                flag = 1;
            }
        }
        if (flag == 0)
            return flag;
    }
    return flag;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22873998_22874101_17_29
22873998_22874363_1_20
Title: Scrambled Arrays in C 
----------------------------------------

static int scrambled (int a [], int b [], int len) {
    bubble_sort_ints (a, len);
    bubble_sort_ints (b, len);
    int i;
    for (i = 0; i < len; i++) {
        if (a[i] != b[i]) {
            return 0;
        }
    }
    return 1;
}
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i, j, flag;
    char flags [len];
    if (len == 0)
        return 1;
    memset (flags, 0, len);
    for (i = 0; i < len; ++i) {
        flag = 0;
        for (j = 0; j < len; ++j) {
            if (a[i] == b[j] && flags[j] == 0) {
                flags[j] = flag = 1;
                break;
            }
        }
        if (flag == 0)
            return 0;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22873998_22874101_17_29
22873998_22874514_8_48
Title: Scrambled Arrays in C 
----------------------------------------

static int scrambled (int a [], int b [], int len) {
    bubble_sort_ints (a, len);
    bubble_sort_ints (b, len);
    int i;
    for (i = 0; i < len; i++) {
        if (a[i] != b[i]) {
            return 0;
        }
    }
    return 1;
}
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i;
    int j;
    int flag;
    if (len == 0) {
        return 1;
    }
    for (i = 0; i < len; i++) {
        flag = 0;
        for (j = i; j < len; j++) {
            if (a[i] == b[j]) {
                b[j] = b[i];
                flag = 1;
                break;
            }
        }
        if (flag == 0) {
            printf ("Number not found\n");
            return flag;
        }
    }
    printf ("Here is flag: %d\n", flag);
    return flag;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22873998_22874133_8_36
22873998_22874363_1_20
Title: Scrambled Arrays in C 
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i = 0;
    int j = 0;
    int flag = 0;
    if (len == 0) {
        return 1;
    }
    for (i = 0; i < len; i++) {
        flag = 0;
        for (j = 0; j < len; j++) {
            if (a[i] == b[j]) {
                flag = 1;
            }
        }
        if (flag == 0)
            return flag;
    }
    return flag;
}
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i, j, flag;
    char flags [len];
    if (len == 0)
        return 1;
    memset (flags, 0, len);
    for (i = 0; i < len; ++i) {
        flag = 0;
        for (j = 0; j < len; ++j) {
            if (a[i] == b[j] && flags[j] == 0) {
                flags[j] = flag = 1;
                break;
            }
        }
        if (flag == 0)
            return 0;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22873998_22874133_8_36
22873998_22874514_8_48
Title: Scrambled Arrays in C 
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i = 0;
    int j = 0;
    int flag = 0;
    if (len == 0) {
        return 1;
    }
    for (i = 0; i < len; i++) {
        flag = 0;
        for (j = 0; j < len; j++) {
            if (a[i] == b[j]) {
                flag = 1;
            }
        }
        if (flag == 0)
            return flag;
    }
    return flag;
}
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i;
    int j;
    int flag;
    if (len == 0) {
        return 1;
    }
    for (i = 0; i < len; i++) {
        flag = 0;
        for (j = i; j < len; j++) {
            if (a[i] == b[j]) {
                b[j] = b[i];
                flag = 1;
                break;
            }
        }
        if (flag == 0) {
            printf ("Number not found\n");
            return flag;
        }
    }
    printf ("Here is flag: %d\n", flag);
    return flag;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22873998_22874363_1_20
22873998_22874514_8_48
Title: Scrambled Arrays in C 
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i, j, flag;
    char flags [len];
    if (len == 0)
        return 1;
    memset (flags, 0, len);
    for (i = 0; i < len; ++i) {
        flag = 0;
        for (j = 0; j < len; ++j) {
            if (a[i] == b[j] && flags[j] == 0) {
                flags[j] = flag = 1;
                break;
            }
        }
        if (flag == 0)
            return 0;
    }
    return 1;
}
----------------------------------------

int scrambled (int a [], int b [], int len) {
    int i;
    int j;
    int flag;
    if (len == 0) {
        return 1;
    }
    for (i = 0; i < len; i++) {
        flag = 0;
        for (j = i; j < len; j++) {
            if (a[i] == b[j]) {
                b[j] = b[i];
                flag = 1;
                break;
            }
        }
        if (flag == 0) {
            printf ("Number not found\n");
            return flag;
        }
    }
    printf ("Here is flag: %d\n", flag);
    return flag;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22875714_22876477_1_11
22875714_22878976_3_19
Title: "Reversing an array [UPDATED] file scanning" 
----------------------------------------

int main () {
    int line [256];
    int i, p, k;
    FILE *file1 = fopen ("file1.txt", "r");
    FILE *file2 = fopen ("file2.txt", "w");
    fgets (line, 256, file1);
    p = sizeof (line) / sizeof (line[0]);
    printf ("sizeof(line[0]) = %d\n", sizeof (line [0]));
    printf ("sizeof(line) = %d\n", sizeof (line));
    printf ("p = %d\n", p);
}
----------------------------------------

int main () {
    int line [256];
    int i, p, k;
    FILE *file1 = fopen ("f1.txt", "r");
    FILE *file2 = fopen ("file2.txt", "w");
    k = 0;
    for (i = 0; i < 256 && fscanf (file1, "%d", &p) == 1; ++i) {
        line[k++] = p;
    }
    for (i = k - 1; i >= 0; --i) {
        fprintf (file2, "%d\n", line [i]);
    }
    fclose (file1);
    fclose (file2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22875714_22876477_1_11
22875714_22879069_3_29
Title: "Reversing an array [UPDATED] file scanning" 
----------------------------------------

int main () {
    int line [256];
    int i, p, k;
    FILE *file1 = fopen ("file1.txt", "r");
    FILE *file2 = fopen ("file2.txt", "w");
    fgets (line, 256, file1);
    p = sizeof (line) / sizeof (line[0]);
    printf ("sizeof(line[0]) = %d\n", sizeof (line [0]));
    printf ("sizeof(line) = %d\n", sizeof (line));
    printf ("p = %d\n", p);
}
----------------------------------------

int main () {
    char line [256];
    int i, p, k;
    FILE *file1 = fopen ("f1.txt", "r");
    FILE *file2 = fopen ("file2.txt", "w");
    char *pos;
    while (fgets (line, 256, file1) != NULL) {
        if ((pos = strchr (line, '\n')) != NULL)
            *pos = '\0';
        else if ((pos = strchr (line, '\0')) != NULL)
            *pos = '\0';
        pos = pos - 1;
        while (pos >= line) {
            fprintf (file2, "%c", * pos);
            pos = pos - 1;
        }
        fprintf (file2, "\n");
    }
    fclose (file1);
    fclose (file2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22875714_22878976_3_19
22875714_22879069_3_29
Title: "Reversing an array [UPDATED] file scanning" 
----------------------------------------

int main () {
    int line [256];
    int i, p, k;
    FILE *file1 = fopen ("f1.txt", "r");
    FILE *file2 = fopen ("file2.txt", "w");
    k = 0;
    for (i = 0; i < 256 && fscanf (file1, "%d", &p) == 1; ++i) {
        line[k++] = p;
    }
    for (i = k - 1; i >= 0; --i) {
        fprintf (file2, "%d\n", line [i]);
    }
    fclose (file1);
    fclose (file2);
    return 0;
}
----------------------------------------

int main () {
    char line [256];
    int i, p, k;
    FILE *file1 = fopen ("f1.txt", "r");
    FILE *file2 = fopen ("file2.txt", "w");
    char *pos;
    while (fgets (line, 256, file1) != NULL) {
        if ((pos = strchr (line, '\n')) != NULL)
            *pos = '\0';
        else if ((pos = strchr (line, '\0')) != NULL)
            *pos = '\0';
        pos = pos - 1;
        while (pos >= line) {
            fprintf (file2, "%c", * pos);
            pos = pos - 1;
        }
        fprintf (file2, "\n");
    }
    fclose (file1);
    fclose (file2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22892256_22892480_4_20
22892256_22892602_4_16
Title: What is the type of my array? 
----------------------------------------

int **myfunc () {
    int **array = malloc (sizeof (int *) * 2);
    array[0] = malloc (sizeof (int) * 2);
    array[1] = malloc (sizeof (int) * 2);
    array[0][0] = 0;
    array[0][1] = 1;
    array[1][0] = 2;
    array[1][1] = 3;
    return array;
}
----------------------------------------

int **myfunc () {
    int **array = malloc (sizeof (int *) * ARRAY_DIM1);
    int *array_memory = malloc (sizeof (int) * ARRAY_DIM1 * ARRAY_DIM2);
    int i = 0;
    for (i = 0; i < ARRAY_DIM1; i++) {
        array [i] = array_memory [i * ARRAY_DIM2]
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22896253_22896306_1_17
22896253_22901628_3_11
Title: Filling 3d array using for loop in C programming 
----------------------------------------

int main () {
    int boxShleve [3] [4] [4];
    int i, j, k;
    for (i = 0; i < 3; ++i)
        for (j = 0; j < 4; ++j)
            for (k = 0; k < 4; ++k)
                boxShleve[i][j][k] = 100;
    for (i = 0; i < 3; i++)
        for (j = 0; j < 4; j++)
            for (k = 0; k < 4; k++)
                printf ("%d ", boxShleve[i][j][k]);
    return 0;
}
----------------------------------------

int main () {
    int boxShleve [3] [4] [4];
    size_t size = sizeof (boxShleve) / sizeof (int);
    int *p = &boxShleve[0][0][0];
    while (size--)
        *p++ = 100;
    printf ("%d\n", boxShleve [2] [3] [3]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22897134_22897272_5_17
22897134_22897916_5_30
Title: How can i make C program that scans user's input(text) and save it on a dynamic string 
----------------------------------------

int main () {
    int i = 0;
    char *c = (char *) malloc (sizeof (char));
    while (1) {
        c[i] = getc (stdin);
        if (c[i] == '\n')
            break;
        i++;
    }
    c[i] = '\0';
    printf ("\n\n%s", c);
    return 0;
}
----------------------------------------

int main () {
    size_t i = 0;
    char *c;
    c = malloc (1);
    if (c == NULL)
        return 1;
    while (1) {
        int ch = getc (stdin);
        if (ch == EOF || ch == '\n') {
            break;
        }
        c[i++] = ch;
        char *c2 = realloc (c, i +1);
        if (c2 == NULL)
            return 1;
        c = c2;
    }
    c[i] = '\0';
    printf ("\n%zu", strlen (c));
    printf ("\n\n%s", c);
    free (c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22906049_22906124_7_39
22906049_22906174_2_23
Title: how to input multiple strings followed by newline 
----------------------------------------

int main () {
    int n, i;
    char **str;
    scanf ("%d", & n);
    str = malloc (n * sizeof (char *));
    for (i = 0; i < n; i++) {
        str[i] = malloc ((MAX_STRING_SIZE + 1) * sizeof (char));
        memset (str [i], 0, MAX_STRING_SIZE + 1);
    }
    for (i = 0; i < n; i++) {
        scanf ("%s", str [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%s\n", str [i]);
    }
    for (i = 0; i < n; i++)
        free (str[i]);
    free (str);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    char str [20] [20];
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%s", str [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%s", str [i]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22906049_22906124_7_39
22906049_22906335_3_20
Title: how to input multiple strings followed by newline 
----------------------------------------

int main () {
    int n, i;
    char **str;
    scanf ("%d", & n);
    str = malloc (n * sizeof (char *));
    for (i = 0; i < n; i++) {
        str[i] = malloc ((MAX_STRING_SIZE + 1) * sizeof (char));
        memset (str [i], 0, MAX_STRING_SIZE + 1);
    }
    for (i = 0; i < n; i++) {
        scanf ("%s", str [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%s\n", str [i]);
    }
    for (i = 0; i < n; i++)
        free (str[i]);
    free (str);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    char **str;
    scanf ("%d", & n);
    str = (char **) malloc (sizeof (char *) * n);
    for (i = 0; i < n; i++) {
        str[i] = (char *) malloc (100);
        scanf ("%s", & str [i]);
    }
    for (i = 0; i < n; i++)
        free (str[i]);
    free (str);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22906049_22906174_2_23
22906049_22906335_3_20
Title: how to input multiple strings followed by newline 
----------------------------------------

int main () {
    int n, i;
    char str [20] [20];
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%s", str [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%s", str [i]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    char **str;
    scanf ("%d", & n);
    str = (char **) malloc (sizeof (char *) * n);
    for (i = 0; i < n; i++) {
        str[i] = (char *) malloc (100);
        scanf ("%s", & str [i]);
    }
    for (i = 0; i < n; i++)
        free (str[i]);
    free (str);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22908922_22909040_4_23
22908922_22909092_4_21
Title: How do I scanf a row of n integers? 
----------------------------------------

int main () {
    int count, i;
    int *ar;
    printf ("Input count of integers: ");
    scanf ("%d", & count);
    ar = malloc (count * sizeof (int));
    if (ar == NULL) {
        fprintf (stderr, "memory allocation failed.\n");
        return -1;
    }
    for (i = 0; i < count; i++) {
        scanf ("%d", & ar [i]);
    }
}
----------------------------------------

int main (void) {
    int *integers, i = 0;
    do {
        integers = realloc (integers, sizeof (int) * (i + 1));
        if (integers == NULL) {
            return -1;
        }
        printf ("enter an integer: ");
        scanf (" %d", & integers [i]);
        printf ("\nentered: %d\n", integers [i]);
    }
    while (integers[i++] != 0);
    free (integers);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22952680_22952975_9_18
22952680_22953213_8_18
Title: getting input for structure from function 
----------------------------------------

int main () {
    int x, y, z;
    struct inventory items;
    items = function ();
    printf ("\nam in main\n");
    printf ("\n%s\t", (items).name);
    printf (" %d\t", (items).number);
    getch ();
}
----------------------------------------

int main () {
    int x, y, z;
    struct inventory items, ret_itm;
    ret_itm = function (items);
    printf ("\nam in main\n");
    printf ("\n%s\t", (ret_itm).name);
    printf (" %i\t", (ret_itm).number);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22969076_39542278_4_33
22969076_50783390_27_44
Title: C Word Count program 
----------------------------------------

int main (void) {
    int tot_chars = 0;
    int tot_lines = 0;
    int tot_words = 0;
    int in_space = 1;
    int c, last = '\n';
    while ((c = getchar ()) != EOF) {
        last = c;
        tot_chars++;
        if (isspace (c)) {
            in_space = 1;
            if (c == '\n') {
                tot_lines++;
            }
        }
        else {
            tot_words += in_space;
            in_space = 0;
        }
    }
    if (last != '\n') {
        tot_lines++;
    }
    printf ("Lines, Words, Characters\n");
    printf (" %3d %3d %3d\n", tot_lines, tot_words, tot_chars);
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    int i;
    if (argc < 2) {
        printf ("[*] Usage: %s <str1> <str2> ...\n", argv [0]);
        return -1;
    }
    for (i = 1; i < argc; i++) {
        printf ("s = %s, words_cnt= %d\n ", argv [i], count_words (argv [i]));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22974628_22974988_4_16
22974628_22976278_4_24
Title: How to get scanf to continue with empty scanset 
----------------------------------------

int main () {
    typedef char buffer [2048];
    buffer line;
    while (fgets (line, sizeof (line), stdin) > 0) {
        printf ("(%s)\n", line);
        char *end = line;
        char * s1 = * end == ';' ? (* end = '\0'), end ++ : strtok_r (end, ";", & end);
        char * s2 = * end == ';' ? (* end = '\0'), end ++ : strtok_r (end, ";", & end);
        char * s3 = * end == ';' ? (* end = '\0'), end ++ : strtok_r (end, ";", & end);
        char * s4 = * end == ';' ? (* end = '\0'), end ++ : strtok_r (end, ";", & end);
        printf ("[%s][%s][%s][%s]\n", s4, s3, s2, s1);
    }
}
----------------------------------------

int main () {
    char *str = "something;123D;;LINE TABULATION;";
    char *wanderer = str;
    char fields [N] [256] = {0};
    int n;
    for (int i = 0; i < N; i++) {
        n = 0;
        printf ("%d ", sscanf (wanderer, "%255[^;]%n", fields [i], & n));
        wanderer += n + 1;
    }
    putchar (10);
    for (int i = 0; i < N; i++)
        printf ("%d: %s\n", i, fields[i]);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22974628_22974988_4_16
22974628_22977288_14_23
Title: How to get scanf to continue with empty scanset 
----------------------------------------

int main () {
    typedef char buffer [2048];
    buffer line;
    while (fgets (line, sizeof (line), stdin) > 0) {
        printf ("(%s)\n", line);
        char *end = line;
        char * s1 = * end == ';' ? (* end = '\0'), end ++ : strtok_r (end, ";", & end);
        char * s2 = * end == ';' ? (* end = '\0'), end ++ : strtok_r (end, ";", & end);
        char * s3 = * end == ';' ? (* end = '\0'), end ++ : strtok_r (end, ";", & end);
        char * s4 = * end == ';' ? (* end = '\0'), end ++ : strtok_r (end, ";", & end);
        printf ("[%s][%s][%s][%s]\n", s4, s3, s2, s1);
    }
}
----------------------------------------

int main (void) {
    char test [] = "something;123D;;LINE TABULATION;";
    char *field [99];
    int num = parse (test, field, 99);
    int i;
    for (i = 0; i < num; i++)
        printf ("[%s]", field[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22974628_22976278_4_24
22974628_22977288_14_23
Title: How to get scanf to continue with empty scanset 
----------------------------------------

int main () {
    char *str = "something;123D;;LINE TABULATION;";
    char *wanderer = str;
    char fields [N] [256] = {0};
    int n;
    for (int i = 0; i < N; i++) {
        n = 0;
        printf ("%d ", sscanf (wanderer, "%255[^;]%n", fields [i], & n));
        wanderer += n + 1;
    }
    putchar (10);
    for (int i = 0; i < N; i++)
        printf ("%d: %s\n", i, fields[i]);
    getchar ();
    return 0;
}
----------------------------------------

int main (void) {
    char test [] = "something;123D;;LINE TABULATION;";
    char *field [99];
    int num = parse (test, field, 99);
    int i;
    for (i = 0; i < num; i++)
        printf ("[%s]", field[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22984503_23043662_1_41
22984503_44152423_1_53
Title: Triplet Codility in C - getting only 11 % (Training) 
----------------------------------------

int solution (int A [], int N) {
    int i, N1, N2, N3, NEG1, NEG2, PQR_neg, PQR_pos;
    N1 = -1000;
    N2 = -1000;
    N3 = -1000;
    NEG1 = 0;
    NEG2 = 0;
    for (i = 0; i <= (N - 1); i++) {
        if (A[i] < NEG1) {
            NEG2 = NEG1;
            NEG1 = A[i];
        }
        else if (A[i] < NEG2) {
            NEG2 = A[i];
        }
        if (A[i] > N1) {
            N3 = N2;
            N2 = N1;
            N1 = A[i];
        }
        else if (A[i] > N2) {
            N3 = N2;
            N2 = A[i];
        }
        else if (A[i] > N3) {
            N3 = A[i];
        }
    }
    PQR_neg = N1 * NEG1 * NEG2;
    PQR_pos = N1 * N2 * N3;
    if (PQR_pos > PQR_neg)
        return PQR_pos;
    else
        return PQR_neg;
}
----------------------------------------

int solution (int A []) {
    int k = 0;
    int d = 0;
    int p = 0;
    int q = 1;
    int r = -1;
    int finalValue = -1;
    for (int i = 1; i < A.length - 2; i++) {
        if (A[q] < A[p]) {
            if (k != 1) {
                p = i - 1;
                q = i;
            }
            if (A[i + 1] > A[i]) {
                r = i + 1;
                k = 0;
                if (i + 2 < A.length - 1 && A[i + 2] > A[i + 1]) {
                    r = -1;
                    k = 1;
                }
            }
            else {
                if (A[i + 1] < A[i]) {
                    q = i + 1;
                    r = -1;
                    k = 1;
                }
            }
        }
        else {
            p = i;
            q = i + 1;
        }
        if (p != -1 && q != -1 && r != -1) {
            finalValue = Math.max (finalValue, Math.min (A[p] - A[q], A[r] - A[q]));
            p = 0;
            q = 1;
            r = -1;
        }
    }
    return finalValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22999138_23007750_9_37
22999138_23008144_13_44
Title: Sort an array of user input names alphabetically ascending and descending in c 
----------------------------------------

int main () {
    char names [10] [10];
    int i, sort = 2;
    int (*cmp) (const void *, const void *);
    for (i = 0; i < 10; i++) {
        printf ("Please enter name %i\n", i + 1);
        scanf ("%9s", names [i]);
    }
    printf ("Would you like to print in Ascending (press 1) or Descending (press 2) order?\n\n");
    scanf ("%d", & sort);
    switch (sort) {
    case 1 :
        printf ("\n Ascending order:\n");
        cmp = (int (*)(constvoid*, const void *)) strcmp;
        break;
    case 2 :
    default :
        printf ("\n Descending order:\n");
        cmp = (int (*)(constvoid*, const void *)) invstrcmp;
        break;
    }
    qsort (names, 10, 10, cmp);
    for (i = 0; i < 10; ++i)
        printf ("%s\n", names[i]);
    return 0;
}
----------------------------------------

int main () {
    char names [10] [10] = {0};
    char temp [10];
    int count;
    int sort;
    count = 1;
    for (int i = 0; i < 10; i++) {
        printf ("Please enter name %i\n", i + 1);
        scanf ("%s", names [i]);
    }
    printf ("Would you like to print in Ascending (press 1) or Descending (press 2) order?\n\n");
    scanf ("%d", & sort);
    switch (sort) {
    case 1 :
        printf ("\n Ascending order:\n ");
        qsort (names, 10, 10, cmp1);
        break;
    case 2 :
        printf ("\n Descending order:\n ");
        qsort (names, 10, 10, cmp2);
        break;
    }
    for (int i = 0; i < 10; i++) {
        printf ("%s\n", names [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23001988_23002292_3_37
23001988_40872050_4_29
Title: How to check if the elements in the main diagonal of a square matrix are the same? 
----------------------------------------

int main (void) {
    FILE *file = fopen ("data.txt", "r");
    int size, i, j;
    fscanf (file, "%d", & size);
    int matrix [size] [size];
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            fscanf (file, " %d", & matrix [i] [j]);
        }
    }
    i = matrix[0][0];
    j = 0;
    while (j < size) {
        if (matrix[j][j] != i)
            break;
        else {
            j++;
        }
    }
    if (j == size) {
        printf ("The diagonal is the same\n");
        return 1;
    }
    else {
        printf ("The diagonal is not the same\n");
        return 0;
    }
}
----------------------------------------

int main (int arc, char *argv []) {
    int array [100] [100];
    int size;
    cout << "Enter size\n";
    cin >> size;
    cout << "Enter matrix\n";
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            cin >> array[i][j];
        }
    }
    for (int i = 1; i < size; i++) {
        if (array[i][i] != array[i - 1][i - 1]) {
            cout << "Not Same ";
            break;
        }
        else if (i == (size - 1)) {
            cout << "Same";
        }
        else {
            continue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2300633_2300645_2_17
2300633_2300674_3_16
Title: C newbie can't find Syntax Error 
----------------------------------------

int main () {
    int c;
    while (c = getchar ()) {
        if (c == 'e' || c == 'E') {
            printf ("END LOOP\n");
            break;
        }
        if (c == 'c' || c == 'C') {
            printf ("Cheese\n");
        }
        else {
            printf ("Not Cheese\n");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    while (EOF != (c = getchar ())) {
        if (c == 'e' || c == 'E') {
            printf ("END LOOP\n");
            break;
        }
        else if (c == 'c' || c == 'C')
            printf ("Cheese\n");
        else
            printf ("Not Cheese\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23023458_23023561_3_15
23023458_23033324_3_18
Title: How to read multiple integers from a single line? 
----------------------------------------

int main (void) {
    char line [128], *p = line;
    int sum = 0, len, n;
    printf ("enter numbers: ");
    scanf ("%127[^\n]", line);
    while (sscanf (p, "%d%n", &n, &len) == 1) {
        sum += n;
        p += len;
    }
    printf ("sum: %d\n", sum);
    return 0;
}
----------------------------------------

int main () {
    printf ("\nEnter numbers: ");
    int sum = 0, temp;
    char ch;
    while (2 == scanf ("%d%c", &temp, &ch)) {
        sum += temp;
        if (ch == '\n')
            break;
        else if (ch != ' ') {
            fprintf (stderr, "Invalid input.\n");
            return -1;
        }
    }
    printf ("Sum: %d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23023873_23023982_4_18
23023873_45151247_7_18
Title: Print only letters from a string 
----------------------------------------

int main () {
    char string [255 + 1];
    char *cp;
    printf ("Enter a string: ");
    fgets (string, sizeof (string), stdin);
    printf ("Only letters: ");
    for (cp = string; *cp; ++cp)
        if (isalpha (*cp))
            printf ("%c", *cp);
    printf ("\n");
    return (0);
}
----------------------------------------

int main () {
    printf ("Enter a string: ");
    while ((character = getchar ()) != '\n') {
        if ((character >= 'A' && character <= 'Z') || (character >= 'a' && character <= 'z')) {
            string[c++] = character;
        }
    }
    printf ("Only letters: %s\n", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23027881_23028017_1_23
23027881_23028093_7_41
Title: Count paragraph in file 
----------------------------------------

int main () {
    FILE *fp = fopen ("200_content.txt ", "r");
    int pCount = 0;
    char c;
    int newln_cnt = 0;
    while ((c = fgetc (fp)) != EOF) {
        if (c == '\n') {
            newln_cnt++;
            if (newln_cnt == 2) {
                pCount++;
                newln_cnt = 0;
            }
        }
        else {
            continue;
        }
    }
    printf ("%d", pCount);
    return 0;
}
----------------------------------------

int main (void) {
    char line [MAX_LEN];
    FILE *fp = fopen ("200_content.txt", "r");
    if (fp == NULL) {
        printf ("error in opening the file\n");
        return 1;
    }
    int pcount = 0;
    int temp = 0;
    while (fgets (line, sizeof line, fp) != NULL) {
        if (line[0] == '\n') {
            if (temp == 1)
                pcount++;
            temp = 0;
        }
        else {
            temp = 1;
        }
    }
    if (temp == 1)
        pcount++;
    printf ("number of para in the file is %d\n", pcount);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23027881_23028021_1_17
23027881_23028093_7_41
Title: Count paragraph in file 
----------------------------------------

int main () {
    FILE *fp = fopen ("200_content.txt ", "r");
    int pCount = 0;
    char c;
    char last_c;
    while ((c = fgetc (fp)) != EOF) {
        if (c == '\n') {
            pCount++;
        }
        last_c = c;
        else {
            continue;
        }
    }
    if (last_c != '\n')
        pCount++;
    printf ("%d", pCount);
    return 0;
}
----------------------------------------

int main (void) {
    char line [MAX_LEN];
    FILE *fp = fopen ("200_content.txt", "r");
    if (fp == NULL) {
        printf ("error in opening the file\n");
        return 1;
    }
    int pcount = 0;
    int temp = 0;
    while (fgets (line, sizeof line, fp) != NULL) {
        if (line[0] == '\n') {
            if (temp == 1)
                pcount++;
            temp = 0;
        }
        else {
            temp = 1;
        }
    }
    if (temp == 1)
        pcount++;
    printf ("number of para in the file is %d\n", pcount);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2303278_2304031_1_17
2303278_2304815_1_14
Title: find if 4 points on a plane form a rectangle? 
----------------------------------------

bool isRectangle (double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4) {
    double cx, cy;
    double dd1, dd2, dd3, dd4;
    cx = (x1 + x2 + x3 + x4) / 4;
    cy = (y1 + y2 + y3 + y4) / 4;
    dd1 = sqr (cx -x1) + sqr (cy -y1);
    dd2 = sqr (cx -x2) + sqr (cy -y2);
    dd3 = sqr (cx -x3) + sqr (cy -y3);
    dd4 = sqr (cx -x4) + sqr (cy -y4);
    return dd1 == dd2 && dd1 == dd3 && dd1 == dd4;
}
----------------------------------------

bool isRectangle (double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4) {
    double m1, m2, m3;
    m1 = (y2 - y1) / (x2 - x1);
    m2 = (y2 - y3) / (x2 - x3);
    m3 = (y4 - y3) / (x4 - x3);
    if ((m1 * m2) == -1 && (m2 * m3) == -1)
        return true;
    else
        return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23033236_23033360_1_27
23033236_23033420_1_18
Title: Sorting the numbers in a list / C 
----------------------------------------

void Add (int d) {
    struct node *q;
    q = malloc (sizeof (struct node));
    if (q == NULL)
        printf ("Not enaugh memory!");
    else {
        q->data = d;
        if (List == NULL) {
            q->next = NULL;
            List = q;
        }
        else {
            struct node *ptr = List;
            while ((ptr->next != NULL) && (ptr->next->data > d)) {
                ptr = ptr->next;
            }
            q->next = ptr->next;
            ptr->next = q;
        }
    }
}
----------------------------------------

void Add (int d) {
    if (List == NULL) {
        q->next = NULL;
        List = q;
    }
    else {
        struct node *b;
        for (b = List; b->next != NULL; b = b->next)
            if (b->next->data >= d)
                break;
        q->next = b->next;
        b->next = q;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23033236_23033420_1_18
23033236_23033987_1_20
Title: Sorting the numbers in a list / C 
----------------------------------------

void Add (int d) {
    if (List == NULL) {
        q->next = NULL;
        List = q;
    }
    else {
        struct node *b;
        for (b = List; b->next != NULL; b = b->next)
            if (b->next->data >= d)
                break;
        q->next = b->next;
        b->next = q;
    }
}
----------------------------------------

void Add (struct node *p, int d) {
    struct node *q;
    q = malloc (sizeof (struct node));
    if (q == NULL)
        printf ("Not enaugh memory!");
    else {
        q->data = d;
        if (List == NULL || List->data < d) {
            q->next = List;
            List = q;
        }
        else {
            struct node *ptr = List;
            while ((ptr->next != NULL) && (ptr->next->data > d)) {
                ptr = ptr->next;
            }
            q->next = ptr->next;
            ptr->next = q;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23037130_23045349_14_37
23037130_23064172_27_149
Title: can't create a file larger than 2GB on 64 bit linux system with mmap/malloc/open etc 
----------------------------------------

int main (void) {
    char const filename [] = "big.file";
    int fd = open (filename, O_RDONLY);
    if (fd < 0)
        err_exit ("Failed to open file %s for reading", filename);
    struct stat sb;
    fstat (fd, & sb);
    uint64_t size = sb.st_size;
    printf ("File: %s; size %" PRIu64 "\n", filename, size);
    assert (size > UINT64_C (3) * 1024 * 1024 * 1024);
    off_t offset = UINT64_C (3) * 1024 * 1024 * 1024;
    if (lseek (fd, offset, SEEK_SET) < 0)
        err_exit ("lseek failed");
    close (fd);
    _Static_assert (sizeof (size_t) > 4, "sizeof(size_t) is too small");
    size = UINT64_C (3) * 1024 * 1024 * 1024;
    void *space = malloc (size);
    if (space == 0)
        err_exit ("failed to malloc %zu bytes", size);
    *((char *) space + size - 1) = '\xFF';
    printf ("All OK\n");
    return 0;
}
----------------------------------------

int main (void) {
    const size_t size = FILE_SIZE;
    const char * const file = FILE_NAME;
    size_t page;
    unsigned char *data;
    int descriptor;
    int result;
    page = (size_t) sysconf (_SC_PAGESIZE);
    if (page < 1) {
        fprintf (stderr, "BUG: sysconf(_SC_PAGESIZE) returned an invalid value!\n");
        return EXIT_FAILURE;
    }
    if (size % page) {
        fprintf (stderr, "Map size (%lu) is not a multiple of page size (%lu)!\n", (unsigned long) size, (unsigned long) page);
        return EXIT_FAILURE;
    }
    do {
        descriptor = open (file, O_RDWR | O_CREAT | O_EXCL, 0600);
    }
    while (descriptor == -1 && errno == EINTR);
    if (descriptor == -1) {
        fprintf (stderr, "Cannot create backing file '%s': %s.\n", file, strerror (errno));
        return EXIT_FAILURE;
    }
    do {
        result = ftruncate (descriptor, (off_t) size);
    }
    while (result == -1 && errno == EINTR);
    if (result == -1) {
        fprintf (stderr, "Cannot resize backing file '%s' to %lu bytes: %s.\n", file, (unsigned long) size, strerror (errno));
        unlink (file);
        return EXIT_FAILURE;
    }
    do {
        data = mmap (NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_NORESERVE, descriptor, (off_t) 0);
    }
    while ((void *) data == MAP_FAILED && errno == EINTR);
    if ((void *) data == MAP_FAILED) {
        fprintf (stderr, "Cannot map file '%s': %s.\n", file, strerror (errno));
        unlink (file);
        return EXIT_FAILURE;
    }
    fprintf (stdout, "Mapped %lu bytes of file '%s'.\n", (unsigned long) size, file);
    fflush (stdout);
    do {
        result = munmap (data, size);
    }
    while (result == -1 && errno == EINTR);
    if (result == -1)
        fprintf (stderr, "munmap(): %s.\n", strerror (errno));
    result = close (descriptor);
    if (result)
        fprintf (stderr, "close(): %s.\n", strerror (errno));
    result = unlink (file);
    if (result)
        fprintf (stderr, "unlink(): %s.\n", strerror (errno));
    fprintf (stdout, "Done.\n");
    fflush (stdout);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23039474_23039523_4_18
23039474_23039538_4_24
Title: How to create this matrix? C 
----------------------------------------

void graphS () {
    int i, j, k, n, x [10] [10];
    printf ("S");
    scanf ("%d", & k);
    n = k + 1;
    for (i = 1; i < n; i++) {
        for (j = 1; j < n; j++) {
            x[i][j] = 0;
            x[i][n - 1] = 1;
            if (i == j)
                x[i][j] = 0;
            if (i == n - 1)
                x[i][j] = (j == n - 1) ? 0 : 1;
            printf ("%d\t", x [i] [j]);
        }
        printf ("\n");
    }
}
----------------------------------------

void graphS () {
    int i, j, k, n, x [10] [10];
    printf ("S");
    scanf ("%d", & k);
    for (i = 1; i <= k; i++) {
        for (j = 1; j <= k; j++) {
            x[i][j] = 0;
            x[i][k] = 1;
            if (i == k) {
                x[i][j] = 1;
                x[i][k] = 0;
            }
            printf ("%d\t", x [i] [j]);
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23046148_23046263_3_16
23046148_23046326_1_17
Title: Need basic help in C with 
----------------------------------------

void getsize (int *size, int cap) {
    char buffer [256], *c;
    while (1) {
        if (fgets (buffer, sizeof (buffer), stdin)) {
            int lsize = strtol (buffer, &c, 10);
            if ((lsize > 1) && (lsize <= cap) && c[0] == '\n') {
                printf ("Size: %d %s entered\n", lsize, c);
                *size = lsize;
                return;
            }
        }
        printf ("Invalid size. Try again.\n");
    }
}
----------------------------------------

void getsize (int cap) {
    int size;
    while (1) {
        printf ("Enter the size(whole number) of array from interval (0, %d]: \n", cap);
        if (scanf ("%d", &size) == 1) {
            if ((size > 1) && (size <= cap)) {
                printf ("Size: %d entered\n", * size);
                break;
            }
            else {
                printf ("Invalid size. Try again.\n");
            }
        }
        else {
            printf ("Invalid size. Try again.\n");
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23047068_23047503_15_30
23047068_23048398_31_42
Title: Ping-pong using kill and flags in POSIX 
----------------------------------------

void child_process () {
    int x = 0;
    while (x < 10) {
        if (sigsuspend (&saveMask) == -1 && errno != EINTR)
            errExit ("sigsuspend");
        printf ("Pong %d!\n", ++ x);
        kill (getppid (), SIGUSR1);
    }
    return;
}
----------------------------------------

static void child_process (void) {
    struct timespec nap = {
        .tv_sec = 0,
        .tv_nsec = 100000000
    };
    while (1) {
        pause ();
        printf ("Pong!\n");
        nanosleep (& nap, 0);
        kill (getppid (), SIGUSR1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23047068_23047503_32_47
23047068_23048398_44_56
Title: Ping-pong using kill and flags in POSIX 
----------------------------------------

void parent_process (pid_t pid) {
    int y = 0;
    while (y < 10) {
        printf ("Ping %d!\n", ++ y);
        kill (pid, SIGUSR1);
        if (sigsuspend (&saveMask) == -1 && errno != EINTR)
            errExit ("sigsuspend");
    }
    return;
}
----------------------------------------

static void parent_process (pid_t pid) {
    struct timespec nap = {
        .tv_sec = 0,
        .tv_nsec = 100000000
    };
    for (int pings = 0; pings < MAX_PINGS; pings++) {
        printf ("Ping %d!\n", pings);
        nanosleep (& nap, 0);
        kill (pid, SIGUSR1);
        pause ();
    }
    kill (pid, SIGTERM);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23047068_23047503_50_76
23047068_23048398_58_78
Title: Ping-pong using kill and flags in POSIX 
----------------------------------------

int main (int argc, char *argv []) {
    sigemptyset (& blockMask);
    sigaddset (& blockMask, SIGUSR1);
    if (sigprocmask (SIG_BLOCK, &blockMask, &saveMask) == -1)
        errExit ("sigprocmask");
    struct sigaction sa;
    sigemptyset (& sa.sa_mask);
    sa.sa_flags = 0;
    sa.sa_handler = sig_hand;
    if (sigaction (SIGUSR1, &sa, NULL) == -1)
        errExit ("sigaction");
    pid_t pid = fork ();
    if (pid == 0)
        child_process ();
    else
        parent_process (pid);
    return 0;
}
----------------------------------------

int main (void) {
    struct sigaction sa;
    sigemptyset (& sa.sa_mask);
    sa.sa_flags = 0;
    sa.sa_handler = catcher;
    if (sigaction (SIGUSR1, &sa, NULL) == -1)
        err_exit ("Failed to set SIGUSR1 handler");
    pid_t pid = fork ();
    if (pid < 0)
        err_exit ("Failed to fork()");
    else if (pid == 0)
        child_process ();
    else
        parent_process (pid);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23047539_23054533_4_33
23047539_28798494_8_54
Title: Print the last string name in C 
----------------------------------------

int main () {
    int i, j, m, n, len;
    char a [50] [50], temp [100];
    char last;
    printf ("Enter the number of elements you wish to order : ");
    scanf ("%d", & m);
    printf ("\nEnter the names :\n");
    for (i = 0; i < m; i++) {
        scanf ("%s", a [i]);
    }
    for (i = 0; i < m - 1; i++) {
        for (j = i + 1; j < m; j++) {
            if (strcmp (a[i], a[j]) > 0) {
                strcpy (temp, a [i]);
                strcpy (a [i], a [j]);
                strcpy (a [j], temp);
            }
        }
    }
    printf ("\n\nSorted strings are : ");
    for (i = 0; i < m; i++) {
        printf ("%s \n", a [i]);
    }
    printf ("Last Word:\n");
    printf ("%s\n", a [m - 1]);
    return 0;
}
----------------------------------------

void main () {
    clrscr ();
    char name [100];
    int c = 0;
    gets (name);
    cout << name[0];
    for (int l = 0; name[l] != '\0'; l++) {
        if (name[l] == ' ') {
            cout << "." << name[l + 1];
        }
    }
    for (int i = 0; name[i] != '\0'; i++) {
        if (name[l + 1] == NULL) {
            for (int j = i; name[j] != ' '; j--) {
                c = j + 1;
            }
        }
    }
    for (int k = c; name[k] != '\0'; k++) {
        cout << name[k];
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306172_2306191_1_16
2306172_2306222_4_22
Title: Malloc a 3-Dimensional array in C? 
----------------------------------------

int main () {
    int ***array = (int ***) malloc (3 * sizeof (int **));
    int i, j;
    for (i = 0; i < 3; i++) {
        array[i] = (int **) malloc (3 * sizeof (int *));
        for (j = 0; j < 3; j++) {
            array[i][j] = (int *) malloc (3 * sizeof (int));
        }
    }
    array[1][2][1] = 10;
    return 0;
}
----------------------------------------

int main () {
    int ***array = malloc (3 * sizeof (int **));
    int i, j;
    printf ("%s\n", "OK");
    for (i = 0; i < 3; i++) {
        printf ("i = %i \n", i);
        array[i] = malloc (3 * sizeof (int *));
        for (j = 0; j < 3; j++) {
            printf ("i,j = %i,%i \n", i, j);
            array[i][j] = malloc (3 * sizeof (int));
        }
    }
    array[1][2][1] = 10;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306172_2306191_1_16
2306172_38781520_1_11
Title: Malloc a 3-Dimensional array in C? 
----------------------------------------

int main () {
    int ***array = (int ***) malloc (3 * sizeof (int **));
    int i, j;
    for (i = 0; i < 3; i++) {
        array[i] = (int **) malloc (3 * sizeof (int *));
        for (j = 0; j < 3; j++) {
            array[i][j] = (int *) malloc (3 * sizeof (int));
        }
    }
    array[1][2][1] = 10;
    return 0;
}
----------------------------------------

int main () {
    int ***array = malloc (3 * sizeof (int **));
    int i, j;
    for (i = 0; i < 3; i++) {
        array[i] = malloc (3 * sizeof (int *));
        for (j = 0;
        j < 3;
        j ++) {array [i] [j] = malloc (3 * sizeof (int));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306172_2306222_4_22
2306172_38781520_1_11
Title: Malloc a 3-Dimensional array in C? 
----------------------------------------

int main () {
    int ***array = malloc (3 * sizeof (int **));
    int i, j;
    printf ("%s\n", "OK");
    for (i = 0; i < 3; i++) {
        printf ("i = %i \n", i);
        array[i] = malloc (3 * sizeof (int *));
        for (j = 0; j < 3; j++) {
            printf ("i,j = %i,%i \n", i, j);
            array[i][j] = malloc (3 * sizeof (int));
        }
    }
    array[1][2][1] = 10;
    return 0;
}
----------------------------------------

int main () {
    int ***array = malloc (3 * sizeof (int **));
    int i, j;
    for (i = 0; i < 3; i++) {
        array[i] = malloc (3 * sizeof (int *));
        for (j = 0;
        j < 3;
        j ++) {array [i] [j] = malloc (3 * sizeof (int));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306172_2306222_4_22
2306172_40563946_3_17
Title: Malloc a 3-Dimensional array in C? 
----------------------------------------

int main () {
    int ***array = malloc (3 * sizeof (int **));
    int i, j;
    printf ("%s\n", "OK");
    for (i = 0; i < 3; i++) {
        printf ("i = %i \n", i);
        array[i] = malloc (3 * sizeof (int *));
        for (j = 0; j < 3; j++) {
            printf ("i,j = %i,%i \n", i, j);
            array[i][j] = malloc (3 * sizeof (int));
        }
    }
    array[1][2][1] = 10;
    return 0;
}
----------------------------------------

int main () {
    int ***array = (int ***) malloc (3 * sizeof (int **));
    int i, j;
    for (i = 0; i < 3; i++) {
        array[i] = (int **) malloc (3 * sizeof (int *));
        for (j = 0; j < 3; j++) {
            array[i][j] = (int *) malloc (3 * sizeof (int));
        }
    }
    array[1][2][1] = 10;
    printf ("%d\n", array [1] [2] [1]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306172_38781520_1_11
2306172_40563946_3_17
Title: Malloc a 3-Dimensional array in C? 
----------------------------------------

int main () {
    int ***array = malloc (3 * sizeof (int **));
    int i, j;
    for (i = 0; i < 3; i++) {
        array[i] = malloc (3 * sizeof (int *));
        for (j = 0;
        j < 3;
        j ++) {array [i] [j] = malloc (3 * sizeof (int));
    }
}
----------------------------------------

int main () {
    int ***array = (int ***) malloc (3 * sizeof (int **));
    int i, j;
    for (i = 0; i < 3; i++) {
        array[i] = (int **) malloc (3 * sizeof (int *));
        for (j = 0; j < 3; j++) {
            array[i][j] = (int *) malloc (3 * sizeof (int));
        }
    }
    array[1][2][1] = 10;
    printf ("%d\n", array [1] [2] [1]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306401_2306412_3_14
2306401_2306549_1_30
Title: "Homework: In C how does one get a substring of an array using only pointers?" 
----------------------------------------

int main (void) {
    char string1 [] = "something";
    int start = 2, count = 3;
    char string2 [10] = {0};
    char *ptr1 = &string1[start];
    char *stop = ptr1 + count;
    char *ptr2 = string2;
    while ((ptr1 < stop) && (*ptr2++ = *ptr1++))
        ;
    printf ("%s", string2);
    return 0;
}
----------------------------------------

int main (void) {
    char string1 [] = "something";
    int start = 2, count = 3;
    char string2 [10] = {0};
    assert (count < sizeof (string2));
    const char *from = string1 + start;
    const char *end = from + count;
    char *to = string2;
    while (from < end && *from) {
        * to ++ = * from ++
    }
    *to = '\0';
    printf ("%s", & string2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306401_2306412_3_14
2306401_2306598_15_31
Title: "Homework: In C how does one get a substring of an array using only pointers?" 
----------------------------------------

int main (void) {
    char string1 [] = "something";
    int start = 2, count = 3;
    char string2 [10] = {0};
    char *ptr1 = &string1[start];
    char *stop = ptr1 + count;
    char *ptr2 = string2;
    while ((ptr1 < stop) && (*ptr2++ = *ptr1++))
        ;
    printf ("%s", string2);
    return 0;
}
----------------------------------------

int main (void) {
    char buffer [256];
    char *str = buffer;
    char *end = buffer + sizeof (buffer) - 1;
    size_t i;
    for (i = 0; i < 5; i++) {
        if (str + list[i].len >= end)
            break;
        str = copy_substr (str, list[i].str, list[i].off, list[i].len);
    }
    printf ("%s\n", buffer);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306401_2306549_1_30
2306401_2306598_15_31
Title: "Homework: In C how does one get a substring of an array using only pointers?" 
----------------------------------------

int main (void) {
    char string1 [] = "something";
    int start = 2, count = 3;
    char string2 [10] = {0};
    assert (count < sizeof (string2));
    const char *from = string1 + start;
    const char *end = from + count;
    char *to = string2;
    while (from < end && *from) {
        * to ++ = * from ++
    }
    *to = '\0';
    printf ("%s", & string2);
}
----------------------------------------

int main (void) {
    char buffer [256];
    char *str = buffer;
    char *end = buffer + sizeof (buffer) - 1;
    size_t i;
    for (i = 0; i < 5; i++) {
        if (str + list[i].len >= end)
            break;
        str = copy_substr (str, list[i].str, list[i].off, list[i].len);
    }
    printf ("%s\n", buffer);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23074431_23074592_4_38
23074431_23074608_5_22
Title: Detecting Increasing or Decreasing Data 
----------------------------------------

int main () {
    FILE *fpt;
    fpt = fopen ("temperature.dat", "r");
    char temp [10];
    float t [7];
    int i, loweringdelta;
    fscanf (fpt, "%s", temp);
    printf ("%s", temp);
    loweringdelta = 1;
    for (i = 0; i < 7; ++i) {
        fscanf (fpt, "%f", & t [i]);
        printf ("%.2f", t [i]);
        if (i > 0 && (t[i] - t[i - 1] <= 0)) {
            loweringdelta = t[i] - t[i - 1];
        }
    }
    if (loweringdelta > 0) {
    }
    printf ("%f", t [3]);
    fclose (fpt);
    system ("pause");
}
----------------------------------------

int main () {
    FILE *f = fopen ("temps.txt", "r");
    float x, last_x;
    int inc = 0;
    fscanf (f, "%f", & last_x);
    while (fscanf (f, "%f", &x) == 1) {
        if (x > last_x) {
            if (++inc >= IN_A_ROW) {
                printf ("Found %d increases in a row\n", IN_A_ROW);
                return -1;
            }
        }
        else
            inc = 0;
        last_x = x;
    }
    fclose (f);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23074431_23074592_4_38
23074431_23074683_3_28
Title: Detecting Increasing or Decreasing Data 
----------------------------------------

int main () {
    FILE *fpt;
    fpt = fopen ("temperature.dat", "r");
    char temp [10];
    float t [7];
    int i, loweringdelta;
    fscanf (fpt, "%s", temp);
    printf ("%s", temp);
    loweringdelta = 1;
    for (i = 0; i < 7; ++i) {
        fscanf (fpt, "%f", & t [i]);
        printf ("%.2f", t [i]);
        if (i > 0 && (t[i] - t[i - 1] <= 0)) {
            loweringdelta = t[i] - t[i - 1];
        }
    }
    if (loweringdelta > 0) {
    }
    printf ("%f", t [3]);
    fclose (fpt);
    system ("pause");
}
----------------------------------------

int main () {
    FILE *fpt;
    fpt = fopen ("temperature.dat", "r");
    char temp [10];
    int count = 0;
    int i;
    float prev_temp = -999.00;
    float current_temp;
    int threshold = 6;
    fscanf (fpt, "%s", temp);
    printf ("Header: %s\n", temp);
    while (!feof (fpt)) {
        fscanf (fpt, "%f", & current_temp);
        if (current_temp > prev_temp)
            count++;
        else
            count = 0;
        prev_temp = current_temp;
        if (count > threshold)
            printf ("Saw %d consecutive increases\n", count);
    }
    fclose (fpt);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23074431_23074608_5_22
23074431_23074683_3_28
Title: Detecting Increasing or Decreasing Data 
----------------------------------------

int main () {
    FILE *f = fopen ("temps.txt", "r");
    float x, last_x;
    int inc = 0;
    fscanf (f, "%f", & last_x);
    while (fscanf (f, "%f", &x) == 1) {
        if (x > last_x) {
            if (++inc >= IN_A_ROW) {
                printf ("Found %d increases in a row\n", IN_A_ROW);
                return -1;
            }
        }
        else
            inc = 0;
        last_x = x;
    }
    fclose (f);
    return 0;
}
----------------------------------------

int main () {
    FILE *fpt;
    fpt = fopen ("temperature.dat", "r");
    char temp [10];
    int count = 0;
    int i;
    float prev_temp = -999.00;
    float current_temp;
    int threshold = 6;
    fscanf (fpt, "%s", temp);
    printf ("Header: %s\n", temp);
    while (!feof (fpt)) {
        fscanf (fpt, "%f", & current_temp);
        if (current_temp > prev_temp)
            count++;
        else
            count = 0;
        prev_temp = current_temp;
        if (count > threshold)
            printf ("Saw %d consecutive increases\n", count);
    }
    fclose (fpt);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23081234_23081813_1_28
23081234_23081961_5_27
Title: Longest increasing sequence in an array in C 
----------------------------------------

int main () {
    int j = 0, cou = 0, max = 0, c [10], n = 0;
    int a [] = {1, 3, 5, 1, 5, 7, 8, 9, 10, 11, 12};
    int i, k, z;
    for (k = 0, i = 0; i < (sizeof (a) / sizeof (int)); ++i) {
        if (a[i + 1] > a[i]) {
            ++cou;
            if (cou > max) {
                max = cou;
                z = k;
            }
        }
        else {
            k = i + 1;
            cou = 0;
            j = 0;
        }
    }
    for (j = z; j < (sizeof (a) / sizeof (int)); ++j)
        if (a[j] < a[j + 1])
            printf ("%d ", a[j]);
        else
            break;
    printf ("%d", a [j]);
    return 0;
}
----------------------------------------

int main () {
    int previous_len = 0, start = 0, c [10], len = 0;
    int a [] = {1, 3, 5, 1, 5, 7, 8, 9, 10, 11, 12};
    for (int i = 0; i < (sizeof (a) / sizeof (int)); ++i) {
        if (a[i + 1] > a[i]) {
            len++;
            if (len > previous_len) {
                previous_len = len;
                start = i + 1 - len;
            }
        }
        else {
            previous_len = len;
            len = 0;
        }
    }
    for (int i = 0; i <= previous_len; ++i) {
        c[i] = a[start + i];
        printf ("%d ", c [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23083951_23084121_4_20
23083951_23084402_4_26
Title: reversing a string in c without library function 
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int l = 0;
    printf ("Enter any statement \n");
    scanf ("%[^\n]", word);
    while (word[++i])
        ;
    rev = (char *) malloc (i * sizeof (char));
    while (rev[l++] = word[i-- - 1], i > 0)
        ;
    printf ("%s\n", rev);
    return 0;
}
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int l = 0;
    printf ("Enter any statement \n");
    scanf ("%[^\n]", word);
    while (word[i] != '\0') {
        i++;
    }
    rev = (char *) malloc (i * sizeof (char));
    while (i > 0) {
        rev[l] = word[i - 1];
        i--;
        l++;
    }
    printf ("\n %s", rev);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23083951_23084121_4_20
23083951_23088107_4_30
Title: reversing a string in c without library function 
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int l = 0;
    printf ("Enter any statement \n");
    scanf ("%[^\n]", word);
    while (word[++i])
        ;
    rev = (char *) malloc (i * sizeof (char));
    while (rev[l++] = word[i-- - 1], i > 0)
        ;
    printf ("%s\n", rev);
    return 0;
}
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int j = 0;
    printf ("Enter any statement \n");
    scanf ("%39[^\n]", word);
    while (word[i] != '\0') {
        i++;
    }
    rev = (char *) malloc (i * sizeof (char) + 1);
    i = i - 1;
    while (i >= 0) {
        rev[j] = word[i];
        i--;
        j++;
    }
    rev[j] = '\0';
    printf ("\n %s", rev);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23083951_23084121_4_20
23083951_32159190_5_23
Title: reversing a string in c without library function 
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int l = 0;
    printf ("Enter any statement \n");
    scanf ("%[^\n]", word);
    while (word[++i])
        ;
    rev = (char *) malloc (i * sizeof (char));
    while (rev[l++] = word[i-- - 1], i > 0)
        ;
    printf ("%s\n", rev);
    return 0;
}
----------------------------------------

void main () {
    char a [40];
    int j = 0, len = 0;
    clrscr ();
    printf ("please enter your name\n");
    gets (a);
    printf ("the reverse of your name is\n");
    while (a[j] != NULL) {
        len++;
        j++;
    }
    for (int k = len; k >= 0; k--) {
        printf ("%c", a [k]);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23083951_23084402_4_26
23083951_23088107_4_30
Title: reversing a string in c without library function 
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int l = 0;
    printf ("Enter any statement \n");
    scanf ("%[^\n]", word);
    while (word[i] != '\0') {
        i++;
    }
    rev = (char *) malloc (i * sizeof (char));
    while (i > 0) {
        rev[l] = word[i - 1];
        i--;
        l++;
    }
    printf ("\n %s", rev);
    return 0;
}
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int j = 0;
    printf ("Enter any statement \n");
    scanf ("%39[^\n]", word);
    while (word[i] != '\0') {
        i++;
    }
    rev = (char *) malloc (i * sizeof (char) + 1);
    i = i - 1;
    while (i >= 0) {
        rev[j] = word[i];
        i--;
        j++;
    }
    rev[j] = '\0';
    printf ("\n %s", rev);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23083951_23084402_4_26
23083951_32159190_5_23
Title: reversing a string in c without library function 
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int l = 0;
    printf ("Enter any statement \n");
    scanf ("%[^\n]", word);
    while (word[i] != '\0') {
        i++;
    }
    rev = (char *) malloc (i * sizeof (char));
    while (i > 0) {
        rev[l] = word[i - 1];
        i--;
        l++;
    }
    printf ("\n %s", rev);
    return 0;
}
----------------------------------------

void main () {
    char a [40];
    int j = 0, len = 0;
    clrscr ();
    printf ("please enter your name\n");
    gets (a);
    printf ("the reverse of your name is\n");
    while (a[j] != NULL) {
        len++;
        j++;
    }
    for (int k = len; k >= 0; k--) {
        printf ("%c", a [k]);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23083951_23088107_4_30
23083951_32159190_5_23
Title: reversing a string in c without library function 
----------------------------------------

int main () {
    char word [40];
    char *rev;
    int i = 0;
    int j = 0;
    printf ("Enter any statement \n");
    scanf ("%39[^\n]", word);
    while (word[i] != '\0') {
        i++;
    }
    rev = (char *) malloc (i * sizeof (char) + 1);
    i = i - 1;
    while (i >= 0) {
        rev[j] = word[i];
        i--;
        j++;
    }
    rev[j] = '\0';
    printf ("\n %s", rev);
    return 0;
}
----------------------------------------

void main () {
    char a [40];
    int j = 0, len = 0;
    clrscr ();
    printf ("please enter your name\n");
    gets (a);
    printf ("the reverse of your name is\n");
    while (a[j] != NULL) {
        len++;
        j++;
    }
    for (int k = len; k >= 0; k--) {
        printf ("%c", a [k]);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23085906_23086184_3_13
23085906_23086602_3_18
Title: Receiving a large negative number as a result when reading a small positive integer from a text file and incrementing it 
----------------------------------------

void main (void) {
    FILE *fptr;
    int count;
    fptr = fopen ("counts.txt", "r+");
    fscanf (fptr, "%d", & count);
    count++;
    fseek (fptr, 0, SEEK_SET);
    fprintf (fptr, "%d", count);
    fclose (fptr);
}
----------------------------------------

void main (void) {
    FILE *fptr;
    int count;
    fptr = fopen ("counts.txt", "r+");
    if (fptr != NULL) {
        if (fscanf (fptr, "%d", &count) != 1)
            count = 0;
        count++;
        fseek (fptr, 0, SEEK_SET);
        fprintf (fptr, "%d\n", count);
        fclose (fptr);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23085906_23086190_1_13
23085906_23086602_3_18
Title: Receiving a large negative number as a result when reading a small positive integer from a text file and incrementing it 
----------------------------------------

void main (void) {
    FILE *fptr;
    int count;
    fptr = fopen ("counts.txt", "r+");
    fscanf (fptr, "%d", & count);
    count++;
    fseek (fptr, 0, SEEK_SET);
    fprintf (fptr, "%d", count);
    fclose (fptr);
}
----------------------------------------

void main (void) {
    FILE *fptr;
    int count;
    fptr = fopen ("counts.txt", "r+");
    if (fptr != NULL) {
        if (fscanf (fptr, "%d", &count) != 1)
            count = 0;
        count++;
        fseek (fptr, 0, SEEK_SET);
        fprintf (fptr, "%d\n", count);
        fclose (fptr);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088201_1_28
23087070_23088498_1_17
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    char *s = (char *) malloc (sizeof (char) * nl);
    for (i = 0; i < nl; i++) {
        scanf ("%s", s);
        for (j = 0; j < nc; j++)
            matrix[i * nl + j] = s[j];
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nl + j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            scanf ("%c", &matrix[i][j]);
        scanf ("\n");
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088201_1_28
23087070_23089054_5_28
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    char *s = (char *) malloc (sizeof (char) * nl);
    for (i = 0; i < nl; i++) {
        scanf ("%s", s);
        for (j = 0; j < nc; j++)
            matrix[i * nl + j] = s[j];
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nl + j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i * nc + j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nc + j]);
        printf ("\n");
    }
    free (matrix);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088201_1_28
23087070_23089216_11_45
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    char *s = (char *) malloc (sizeof (char) * nl);
    for (i = 0; i < nl; i++) {
        scanf ("%s", s);
        for (j = 0; j < nc; j++)
            matrix[i * nl + j] = s[j];
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nl + j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int nl, nc, i, j;
    if (scanf ("%d%d", &nl, &nc) != 2) {
        fputs ("Bad number Input\n", stdout);
        exit (1);
    }
    ConsumeToEOL ();
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            int ch = getchar ();
            if (ch == '\n' || ch == EOF)
                break;
            matrix[i][j] = (char) ch;
        }
        if (j == nc)
            ConsumeToEOL ();
        for (; j < nc; j++) {
            matrix[i][j] = 0;
        }
    }
    fputs ("This is your matrix:\n", stdout);
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            if (matrix[i][j]) {
                printf ("%c", matrix [i] [j]);
            }
        }
        fputs ("\n", stdout);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088201_1_28
23087070_23089299_4_27
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    char *s = (char *) malloc (sizeof (char) * nl);
    for (i = 0; i < nl; i++) {
        scanf ("%s", s);
        for (j = 0; j < nc; j++)
            matrix[i * nl + j] = s[j];
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nl + j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i] [j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088201_1_28
23087070_45989917_2_28
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    char *s = (char *) malloc (sizeof (char) * nl);
    for (i = 0; i < nl; i++) {
        scanf ("%s", s);
        for (j = 0; j < nc; j++)
            matrix[i * nl + j] = s[j];
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nl + j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int r, c, i, j;
    printf ("Rows = ");
    scanf ("%d", & r);
    printf ("Col = ");
    scanf ("%d", & c);
    char a [r] [c];
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf ("Alphabet in row %d and column %d = ", i + 1, j + 1);
            scanf (" %c", & a [i] [j]);
        }
    }
    printf ("\n Given Matrix :\n");
    for (i = 0; i < r; i++) {
        printf ("\n");
        for (j = 0; j < c; j++) {
            printf (" %c ", a [i] [j]);
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088201_1_28
23087070_51325173_1_19
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    char *s = (char *) malloc (sizeof (char) * nl);
    for (i = 0; i < nl; i++) {
        scanf ("%s", s);
        for (j = 0; j < nc; j++)
            matrix[i * nl + j] = s[j];
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nl + j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            scanf ("%s", &matrix[i][j]);
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088498_1_17
23087070_23089054_5_28
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            scanf ("%c", &matrix[i][j]);
        scanf ("\n");
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
}
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i * nc + j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nc + j]);
        printf ("\n");
    }
    free (matrix);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088498_1_17
23087070_23089216_11_45
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            scanf ("%c", &matrix[i][j]);
        scanf ("\n");
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
}
----------------------------------------

int main () {
    int nl, nc, i, j;
    if (scanf ("%d%d", &nl, &nc) != 2) {
        fputs ("Bad number Input\n", stdout);
        exit (1);
    }
    ConsumeToEOL ();
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            int ch = getchar ();
            if (ch == '\n' || ch == EOF)
                break;
            matrix[i][j] = (char) ch;
        }
        if (j == nc)
            ConsumeToEOL ();
        for (; j < nc; j++) {
            matrix[i][j] = 0;
        }
    }
    fputs ("This is your matrix:\n", stdout);
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            if (matrix[i][j]) {
                printf ("%c", matrix [i] [j]);
            }
        }
        fputs ("\n", stdout);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088498_1_17
23087070_23089299_4_27
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            scanf ("%c", &matrix[i][j]);
        scanf ("\n");
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
}
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i] [j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088498_1_17
23087070_45989917_2_28
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            scanf ("%c", &matrix[i][j]);
        scanf ("\n");
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
}
----------------------------------------

int main () {
    int r, c, i, j;
    printf ("Rows = ");
    scanf ("%d", & r);
    printf ("Col = ");
    scanf ("%d", & c);
    char a [r] [c];
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf ("Alphabet in row %d and column %d = ", i + 1, j + 1);
            scanf (" %c", & a [i] [j]);
        }
    }
    printf ("\n Given Matrix :\n");
    for (i = 0; i < r; i++) {
        printf ("\n");
        for (j = 0; j < c; j++) {
            printf (" %c ", a [i] [j]);
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23088498_1_17
23087070_51325173_1_19
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            scanf ("%c", &matrix[i][j]);
        scanf ("\n");
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
}
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            scanf ("%s", &matrix[i][j]);
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23089054_5_28
23087070_23089216_11_45
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i * nc + j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nc + j]);
        printf ("\n");
    }
    free (matrix);
    return 0;
}
----------------------------------------

int main () {
    int nl, nc, i, j;
    if (scanf ("%d%d", &nl, &nc) != 2) {
        fputs ("Bad number Input\n", stdout);
        exit (1);
    }
    ConsumeToEOL ();
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            int ch = getchar ();
            if (ch == '\n' || ch == EOF)
                break;
            matrix[i][j] = (char) ch;
        }
        if (j == nc)
            ConsumeToEOL ();
        for (; j < nc; j++) {
            matrix[i][j] = 0;
        }
    }
    fputs ("This is your matrix:\n", stdout);
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            if (matrix[i][j]) {
                printf ("%c", matrix [i] [j]);
            }
        }
        fputs ("\n", stdout);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23089054_5_28
23087070_45989917_2_28
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i * nc + j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nc + j]);
        printf ("\n");
    }
    free (matrix);
    return 0;
}
----------------------------------------

int main () {
    int r, c, i, j;
    printf ("Rows = ");
    scanf ("%d", & r);
    printf ("Col = ");
    scanf ("%d", & c);
    char a [r] [c];
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf ("Alphabet in row %d and column %d = ", i + 1, j + 1);
            scanf (" %c", & a [i] [j]);
        }
    }
    printf ("\n Given Matrix :\n");
    for (i = 0; i < r; i++) {
        printf ("\n");
        for (j = 0; j < c; j++) {
            printf (" %c ", a [i] [j]);
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23089054_5_28
23087070_51325173_1_19
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char *matrix = (char *) malloc (sizeof (char) * nl * nc);
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i * nc + j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i * nc + j]);
        printf ("\n");
    }
    free (matrix);
    return 0;
}
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            scanf ("%s", &matrix[i][j]);
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23089216_11_45
23087070_23089299_4_27
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    if (scanf ("%d%d", &nl, &nc) != 2) {
        fputs ("Bad number Input\n", stdout);
        exit (1);
    }
    ConsumeToEOL ();
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            int ch = getchar ();
            if (ch == '\n' || ch == EOF)
                break;
            matrix[i][j] = (char) ch;
        }
        if (j == nc)
            ConsumeToEOL ();
        for (; j < nc; j++) {
            matrix[i][j] = 0;
        }
    }
    fputs ("This is your matrix:\n", stdout);
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            if (matrix[i][j]) {
                printf ("%c", matrix [i] [j]);
            }
        }
        fputs ("\n", stdout);
    }
    return 0;
}
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i] [j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23089216_11_45
23087070_45989917_2_28
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    if (scanf ("%d%d", &nl, &nc) != 2) {
        fputs ("Bad number Input\n", stdout);
        exit (1);
    }
    ConsumeToEOL ();
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            int ch = getchar ();
            if (ch == '\n' || ch == EOF)
                break;
            matrix[i][j] = (char) ch;
        }
        if (j == nc)
            ConsumeToEOL ();
        for (; j < nc; j++) {
            matrix[i][j] = 0;
        }
    }
    fputs ("This is your matrix:\n", stdout);
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            if (matrix[i][j]) {
                printf ("%c", matrix [i] [j]);
            }
        }
        fputs ("\n", stdout);
    }
    return 0;
}
----------------------------------------

int main () {
    int r, c, i, j;
    printf ("Rows = ");
    scanf ("%d", & r);
    printf ("Col = ");
    scanf ("%d", & c);
    char a [r] [c];
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf ("Alphabet in row %d and column %d = ", i + 1, j + 1);
            scanf (" %c", & a [i] [j]);
        }
    }
    printf ("\n Given Matrix :\n");
    for (i = 0; i < r; i++) {
        printf ("\n");
        for (j = 0; j < c; j++) {
            printf (" %c ", a [i] [j]);
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23089216_11_45
23087070_51325173_1_19
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    if (scanf ("%d%d", &nl, &nc) != 2) {
        fputs ("Bad number Input\n", stdout);
        exit (1);
    }
    ConsumeToEOL ();
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            int ch = getchar ();
            if (ch == '\n' || ch == EOF)
                break;
            matrix[i][j] = (char) ch;
        }
        if (j == nc)
            ConsumeToEOL ();
        for (; j < nc; j++) {
            matrix[i][j] = 0;
        }
    }
    fputs ("This is your matrix:\n", stdout);
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++) {
            if (matrix[i][j]) {
                printf ("%c", matrix [i] [j]);
            }
        }
        fputs ("\n", stdout);
    }
    return 0;
}
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            scanf ("%s", &matrix[i][j]);
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23089299_4_27
23087070_45989917_2_28
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i] [j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int r, c, i, j;
    printf ("Rows = ");
    scanf ("%d", & r);
    printf ("Col = ");
    scanf ("%d", & c);
    char a [r] [c];
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf ("Alphabet in row %d and column %d = ", i + 1, j + 1);
            scanf (" %c", & a [i] [j]);
        }
    }
    printf ("\n Given Matrix :\n");
    for (i = 0; i < r; i++) {
        printf ("\n");
        for (j = 0; j < c; j++) {
            printf (" %c ", a [i] [j]);
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_23089299_4_27
23087070_51325173_1_19
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int nl, nc, i, j;
    scanf ("%d %d\n", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++) {
        char c;
        for (j = 0; j < nc; j++) {
            scanf ("%c", & matrix [i] [j]);
        }
        scanf ("%c", & c);
    }
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            scanf ("%s", &matrix[i][j]);
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23087070_45989917_2_28
23087070_51325173_1_19
Title: Matrix of Char in C - Using Scanf or getchar 
----------------------------------------

int main () {
    int r, c, i, j;
    printf ("Rows = ");
    scanf ("%d", & r);
    printf ("Col = ");
    scanf ("%d", & c);
    char a [r] [c];
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf ("Alphabet in row %d and column %d = ", i + 1, j + 1);
            scanf (" %c", & a [i] [j]);
        }
    }
    printf ("\n Given Matrix :\n");
    for (i = 0; i < r; i++) {
        printf ("\n");
        for (j = 0; j < c; j++) {
            printf (" %c ", a [i] [j]);
        }
    }
    printf ("\n");
}
----------------------------------------

void main () {
    int nl, nc, i, j;
    scanf ("%d %d", & nl, & nc);
    char matrix [nl] [nc];
    for (i = 0; i < nl; i++)
        for (j = 0; j < nc; j++)
            scanf ("%s", &matrix[i][j]);
    printf ("This is your matrix:\n");
    for (i = 0; i < nl; i++) {
        for (j = 0; j < nc; j++)
            printf ("%c", matrix[i][j]);
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23121145_23121194_3_13
23121145_23121228_3_15
Title: C how to check and point a '0' in a int number 
----------------------------------------

int main (void) {
    int input = 1040;
    int digitindex;
    for (digitindex = 0; input > 0; digitindex++) {
        if (input % 10 == 0) {
            printf ("0 in position %i\n", digitindex);
        }
        input /= 10;
    }
    return 0;
}
----------------------------------------

int main (void) {
    long int k = 6050404;
    int iter = 0;
    while (k > 10) {
        long int r = k % 10;
        if (r == 0) {
        std :
            : cout << iter << " ";
        }
        k = k / 10;
        iter++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23124410_23124524_1_10
23124410_23124906_26_52
Title: "C Program: Create Linked List Using argv argc Segmentation Fault" 
----------------------------------------

void insert_node (list_node *the_head, char the_char) {
    list_node *current_node = the_head;
    while (current_node->next_node != NULL) {
        current_node = current_node->next_node;
    }
    current_node->next_node = malloc (sizeof (list_node));
    current_node->next_node->the_char = the_char;
    current_node->next_node->next_node = NULL;
}
----------------------------------------

void insert_node (list_node **the_head, char the_char) {
    list_node *new_node;
    list_node *tail_node;
    new_node = malloc (sizeof (list_node));
    new_node->the_char = the_char;
    new_node->next_node = NULL;
    if (*the_head) {
        tail_node = *the_head;
        while (tail_node->next)
            tail_node = tail_node->next;
        tail_node->next = new_node;
        return;
    }
    *the_head = new_node;
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23133320_23134021_5_29
23133320_23148507_5_56
Title: Unable to read a file and pass into arguments 
----------------------------------------

int main (int ac, char *av []) {
    int i, argc = 0;
    char **argv = NULL, data [16];
    FILE *fstin = stdin;
    if (ac == 2) {
        if (NULL == (fstin = fopen (av[1], "r"))) {
            puts ("Couldn't fopen...");
            return -1;
        }
    }
    while (1 == fscanf (fstin, "%15s", data)) {
        argv = realloc (argv, (argc + 1) * sizeof (char *));
        argv[argc] = malloc (strlen (data) +1);
        strcpy (argv [argc ++], data);
    }
    if (ac == 2)
        fclose (fstin);
    for (i = 0; i < argc; ++i) {
        printf ("%s\n", argv [i]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (2 != argc) {
        printf ("Invalid number of arguments : %d\n", argc);
        return -1;
    }
    int size = 0, ret = 0;
    char *data = NULL;
    FILE *fp = NULL;
    if (NULL != (fp = fopen (argv[1], "r"))) {
        fseek (fp, 0L, SEEK_END);
        size = ftell (fp);
        fseek (fp, 0L, SEEK_SET);
        if (size > 0) {
            data = (char *) calloc (sizeof (char), size);
            if (NULL != data) {
                fread (data, sizeof (char), size, fp);
                printf ("File %s is readed successfully\n", argv [1]);
                printf ("Data:\n");
                printf ("%s\n", data);
                free (data);
                data = NULL;
            }
            else {
                perror ("memory allocation failed\n");
                ret = -1;
            }
        }
        else {
            printf ("File %s is empty\n", argv [1]);
        }
        fclose (fp);
        fp = NULL;
    }
    else {
        perror ("File open failed\n");
        ret = -1;
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23164869_23165288_41_55
23164869_31385749_6_27
Title: shifting a sequence of numbers in C? 
----------------------------------------

int main (void) {
    int numbers [] = {1, 17, 3, 15, 14, 6, 12, 8, 10};
    enum {N_NUMBERS = sizeof (numbers) / sizeof (numbers[0])};
    dump_array ("-- Before:", N_NUMBERS, numbers);
    rot1u (N_NUMBERS, numbers);
    rot1d (N_NUMBERS, numbers);
    rot1d (N_NUMBERS, numbers);
    rot1d (N_NUMBERS, numbers);
    rot1u (N_NUMBERS, numbers);
    rot1u (N_NUMBERS, numbers);
    return 0;
}
----------------------------------------

int main (void) {
    int i, num_skiers = 20;
    srand (time (NULL));
    int pos1, pos2, temp;
    for (i = 0; i <= num_skiers; i++)
        starting_lineup[i] = i;
    for (i = 0; i < num_skiers * 2; i++) {
        pos1 = rand () % num_skiers + 1;
        pos2 = rand () % num_skiers + 1;
        temp = starting_lineup[pos1];
        starting_lineup[pos1] = starting_lineup[pos2];
        starting_lineup[pos2] = temp;
    }
    printf ("The starting lineup (first to last):\n");
    for (i = 1; i <= num_skiers; i++)
        printf ("%s%d", (i == 1 ? "" : ", "), starting_lineup[i]);
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23168711_23168744_5_33
23168711_23168829_3_36
Title: c program for printing each word in string backwards 
----------------------------------------

int main () {
    int j, i;
    int lastWhiteSpace = 0;
    char str [100];
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = 0;
    while (str[i] != '\0') {
        if (str[i] == ' ') {
            for (j = i - 1; j >= lastWhiteSpace; j--)
                printf ("%c", str[j]);
            printf (" ");
            lastWhiteSpace = i + 1;
        }
        i++;
    }
    for (j = i - 1; j >= lastWhiteSpace; j--)
        printf ("%c", str[j]);
    printf ("\n");
}
----------------------------------------

int main (void) {
    int i, j;
    char str [100];
    printf ("Enter String\n");
    fgets (str, sizeof str, stdin);
    printf ("\nString in Reverse Order\n");
    i = 0;
    while (str[i] != '\0') {
        if (str[i] == ' ' || str[i] == '\n') {
            for (j = i - 1; j >= 0 && str[j] != ' '; j--)
                printf ("%c", str[j]);
            printf (" ");
        }
        i++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23168711_23168744_5_33
23168711_23168870_4_17
Title: c program for printing each word in string backwards 
----------------------------------------

int main () {
    int j, i;
    int lastWhiteSpace = 0;
    char str [100];
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = 0;
    while (str[i] != '\0') {
        if (str[i] == ' ') {
            for (j = i - 1; j >= lastWhiteSpace; j--)
                printf ("%c", str[j]);
            printf (" ");
            lastWhiteSpace = i + 1;
        }
        i++;
    }
    for (j = i - 1; j >= lastWhiteSpace; j--)
        printf ("%c", str[j]);
    printf ("\n");
}
----------------------------------------

int main () {
    int j, i, len;
    char str [100];
    clrscr ();
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = strlen (str) - 1;
    while (i > -1) {
        printf ("%c", str [i --]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23168711_23168744_5_33
23168711_23170563_4_43
Title: c program for printing each word in string backwards 
----------------------------------------

int main () {
    int j, i;
    int lastWhiteSpace = 0;
    char str [100];
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = 0;
    while (str[i] != '\0') {
        if (str[i] == ' ') {
            for (j = i - 1; j >= lastWhiteSpace; j--)
                printf ("%c", str[j]);
            printf (" ");
            lastWhiteSpace = i + 1;
        }
        i++;
    }
    for (j = i - 1; j >= lastWhiteSpace; j--)
        printf ("%c", str[j]);
    printf ("\n");
}
----------------------------------------

int main () {
    int j, i, len;
    char str [100];
    char temp [20];
    clrscr ();
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = 0;
    len = 0;
    j = 0;
    while (str[i] != '\0') {
        if (str[i] != ' ')
            temp[j++] = str[i];
        if (str[i] == ' ') {
            temp[j] = '\0';
            len = strlen (temp);
            while (len > -1) {
                printf ("%c", temp [len --]);
            }
            printf (" ");
            len = 0;
            j = 0;
        }
        i++;
    }
    temp[j] = '\0';
    len = strlen (temp);
    printf (" ");
    while (len > -1) {
        printf ("%c", temp [len --]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23168711_23168829_3_36
23168711_23168870_4_17
Title: c program for printing each word in string backwards 
----------------------------------------

int main (void) {
    int i, j;
    char str [100];
    printf ("Enter String\n");
    fgets (str, sizeof str, stdin);
    printf ("\nString in Reverse Order\n");
    i = 0;
    while (str[i] != '\0') {
        if (str[i] == ' ' || str[i] == '\n') {
            for (j = i - 1; j >= 0 && str[j] != ' '; j--)
                printf ("%c", str[j]);
            printf (" ");
        }
        i++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int j, i, len;
    char str [100];
    clrscr ();
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = strlen (str) - 1;
    while (i > -1) {
        printf ("%c", str [i --]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23168711_23168829_3_36
23168711_23170563_4_43
Title: c program for printing each word in string backwards 
----------------------------------------

int main (void) {
    int i, j;
    char str [100];
    printf ("Enter String\n");
    fgets (str, sizeof str, stdin);
    printf ("\nString in Reverse Order\n");
    i = 0;
    while (str[i] != '\0') {
        if (str[i] == ' ' || str[i] == '\n') {
            for (j = i - 1; j >= 0 && str[j] != ' '; j--)
                printf ("%c", str[j]);
            printf (" ");
        }
        i++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int j, i, len;
    char str [100];
    char temp [20];
    clrscr ();
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = 0;
    len = 0;
    j = 0;
    while (str[i] != '\0') {
        if (str[i] != ' ')
            temp[j++] = str[i];
        if (str[i] == ' ') {
            temp[j] = '\0';
            len = strlen (temp);
            while (len > -1) {
                printf ("%c", temp [len --]);
            }
            printf (" ");
            len = 0;
            j = 0;
        }
        i++;
    }
    temp[j] = '\0';
    len = strlen (temp);
    printf (" ");
    while (len > -1) {
        printf ("%c", temp [len --]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23168711_23168870_4_17
23168711_23170563_4_43
Title: c program for printing each word in string backwards 
----------------------------------------

int main () {
    int j, i, len;
    char str [100];
    clrscr ();
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = strlen (str) - 1;
    while (i > -1) {
        printf ("%c", str [i --]);
    }
}
----------------------------------------

int main () {
    int j, i, len;
    char str [100];
    char temp [20];
    clrscr ();
    printf ("Enter String\n");
    gets (str);
    printf ("\nString in Reverse Order\n");
    i = 0;
    len = 0;
    j = 0;
    while (str[i] != '\0') {
        if (str[i] != ' ')
            temp[j++] = str[i];
        if (str[i] == ' ') {
            temp[j] = '\0';
            len = strlen (temp);
            while (len > -1) {
                printf ("%c", temp [len --]);
            }
            printf (" ");
            len = 0;
            j = 0;
        }
        i++;
    }
    temp[j] = '\0';
    len = strlen (temp);
    printf (" ");
    while (len > -1) {
        printf ("%c", temp [len --]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23188315_23188539_5_33
23188315_23188564_4_24
Title: Read from file in C and execute conditional logic 
----------------------------------------

int main (void) {
    char userName [10];
    char names [20];
    printf ("\n\n\n\nPlease enter your name: ");
    scanf ("%s", userName);
    FILE *fp;
    fp = fopen ("results.dat", "r");
    if (fp == NULL) {
        printf ("I couldn't open results.dat for writing.\n");
        exit (0);
    }
    while (fgets (names, 20, fp)) {
        names[strlen (names) - 1] = '\0';
        if (strcmp (names, userName) == 0) {
            printf ("Match found\n");
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char name [64];
    char buffer [64];
    printf ("Please enter your name: ");
    file = fopen ("results.dat", "rw");
    if (!file) {
        printf ("Results.dat could not be opened.\n");
        exit (- 1);
    }
    if (fgets (buffer, 64, file)) {
        if (strcmp (buffer, "john")) {
            printf ("Contents of file is john\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23222971_23223210_1_16
23222971_23223686_1_17
Title: Function returns only letters of string 
----------------------------------------

char *only_letters (char *s1ptr, char *s2ptr_) {
    char *s2ptr = s2ptr_;
    while (*s1ptr) {
        if ((*s1ptr >= 'a' && *s1ptr <= 'z') || (*s1ptr >= 'A' && *s1ptr <= 'Z')) {
            *s2ptr = *s1ptr;
            s2ptr++;
        }
        s1ptr++;
    }
    *s2ptr = '\0';
    return s2ptr_;
}
----------------------------------------

char *only_letters (const char *s1ptr, char *s2ptr) {
    char *p = s2ptr;
    while (*s1ptr) {
        if ((*s1ptr >= 'a' && *s1ptr <= 'z') || (*s1ptr >= 'A' && *s1ptr <= 'Z')) {
            *p++ = *s1ptr;
        }
        s1ptr++;
    }
    *p = '\0';
    return s2ptr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23222971_23223344_1_15
23222971_23223686_1_17
Title: Function returns only letters of string 
----------------------------------------

char *only_letters (char *s1ptr, char *s2ptr) {
    char *result = s2ptr;
    while (*s1ptr) {
        if ((*s1ptr >= 'a' && *s1ptr <= 'z') || (*s1ptr >= 'A' && *s1ptr <= 'Z')) {
            *s2ptr = *s1ptr;
            s2ptr++;
        }
        s1ptr++;
    }
    *s2ptr = '\0';
    return result;
}
----------------------------------------

char *only_letters (const char *s1ptr, char *s2ptr) {
    char *p = s2ptr;
    while (*s1ptr) {
        if ((*s1ptr >= 'a' && *s1ptr <= 'z') || (*s1ptr >= 'A' && *s1ptr <= 'Z')) {
            *p++ = *s1ptr;
        }
        s1ptr++;
    }
    *p = '\0';
    return s2ptr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23228462_23229325_1_36
23228462_23229394_2_23
Title: Storing a string in char* in C 
----------------------------------------

char *ObtainName (FILE *fp) {
    int temp;
    int i = 1;
    char *string = malloc (i);
    if (NULL == string) {
        fprintf (stderr, "malloc() failed\n");
        goto CLEANUP;
    }
    *string = '\0';
    temp = fgetc (fp);
    while (temp != '\n') {
        char *newMem;
        ++i;
        newMem = realloc (string, i);
        if (NULL == newMem) {
            fprintf (stderr, "realloc() failed.\n");
            goto CLEANUP;
        }
        string = newMem;
        string[i - 1] = temp;
        string[i] = '\0';
        temp = fgetc (fp);
    }
CLEANUP :
    printf ("%s", string);
    return (string);
}
----------------------------------------

char *ObtainName (FILE *fp) {
    static char temp [MAX_LEN];
    int i = 0;
    while (i < MAX_LEN - 1) {
        if (feof (fp)) {
            break;
        }
        temp[i] = fgetc (fp);
        if (temp[i] == '\n') {
            break;
        }
        i++;
    }
    temp[i] = '\0';
    printf ("%s", temp);
    return temp;
}
----------------------------------------

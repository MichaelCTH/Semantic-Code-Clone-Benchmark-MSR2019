$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988273_1_16
26988159_26988352_5_37
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int a [MAX_SIZE], i, count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (a[i] == -1)
            break;
        count++;
    }
    printf ("Length: %d", count);
    return 0;
}
----------------------------------------

int main () {
    int a [MAX_SIZE] = {0};
    int i = 0;
    int cnt = 0;
    printf ("Enter up to %d different numbers seperated by spaces (ctrl+d when done): \n", MAX_SIZE);
    while (i < MAX_SIZE) {
        if (scanf ("%d%*c", &a[i]) < 1)
            break;
        i++;
    }
    cnt = i;
    i = 0;
    printf ("\nPrinting elements using while loop:\n\n");
    while (a[i]) {
        printf ("a[%d] = %d\n", i, a [i]);
        i++;
    }
    printf ("\nPrinting elements using for loop:\n\n");
    for (i = 0; i < cnt; i++)
        printf ("a[%d] = %d\n", i, a[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988273_1_16
26988159_26988356_6_23
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int a [MAX_SIZE], i, count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (a[i] == -1)
            break;
        count++;
    }
    printf ("Length: %d", count);
    return 0;
}
----------------------------------------

int main () {
    int count = 0;
    int arr [MAX_SIZE] = {0,};
    printf ("Enter the numbers one by one ==> \n");
    for (count = 0; count < MAX_SIZE; count++) {
        if (scanf ("%d", &arr[count]) == EOF)
            break;
    }
    printf ("Number of elements into the array %d\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988273_1_16
26988159_26988403_5_25
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int a [MAX_SIZE], i, count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (a[i] == -1)
            break;
        count++;
    }
    printf ("Length: %d", count);
    return 0;
}
----------------------------------------

int main () {
    int a [MAX_SIZE], i;
    int count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (!a[i])
            break;
        count++;
    }
    printf ("Length: %lu\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988345_1_19
26988159_26988352_5_37
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int a [MAX_SIZE], i, count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (a[i] == 0)
            break;
        count++;
    }
    printf ("number of scanned elements: %d", count);
    for (i = 0; i < count; i++)
        printf ("%d\n", a[i]);
    return 0;
}
----------------------------------------

int main () {
    int a [MAX_SIZE] = {0};
    int i = 0;
    int cnt = 0;
    printf ("Enter up to %d different numbers seperated by spaces (ctrl+d when done): \n", MAX_SIZE);
    while (i < MAX_SIZE) {
        if (scanf ("%d%*c", &a[i]) < 1)
            break;
        i++;
    }
    cnt = i;
    i = 0;
    printf ("\nPrinting elements using while loop:\n\n");
    while (a[i]) {
        printf ("a[%d] = %d\n", i, a [i]);
        i++;
    }
    printf ("\nPrinting elements using for loop:\n\n");
    for (i = 0; i < cnt; i++)
        printf ("a[%d] = %d\n", i, a[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988345_1_19
26988159_26988356_6_23
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int a [MAX_SIZE], i, count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (a[i] == 0)
            break;
        count++;
    }
    printf ("number of scanned elements: %d", count);
    for (i = 0; i < count; i++)
        printf ("%d\n", a[i]);
    return 0;
}
----------------------------------------

int main () {
    int count = 0;
    int arr [MAX_SIZE] = {0,};
    printf ("Enter the numbers one by one ==> \n");
    for (count = 0; count < MAX_SIZE; count++) {
        if (scanf ("%d", &arr[count]) == EOF)
            break;
    }
    printf ("Number of elements into the array %d\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988345_1_19
26988159_26988403_5_25
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int a [MAX_SIZE], i, count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (a[i] == 0)
            break;
        count++;
    }
    printf ("number of scanned elements: %d", count);
    for (i = 0; i < count; i++)
        printf ("%d\n", a[i]);
    return 0;
}
----------------------------------------

int main () {
    int a [MAX_SIZE], i;
    int count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (!a[i])
            break;
        count++;
    }
    printf ("Length: %lu\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988352_5_37
26988159_26988356_6_23
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int a [MAX_SIZE] = {0};
    int i = 0;
    int cnt = 0;
    printf ("Enter up to %d different numbers seperated by spaces (ctrl+d when done): \n", MAX_SIZE);
    while (i < MAX_SIZE) {
        if (scanf ("%d%*c", &a[i]) < 1)
            break;
        i++;
    }
    cnt = i;
    i = 0;
    printf ("\nPrinting elements using while loop:\n\n");
    while (a[i]) {
        printf ("a[%d] = %d\n", i, a [i]);
        i++;
    }
    printf ("\nPrinting elements using for loop:\n\n");
    for (i = 0; i < cnt; i++)
        printf ("a[%d] = %d\n", i, a[i]);
    return 0;
}
----------------------------------------

int main () {
    int count = 0;
    int arr [MAX_SIZE] = {0,};
    printf ("Enter the numbers one by one ==> \n");
    for (count = 0; count < MAX_SIZE; count++) {
        if (scanf ("%d", &arr[count]) == EOF)
            break;
    }
    printf ("Number of elements into the array %d\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988352_5_37
26988159_26988403_5_25
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int a [MAX_SIZE] = {0};
    int i = 0;
    int cnt = 0;
    printf ("Enter up to %d different numbers seperated by spaces (ctrl+d when done): \n", MAX_SIZE);
    while (i < MAX_SIZE) {
        if (scanf ("%d%*c", &a[i]) < 1)
            break;
        i++;
    }
    cnt = i;
    i = 0;
    printf ("\nPrinting elements using while loop:\n\n");
    while (a[i]) {
        printf ("a[%d] = %d\n", i, a [i]);
        i++;
    }
    printf ("\nPrinting elements using for loop:\n\n");
    for (i = 0; i < cnt; i++)
        printf ("a[%d] = %d\n", i, a[i]);
    return 0;
}
----------------------------------------

int main () {
    int a [MAX_SIZE], i;
    int count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (!a[i])
            break;
        count++;
    }
    printf ("Length: %lu\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26988159_26988356_6_23
26988159_26988403_5_25
Title: How to print the number of elements in an array? 
----------------------------------------

int main () {
    int count = 0;
    int arr [MAX_SIZE] = {0,};
    printf ("Enter the numbers one by one ==> \n");
    for (count = 0; count < MAX_SIZE; count++) {
        if (scanf ("%d", &arr[count]) == EOF)
            break;
    }
    printf ("Number of elements into the array %d\n", count);
    return 0;
}
----------------------------------------

int main () {
    int a [MAX_SIZE], i;
    int count = 0;
    printf ("Enter up to %d different numbers seperated by spaces: \n", MAX_SIZE);
    for (i = 0; i < MAX_SIZE; i++) {
        scanf ("%d", & a [i]);
        if (!a[i])
            break;
        count++;
    }
    printf ("Length: %lu\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26995540_26996058_2_28
26995540_26996545_13_34
Title: C function returns wrong int value 
----------------------------------------

int modexp (int m, int e, int n) {
    printf ("%i\n", m);
    printf ("%i\n", e);
    printf ("%i\n", n);
    printf ("\n");
    if (e == 0) {
        printf ("returning 1\n");
        return 1;
    }
    if (e % 2 == 1) {
        int tmp = modexp (m, e -1, n) * m % n;
        printf ("returning %d\n", tmp);
        return tmp;
    }
    else {
        int modTemp = modexp (m, (int) (e / 2), n);
        modTemp = modTemp * modTemp;
        modTemp = modTemp % n;
        printf ("returning %d\n", modTemp);
        return modTemp;
    }
}
----------------------------------------

int modexp (int b, int e, int m) {
    printf ("%i\n", b);
    printf ("%i\n", e);
    printf ("%i\n", m);
    printf ("\n");
    if (e == 0) {
        return 1;
    }
    if (e % 2 == 1) {
        return modexp (b, e -1, m) * b % m;
    }
    else {
        long modTemp = modexp (b, (int) (e / 2), m);
        modTemp = modTemp * modTemp;
        return modTemp % m;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26995598_26997377_3_20
26995598_26998491_1_25
Title: Find intersection in 2d arrays 
----------------------------------------

void intersection (int *mat, int rows, int cols) {
    rows = min (rows, 5);
    cols = min (cols, 4);
    int ma2 [] = {0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0};
    int i, j;
    for (i = 0; i < cols; ++i) {
        for (j = 0; j < rows; ++j) {
            printf ("%d ", mat [i * rows + j] & ma2 [i * rows + j]);
        }
        printf ("\n");
    }
}
----------------------------------------

void intersection (int *mat, int rows, int cols) {
    int ma2 [4] [5] = {{0, 1, 0, 0, 0}, {0, 1, 0, 0, 0}, {1, 1, 0, 1, 0}, {0, 1, 0, 0, 0}};
    int i = 0;
    int j = 0;
    int t = 1;
    int s = 0;
    printf ("\n+++++++++++++++++++++++++++++++\nintersection\n\n");
    for (j = 0; j < cols; j++) {
        for (i = 0; i < rows; i++) {
            if (ma2[j][i] && mat[j * rows + i] == 1) {
                printf ("%d ", t);
            }
            else {
                printf ("%d ", s);
            }
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2702625_2702682_16_47
2702625_2702763_4_25
Title: C programming - Print the 3rd line of a txt 
----------------------------------------

int main (void) {
    char buf [20];
    char *p;
    int cnt = 0;
    FILE *fp;
    p = buf;
    fp = fopen ("a.txt", "r");
    if (!fp) {
        return -1;
    }
    fgets (buf, 20, fp);
    output (p);
    while (1) {
        if (*p == ';') {
            p++;
            output (p);
        }
        if (*p == '\0') {
            break;
        }
        p++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char a [] = "8;9;10;12";
    char *b, *c, *d;
    b = strchr (a, ';');
    *b = '\0';
    b++;
    c = strchr (b, ';');
    *c = '\0';
    c++;
    d = strchr (c, ';');
    *d = '\0';
    d++;
    printf ("a: %s, b: %s, c: %s, d:%s", a, b, c, d);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27026415_27026452_11_19
27026415_27026463_13_24
Title: Script reads only even lines of file 
----------------------------------------

int main (void) {
    int i = 0;
    data_t m [4];
    while (fscanf (stdin, "%d,%[^/,],%d,%s", &m[i].id, m[i].nojm, &m[i].salar, m[i].phon) != EOF) {
        printf ("%d,%s,%d,%s\n", m [i].id, m [i].nojm, m [i].salar, m [i].phon);
        i++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    person_t array [3];
    FILE *fptr = NULL;
    fptr = fopen ("test.txt", "r");
    int i = 0;
    while (fscanf (fptr, "%d, %s", &array[i].id, array[i].phon) != EOF) {
        printf ("%d, %s\n", array [i].id, array [i].phon);
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27026666_27027169_9_41
27026666_27028447_13_40
Title: Working with array of structures in C using pointer to pointer 
----------------------------------------

int main (void) {
    int i;
    struct TestCase **tests;
    tests = malloc (5 * sizeof (struct TestCase *));
    if (tests == NULL)
        exit (1);
    for (i = 0; i < 5; i++) {
        tests[i] = malloc (sizeof (struct TestCase));
        if (tests[i] == NULL)
            exit (1);
    }
    for (i = 0; i < 5; i++)
        tests[i]->id = i;
    for (i = 0; i < 5; i++)
        printf ("%d\n", tests[i]->id);
    for (i = 0; i < 5; i++)
        free (tests[i]);
    free (tests);
    return 0;
}
----------------------------------------

int main () {
    TestCase **tests;
    cout << "Size of TestCase: " << sizeof (TestCase) << endl;
    tests = malloc (sizeof (TestCase *) * 5);
    if (tests == NULL)
        exit (1);
    for (int i = 0; i < 5; i++) {
        tests[i] = malloc (sizeof (struct TestCase));
        if (tests[i] == NULL)
            exit (1);
    }
    cout << "*tests = " << *tests << endl;
    for (int i = 0; i < 5; i++) {
        tests[i]->ida = i;
        tests[i]->idb = i + 6;
        cout << std : : hex << & (tests [i] -> idb) << ": " << * (long *) ((long) (long *) (tests [i]) + (long) & (((TestCase *) NULL) -> idb)) << endl;
    }
    for (int i = 0; i < 5; i++) {
        free (tests [i]);
    }
    cout << "*tests = " << *tests << endl;
    free (tests);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27032603_27032819_4_22
27032603_27035177_5_68
Title: read two strings into 1 variable 
----------------------------------------

int main () {
    char name [80];
    char str [40];
    printf ("Enter your first name: ");
    scanf ("%s", str);
    int flen = strlen (str);
    strncat (name, str, flen);
    strncat (name, " ", 1);
    printf ("Enter your last name: ");
    scanf (" %s", str);
    flen = strlen (str);
    strncat (name, str, flen);
    printf ("Name is :%s\n", name);
    return 0;
}
----------------------------------------

int main (void) {
    char *line = NULL;
    ssize_t read = 0;
    size_t n = 0;
    int cnt = 0;
    int spcs;
    char *p = NULL;
    char *fnumber = NULL;
    char *name = NULL;
    char *age = NULL;
    printf ("\n Enter Faculty Information (Faculty# Name Age) (press [ctrl+d] when done)\n\n");
    while (printf ("  input: ") && (read = getline (&line, &n, stdin)) != -1) {
        if (read > 0 && *line != '\n') {
            if (line[read - 1] == '\n') {
                line[read - 1] = 0;
                read--;
            }
            p = line;
            spcs = 0;
            while (*p) {
                if (*p == ' ')
                    spcs++;
                p++;
            }
            if (spcs < 3)
                continue;
            p = strrchr (line, ' ');
            age = strdup (++p);
            --p;
            *p = 0;
            p = strchr (line, ' ');
            *p++ = 0;
            fnumber = strdup (line);
            name = strdup (p);
            printf ("\n    Faculty #: %-10s name: %-24s age: %s\n\n", fnumber, name, age);
            if (fnumber)
                free (fnumber);
            if (name)
                free (name);
            if (age)
                free (age);
            cnt++;
        }
    }
    if (line)
        free (line);
    printf ("\n\n  Number of faculty entered : %d\n\n", cnt);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27037646_27037697_6_23
27037646_27037724_3_15
Title: Taking some string input from user with C 
----------------------------------------

int main () {
    int i, number;
    char *str = malloc (SIZ * sizeof (char));
    printf ("Enter the number :\n");
    scanf ("%d", & number);
    getc (stdin);
    for (i = 0; i < number; i++) {
        printf ("Enter the string %d :", (i + 1));
        fgets (str, SIZ - 1, stdin);
        printf ("You have entered :");
        fputs (str, stdout);
    }
    return 0;
}
----------------------------------------

int main () {
    int i, number;
    char *str;
    str = malloc (1000 * sizeof (char));
    printf ("Enter count : ");
    scanf ("%d%*c", & number);
    for (i = 0; i < number; i++) {
        printf ("\nEnter string: ");
        fgets (str, 1000, stdin);
        printf ("%s", str);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27042098_27042889_18_35
27042098_27043044_5_28
Title: Counting substrings in a string 
----------------------------------------

int main () {
    char *testStr = "cucumber";
    char *findStr = "cu";
    int k = 0;
    for (int i = 0; strlen (&testStr[i]) >= strlen (findStr); i++) {
        if (strstr (&testStr[i], findStr) != NULL) {
            k++;
        }
    }
    printf ("\nnumber of occurrences of %s in %s is %d\n", findStr, testStr, k);
    return (0);
}
----------------------------------------

int main () {
    int i;
    int k;
    char *ptr [MAX_SUB_STR];
    char *str = "cucumber";
    char *temp;
    char *substr = "cu";
    i = 0;
    k = 0;
    temp = str;
    while (strstr (temp, substr) != NULL && k < MAX_SUB_STR) {
        ptr[k] = strstr (temp, substr);
        temp = ptr[k] + strlen (substr);
        k++;
    }
    printf ("%i\n", k);
    for (i = 0; i < k; i++)
        printf ("%p\n", ptr[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27051107_27051542_1_21
27051107_27059486_6_28
Title: C cleaning up on error/termination 
----------------------------------------

mystruct *mystruct_init (int length) {
    mystruct *foo = malloc (sizeof (int *));
    if (!foo)
        goto FOO_FAIL;
    foo->array = malloc (length * sizeof (int));
    if (!foo->array)
        goto ARRAY_FAIL;
    foo->string = malloc (length * sizeof (char));
    if (!foo->string)
        goto STRING_FAIL;
    return foo;
STRING_FAIL :
    free (foo->array);
ARRAY_FAIL :
    free (foo);
FOO_FAIL :
    REPORT_ERROR;
    return NULL;
}
----------------------------------------

mystruct *mystruct_init (int length) {
    mystruct *foo = malloc (sizeof (mystruct));
    if (!foo)
        return NULL;
    memset (foo, 0, sizeof (mystruct));
    foo->array = malloc (length * sizeof (int));
    if (!foo->array)
        goto abort;
    foo->string = malloc (length * sizeof (char));
    if (!foo->string)
        goto abort;
    return foo;
abort :
    if (foo->array)
        free (foo->array);
    if (foo->string)
        free (foo->string);
    return NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27079472_27079550_2_23
27079472_27079578_1_25
Title: C Program Convert float number to letter grade 
----------------------------------------

char *getGrade (float input) {
    if (input >= 80 && input <= 100)
        return "A";
    else if (input >= 70 && input <= 79)
        return "B+";
    else if (input >= 60 && input <= 69)
        return "B";
    else if (input >= 55 && input <= 59)
        return "B-";
    else if (input >= 50 && input <= 54)
        return "c+";
    else if (input >= 40 && input <= 49)
        return "c";
    else if (input >= 35 && input <= 39)
        return "D";
    else
        return "F";
}
----------------------------------------

char *getGrade (float input) {
    static char letterGrade [3];
    letterGrade[0] = letterGrade[1] = 0;
    if (input >= 80)
        *letterGrade = 'A';
    else if (input >= 70) {
        *letterGrade = 'B';
        letterGrade[1] = '+';
    }
    else if (input >= 60)
        *letterGrade = 'B';
    else if (input >= 55) {
        letterGrade[0] = 'B';
        letterGrade[1] = '-';
    }
    else if (input >= 50) {
        letterGrade[0] = 'C';
        letterGrade[1] = '+';
    }
    else if (input >= 40)
        *letterGrade = 'C';
    else if (input >= 35)
        *letterGrade = 'D';
    else
        *letterGrade = 'F';
    return letterGrade;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27079589_27086393_1_18
27079589_27087288_13_60
Title: How can I store a phone number input into a int array? C 
----------------------------------------

int main (void) {
    char nme [20];
    unsigned long long nmbr;
    int nmbr_len;
    printf ("Enter:");
    char buf [100];
    fgets (buf, sizeof buf, stdin);
    int n [2];
    if (sscanf ("%19s %n%llu%n", nme, &n[0], &nmbr, &n[1]) != 2) {
        Handle_BadInput ();
    }
    nmbr_len = n[1] - n[0];
    printf ("%s %0*llu\n", nme, nmbr_len, nmbr);
    return 0;
}
----------------------------------------

int main () {
    char *line = NULL;
    size_t n = 0;
    ssize_t nchr = 0;
    int idx = 0;
    char *p = NULL;
    nandn *nnlist = calloc (MAXL, sizeof (nnlist));
    printf ("\nEnter name and number to add to book [ctrl+d] when done.\n\n");
    while (printf (" name number: ") && (nchr = getline (&line, &n, stdin)) != -1) {
        if (line[nchr - 1] == '\n')
            line[--nchr] = 0;
        p = strrchr (line, ' ');
        if (!p)
            break;
        (nnlist + idx)->num = strdup (++p);
        *(--p) = 0;
        (nnlist + idx)->name = strdup (line);
        idx++;
    }
    if (line)
        free (line);
    printf ("\n\nThe information collected was:\n\n");
    int i = 0;
    while ((nnlist + i)->name) {
        printf ("  nnlist[%d]   %-24s  %s\n", i, (nnlist + i) -> name, (nnlist + i) -> num);
        i++;
    }
    printf ("\n");
    i = 0;
    while ((nnlist + i)->name) {
        free ((nnlist + i) -> name);
        free ((nnlist + i) -> num);
        i++;
    }
    free (nnlist);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27080144_27080211_1_32
27080144_27087707_16_82
Title: why write function isn't working? 
----------------------------------------

int main () {
    char ch;
    FILE *source, *target;
    source = fopen (source_file, "r");
    if (source == NULL) {
        printf ("Press any key to exit...\n");
        exit (EXIT_FAILURE);
    }
    target = fopen (target_file, "w");
    if (target == NULL) {
        fclose (source);
        printf ("Press any key to exit...\n");
        exit (EXIT_FAILURE);
    }
    while ((ch = fgetc (source)) != EOF)
        fputc (ch, target);
    printf ("File copied successfully.\n");
    fclose (source);
    fclose (target);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int fd = -1;
    int fs = -1;
    int statusRd = 0;
    int statusWr = 0;
    if (2 > argc) {
        printf ("\ncalling format:  %s <filenametoread>\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    if ((fd = open ("salida.txt", O_TRUNC | O_CREAT | O_WRONLY, S_IWRITE)) < 0) {
        printf ("\nError %d en open", errno);
        perror ("open for write failed");
        exit (EXIT_FAILURE);
    }
    if ((fs = open (argv[1], O_RDONLY, S_IREAD)) < 0) {
        printf ("\nError %d en open", errno);
        perror ("open for read failed");
        close (fd);
        exit (EXIT_FAILURE);
    }
    do {
        if ((statusRd = read (fs, &buf, BUFFER_SIZE)) < 0) {
            perror ("read failed");
            close (fs);
            close (fd);
            exit (EXIT_FAILURE);
        }
        if (0 < statusRd) {
            if ((statusWr = write (fd, buf, statusRd)) < 0) {
                perror ("\nwrite failed");
                close (fs);
                close (fd);
                exit (EXIT_FAILURE);
            }
        }
    }
    while (statusRd > 0);
    close (fs);
    close (fd);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27085900_27086056_12_42
27085900_27086208_26_61
Title: How to count unique number of words using fgetc() then printing the count in C 
----------------------------------------

int main () {
    char array [64];
    int i = 0, input;
    linkedlist *head = NULL;
    printf ("Please enter an input:");
    while ((input = fgetc (stdin)) != '\n') {
        if (isalpha (input) && i != 63) {
            array[i] = input;
        }
        else {
            array[i] = '\0';
            char *word = malloc (strlen (array) +1);
            strcpy (word, array);
            add_word (word, & head);
            i = 0;
        }
        i++;
    }
    for (linkedlist *temp = head; temp != NULL; temp = temp->next) {
        printf ("%s %d ", temp -> word, temp -> count);
    }
}
----------------------------------------

int main (void) {
    char array [64];
    int i = 0;
    int j;
    int input;
    printf ("Please enter an input:");
    while ((input = fgetc (stdin)) != '\n' && input != EOF) {
        array[i] = input;
        if (i + 1 >= sizeof array)
            break;
        i++;
    }
    array[i] = '\0';
    for (j = 0; j < i; j++) {
        if (!isalpha ((unsigned char) array[j])) {
            array[j] = '\0';
        }
    }
    for (j = 0; j < i; j++) {
        if (isalpha ((unsigned char) array[j])) {
            Print_count (& array [j], array, i);
            do {
                j++;
            }
            while (isalpha ((unsigned char) array[j]));
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27086295_27086399_3_28
27086295_27086496_23_68
Title: C - why is arr[0] showing as 32767 
----------------------------------------

int main () {
    int number, numberCount, tmp, count;
    printf ("Please enter a number:\n>");
    scanf ("%d", & number);
    tmp = number;
    for (numberCount = 0; tmp > 0; numberCount++)
        tmp /= 10;
    int numbers [numberCount];
    for (count = (numberCount - 1); number > 0; count--) {
        numbers[count] = number % 10;
        number /= 10;
    }
    for (count = 0; count < numberCount; count++)
        printf ("%d digit is: %d\n", count +1, numbers[count]);
    return 0;
}
----------------------------------------

int main () {
    int t = 0;
    int n = 0;
    int n1 = 0;
    int tmp = 0;
    int in = 0;
    int len = 0;
    int j = 0;
    printf ("\n Enter the number of numbers to covert: ");
    scanf ("%d%*c", & t);
    while (t--) {
        printf ("\n Enter the number 'n' : ");
        scanf ("%d%*c", & n);
        int *arr = calloc (szitoa (n), sizeof (int));
        if (!arr) {
            fprintf (stderr, "error: arr allocation failed\n");
            exit (EXIT_FAILURE);
        }
        in = 0;
        len = 0;
        n1 = n;
        while (n1 > 0) {
            tmp = n1 % 10;
            arr[in] = tmp;
            len++;
            n1 = n1 / 10;
            in++;
        }
        for (j = 0; j < len; j++) {
            printf ("%d\n", arr [j]);
        }
        if (arr)
            free (arr);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27086664_27086755_1_19
27086664_27086809_1_12
Title: Search Function in Binary Search Tree causes seg fault 
----------------------------------------

node *search (node *tree, char *key) {
    if (tree == NULL) {
        return NULL;
    }
    if (strcmp (key, tree->key) < 0) {
        return search (tree->left, key);
    }
    else if (strcmp (key, tree->key) > 0) {
        return search (tree->right, key);
    }
    printf ("Success!\n");
    return tree;
}
----------------------------------------

node *search (node *tree, const char *key) {
    int cmp;
    if (tree == NULL)
        return NULL;
    cmp = strcmp (key, tree->key);
    if (cmp < 0)
        return search (tree->left, key);
    if (cmp > 0)
        return search (tree->right, key);
    return tree;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27090877_27091121_4_39
27090877_27091378_16_27
Title: "Triangle made with printf consists of inner frames" 
----------------------------------------

int main (int argc, char **args) {
    int size, middle, length, i, j;
    if (argc != 2) {
        printf ("must enter the triangle size\n");
        return 0;
    }
    size = atoi (args[1]);
    if (size < 1 || size > 26) {
        printf ("the size must be in the range [1, 26]\n");
        return 0;
    }
    printf ("size = %d\n\n", size);
    for (i = 0; i < size; ++i) {
        middle = size - 3 * i;
        if (middle >= 0) {
            for (j = 0; j < i; ++j) {
                printf ("%c", 'a' + j);
            }
            for (j = 0; j < middle; ++j) {
                printf ("%c", 'a' + i);
            }
            for (j = i - 1; j >= 0; --j) {
                printf ("%c", 'a' + j);
            }
        }
        else {
            length = size - i;
            for (j = 0; j < length; ++j) {
                printf ("%c", 'a' + (j < length - 1 - j ? j : length - 1 - j));
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int length, originalLength;
    int i;
    scanf ("%d", & length);
    originalLength = length;
    for (i = 0; i < originalLength; ++i) {
        print_line (length --, i, 0);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27095750_27095792_3_16
27095750_27104547_2_11
Title: How can I insert 2 other value in scanf one time 
----------------------------------------

int main (void) {
    char a, b;
    int numA, numB;
    printf ("A : ");
    scanf (" %c%d", & a, & numA);
    printf ("B : ");
    scanf (" %c%d", & b, & numB);
    printf ("\n%d %d\n", numA, numB);
    return 0;
}
----------------------------------------

void main () {
    char a, b, e;
    int c, d;
    printf ("A: ");
    scanf ("%c %d", & a, & c);
    e = getchar ();
    printf ("B: ");
    scanf ("%c %d", & b, & d);
    printf ("%d %d", c, d);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27098645_27098685_5_16
27098645_27098773_3_18
Title: Get the unknown length of number from input 
----------------------------------------

int main (void) {
    int arra [SZ], i, nxt = 0;
    while ((nxt < SZ) && (scanf ("%d", &(arra[nxt])) == 1))
        nxt++;
    printf ("\n");
    for (i = 0; i < nxt; i++)
        printf ("%d ", arra[i]);
    return 0;
}
----------------------------------------

int main () {
    int arra [100];
    int i;
    int k;
    int j = 0;
    printf ("Keep entering numbers and press q once done \n");
    while (scanf ("%d", &i) == 1) {
        arra[j++] = i;
    }
    printf ("\n");
    for (k = 0; k < j; k++) {
        printf ("%d", arra [k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27147986_27149506_1_24
27147986_27150437_1_34
Title: Data read separately fscanf 
----------------------------------------

int main () {
    FILE *fp;
    int **vec;
    int row = 6, col = 6, i, j;
    vec = malloc (sizeof (int *) * row);
    for (i = 0; i < row; i++) {
        vec[i] = malloc (sizeof (int) * col);
    }
    fp = fopen ("vector.txt", "r");
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            fscanf (fp, "%d", & vec [i] [j]);
        }
    }
    vec = malloc (sizeof (int *) * row);
    for (i = 0; i < row; i++) {
        free (vec [i]);
    }
    free (vec);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fp;
    int cols = 6;
    int *vec_1 = malloc (sizeof (int) * cols);
    int *vec_2 = malloc (sizeof (int) * cols);
    int i, i1, i2;
    char ch;
    fp = fopen ("vector.txt", "r");
    for (i1 = 0; i1 < cols;) {
        fscanf (fp, "%d%c", & vec_1 [i1 ++], & ch);
        if (ch == '\n')
            break;
    }
    i2 = 0;
    while (1 == fscanf (fp, "%d", &vec_2[i2])) {
        if (++i2 == cols)
            break;
    }
    fclose (fp);
    printf ("first  : ");
    for (i = 0; i < i1; ++i)
        printf ("%d ", vec_1[i]);
    printf ("\n");
    printf ("second : ");
    for (i = 0; i < i2; ++i)
        printf ("%d ", vec_2[i]);
    printf ("\n");
    free (vec_1);
    free (vec_2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27147986_27149506_1_24
27147986_27152616_33_51
Title: Data read separately fscanf 
----------------------------------------

int main () {
    FILE *fp;
    int **vec;
    int row = 6, col = 6, i, j;
    vec = malloc (sizeof (int *) * row);
    for (i = 0; i < row; i++) {
        vec[i] = malloc (sizeof (int) * col);
    }
    fp = fopen ("vector.txt", "r");
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            fscanf (fp, "%d", & vec [i] [j]);
        }
    }
    vec = malloc (sizeof (int *) * row);
    for (i = 0; i < row; i++) {
        free (vec [i]);
    }
    free (vec);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *inf = fopen ("c:/tmp/vector.txt", "r");
    size_t Width = 4;
    int **Data = Read_Lines_Of_Numbers (inf, Width);
    fclose (inf);
    if (Data) {
        size_t i;
        for (i = 0; Data[i]; i++) {
            size_t j;
            for (j = 0; j < Width; j++) {
                printf (" %d", Data [i] [j]);
            }
            fputc ('\n', stdout);
        }
        free (Data);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27147986_27150437_1_34
27147986_27152616_33_51
Title: Data read separately fscanf 
----------------------------------------

int main (void) {
    FILE *fp;
    int cols = 6;
    int *vec_1 = malloc (sizeof (int) * cols);
    int *vec_2 = malloc (sizeof (int) * cols);
    int i, i1, i2;
    char ch;
    fp = fopen ("vector.txt", "r");
    for (i1 = 0; i1 < cols;) {
        fscanf (fp, "%d%c", & vec_1 [i1 ++], & ch);
        if (ch == '\n')
            break;
    }
    i2 = 0;
    while (1 == fscanf (fp, "%d", &vec_2[i2])) {
        if (++i2 == cols)
            break;
    }
    fclose (fp);
    printf ("first  : ");
    for (i = 0; i < i1; ++i)
        printf ("%d ", vec_1[i]);
    printf ("\n");
    printf ("second : ");
    for (i = 0; i < i2; ++i)
        printf ("%d ", vec_2[i]);
    printf ("\n");
    free (vec_1);
    free (vec_2);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *inf = fopen ("c:/tmp/vector.txt", "r");
    size_t Width = 4;
    int **Data = Read_Lines_Of_Numbers (inf, Width);
    fclose (inf);
    if (Data) {
        size_t i;
        for (i = 0; Data[i]; i++) {
            size_t j;
            for (j = 0; j < Width; j++) {
                printf (" %d", Data [i] [j]);
            }
            fputc ('\n', stdout);
        }
        free (Data);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27158670_27158926_7_35
27158670_27163141_29_66
Title: waitpid() not waiting for child 
----------------------------------------

int main () {
    int i;
    for (i = 0; i < 3; i += 1) {
        pid_t id = fork ();
        if (id == 0) {
            char *argv [] = {"echo", "hi", NULL};
            printf ("I AM CHILD.\n");
            execvp ("echo", argv);
            perror ("execvp failed.\n");
            exit (1);
        }
        else if (id < 0) {
            perror ("fork failed.\n");
            exit (1);
        }
        printf ("I AM PARENT.\n");
        printf ("WAITING FOR CHILD.\n");
        waitpid (id, NULL, 0);
        printf ("DONE WAITING\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char path [PATH_MAX];
    char str [MAX_STR];
    struct cmdLine *pCmd = NULL;
    while (1) {
        getcwd (path, PATH_MAX);
        printf ("%s$ ", path);
        if (NULL == fgets (str, MAX_STR, stdin)) {
            perror ("fgets failed");
            exit (EXIT_FAILURE);
        }
        if (!strncmp (str, "quit", strlen ("quit"))) {
            break;
        }
        pCmd = parseCmdLines (str);
        if ((NULL != pCmd) && (NULL != pCmd->arguments)) {
            execute (pCmd);
        }
        freeCmdLines (pCmd);
        pCmd = NULL;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27160073_27160518_83_100
27160073_47373904_4_21
Title: Replacing Words inside string in C 
----------------------------------------

int main (void) {
    char *result;
    result = changewords_1 ("Hello I'm Number One", "Number", "Index");
    printf ("[%s]\n", result);
    free (result);
    result = changewords_2 ("Here Is The Onerous Number One ...", "One", "Four");
    printf ("[%s]\n", result);
    free (result);
    result = changewords_3 ("Here Is Number One Again", "One", "Fourty-Five Hundred");
    printf ("[%s]\n", result);
    free (result);
    return 0;
}
----------------------------------------

int main () {
    char str [] = "This is a simple string made with simple code";
    char *pch;
    int i = 0, count = 0;
    for (i = 0; i < strlen (str); i++) {
        if (str[i] == 's' && str[i + 1] == 'i' && str[i + 2] == 'm' && str[i + 3] == 'p' && str[i + 4] == 'l' && str[i + 5] == 'e') {
            count++;
        }
    }
    for (i = 1; i <= count; i++) {
        pch = strstr (str, "simple");
        strncpy (pch, "sample", 6);
    }
    puts (str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27162419_27162461_12_38
27162419_27162492_5_24
Title: Sum of prime numbers below 500 
----------------------------------------

void main (void) {
    int num, mult;
    int count = 1, sum = 0;
    for (num = 2; num < LIMIT; num++) {
        if (!isComposite[num]) {
            printf ("%d is the prime number %d\n", num, count ++);
            sum += num;
            for (mult = num * 2; mult < LIMIT; mult += num) {
                isComposite[mult] = 1;
            }
        }
    }
    printf ("The sum of those primes is %d\n", sum);
}
----------------------------------------

int main () {
    int i, n = 1, j, sum = 0;
    for (i = 2; i < 500; i++) {
        if (!c[i]) {
            printf ("%d is the prime number %d\n", i, n);
            sum += i;
            n++;
            j = 2;
            while (j * i < 500) {
                c[j * i] = 1;
                j++;
            }
        }
    }
    printf ("Sum is %d", sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27169280_27169423_3_31
27169280_27169644_3_18
Title: Fibonacci series sum 
----------------------------------------

int main () {
    int count, sum, specialNumber, fibonacci, numberOne, numberTow, found;
    sum = 0, fibonacci = 0, numberOne = -1, numberTow = 1, found = 0;
    int n;
    printf ("Enter the limit :\n>");
    scanf ("%d", & n);
    printf ("\nThe fibonacci series is :");
    for (count = 1; count <= n; count++) {
        fibonacci = numberOne + numberTow;
        printf ("\n%d", fibonacci);
        sum += fibonacci;
        if (sum >= 1000000 && !found) {
            specialNumber = fibonacci;
            found = 1;
        }
        numberOne = numberTow;
        numberTow = fibonacci;
    }
    printf ("\nThe sum of the fibonacci series is : %d\n", sum);
    printf ("%d makes the sum bigger than 7 digits", specialNumber);
    return 0;
}
----------------------------------------

int main () {
    int previous, current = 0, next = 1, sum = current, threshold;
    printf ("Enter the threshold: ");
    scanf ("%d", & threshold);
    printf ("Fibonacci series: %d", current);
    while (sum < threshold) {
        previous = current;
        current = next;
        next = previous + current;
        printf (" + %d", current);
        sum += current;
    }
    printf (" = %d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27169280_27169423_3_31
27169280_27169735_2_26
Title: Fibonacci series sum 
----------------------------------------

int main () {
    int count, sum, specialNumber, fibonacci, numberOne, numberTow, found;
    sum = 0, fibonacci = 0, numberOne = -1, numberTow = 1, found = 0;
    int n;
    printf ("Enter the limit :\n>");
    scanf ("%d", & n);
    printf ("\nThe fibonacci series is :");
    for (count = 1; count <= n; count++) {
        fibonacci = numberOne + numberTow;
        printf ("\n%d", fibonacci);
        sum += fibonacci;
        if (sum >= 1000000 && !found) {
            specialNumber = fibonacci;
            found = 1;
        }
        numberOne = numberTow;
        numberTow = fibonacci;
    }
    printf ("\nThe sum of the fibonacci series is : %d\n", sum);
    printf ("%d makes the sum bigger than 7 digits", specialNumber);
    return 0;
}
----------------------------------------

void main () {
    int a = -1, b = 1, c = 0, i, n, term1, term2;
    long sum = 0;
    printf ("Enter the limit : ");
    scanf ("%d", & n);
    printf ("\nThe fibonacci series is :");
    for (i = 1; i <= n; i++) {
        c = a + b;
        printf ("%d \n", c);
        sum = sum + c;
        if (sum >= 1000000) {
            term1 = a;
            term2 = b;
            break;
        }
        a = b;
        b = c;
    }
    printf ("\nThe sum of the fibonacci series is : %ld", sum);
    printf ("\n terms are %d and %d", term1, term2);
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27169280_27169423_3_31
27169280_27169848_2_20
Title: Fibonacci series sum 
----------------------------------------

int main () {
    int count, sum, specialNumber, fibonacci, numberOne, numberTow, found;
    sum = 0, fibonacci = 0, numberOne = -1, numberTow = 1, found = 0;
    int n;
    printf ("Enter the limit :\n>");
    scanf ("%d", & n);
    printf ("\nThe fibonacci series is :");
    for (count = 1; count <= n; count++) {
        fibonacci = numberOne + numberTow;
        printf ("\n%d", fibonacci);
        sum += fibonacci;
        if (sum >= 1000000 && !found) {
            specialNumber = fibonacci;
            found = 1;
        }
        numberOne = numberTow;
        numberTow = fibonacci;
    }
    printf ("\nThe sum of the fibonacci series is : %d\n", sum);
    printf ("%d makes the sum bigger than 7 digits", specialNumber);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int a = -1, b = 1, c = 0, i = 1, n = 0, sum = 0;
    printf ("\nThe fibonacci series is :");
    while (sum <= 10000000) {
        c = a + b;
        printf ("%d-", c);
        sum = sum + c;
        a = b;
        b = c;
        n = i;
        i++;
    }
    printf ("\nThe sum of the fibonacci series is : %d", sum);
    printf ("\nThe term is %d the value is %d", n, c);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27169280_27169644_3_18
27169280_27169735_2_26
Title: Fibonacci series sum 
----------------------------------------

int main () {
    int previous, current = 0, next = 1, sum = current, threshold;
    printf ("Enter the threshold: ");
    scanf ("%d", & threshold);
    printf ("Fibonacci series: %d", current);
    while (sum < threshold) {
        previous = current;
        current = next;
        next = previous + current;
        printf (" + %d", current);
        sum += current;
    }
    printf (" = %d\n", sum);
    return 0;
}
----------------------------------------

void main () {
    int a = -1, b = 1, c = 0, i, n, term1, term2;
    long sum = 0;
    printf ("Enter the limit : ");
    scanf ("%d", & n);
    printf ("\nThe fibonacci series is :");
    for (i = 1; i <= n; i++) {
        c = a + b;
        printf ("%d \n", c);
        sum = sum + c;
        if (sum >= 1000000) {
            term1 = a;
            term2 = b;
            break;
        }
        a = b;
        b = c;
    }
    printf ("\nThe sum of the fibonacci series is : %ld", sum);
    printf ("\n terms are %d and %d", term1, term2);
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27169280_27169644_3_18
27169280_27169848_2_20
Title: Fibonacci series sum 
----------------------------------------

int main () {
    int previous, current = 0, next = 1, sum = current, threshold;
    printf ("Enter the threshold: ");
    scanf ("%d", & threshold);
    printf ("Fibonacci series: %d", current);
    while (sum < threshold) {
        previous = current;
        current = next;
        next = previous + current;
        printf (" + %d", current);
        sum += current;
    }
    printf (" = %d\n", sum);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int a = -1, b = 1, c = 0, i = 1, n = 0, sum = 0;
    printf ("\nThe fibonacci series is :");
    while (sum <= 10000000) {
        c = a + b;
        printf ("%d-", c);
        sum = sum + c;
        a = b;
        b = c;
        n = i;
        i++;
    }
    printf ("\nThe sum of the fibonacci series is : %d", sum);
    printf ("\nThe term is %d the value is %d", n, c);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27169280_27169735_2_26
27169280_27169848_2_20
Title: Fibonacci series sum 
----------------------------------------

void main () {
    int a = -1, b = 1, c = 0, i, n, term1, term2;
    long sum = 0;
    printf ("Enter the limit : ");
    scanf ("%d", & n);
    printf ("\nThe fibonacci series is :");
    for (i = 1; i <= n; i++) {
        c = a + b;
        printf ("%d \n", c);
        sum = sum + c;
        if (sum >= 1000000) {
            term1 = a;
            term2 = b;
            break;
        }
        a = b;
        b = c;
    }
    printf ("\nThe sum of the fibonacci series is : %ld", sum);
    printf ("\n terms are %d and %d", term1, term2);
    printf ("\n");
}
----------------------------------------

int main (int argc, char **argv) {
    int a = -1, b = 1, c = 0, i = 1, n = 0, sum = 0;
    printf ("\nThe fibonacci series is :");
    while (sum <= 10000000) {
        c = a + b;
        printf ("%d-", c);
        sum = sum + c;
        a = b;
        b = c;
        n = i;
        i++;
    }
    printf ("\nThe sum of the fibonacci series is : %d", sum);
    printf ("\nThe term is %d the value is %d", n, c);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27171065_27171752_5_24
27171065_27171836_7_43
Title: C program for a counter 
----------------------------------------

int main (void) {
    int num = 0;
    while (1) {
        gotosleep;
        if (sw)
            num++;
        else
            num = 0;
        if (num == MAX) {
            printf ("Done\n");
            num = 0;
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int switchCounter = 0;
    int checkSwitch;
    checkSwitch = 1;
    while (switchCounter != 100) {
        sec = 0;
        time (& start);
        while (sec != 10) {
            ++counter;
            time (& enxd);
            sec = difftime (enxd, start);
        }
        if (checkSwitch == 1) {
            switchCounter++;
            printf ("Counter incremented. Current = %i \n", switchCounter);
        }
        else {
            switchCounter = 0;
            printf ("Switch is open \n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27171065_27171752_5_24
27171065_27172411_11_46
Title: C program for a counter 
----------------------------------------

int main (void) {
    int num = 0;
    while (1) {
        gotosleep;
        if (sw)
            num++;
        else
            num = 0;
        if (num == MAX) {
            printf ("Done\n");
            num = 0;
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int counter = 0;
    int toSleep = 0;
    while (1) {
        toSleep = switchSet ? SLEEPTIME : 0;
        if (toSleep) {
            printf ("Going to sleep for %d sec\n", SLEEPTIME);
            sleep (toSleep);
        }
        else {
            counter++;
            printf ("No sleeping, counter is %d\n", counter);
        }
        if (counter == MAXVAL)
            break;
    }
    printf ("Do Something... Did, Done !!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27171065_27171836_7_43
27171065_27172411_11_46
Title: C program for a counter 
----------------------------------------

int main () {
    int switchCounter = 0;
    int checkSwitch;
    checkSwitch = 1;
    while (switchCounter != 100) {
        sec = 0;
        time (& start);
        while (sec != 10) {
            ++counter;
            time (& enxd);
            sec = difftime (enxd, start);
        }
        if (checkSwitch == 1) {
            switchCounter++;
            printf ("Counter incremented. Current = %i \n", switchCounter);
        }
        else {
            switchCounter = 0;
            printf ("Switch is open \n");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int counter = 0;
    int toSleep = 0;
    while (1) {
        toSleep = switchSet ? SLEEPTIME : 0;
        if (toSleep) {
            printf ("Going to sleep for %d sec\n", SLEEPTIME);
            sleep (toSleep);
        }
        else {
            counter++;
            printf ("No sleeping, counter is %d\n", counter);
        }
        if (counter == MAXVAL)
            break;
    }
    printf ("Do Something... Did, Done !!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27175779_27176457_5_27
27175779_27176654_40_49
Title: "Trying to ""censor"" all 4 letter words with other methods in C using pointers" 
----------------------------------------

void censor (char *s) {
    if (!s)
        return;
    char *sp = s;
    char *ep = s;
    char *termchr = " ,.\n\t\0";
    while (*ep) {
        if (strchr (termchr, *ep)) {
            if (ep - ((sp > s) ? ++sp : sp) == 4) {
                while (sp < ep)
                    *sp++ = '*';
            }
            else
                sp = ep;
        }
        ep++;
    }
}
----------------------------------------

void censor (char *start) {
    while (start = find_not_blank (start)) {
        int len = find_blank (start) - start;
        if (len == 4) {
            four_stars (start);
        }
        start += len;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27179063_27180187_20_96
27179063_27182633_15_95
Title: Struct implementation advice 
----------------------------------------

int main (void) {
    int N;
    printf ("How many entries do you have?\n> ");
    scanf ("%d", & N);
    workers = (work *) malloc (100 * sizeof (work));
    int number_of_workers = 100;
    for (int n = 0; n < N; n++) {
        char event;
        int h, m, s, id;
        scanf (" %c %d:%d:%d%d", & event, & h, & m, & s, & id);
        if (id > number_of_workers - 1) {
            number_of_workers = id + 1;
            workers = (work *) realloc (workers, number_of_workers * sizeof (work));
        }
        if (event == '+') {
            workers[id].n_of_arrivals += 1;
            int len = workers[id].n_of_arrivals;
            workers[id].arrival = (time *) realloc (workers[id].arrival, len * sizeof (time));
            time *arrival = workers[id].arrival;
            arrival[len - 1].h = h;
            arrival[len - 1].m = m;
            arrival[len - 1].s = s;
        }
        else {
            workers[id].n_of_departures += 1;
            int len = workers[id].n_of_departures;
            workers[id].departure = (time *) realloc (workers[id].departure, len * sizeof (time));
            time *departure = workers[id].departure;
            departure[len - 1].h = h;
            departure[len - 1].m = m;
            departure[len - 1].s = s;
        }
    }
    for (int i = 0; i < number_of_workers; i++) {
        if (!workers[i].n_of_arrivals && !workers[i].n_of_departures)
            continue;
        printf ("Worker %d:\n", i);
        if (workers[i].n_of_arrivals) {
            int len = workers[i].n_of_arrivals;
            printf ("Arrivals:\n");
            for (int k = 0; k < len; k++)
                printf ("%d:%d:%d\n", workers[i].arrival[k].h, workers[i].arrival[k].m, workers[i].arrival[k].s);
        }
        if (workers[i].n_of_departures) {
            int len = workers[i].n_of_departures;
            printf ("Departures:\n");
            for (int k = 0; k < len; k++)
                printf ("%d:%d:%d\n", workers[i].departure[k].h, workers[i].departure[k].m, workers[i].departure[k].s);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char *name = NULL;
    int tio = 0;
    int idx = 0;
    int idxmax = 0;
    int tdx = 0;
    int tmax = 0;
    char exist = 0;
    int wkrsz = INITWKR;
    worker **wkrs = calloc (INITWKR, sizeof (*wkrs));
    printf ("\nPunch the clock, enter name & minutes worked ([enter] alone to end)\n");
    while (printf ("\n  name: ") && scanf ("%m[^\n]%*c", &name) >= 1 && printf ("  time: ") && scanf ("%d%*c", &tio) >= 1) {
        idx = 0;
        exist = 0;
        while (wkrs[idx]) {
            if (strcmp (wkrs[idx]->name, name) == 0) {
                exist = 1;
                break;
            }
            idx++;
        }
        if (!exist) {
            wkrs[idx] = malloc (sizeof (**wkrs));
            wkrs[idx]->name = strdup (name);
            wkrs[idx]->time = calloc (INITWKR, sizeof (int));
            wkrs[idx]->entries = 0;
            wkrs[idx]->size = INITWKR;
            wkrs[idx]->total = 0;
        }
        tdx = 0;
        while ((wkrs[idx]->time)[tdx])
            tdx++;
        (wkrs[idx]->time)[tdx] = tio;
        wkrs[idx]->entries++;
        wkrs[idx]->total += tio;
        if (wkrs[idx]->total > tmax) {
            tmax = wkrs[idx]->total;
            idxmax = idx;
        }
    }
    if (name)
        free (name);
    printf ("\nWorker Time Summary:\n\n");
    idx = 0;
    while (wkrs[idx]) {
        if (idx == idxmax)
            printf ("  Worker[%2d] : %-24s   time: %d  (max time)\n", idx, wkrs[idx]->name, wkrs[idx]->total);
        else
            printf ("  Worker[%2d] : %-24s   time: %d\n", idx, wkrs[idx]->name, wkrs[idx]->total);
        idx++;
    }
    printf ("\n");
    idx = 0;
    while (wkrs[idx]) {
        if (wkrs[idx]->name)
            free (wkrs[idx]->name);
        if (wkrs[idx]->time)
            free (wkrs[idx]->time);
        if (wkrs[idx])
            free (wkrs[idx++]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27179675_27179764_1_25
27179675_27179807_1_14
Title: Can't find target when searching array in c 
----------------------------------------

intarr_result_t intarr_find (intarr_t *ia, int target, int *i) {
    if (ia == NULL) {
        return INTARR_BADARRAY;
    }
    else {
        for (int x = 0; x < ia->len; x++) {
            if (ia->data[x] == target) {
                if (i != NULL) {
                    *i = x;
                }
                return INTARR_OK;
            }
        }
    }
    return INTARR_NOTFOUND;
}
----------------------------------------

intarr_result_t intarr_find (intarr_t *ia, int target, int *i) {
    if (ia == NULL || i == NULL)
        return INTARR_BADARRAY;
    for (int x = 0; x < ia->len; x++) {
        if (ia->data[x] == target) {
            *i = x;
            return INTARR_OK;
        }
    }
    return INTARR_NOTFOUND;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27182352_27182370_5_28
27182352_27182394_1_18
Title: How to compare arrays in C 
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = INT_MIN;
    largest2 = INT_MIN;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            if (nums[i][x] > largest2)
                largest2 = nums[i][x];
            if (largest2 > largest1) {
                largest2 = largest1;
                largest1 = nums[i][x];
            }
        }
    }
    printf ("Largest number is %d, second largest is %d\n", largest1, largest2);
    return 0;
}
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = 0;
    largest2 = 0;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            if (nums[i][x] > largest1)
                largest1 = nums[i][x];
            if (nums[i][x] > largest2 && nums[i][x] < largest1)
                largest2 = nums[i][x];
        }
    }
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", largest1, largest2);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27182352_27182370_5_28
27182352_27182419_1_19
Title: How to compare arrays in C 
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = INT_MIN;
    largest2 = INT_MIN;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            if (nums[i][x] > largest2)
                largest2 = nums[i][x];
            if (largest2 > largest1) {
                largest2 = largest1;
                largest1 = nums[i][x];
            }
        }
    }
    printf ("Largest number is %d, second largest is %d\n", largest1, largest2);
    return 0;
}
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            largest1 = 0;
            largest2 = 0;
            if (nums[i][x] > largest1)
                largest1 = nums[i][x];
            if (nums[i][x] > largest2)
                largest2 = nums[i][x];
        }
    }
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", largest1, largest2);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27182352_27182370_5_28
27182352_27182484_4_18
Title: How to compare arrays in C 
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = INT_MIN;
    largest2 = INT_MIN;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            if (nums[i][x] > largest2)
                largest2 = nums[i][x];
            if (largest2 > largest1) {
                largest2 = largest1;
                largest1 = nums[i][x];
            }
        }
    }
    printf ("Largest number is %d, second largest is %d\n", largest1, largest2);
    return 0;
}
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, save [30], j = 0, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            save[j++] = nums[i][x];
        }
    }
    sort (save, save + j);
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", save [j - 1], save [j - 2]);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27182352_27182370_5_28
27182352_27182542_1_20
Title: How to compare arrays in C 
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = INT_MIN;
    largest2 = INT_MIN;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            if (nums[i][x] > largest2)
                largest2 = nums[i][x];
            if (largest2 > largest1) {
                largest2 = largest1;
                largest1 = nums[i][x];
            }
        }
    }
    printf ("Largest number is %d, second largest is %d\n", largest1, largest2);
    return 0;
}
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = 0;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            largest1 = 0;
            largest2 = 0;
            if (nums[i][x] > largest1) {
                largest2 = largets1;
                largest1 = nums[i][x];
            }
        }
    }
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", largest1, largest2);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27182352_27182394_1_18
27182352_27182484_4_18
Title: How to compare arrays in C 
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = 0;
    largest2 = 0;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            if (nums[i][x] > largest1)
                largest1 = nums[i][x];
            if (nums[i][x] > largest2 && nums[i][x] < largest1)
                largest2 = nums[i][x];
        }
    }
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", largest1, largest2);
    system ("pause");
}
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, save [30], j = 0, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            save[j++] = nums[i][x];
        }
    }
    sort (save, save + j);
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", save [j - 1], save [j - 2]);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27182352_27182394_1_18
27182352_27182542_1_20
Title: How to compare arrays in C 
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = 0;
    largest2 = 0;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            if (nums[i][x] > largest1)
                largest1 = nums[i][x];
            if (nums[i][x] > largest2 && nums[i][x] < largest1)
                largest2 = nums[i][x];
        }
    }
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", largest1, largest2);
    system ("pause");
}
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = 0;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            largest1 = 0;
            largest2 = 0;
            if (nums[i][x] > largest1) {
                largest2 = largets1;
                largest1 = nums[i][x];
            }
        }
    }
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", largest1, largest2);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27182352_27182419_1_19
27182352_27182484_4_18
Title: How to compare arrays in C 
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            largest1 = 0;
            largest2 = 0;
            if (nums[i][x] > largest1)
                largest1 = nums[i][x];
            if (nums[i][x] > largest2)
                largest2 = nums[i][x];
        }
    }
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", largest1, largest2);
    system ("pause");
}
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, save [30], j = 0, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            save[j++] = nums[i][x];
        }
    }
    sort (save, save + j);
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", save [j - 1], save [j - 2]);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27182352_27182484_4_18
27182352_27182542_1_20
Title: How to compare arrays in C 
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, save [30], j = 0, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            save[j++] = nums[i][x];
        }
    }
    sort (save, save + j);
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", save [j - 1], save [j - 2]);
    system ("pause");
}
----------------------------------------

int main (void) {
    int i, x, largest1, largest2, nums [5] [4] = {{5, 6, 8, 9}, {3, -55, 6, 89}, {1023, 43, -2, 0}, {0, 12, 45, 12}, {-4, 901, 34, 294}};
    largest1 = 0;
    for (i = 0; i < 5; i++) {
        for (x = 0; x < 4; x++) {
            largest1 = 0;
            largest2 = 0;
            if (nums[i][x] > largest1) {
                largest2 = largets1;
                largest1 = nums[i][x];
            }
        }
    }
    printf ("\n 1st largest: %d \n 2nd largest: %d \n\n", largest1, largest2);
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27189260_27189454_5_15
27189260_27189565_12_49
Title: I can't store integers inside an array 
----------------------------------------

int main () {
    int input [10], count;
    printf ("Enter 10 digits: ");
    for (count = 0; count < 10; count++) {
        scanf ("%d", & input [count]);
    }
    sort (input);
    return 0;
}
----------------------------------------

int main (void) {
    int odd [N];
    int even [N];
    int odd_count = 0;
    int even_count = 0;
    int i;
    printf ("Enter %d numbers: ", N);
    for (i = 0; i < N; i++) {
        int num;
        scanf ("%d", & num);
        switch (sort (num)) {
        case Even :
            even[even_count++] = num;
            break;
        case Odd :
            odd[odd_count++] = num;
            break;
        }
    }
    printf ("Even numbers (%d):", even_count);
    for (i = 0; i < even_count; i++)
        printf (" %d", even[i]);
    printf ("\n");
    printf ("Odd numbers (%d):", odd_count);
    for (i = 0; i < odd_count; i++)
        printf (" %d", odd[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27189260_27189454_5_15
27189260_27189602_5_22
Title: I can't store integers inside an array 
----------------------------------------

int main () {
    int input [10], count;
    printf ("Enter 10 digits: ");
    for (count = 0; count < 10; count++) {
        scanf ("%d", & input [count]);
    }
    sort (input);
    return 0;
}
----------------------------------------

int main () {
    int input, count, i = 0, j = 0;
    int odd [10];
    int even [10];
    for (count = 0; count != 10; count++) {
        printf ("Enter 10 digits: ");
        scanf ("%d", & input);
        if (sort (input))
            odd[i++] = input;
        else
            even[j++] = input;
    }
    printf ("%d", input);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27189260_27189454_5_15
27189260_27189651_6_41
Title: I can't store integers inside an array 
----------------------------------------

int main () {
    int input [10], count;
    printf ("Enter 10 digits: ");
    for (count = 0; count < 10; count++) {
        scanf ("%d", & input [count]);
    }
    sort (input);
    return 0;
}
----------------------------------------

int main () {
    int input, i;
    int oddcounter = 0, evencounter = 0;
    int oddarr [NUM];
    int evenarr [NUM];
    printf ("Enter 10 integers\n");
    for (i = 0; i < NUM; i++) {
        if (scanf ("%d", &input) == 1) {
            if ((input % 2) == 0) {
                evenarr[evencounter++] = input;
            }
            else {
                oddarr[oddcounter++] = input;
            }
        }
    }
    printf ("Number of elem in oddarray : %d, evenarray : %d\n\n", oddcounter, evencounter);
    printf ("Odd elements are :");
    for (i = 0; i < oddcounter; i++)
        printf ("%d\t", oddarr[i]);
    printf ("\n");
    printf ("Even elements are :");
    for (i = 0; i < evencounter; i++)
        printf ("%d\t", evenarr[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27189260_27189565_12_49
27189260_27189602_5_22
Title: I can't store integers inside an array 
----------------------------------------

int main (void) {
    int odd [N];
    int even [N];
    int odd_count = 0;
    int even_count = 0;
    int i;
    printf ("Enter %d numbers: ", N);
    for (i = 0; i < N; i++) {
        int num;
        scanf ("%d", & num);
        switch (sort (num)) {
        case Even :
            even[even_count++] = num;
            break;
        case Odd :
            odd[odd_count++] = num;
            break;
        }
    }
    printf ("Even numbers (%d):", even_count);
    for (i = 0; i < even_count; i++)
        printf (" %d", even[i]);
    printf ("\n");
    printf ("Odd numbers (%d):", odd_count);
    for (i = 0; i < odd_count; i++)
        printf (" %d", odd[i]);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int input, count, i = 0, j = 0;
    int odd [10];
    int even [10];
    for (count = 0; count != 10; count++) {
        printf ("Enter 10 digits: ");
        scanf ("%d", & input);
        if (sort (input))
            odd[i++] = input;
        else
            even[j++] = input;
    }
    printf ("%d", input);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27189260_27189565_12_49
27189260_27189651_6_41
Title: I can't store integers inside an array 
----------------------------------------

int main (void) {
    int odd [N];
    int even [N];
    int odd_count = 0;
    int even_count = 0;
    int i;
    printf ("Enter %d numbers: ", N);
    for (i = 0; i < N; i++) {
        int num;
        scanf ("%d", & num);
        switch (sort (num)) {
        case Even :
            even[even_count++] = num;
            break;
        case Odd :
            odd[odd_count++] = num;
            break;
        }
    }
    printf ("Even numbers (%d):", even_count);
    for (i = 0; i < even_count; i++)
        printf (" %d", even[i]);
    printf ("\n");
    printf ("Odd numbers (%d):", odd_count);
    for (i = 0; i < odd_count; i++)
        printf (" %d", odd[i]);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int input, i;
    int oddcounter = 0, evencounter = 0;
    int oddarr [NUM];
    int evenarr [NUM];
    printf ("Enter 10 integers\n");
    for (i = 0; i < NUM; i++) {
        if (scanf ("%d", &input) == 1) {
            if ((input % 2) == 0) {
                evenarr[evencounter++] = input;
            }
            else {
                oddarr[oddcounter++] = input;
            }
        }
    }
    printf ("Number of elem in oddarray : %d, evenarray : %d\n\n", oddcounter, evencounter);
    printf ("Odd elements are :");
    for (i = 0; i < oddcounter; i++)
        printf ("%d\t", oddarr[i]);
    printf ("\n");
    printf ("Even elements are :");
    for (i = 0; i < evencounter; i++)
        printf ("%d\t", evenarr[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27189260_27189602_5_22
27189260_27189651_6_41
Title: I can't store integers inside an array 
----------------------------------------

int main () {
    int input, count, i = 0, j = 0;
    int odd [10];
    int even [10];
    for (count = 0; count != 10; count++) {
        printf ("Enter 10 digits: ");
        scanf ("%d", & input);
        if (sort (input))
            odd[i++] = input;
        else
            even[j++] = input;
    }
    printf ("%d", input);
    return 0;
}
----------------------------------------

int main () {
    int input, i;
    int oddcounter = 0, evencounter = 0;
    int oddarr [NUM];
    int evenarr [NUM];
    printf ("Enter 10 integers\n");
    for (i = 0; i < NUM; i++) {
        if (scanf ("%d", &input) == 1) {
            if ((input % 2) == 0) {
                evenarr[evencounter++] = input;
            }
            else {
                oddarr[oddcounter++] = input;
            }
        }
    }
    printf ("Number of elem in oddarray : %d, evenarray : %d\n\n", oddcounter, evencounter);
    printf ("Odd elements are :");
    for (i = 0; i < oddcounter; i++)
        printf ("%d\t", oddarr[i]);
    printf ("\n");
    printf ("Even elements are :");
    for (i = 0; i < evencounter; i++)
        printf ("%d\t", evenarr[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27194568_27194892_1_18
27194568_27195408_20_49
Title: RGB color converting into 5:6:5 format 
----------------------------------------

int rgb (unsigned char r, unsigned char g, unsigned char b) {
    if (r < 0 || 255 < r || g < 0 || 255 < g || b < 0 || b > 255)
        return -1;
    unsigned char red = r >> 3;
    unsigned char green = g >> 2;
    unsigned char blue = b >> 3;
    int result = (red << (5 + 6)) | (green << 5) | blue;
    printf ("red: %x\n", red);
    printf ("green: %x\n", green);
    printf ("blue: %x\n", blue);
    printf ("result: %x\n", result);
    return result;
}
----------------------------------------

unsigned rgb (unsigned char r, unsigned char g, unsigned char b) {
    char bin [64];
    int result;
    printf ("r:      %s\n", sprint_bin (r, 8, bin));
    printf ("g:      %s\n", sprint_bin (g, 8, bin));
    printf ("b:      %s\n", sprint_bin (b, 8, bin));
    unsigned red = (unsigned) (r & 0xF8) << 8;
    unsigned green = (unsigned) (g & 0xFC) << 3;
    unsigned blue = (unsigned) (b >> 3);
    if ((r & 4) && (r < 0xF8))
        red += 0x0800;
    if ((g & 2) && (g < 0xFC))
        green += 0x20;
    if ((b & 4) && (b < 0xF8))
        blue++;
    result = red | green | blue;
    printf ("red:    %s\n", sprint_bin (red, 16, bin));
    printf ("green:  %s\n", sprint_bin (green, 16, bin));
    printf ("blue:   %s\n", sprint_bin (blue, 16, bin));
    printf ("result: %s\n", sprint_bin (result, 32, bin));
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27195157_27196559_3_14
27195157_27196575_2_21
Title: Printing out characters in an X pattern using for loops 
----------------------------------------

int main () {
    int n = 5 - 1;
    char ch [] = "x";
    int i = 0, dx = 1;
    do {
        printf ("%*s%*.*s\n", i + 1, ch, 2 * (n - i), 2 * (n - i), ch);
        if ((i += dx) == n)
            dx = -dx;
    }
    while (i >= 0);
    return 0;
}
----------------------------------------

int main () {
    int j, i;
    char ch [] = "x";
    int sz = 8;
    for (j = sz; j >= 0; --j) {
        for (i = sz; i >= 0; --i) {
            if (sz - j == i || i == j) {
                printf ("%s", ch);
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27195157_27196559_3_14
27195157_27201323_3_20
Title: Printing out characters in an X pattern using for loops 
----------------------------------------

int main () {
    int n = 5 - 1;
    char ch [] = "x";
    int i = 0, dx = 1;
    do {
        printf ("%*s%*.*s\n", i + 1, ch, 2 * (n - i), 2 * (n - i), ch);
        if ((i += dx) == n)
            dx = -dx;
    }
    while (i >= 0);
    return 0;
}
----------------------------------------

int main () {
    int n = 4 - 1;
    char ch [] = "x";
    int i = 0, dx = 1;
    printf ("\n  __\n  ||----------------------------\n");
    do {
        printf ("  %s %*s%*.*s %*c\n", "||", 4 * i + 1, ch, 8 * (n - i), 8 * (n - i), ch, 4 * i + 1, '|');
        if ((i += dx) == n)
            dx = -dx;
    }
    while (i >= 0);
    printf ("  ||----------------------------\n");
    for (i = 0; i < 10; i++)
        printf ("  ||\n");
    printf ("------\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27195157_27196575_2_21
27195157_27201323_3_20
Title: Printing out characters in an X pattern using for loops 
----------------------------------------

int main () {
    int j, i;
    char ch [] = "x";
    int sz = 8;
    for (j = sz; j >= 0; --j) {
        for (i = sz; i >= 0; --i) {
            if (sz - j == i || i == j) {
                printf ("%s", ch);
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int n = 4 - 1;
    char ch [] = "x";
    int i = 0, dx = 1;
    printf ("\n  __\n  ||----------------------------\n");
    do {
        printf ("  %s %*s%*.*s %*c\n", "||", 4 * i + 1, ch, 8 * (n - i), 8 * (n - i), ch, 4 * i + 1, '|');
        if ((i += dx) == n)
            dx = -dx;
    }
    while (i >= 0);
    printf ("  ||----------------------------\n");
    for (i = 0; i < 10; i++)
        printf ("  ||\n");
    printf ("------\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27205071_27205221_3_16
27205071_27205250_3_11
Title: Removing multiple blanks using putchar and getchar in C 
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c != ' ')
            putchar (c);
        else {
            putchar (c);
            while ((c = getchar ()) == ' ')
                ;
            ungetc (c, stdin);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int prev = EOF, c;
    while ((c = getchar ()) != EOF) {
        if (c != ' ' || prev != ' ')
            putchar (c);
        prev = c;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27205071_27205221_3_16
27205071_45122799_4_23
Title: Removing multiple blanks using putchar and getchar in C 
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c != ' ')
            putchar (c);
        else {
            putchar (c);
            while ((c = getchar ()) == ' ')
                ;
            ungetc (c, stdin);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    int space = 0;
    while ((c = getchar ()) != EOF) {
        if (c != ' ') {
            putchar (c);
        }
        else {
            if (space == ' ') {
                continue;
            }
            else {
                putchar (c);
            }
        }
        space = c;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27205071_27205221_3_16
27205071_45122908_5_18
Title: Removing multiple blanks using putchar and getchar in C 
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        if (c != ' ')
            putchar (c);
        else {
            putchar (c);
            while ((c = getchar ()) == ' ')
                ;
            ungetc (c, stdin);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        putchar (c);
        if (isblank (c)) {
            while (isblank (c = getchar ()) continue;
            if (c == EOF)
                break;
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27205071_27205250_3_11
27205071_45122799_4_23
Title: Removing multiple blanks using putchar and getchar in C 
----------------------------------------

int main () {
    int prev = EOF, c;
    while ((c = getchar ()) != EOF) {
        if (c != ' ' || prev != ' ')
            putchar (c);
        prev = c;
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    int space = 0;
    while ((c = getchar ()) != EOF) {
        if (c != ' ') {
            putchar (c);
        }
        else {
            if (space == ' ') {
                continue;
            }
            else {
                putchar (c);
            }
        }
        space = c;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27205071_27205250_3_11
27205071_45122908_5_18
Title: Removing multiple blanks using putchar and getchar in C 
----------------------------------------

int main () {
    int prev = EOF, c;
    while ((c = getchar ()) != EOF) {
        if (c != ' ' || prev != ' ')
            putchar (c);
        prev = c;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        putchar (c);
        if (isblank (c)) {
            while (isblank (c = getchar ()) continue;
            if (c == EOF)
                break;
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27205071_45122799_4_23
27205071_45122908_5_18
Title: Removing multiple blanks using putchar and getchar in C 
----------------------------------------

int main () {
    int c;
    int space = 0;
    while ((c = getchar ()) != EOF) {
        if (c != ' ') {
            putchar (c);
        }
        else {
            if (space == ' ') {
                continue;
            }
            else {
                putchar (c);
            }
        }
        space = c;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    while ((c = getchar ()) != EOF) {
        putchar (c);
        if (isblank (c)) {
            while (isblank (c = getchar ()) continue;
            if (c == EOF)
                break;
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27212206_27212319_1_32
27212206_27212365_9_34
Title: C largest number count 
----------------------------------------

void bigEof () {
    int num;
    int big;
    int count = 0;
    printf ("Please enter an integer:  ");
    while (scanf ("%d", &num) == 1) {
        if (count == 0 || big < num) {
            big = num;
            count = 1;
        }
        else if (big == num) {
            ++count;
        }
        printf ("Please enter next Integer <EOF> to stop: ");
    }
    if (count != 0) {
        printf ("The current biggest number is %d and is repeated %d times\n", big, count);
    }
    else {
        puts ("You did not enter numbers.");
    }
}
----------------------------------------

int bigEof () {
    int num;
    int big;
    int numOld;
    int count = 0;
    int programFinish = 0;
    big = INT_MIN;
    printf ("Please enter an integer:  ");
    while (programFinish == 0) {
        scanf ("%d", & num);
        if (num > big) {
            big = num;
            count = 0;
        }
        numOld = num;
        if (numOld == big) {
            count++;
        }
        printf ("Please enter next Integer <EOF> to stop: ");
        printf ("The current biggest number is %d and is repeated %d times.", big, count);
    }
    return big;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27224488_27224585_1_15
27224488_27224594_1_15
Title: Passing a row in a 2D array to a function using a pointer in C 
----------------------------------------

int RowMin (const int *prow, int ncols) {
    int i = 0;
    int min = prow[i];
    while (++i < ncols) {
        if (prow[i] < min) {
            min = prow[i];
        }
    }
    return min;
}
----------------------------------------

int RowMin (int *prow, int ncols) {
    int min = prow[0], i;
    for (i = 0; i < ncols; i++) {
        if (min > prow[i]) {
            min = prow[i];
        }
    }
    return min;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27228470_27228560_7_19
27228470_27228614_6_18
Title: Decrementing an array and print a value if condition met 
----------------------------------------

int main (void) {
    lastElem = &x[10];
    for (count = 0; count < 11; count++) {
        if (abs (*lastElem) >= 5) {
            printf ("%d\n", * lastElem);
            break;
        }
        lastElem--;
    }
    return 0;
}
----------------------------------------

int main (void) {
    lastElem = &x[10];
    for (count = 0; count < 11; count++) {
        value = *(lastElem--);
        if (value < 5)
            continue;
        printf ("%d\n", value);
        break;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27236145_27237593_4_74
27236145_27237634_3_32
Title: Controlling tab position for correct indentation in output 
----------------------------------------

int main () {
    int ch;
    ch = getchar ();
    int prevch = ch;
    int lbcounter = 0;
    int rbcounter = 0;
    while (ch != EOF) {
        if (ch != ';' && ch != '{' && ch != '}') {
            if (prevch == '\n')
                for (int i = lbcounter; i > 0; i--) {
                    putchar ('\t');
                }
            putchar (ch);
            prevch = ch;
        }
        if (ch == ';') {
            if (prevch == ';' || prevch == '{' || prevch == '}' || prevch == '\n')
                for (int i = lbcounter; i > 0; i--) {
                    putchar ('\t');
                }
            putchar (ch);
            putchar ('\n');
            prevch = '\n';
        }
        if (ch == '{') {
            if (lbcounter == 0) {
                putchar ('\n');
                lbcounter++;
                putchar (ch);
                putchar ('\n');
                prevch = '\n';
            }
            else {
                for (int i = lbcounter; i > 0; i--) {
                    putchar ('\t');
                }
                putchar (ch);
                lbcounter++;
                putchar ('\n');
                prevch = '\n';
            }
        }
        if (ch == '}') {
            lbcounter--;
            for (int i = lbcounter; i > 0; i--) {
                putchar ('\t');
            }
            putchar (ch);
            putchar ('\n');
            prevch = '\n';
        }
        ch = getchar ();
    }
}
----------------------------------------

int main () {
    int ch;
    int bcounter = 0;
    int topOfLine = 1;
    while ((ch = getchar ()) != EOF) {
        if (ch == '{' || ch == '}') {
            if (!topOfLine)
                putchar ('\n');
            topOfLine = 1;
        }
        if (ch == '}') {
            --bcounter;
        }
        if (0 < bcounter && topOfLine) {
            int i;
            for (i = 0; i < bcounter; ++i)
                putchar ('\t');
        }
        putchar (ch);
        topOfLine = 0;
        if (ch == '{' || ch == ';') {
            putchar ('\n');
            topOfLine = 1;
        }
        if (ch == '{') {
            ++bcounter;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27236178_27236460_1_16
27236178_27236695_9_29
Title: Instanciate a temp static list head pointer in C 
----------------------------------------

void add_tail_r (list *head, int elem) {
    list *new = NULL;
    list *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    new = (list *) malloc (sizeof (list));
    new->elem = elem;
    new->next = NULL;
    temp->next = new;
}
----------------------------------------

void add_tail_r (list **head, int elem) {
    list *temp = NULL;
    if (*head == NULL) {
        if (!(temp = (list *) malloc (sizeof (list)))) {
            printf ("Error ..");
            return;
        }
        temp->elem = elem;
        temp->next = NULL;
        *head = temp;
    }
    else {
        add_tail_r (& (* head) -> next, elem);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27237742_27238339_21_57
27237742_27238731_4_46
Title: How to find top 6 elements in an array in C 
----------------------------------------

int main () {
    int numbers [] = {1, 7, 3, 9, 2, 0};
    int indexes [] = {0, 1, 2, 3, 4, 5};
    int numbers_size = 6;
    int largest [] = {-1, -1, -1, -1, -1, -1};
    int largest_index = 0;
    int i;
    for (i = 0; i < 6; i++) {
        int j;
        int max_index = -1;
        int max = -2147483648;
        for (j = 0; j < numbers_size; j++) {
            if (numbers[j] >= max && contains (largest, numbers_size, j) == FALSE) {
                max_index = j;
                max = numbers[max_index];
            }
        }
        largest[largest_index++] = max_index;
    }
    for (i = 0; i < 6; ++i) {
        printf ("%d->%d\n", largest [i], numbers [largest [i]]);
    }
    return 0;
}
----------------------------------------

int main () {
    int numbers [10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *ptrNumbers [10];
    int i = 0;
    for (; i < 10; i++) {
        ptrNumbers[i] = &numbers[i];
    }
    int topSix [6];
    int topSixIndex = 0;
    for (; topSixIndex < 6; topSixIndex++) {
        int **best = NULL;
        int checkIndex = 0;
        for (; checkIndex < 10; checkIndex++) {
            if (ptrNumbers[checkIndex] != NULL) {
                if (!best) {
                    best = &ptrNumbers[checkIndex];
                }
                else if (*ptrNumbers[checkIndex] > **best) {
                    best = &ptrNumbers[checkIndex];
                }
            }
        }
        topSix[topSixIndex] = **best;
        *best = NULL;
    }
    for (topSixIndex = 0; topSixIndex < 6; topSixIndex++) {
        printf ("%d\n", topSix [topSixIndex]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27237742_27238339_21_57
27237742_27238812_4_39
Title: How to find top 6 elements in an array in C 
----------------------------------------

int main () {
    int numbers [] = {1, 7, 3, 9, 2, 0};
    int indexes [] = {0, 1, 2, 3, 4, 5};
    int numbers_size = 6;
    int largest [] = {-1, -1, -1, -1, -1, -1};
    int largest_index = 0;
    int i;
    for (i = 0; i < 6; i++) {
        int j;
        int max_index = -1;
        int max = -2147483648;
        for (j = 0; j < numbers_size; j++) {
            if (numbers[j] >= max && contains (largest, numbers_size, j) == FALSE) {
                max_index = j;
                max = numbers[max_index];
            }
        }
        largest[largest_index++] = max_index;
    }
    for (i = 0; i < 6; ++i) {
        printf ("%d->%d\n", largest [i], numbers [largest [i]]);
    }
    return 0;
}
----------------------------------------

void main (void) {
    int numbers [10] = {9, 4, 5, 1, 8, 2, 3, 6, 0, 7};
    int indexes [10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int k = 6;
    int i, j;
    int max, temp;
    for (i = 0; i < k; i++) {
        max = i;
        for (j = i + 1; j < ELEMENTS; j++) {
            if (numbers[j] > numbers[max]) {
                max = j;
            }
        }
        temp = numbers[i];
        numbers[i] = numbers[max];
        numbers[max] = temp;
        temp = indexes[i];
        indexes[i] = indexes[max];
        indexes[max] = temp;
    }
    for (i = 0; i < k; i++) {
        printf ("%d -> %d\n", indexes [i], numbers [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27237742_27238731_4_46
27237742_27238812_4_39
Title: How to find top 6 elements in an array in C 
----------------------------------------

int main () {
    int numbers [10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *ptrNumbers [10];
    int i = 0;
    for (; i < 10; i++) {
        ptrNumbers[i] = &numbers[i];
    }
    int topSix [6];
    int topSixIndex = 0;
    for (; topSixIndex < 6; topSixIndex++) {
        int **best = NULL;
        int checkIndex = 0;
        for (; checkIndex < 10; checkIndex++) {
            if (ptrNumbers[checkIndex] != NULL) {
                if (!best) {
                    best = &ptrNumbers[checkIndex];
                }
                else if (*ptrNumbers[checkIndex] > **best) {
                    best = &ptrNumbers[checkIndex];
                }
            }
        }
        topSix[topSixIndex] = **best;
        *best = NULL;
    }
    for (topSixIndex = 0; topSixIndex < 6; topSixIndex++) {
        printf ("%d\n", topSix [topSixIndex]);
    }
    return 0;
}
----------------------------------------

void main (void) {
    int numbers [10] = {9, 4, 5, 1, 8, 2, 3, 6, 0, 7};
    int indexes [10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int k = 6;
    int i, j;
    int max, temp;
    for (i = 0; i < k; i++) {
        max = i;
        for (j = i + 1; j < ELEMENTS; j++) {
            if (numbers[j] > numbers[max]) {
                max = j;
            }
        }
        temp = numbers[i];
        numbers[i] = numbers[max];
        numbers[max] = temp;
        temp = indexes[i];
        indexes[i] = indexes[max];
        indexes[max] = temp;
    }
    for (i = 0; i < k; i++) {
        printf ("%d -> %d\n", indexes [i], numbers [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27241878_27241954_6_22
27241878_27248460_8_23
Title: Binary files on c 
----------------------------------------

int main () {
    num numbers [10];
    for (i = 0; i < 10; i++) {
        numbers[i].y = i;
        numbers[i].o = i * 2;
    }
    FILE *f;
    f = fopen ("test", "r+");
    if (f != NULL) {
        fwrite (& numbers, sizeof (num), 10, f);
        fclose (f);
    }
    else {
    }
    exit (0);
}
----------------------------------------

int main () {
    num numbers [10];
    int i = 0;
    for (i = 0; i < 10; i++) {
        numbers[i].y = i;
        numbers[i].o = i * 2;
    }
    FILE *f;
    f = fopen ("test", "r+");
    for (i = 0; i < 10; i++)
        fprintf (f, " %d %d ", numbers[i].y, numbers[i].o);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27258439_27259342_33_73
27258439_27260147_28_50
Title: fscanf in a structure which has a string 
----------------------------------------

int main () {
    FILE *fp;
    int y;
    int name_length;
    ranklist **r;
    fp = fopen ("file.txt", "r");
    int lines;
    lines = how_many_lines (fp);
    printf ("[%d]\n", lines);
    r = (ranklist **) malloc (lines * sizeof (ranklist *));
    for (y = 0; y < lines; ++y) {
        name_length = how_many_letter (fp);
        r[y] = (ranklist *) malloc (sizeof (ranklist));
        r[y]->name = (char *) malloc (name_length * sizeof (char));
    }
    rewind (fp);
    for (y = 0; y < lines; y++) {
        fscanf (fp, "%d %s", & (r [y] -> point), r [y] -> name);
    }
    for (y = 0; y < lines; y++) {
        printf ("%d %s\n", (r [y] -> point), r [y] -> name);
    }
    for (y = 0; y < lines; ++y)
        free (r[y]);
    free (r);
    fclose (fp);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fp = fopen ("result.txt", "r");
    int y;
    int name_length;
    int lines = how_many_records (fp);
    ranklist *r = malloc (lines * sizeof (*r));
    for (y = 0; y < lines; ++y) {
        fscanf (fp, "%d", & r [y].point);
        name_length = how_many_letter (fp);
        r[y].name = malloc (name_length +1);
        fscanf (fp, "%s", r [y].name);
    }
    fclose (fp);
    for (y = 0; y < lines; y++) {
        printf ("%d %s\n", r [y].point, r [y].name);
        free (r [y].name);
    }
    free (r);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27303062_27303852_5_17
27303062_51338413_1_26
Title: "strstr() function like that ignores upper or lower case" 
----------------------------------------

char *stristr (const char *str, const char *strSearch) {
    char *sors, *subs, *res = NULL;
    if ((sors = strdup (str)) != NULL) {
        if ((subs = strdup (strSearch)) != NULL) {
            res = strstr (strlwr (sors), strlwr (subs));
            if (res != NULL)
                res = str + (res - sors);
            free (subs);
        }
        free (sors);
    }
    return res;
}
----------------------------------------

char *stristr (const char *String, const char *Pattern) {
    char *pptr, *sptr, *start;
    for (start = (char *) String; *start; start++) {
        for (; (*start && (toupper (*start) != toupper (*Pattern))); start++)
            ;
        if (!*start)
            return 0;
        pptr = (char *) Pattern;
        sptr = (char *) start;
        while (toupper (*sptr) == toupper (*pptr)) {
            sptr++;
            pptr++;
            if (!*pptr)
                return (start);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27309638_27311357_4_25
27309638_27312254_6_28
Title: Having Runtime error in C 
----------------------------------------

main () {
    char *array [100], *p;
    int i = 0, j, n, k;
    scanf ("%d", & n);
    for (n = n + 1; n > 0; n--) {
        p = (char *) malloc (100);
        array[i++] = p;
        for (k = 0; (*p = getchar ()) != '\n' && *p != EOF; p++, k++)
            ;
        *p = '\0';
        for (p = p - k; *p != '\0'; p++) {
            if (isspace (*p))
                continue;
            *p = toupper (*p);
            p++;
            for (; *p != ' ' && *p != '\0'; p++)
                *p = tolower (*p);
            if (*p == '\0')
                p--;
        }
    }
    for (j = 0; j < i; j++)
        printf ("%s\n", array[j]);
}
----------------------------------------

main () {
    char c;
    scanf ("%d", & n);
    name_array = malloc (sizeof (char) * 1000);
    for (i = 0; i < n; i++) {
        name_array[i] = malloc (sizeof (char));
        backup_addr = name = malloc (sizeof (char *));
        while (isspace (c = getchar ()))
            ;
        if (isalpha (c)) {
            *name++ = toupper (c);
            for (j = 0; (isalpha (c = getchar ())) != '\n' && c != '\n'; j++, name++)
                *name = tolower (c);
        }
        *name = '\0';
        name = backup_addr;
        name_array[i] = name;
    }
    for (i = 0; i < n; i++)
        printf ("%s\n", name_array[i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27315507_27315618_4_27
27315507_27315653_4_28
Title: I want to update my C code with ASCII code 
----------------------------------------

int main () {
    char sentence [100];
    int ch, i, j, k;
    for (i = 0; i < sizeof (sentence) - 1; i++)
        if ((sentence[i] = getchar ()) == '\n')
            break;
    sentence[i] = '\0';
    for (j = 0; j <= i; j++) {
        if (!isalpha (sentence[j])) {
            for (k = j - 1; isalpha (sentence[k]) && k >= 0; k--) {
                putchar (sentence [k]);
            }
            putchar (sentence [j]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char sentence [100];
    int ch, i, j, k;
    for (i = 0; i < sizeof (sentence) - 1; i++)
        if ((sentence[i] = getchar ()) == '\n')
            break;
    sentence[i] = '\0';
    for (j = 0; j < i; j++) {
        if (islower (sentence[j]) || isupper (sentence[j]))
            continue;
        for (k = j - 1; sentence[k] != ' ' && k >= 0; k--) {
            ch = sentence[k];
            putchar (ch);
        }
        ch = sentence[j];
        putchar (ch);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27322429_27323067_7_25
27322429_27327321_12_56
Title: Printing content of 2D array (pointer of pointer) 
----------------------------------------

int **initialize_matrix (size_t m, size_t n) {
    int i1, i2;
    int **ptr1 = (int **) malloc (sizeof (int *) * m);
    srand (time (0));
    for (i1 = 0; i1 < m; i1++) {
        ptr1[i1] = (int *) malloc (sizeof (int) * n);
        for (i2 = 0; i2 < n; i2++) {
            ptr1[i1][i2] = rand () % 10;
            printf ("%d ", ptr1 [i1] [i2]);
        }
    }
    printf ("\nFinished generating\n");
    return ptr1;
}
----------------------------------------

int **initialize_matrix (size_t width, size_t height) {
    int i;
    int j;
    int **my2dMatrix = calloc (height, sizeof (int *));
    if (NULL == my2dMatrix) {
        perror ("calloc failed");
        exit (EXIT_FAILURE);
    }
    for (i = 0; i < height; i++) {
        my2dMatrix[i] = malloc (sizeof (int) * width);
        if (NULL == my2dMatrix[i]) {
            perror ("malloc failed");
            cleanUp (my2dMatrix, height);
            exit (EXIT_FAILURE);
        }
    }
    srand (time (0));
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            my2dMatrix[i][j] = rand () % 10;
            printf ("%d ", my2dMatrix [i] [j]);
        }
    }
    printf ("\nFinished generating\n");
    return my2dMatrix;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27323555_27323902_3_25
27323555_27323932_3_29
Title: Why is my '+' operator considered as a new line character? 
----------------------------------------

int main (void) {
    char operator;
    int number, previous, result;
    scanf ("%d", & number);
    result = number;
    while (scanf (" %c", &operator) != EOF) {
        previous = result;
        scanf ("%d", & number);
        if (operator == '+') {
            result += number;
        }
        else if (operator == '-') {
            result -= number;
        }
        else if (operator == '*') {
            result *= number;
        }
        else if (operator == '/') {
            result /= number;
        }
        else if (operator == '%') {
            result %= number;
        }
        printf ("%d %c %d = %d\n", previous, operator, number, result);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buf [80];
    char oper;
    int number, result;
    fgets (buf, sizeof (buf), stdin);
    sscanf (buf, "%d", & number);
    printf ("   saw input: %d\n", number);
    result = number;
    do {
        fgets (buf, sizeof (buf), stdin);
        sscanf (buf, "%c %d", & oper, & number);
        printf ("   saw input: %c %d\n", oper, number);
        printf ("   computing: %d %c %d\n", result, oper, number);
        if (oper == '+') {
            result = result + number;
        }
        else if (oper == '*') {
            result = result * number;
        }
        else if (oper == '%') {
            result = result % number;
        }
        printf ("   result   : %d\n", result);
    }
    while (oper != '%');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27329586_27329830_21_42
27329586_27330195_14_49
Title: Adding two strings made of digits recursively in C 
----------------------------------------

int add (char *a, int a_pos, char *b, int b_pos, int *result, int result_pos, int carry) {
    int d;
    if (a_pos < 0 && b_pos < 0) {
        if (carry == 1) {
            result[result_pos++] = 1;
        }
        return result_pos;
    }
    if (a_pos < 0) {
        result[result_pos++] = b[b_pos--] - '0' + carry;
        carry = 0;
    }
    else if (b_pos < 0) {
        result[result_pos++] = a[a_pos--] - '0' + carry;
        carry = 0;
    }
    else {
        d = a[a_pos--] + b[b_pos--] - 2 * '0' + carry;
        carry = (d >= 10 ? 1 : 0);
        result[result_pos++] = d % 10;
    }
    return add (a, a_pos, b, b_pos, result, result_pos, carry);
}
----------------------------------------

int add (int i) {
    if (d == 0 && n1[i] != 0 && n2[i] != 0) {
        int r = add (i +1);
        if (d < 0) {
            n3[i + 1] = addchar ((i + d < 0) ? '0' : n1[i + d], n2[i], r);
            r = overflow ((i + d < 0) ? '0' : n1[i + d], n2[i], r);
        }
        if (d > 0) {
            n3[i + 1] = addchar (n1[i], (i - d < 0) ? '0' : n2[i - d], r);
            r = overflow (n1[i], (i - d < 0) ? '0' : n2[i - d], r);
        }
        if (d == 0) {
            n3[i + 1] = addchar (n1[i], n2[i], r);
            r = overflow (n1[i], n2[i], r);
        }
        if (i == 0) {
            n3[i] = r + '0';
            r = 0;
        }
        return r;
    }
    if (d >= 0 && n1[i] != 0) {
        d++;
        int r = add (i +1);
        n3[i + 1] = addchar (n1[i], (i - d < 0) ? '0' : n2[i - d], r);
        return overflow (n1[i], (i - d < 0) ? '0' : n2[i - d], r);
    }
    if (d <= 0 && n2[i] != 0) {
        d--;
        int r = add (i +1);
        n3[i + 1] = addchar ((i + d < 0) ? '0' : n1[i + d], n2[i], r);
        return overflow ((i + d < 0) ? '0' : n1[i + d], n2[i], r);
    }
    n3[i + 1] = '\0';
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27329705_27329775_3_31
27329705_27330001_1_23
Title: C program to print numbers between 100 and 1000 which sum of digit is 20 
----------------------------------------

int main () {
    int iVnos = 0;
    int iOstanek = 0;
    int iVsota = 0;
    int iStevec1 = 100;
    int temp;
    for (iStevec1 = 100; iStevec1 <= 1000; iStevec1++) {
        temp = iStevec1;
        iVsota = 0;
        while (temp > 0) {
            iOstanek = temp % 10;
            temp = temp / 10;
            iVsota += iOstanek;
        }
        if (iVsota == 20)
            printf ("Number %d\n", iStevec1);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int iVnos = 0;
    int iOstanek = 0;
    int iVsota = 1;
    int iStevec1 = 100;
    int temp;
    for (iStevec1 = 100; iStevec1 < 1000; iStevec1++) {
        temp = iStevec1;
        while (temp > 0) {
            iOstanek = temp % 100;
            temp = temp / 10;
            iVsota = iOstanek + iVsota;
            if (iVsota == 20) {
                printf ("%i\n", iStevec1);
            }
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27329705_27329775_3_31
27329705_27331859_2_16
Title: C program to print numbers between 100 and 1000 which sum of digit is 20 
----------------------------------------

int main () {
    int iVnos = 0;
    int iOstanek = 0;
    int iVsota = 0;
    int iStevec1 = 100;
    int temp;
    for (iStevec1 = 100; iStevec1 <= 1000; iStevec1++) {
        temp = iStevec1;
        iVsota = 0;
        while (temp > 0) {
            iOstanek = temp % 10;
            temp = temp / 10;
            iVsota += iOstanek;
        }
        if (iVsota == 20)
            printf ("Number %d\n", iStevec1);
    }
    return 0;
}
----------------------------------------

int main () {
    int c0, c1, c2;
    for (c0 = 2; c0 < 10; c0++) {
        c1 = 11 - c0;
        c2 = 9;
        while (c1 < 10) {
            printf ("%d%d%d\n", c0, c1, c2);
            c1++;
            c2--;
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27329705_27330001_1_23
27329705_27331859_2_16
Title: C program to print numbers between 100 and 1000 which sum of digit is 20 
----------------------------------------

int main (void) {
    int iVnos = 0;
    int iOstanek = 0;
    int iVsota = 1;
    int iStevec1 = 100;
    int temp;
    for (iStevec1 = 100; iStevec1 < 1000; iStevec1++) {
        temp = iStevec1;
        while (temp > 0) {
            iOstanek = temp % 100;
            temp = temp / 10;
            iVsota = iOstanek + iVsota;
            if (iVsota == 20) {
                printf ("%i\n", iStevec1);
            }
        }
    }
    return (0);
}
----------------------------------------

int main () {
    int c0, c1, c2;
    for (c0 = 2; c0 < 10; c0++) {
        c1 = 11 - c0;
        c2 = 9;
        while (c1 < 10) {
            printf ("%d%d%d\n", c0, c1, c2);
            c1++;
            c2--;
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27331741_27331994_4_20
27331741_27332034_5_23
Title: Remove a substring from each word of a string in C(if it contains it) 
----------------------------------------

int main () {
    char *string = "monkey peep through the keyhole";
    char *substring = "key";
    size_t slen = strlen (substring);
    char *p, *s = string;
    while (*s) {
        p = strstr (s, substring);
        if (p == NULL) {
            puts (s);
            break;
        }
        else {
            while (s != p)
                putchar (*s++);
            s += slen;
        }
    }
}
----------------------------------------

int main (void) {
    char s [] = "monkey peep through the keyhole";
    char k [] = "key";
    size_t m = strlen (k);
    char *p;
    while (NULL != (p = strstr (s, k))) {
        char *q = p + m;
        size_t n = strlen (q);
        memmove (p, q, n + 1);
    }
    puts (s);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27335684_27336342_3_19
27335684_27336591_11_30
Title: Recursion that branches running out of memory 
----------------------------------------

int main () {
    unsigned long long int a, b, c, bb;
    scanf ("%I64u", & a);
    scanf ("%I64u", & b);
    scanf ("%I64u", & c);
    if (a >= 1 && a < b && b < c) {
        for (bb = b; bb < c; bb += b) {
            if ((c - bb) % a == 0) {
                printf ("YES\n");
                return 0;
            }
        }
    }
    printf ("NO\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    uint64_t a = 0, b = 0, c = 0;
    if (argc < 4) {
        printf ("Usage: %s a b c\n", argv [0]);
        exit (0);
    }
    a = strtoull (argv[1], NULL, 0);
    b = strtoull (argv[2], NULL, 0);
    c = strtoull (argv[3], NULL, 0);
    if (a == c || b == c || solve (a, b, c))
        printf ("There is a solution\n");
    else
        printf ("There is NO solution\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27345672_27345742_4_23
27345672_27346097_4_26
Title: How to copy part of string into another string? 
----------------------------------------

int main () {
    char str1 [] = "this is a test";
    char str2 [sizeof (str1) - 5] [6];
    const size_t N = sizeof (str1) - 5;
    size_t i;
    for (i = 0; i < N; i++) {
        strncpy (str2 [i], str1 + i, 5);
        str2[i][5] = '\0';
    }
    for (i = 0; i < N; i++) {
        puts (str2 [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    char str1 [] = "this is a test";
    char str2 [20] = {0};
    size_t i = 0;
    char p = 0;
    for (i = 0; i < strlen (str1) - 4; i++) {
        strncpy (str2 + i, str1 + i, 5);
        p = *(str1 + i + 5);
        *(str1 + i + 5) = 0;
        printf (" str1-copied: '%s' to str2[%zd], str2: '%s'\n", str1 + i, i, str2);
        *(str1 + i + 5) = p;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27345869_27345975_2_14
27345869_27346746_1_12
Title: count how many word in sentence- what's wrong 
----------------------------------------

int counthowmanywordsinasentence (char sentence []) {
    int count = 0, i;
    for (i = 0; sentence[i] != '\0'; i++) {
        if (sentence[i] == ' ')
            count++;
        while (sentence[i] == ' ')
            i++;
    }
    return (count + 1);
}
----------------------------------------

int counthowmanywordsinasentence (char sentence []) {
    int count = 0, i;
    char ch, pre = ' ';
    for (i = 0; (ch = sentence[i]) != '\0'; i++, pre = ch) {
        if (pre == ' ' && ch != ' ')
            count++;
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27363991_27364120_24_37
27363991_27364230_38_54
Title: Trouble while modifying a pointer within a C function 
----------------------------------------

void printSL (struct node *root) {
    if (root == NULL) {
        printf ("[ ]\n");
        return;
    }
    struct node *p = root;
    printf ("[ %c", p -> cinfo);
    while (p->next != NULL) {
        p = p->next;
        printf ("->%c", p -> cinfo);
    }
    printf (" ]\n");
}
----------------------------------------

void printSL (struct node *root) {
    if (root == NULL) {
        printf ("[ ]\n");
        return;
    }
    printf ("[ %c", root -> cinfo);
    while ((root = root->next) != NULL) {
        printf ("->%c", root -> cinfo);
    }
    printf (" ]\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27372198_27372586_15_37
27372198_27373346_14_36
Title: how to increment index of array of pointer values? 
----------------------------------------

void function (int arr []) {
    int i, n;
    int *p = arr;
    printf ("How many elements? ");
    scanf ("%d", & n);
    if (N < n)
        n = N;
    for (i = 0; i < n; i++) {
        printf ("Enter element %d: ", i);
        scanf ("%d", p ++);
    }
    printf ("\nInput\t\tValue\tAddress");
    for (i = 0; i < n; i++) {
        printf ("\n%d\t\t%d\t%p", i + 1, * (arr + i), arr + i);
    }
}
----------------------------------------

void function (int *arr) {
    int i, n;
    printf ("How many elements? ");
    scanf ("%d", & n);
    fflush (stdin);
    if (n <= N) {
        for (i = 0; i < n; i++) {
            printf ("Enter element %d: ", i);
            scanf ("%d", arr);
            fflush (stdin);
            arr++;
        }
        printf ("\nInput\t\tValue\tAddress");
        for (i = 0;
        i < n;
        i ++) {printf ("\n%d\t\t%d\t0x%X", i + 1, * (arr + i), arr);
        arr++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27378307_27378539_26_46
27378307_27379029_43_60
Title: Concatenate two arrays using void pointer (C) 
----------------------------------------

int main (void) {
    size_t n = 10;
    size_t m = 10;
    float f1 [n];
    float f2 [m];
    array_float_fill (f1, f2, n, m);
    printf ("%f\n", * (f1 + 3));
    float *f3 = malloc ((n + m) * sizeof (float));
    array_concat (f1, f2, f3, n, m, sizeof (float));
    printf ("%f\n", * (f3 + 3));
    free (f3);
    return 0;
}
----------------------------------------

int main () {
    const size_t n = 10;
    const size_t m = 10;
    float f1 [n];
    float f2 [m];
    array_float_fill (f1, f2, n, m);
    const size_t f3_size = (n + m) * sizeof (float);
    float *f3 = malloc (f3_size);
    array_concat (f3, f3_size, f1, sizeof (f1), f2, sizeof (f2));
    dump_array ("f1", f1, n);
    dump_array ("f2", f2, m);
    dump_array ("f3", f3, n + m);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27397552_27397958_7_53
27397552_27400453_2_62
Title: A program to find if the sum of the elements in the middle three rows equals to sum of elements in the middle three columns of matrix print 
----------------------------------------

int main (void) {
    int array [N] [M] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    size_t n = N;
    size_t m = N;
    if (n >= RANGE && m >= RANGE) {
        size_t k = (n - RANGE) / 2;
        size_t l = (m - RANGE) / 2;
        size_t i, j;
        int cols_sum = 0;
        int rows_sum = 0;
        for (i = k; i < k + RANGE; i++) {
            for (j = 0; j < m; j++)
                rows_sum += array[i][j];
        }
        for (i = 0; i < n; i++) {
            for (j = l; j < l + RANGE; j++)
                cols_sum += array[i][j];
        }
        if (rows_sum == cols_sum) {
            printf ("The sums of three middle rows and columns are equal " "each other and have value %d\n", rows_sum);
        }
        else {
            printf ("The sums of three middle rows and columns are not equal " "each other.\n" "The sum of the rows has value %d " "and the sum of the columns has value %d\n", rows_sum, cols_sum);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    const int row = 5, colmn = 5;
    static int array [row] [colmn];
    int i, j, m, n, sumRow = 0, sumColmn = 0;
    int middleRow = row / 2, middleColmn = colmn / 2;
    int howManyRows = 3;
    printf ("Enter the elements of the matrix\n");
    for (i = 0; i < row; ++i) {
        for (j = 0; j < colmn; ++j) {
            printf ("[%d][%d]", i, j);
            scanf ("%d", & array [i] [j]);
        }
    }
    for (i = 0; i < row; ++i) {
        for (j = 0; j < colmn; ++j) {
            printf ("%d\t", array [i] [j]);
        }
        printf ("\n");
    }
    for (int threeRows = 0 - howManyRows / 2; threeRows <= howManyRows / 2; threeRows++) {
        for (j = 0; j < row; ++j) {
            sumRow += array[j][middleColmn + threeRows];
        }
    }
    for (int threeColmn = 0 - howManyRows / 2; threeColmn <= howManyRows / 2; threeColmn++) {
        for (j = 0; j < row; ++j) {
            sumColmn += array[middleColmn + threeColmn][j];
        }
    }
    printf ("middleRow = %d  middleColmn = %d  sumRow = %d sumColmn = %d", middleRow, middleColmn, sumRow, sumColmn);
    if (sumRow == sumColmn)
        printf ("\nThey are equal");
    else
        printf ("\nnot equal");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27400423_27400742_4_36
27400423_27401757_4_18
Title: convert each digit of a decimal number to correcsponding binary 
----------------------------------------

int main () {
    char c [100];
    int num, q;
    int binary [100], i = 0, j;
    scanf ("%d", c);
    num = atoi (c);
    q = num;
    while (q != 0) {
        binary[i++] = q % 2;
        q = q / 2;
    }
    for (j = i - 1; j >= 0; j--)
        printf ("%d", binary[j]);
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    int n;
    char *str = "12345678";
    const int bit = 1 << (sizeof (n) * 8 - 1);
    n = atoi (str);
    for (i = 0; i < sizeof (n) * 8; i++, n <<= 1)
        n & bit ? printf ("1") : printf ("0");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27400423_27400903_4_36
27400423_27401613_1_26
Title: convert each digit of a decimal number to correcsponding binary 
----------------------------------------

void reduce (char string []) {
    int i = 0, j = 0, k = 0, cnt = 0, count = 0;
    char arr [4], result [(4 * strlen (string)) + 1], c;
    for (i = 0; i < strlen (string); i++) {
        c = string[i];
        count = 4;
        while (count != 0) {
            arr[j++] = '0' + (c % 2);
            c = c / 2;
            count--;
        }
        j--;
        for (k = (i * 4); k < ((i * 4) + 4); k++) {
            result[k] = arr[j--];
        }
        j = 0;
        memset (arr, 0, sizeof (arr));
    }
    result[k] = 0;
    printf ("The result is: %s\n", result);
}
----------------------------------------

void reduce (char string []) {
    unsigned int in = atoi (string);
    int i = 0, result [32], k, j;
    while (in > 0) {
        j = in % 10;
        k = 0;
        while (j > 0) {
            result[i++] = j % 2;
            j = j >> 1;
            k++;
        }
        while (k < 4) {
            result[i++] = 0;
            k++;
        }
        in = in / 10;
    }
    printf ("Result\n");
    for (--i; i >= 0; i--) {
        printf ("%d", result [i]);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27400423_27400903_4_36
27400423_27401762_5_33
Title: convert each digit of a decimal number to correcsponding binary 
----------------------------------------

void reduce (char string []) {
    int i = 0, j = 0, k = 0, cnt = 0, count = 0;
    char arr [4], result [(4 * strlen (string)) + 1], c;
    for (i = 0; i < strlen (string); i++) {
        c = string[i];
        count = 4;
        while (count != 0) {
            arr[j++] = '0' + (c % 2);
            c = c / 2;
            count--;
        }
        j--;
        for (k = (i * 4); k < ((i * 4) + 4); k++) {
            result[k] = arr[j--];
        }
        j = 0;
        memset (arr, 0, sizeof (arr));
    }
    result[k] = 0;
    printf ("The result is: %s\n", result);
}
----------------------------------------

void reduce (char string []) {
    int i = 0, j = 0, k = 0, cnt = 0, tmp = 4, num;
    char arr [5], result [4 * strlen (string) + 1];
    for (i = 0; i < strlen (string); i++) {
        num = string[i] - '0';
        while (num != 0) {
            arr[j++] = '0' + num % 2;
            num = num / 2;
            tmp--;
        }
        while (tmp != 0) {
            arr[j++] = '0';
            tmp--;
        }
        arr[j] = 0;
        j--;
        for (k = i * 4; k < (i * 4 + 4); k++) {
            result[k] = arr[j--];
        }
        j = 0;
        tmp = 4;
    }
    result[k] = 0;
    printf ("The result is: \n");
    for (i = 0; i < strlen (result); i++) {
        printf ("%c", result [i]);
    }
    printf ("\n");
}
----------------------------------------

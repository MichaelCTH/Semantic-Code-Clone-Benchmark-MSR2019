$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30818784_30821837_127_145
30818784_30821837_92_102
Title: Generic Object Cache 
----------------------------------------

public void Update < T > (Func < T, bool > predicate, T entity) where T : class {
    List < object > list;
    if (_cache.TryGetValue (typeof (T), out list)) {
        var e = list.Cast < T > ().Where (predicate).FirstOrDefault ();
        if (e != null) {
            list.Remove (e);
        }
        list.Add (entity);
        _cache [typeof (T)] = list;
        Store < T > (entity);
    }
}
----------------------------------------

public void Create < T > (T entity) where T : class {
    List < object > list;
    if (! _cache.TryGetValue (typeof (T), out list)) {
        list = new List < object > ();
    }
    list.Add (entity);
    _cache [typeof (T)] = list;
    Store < T > (entity);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30818784_30821837_189_207
30818784_30821837_221_234
Title: Generic Object Cache 
----------------------------------------

public long Next < T > () where T : class {
    long id = 1;
    using (var ctx = m.GetClient ())
    {
        try {
            id = ctx.As < T > ().GetNextSequence ();
        }
        catch (Exception ex) {
        }
    } return id;
}
----------------------------------------

private IList < T > GetAll < T > () where T : class {
    using (var ctx = m.GetClient ())
    {
        try {
            return ctx.As < T > ().GetAll ();
        }
        catch {
            return new List < T > ();
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30818784_30821837_189_207
30818784_30821837_92_102
Title: Generic Object Cache 
----------------------------------------

public long Next < T > () where T : class {
    long id = 1;
    using (var ctx = m.GetClient ())
    {
        try {
            id = ctx.As < T > ().GetNextSequence ();
        }
        catch (Exception ex) {
        }
    } return id;
}
----------------------------------------

public void Create < T > (T entity) where T : class {
    List < object > list;
    if (! _cache.TryGetValue (typeof (T), out list)) {
        list = new List < object > ();
    }
    list.Add (entity);
    _cache [typeof (T)] = list;
    Store < T > (entity);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30818784_30821837_221_234
30818784_30821837_92_102
Title: Generic Object Cache 
----------------------------------------

private IList < T > GetAll < T > () where T : class {
    using (var ctx = m.GetClient ())
    {
        try {
            return ctx.As < T > ().GetAll ();
        }
        catch {
            return new List < T > ();
        }
    }}
----------------------------------------

public void Create < T > (T entity) where T : class {
    List < object > list;
    if (! _cache.TryGetValue (typeof (T), out list)) {
        list = new List < object > ();
    }
    list.Add (entity);
    _cache [typeof (T)] = list;
    Store < T > (entity);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30829268_30831747_1_39
30829268_30831747_41_60
Title: "Print lists in a list to excel randomly stops printing after 0.5-6 lists. Comexpection 0x800AC472" 
----------------------------------------

public static DataTable ClassToDataTable < T > () where T : class {
    Type classType = typeof (T);
    List < PropertyInfo > propertyList = classType.GetProperties ().ToList ();
    if (propertyList.Count < 1) {
        return new DataTable ();
    }
    string className = classType.UnderlyingSystemType.Name;
    DataTable result = new DataTable (className);
    foreach (PropertyInfo property in propertyList) {
        DataColumn col = new DataColumn ();
        col.ColumnName = property.Name;
        Type dataType = property.PropertyType;
        if (IsNullable (dataType)) {
            if (dataType.IsGenericType) {
                dataType = dataType.GenericTypeArguments.FirstOrDefault ();
            }
        } else {
            col.AllowDBNull = false;
        }
        col.DataType = dataType;
        result.Columns.Add (col);
    }
    return result;
}
----------------------------------------

public static DataTable ClassListToDataTable < T > (List < T > ClassList) where T : class {
    DataTable result = ClassToDataTable < T > ();
    if (result.Columns.Count < 1) {
        return new DataTable ();
    }
    if (ClassList.Count < 1) {
        return result;
    }
    foreach (T item in ClassList) {
        ClassToDataRow (ref result, item);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30829268_30831747_1_39
30829268_30831747_62_89
Title: "Print lists in a list to excel randomly stops printing after 0.5-6 lists. Comexpection 0x800AC472" 
----------------------------------------

public static DataTable ClassToDataTable < T > () where T : class {
    Type classType = typeof (T);
    List < PropertyInfo > propertyList = classType.GetProperties ().ToList ();
    if (propertyList.Count < 1) {
        return new DataTable ();
    }
    string className = classType.UnderlyingSystemType.Name;
    DataTable result = new DataTable (className);
    foreach (PropertyInfo property in propertyList) {
        DataColumn col = new DataColumn ();
        col.ColumnName = property.Name;
        Type dataType = property.PropertyType;
        if (IsNullable (dataType)) {
            if (dataType.IsGenericType) {
                dataType = dataType.GenericTypeArguments.FirstOrDefault ();
            }
        } else {
            col.AllowDBNull = false;
        }
        col.DataType = dataType;
        result.Columns.Add (col);
    }
    return result;
}
----------------------------------------

public static void ClassToDataRow < T > (ref DataTable Table, T Data) where T : class {
    Type classType = typeof (T);
    string className = classType.UnderlyingSystemType.Name;
    if (! Table.TableName.Equals (className)) {
        return;
    }
    DataRow row = Table.NewRow ();
    List < PropertyInfo > propertyList = classType.GetProperties ().ToList ();
    foreach (PropertyInfo prop in propertyList) {
        if (Table.Columns.Contains (prop.Name)) {
            if (Table.Columns [prop.Name] != null) {
                row [prop.Name] = prop.GetValue (Data, null);
            }
        }
    }
    Table.Rows.Add (row);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30829268_30831747_41_60
30829268_30831747_62_89
Title: "Print lists in a list to excel randomly stops printing after 0.5-6 lists. Comexpection 0x800AC472" 
----------------------------------------

public static DataTable ClassListToDataTable < T > (List < T > ClassList) where T : class {
    DataTable result = ClassToDataTable < T > ();
    if (result.Columns.Count < 1) {
        return new DataTable ();
    }
    if (ClassList.Count < 1) {
        return result;
    }
    foreach (T item in ClassList) {
        ClassToDataRow (ref result, item);
    }
    return result;
}
----------------------------------------

public static void ClassToDataRow < T > (ref DataTable Table, T Data) where T : class {
    Type classType = typeof (T);
    string className = classType.UnderlyingSystemType.Name;
    if (! Table.TableName.Equals (className)) {
        return;
    }
    DataRow row = Table.NewRow ();
    List < PropertyInfo > propertyList = classType.GetProperties ().ToList ();
    foreach (PropertyInfo prop in propertyList) {
        if (Table.Columns.Contains (prop.Name)) {
            if (Table.Columns [prop.Name] != null) {
                row [prop.Name] = prop.GetValue (Data, null);
            }
        }
    }
    Table.Rows.Add (row);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30841168_30841241_1_13
30841168_30841287_1_18
Title: Why does my disableButtons method not work? 
----------------------------------------

private void disableButtons () {
    try {
        foreach (Control c in Controls) {
            Button b = (Button) c;
            b.Enabled = false;
        }
    }
    catch {
    }
}
----------------------------------------

private void disableButtons () {
    try {
        foreach (Control c in Controls) {
            Button b = c as Button;
            if (b != null)
                b.Enabled = false;

        }
    }
    catch (Exception e) {
        Console.Writeline (e.ToString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30856905_30859205_19_27
30856905_30859205_3_18
Title: Understanding Serialization 
----------------------------------------

public static Byte [] Serialize < T > (this T obj) where T : class {
    if (obj == null)
        return null;

    BinaryFormatter bf = new BinaryFormatter ();
    MemoryStream ms = new MemoryStream ();
    bf.Serialize (ms, obj);
    return ms.ToArray ();
}
----------------------------------------

public static T GetObject < T > (Byte [] rawimage) where T : class {
    try {
        MemoryStream memStream = new MemoryStream ();
        BinaryFormatter binForm = new BinaryFormatter ();
        memStream.Write (rawimage, 0, rawimage.Length);
        memStream.Seek (0, SeekOrigin.Begin);
        return binForm.Deserialize (memStream) as T;
    }
    catch (Exception ex) {
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
308615_27571627_6_18
308615_308648_8_28
Title: What's the most efficient way of implementing ReadLine() on a binary stream? 
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;

    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);

    return result.ToString ();
}
----------------------------------------

public string ReadLine () {
    StringBuilder result = new StringBuilder ();
    char lastChar = reader.ReadChar ();
    try {
        char newChar = reader.ReadChar ();
        if (lastChar == '\r' && newChar == '\n')
            return result.ToString ();

        result.Append (lastChar);
        lastChar = newChar;
    }
    catch (EndOfStreamException) {
        result.Append (lastChar);
        return result.ToString ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
308615_27571627_6_18
308615_9536963_16_86
Title: What's the most efficient way of implementing ReadLine() on a binary stream? 
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;

    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);

    return result.ToString ();
}
----------------------------------------

public string ReadLine () {
    int pos = 0;
    char [] buf = new char [2];
    StringBuilder stringBuffer = null;
    bool lineEndFound = false;
    while (base.Read (buf, 0, 2) > 0) {
        if (buf [1] == '\r') {
            this._LineBuffer [pos ++] = buf [0];
            char ch = base.ReadChar ();
            Debug.Assert (ch == '\n');
            lineEndFound = true;
        } else if (buf [0] == '\r') {
            lineEndFound = true;
        } else {
            this._LineBuffer [pos] = buf [0];
            this._LineBuffer [pos + 1] = buf [1];
            pos += 2;
            if (pos >= bufferSize) {
                stringBuffer = new StringBuilder (bufferSize + 80);
                stringBuffer.Append (this._LineBuffer, 0, bufferSize);
                pos = 0;
            }
        }
        if (lineEndFound) {
            if (stringBuffer == null) {
                if (pos > 0)
                    return new string (this._LineBuffer, 0, pos);
                else
                    return string.Empty;

            } else {
                if (pos > 0)
                    stringBuffer.Append (this._LineBuffer, 0, pos);

                return stringBuffer.ToString ();
            }
        }
    }
    if (stringBuffer != null) {
        if (pos > 0)
            stringBuffer.Append (this._LineBuffer, 0, pos);

        return stringBuffer.ToString ();
    } else {
        if (pos > 0)
            return new string (this._LineBuffer, 0, pos);
        else
            return null;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
308615_308648_8_28
308615_9536963_16_86
Title: What's the most efficient way of implementing ReadLine() on a binary stream? 
----------------------------------------

public string ReadLine () {
    StringBuilder result = new StringBuilder ();
    char lastChar = reader.ReadChar ();
    try {
        char newChar = reader.ReadChar ();
        if (lastChar == '\r' && newChar == '\n')
            return result.ToString ();

        result.Append (lastChar);
        lastChar = newChar;
    }
    catch (EndOfStreamException) {
        result.Append (lastChar);
        return result.ToString ();
    }
}
----------------------------------------

public string ReadLine () {
    int pos = 0;
    char [] buf = new char [2];
    StringBuilder stringBuffer = null;
    bool lineEndFound = false;
    while (base.Read (buf, 0, 2) > 0) {
        if (buf [1] == '\r') {
            this._LineBuffer [pos ++] = buf [0];
            char ch = base.ReadChar ();
            Debug.Assert (ch == '\n');
            lineEndFound = true;
        } else if (buf [0] == '\r') {
            lineEndFound = true;
        } else {
            this._LineBuffer [pos] = buf [0];
            this._LineBuffer [pos + 1] = buf [1];
            pos += 2;
            if (pos >= bufferSize) {
                stringBuffer = new StringBuilder (bufferSize + 80);
                stringBuffer.Append (this._LineBuffer, 0, bufferSize);
                pos = 0;
            }
        }
        if (lineEndFound) {
            if (stringBuffer == null) {
                if (pos > 0)
                    return new string (this._LineBuffer, 0, pos);
                else
                    return string.Empty;

            } else {
                if (pos > 0)
                    stringBuffer.Append (this._LineBuffer, 0, pos);

                return stringBuffer.ToString ();
            }
        }
    }
    if (stringBuffer != null) {
        if (pos > 0)
            stringBuffer.Append (this._LineBuffer, 0, pos);

        return stringBuffer.ToString ();
    } else {
        if (pos > 0)
            return new string (this._LineBuffer, 0, pos);
        else
            return null;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30914435_30915521_1_56
30914435_30969487_10_45
Title: Redirected batch file process output not running 
----------------------------------------

public void runProcess (string aPath, string aName, string aFiletype) {
    aProcess = new Process ();
    Console.WriteLine ();
    Console.WriteLine ();
    Console.WriteLine ("Started: {0}", DateTime.Now.ToString ("dd-MMM hh:mm:ss"));
    Console.WriteLine ("Will try run this file {0} {1}", aPath, aName);
    Console.WriteLine ("File type {0}", aFiletype);
    string stInfoFileName;
    string stInfoArgs;
    if (aFiletype == "bat") {
        stInfoFileName = (@aPath + @aName);
        stInfoArgs = string.Empty;
    } else {
        stInfoFileName = @"cscript";
        stInfoArgs = "//B " + aName;
    }
    this.aProcess.StartInfo.FileName = stInfoFileName;
    this.aProcess.StartInfo.Arguments = stInfoArgs;
    this.aProcess.StartInfo.WorkingDirectory = @aPath;
    if (aFiletype == "bat") {
        this.aProcess.StartInfo.CreateNoWindow = true;
        this.aProcess.StartInfo.UseShellExecute = false;
        this.aProcess.StartInfo.RedirectStandardError = true;
        this.aProcess.StartInfo.RedirectStandardOutput = true;
    }
    this.aProcess.StartInfo.WindowStyle = ProcessWindowStyle.Normal;
    this.aProcess.Start ();
    aProcessName = this.aProcess.ProcessName;
    if (aFiletype == "bat") {
        this.aProcess.ErrorDataReceived += (s, e) = > Console.WriteLine (e.Data);
        this.aProcess.OutputDataReceived += (s, e) = > Console.WriteLine (e.Data);
        this.aProcess.BeginOutputReadLine ();
        this.aProcess.BeginErrorReadLine ();
    }
    this.aProcess.WaitForExit ();
    this.aProcess.Dispose ();
    Console.WriteLine ("Process {0} closed: {1}", this.aProcessName, DateTime.Now.ToString ("dd-MMM hh:mm:ss"));
}
----------------------------------------

public void runProcess (string aPath, string aName, string aFiletype) {
    Console.WriteLine ();
    Console.WriteLine ();
    Console.WriteLine ("Started: {0}", DateTime.Now.ToString ("dd-MMM hh:mm:ss"));
    Console.WriteLine ("Will try run this file {0} {1}", aPath, aName);
    Console.WriteLine ("File type {0}", aFiletype);
    string stInfoFileName;
    string stInfoArgs;
    if (aFiletype == "bat") {
        stInfoFileName = "cmd.exe";
        stInfoArgs = "/c " + aPath + aName;
    } else {
        stInfoFileName = "cscript";
        stInfoArgs = "/B " + aPath + aName;
    }
    this.aProcess.StartInfo.FileName = stInfoFileName;
    this.aProcess.StartInfo.Arguments = stInfoArgs;
    this.aProcess.StartInfo.WorkingDirectory = aPath;
    this.aProcess.StartInfo.UseShellExecute = false;
    this.aProcess.Start ();
    Console.WriteLine ("<<<got to here");
    this.aProcess.WaitForExit ();
    this.aProcess.Close ();
    Console.WriteLine ("Finished: {0}", DateTime.Now.ToString ("dd-MMM hh:mm:ss"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30916021_30916145_1_11
30916021_30916968_1_11
Title: Built in MessageBox Dialog Closing custom Form.ShowDialog() 
----------------------------------------

private void dgvSomeGrid_DoubleClick (object sender, EventArgs e) {
    string name = dgvSomeGrid.CurrentRow.Cells [5].Value.ToString ();
    var result = MessageBox.Show (name, "Select this Merkmal?", MessageBoxButtons.YesNo);
    if (result == DialogResult.Yes) {
        _someID = Convert.ToInt32 (dgvMSomeGrid.CurrentRow.Cells [0].Value.ToString ());
        this.DialogResult = DialogResult.Yes;
        this.Close ();
    }
}
----------------------------------------

private void dgvSomeGrid_DoubleClick (object sender, EventArgs e) {
    string name = dgvSomeGrid.CurrentRow.Cells [5].Value.ToString ();
    DialogResult = MessageBox.Show (name, "Select this Merkmal?", MessageBoxButtons.YesNo);
    if (DialogResult == DialogResult.Yes) {
        _someID = Convert.ToInt32 (dgvMSomeGrid.CurrentRow.Cells [0].Value.ToString ());
        formCloseFlag = true;
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30926684_31135133_15_45
30926684_31135133_1_13
Title: Truncating HTML content at the end of text blocks (block elements) 
----------------------------------------

private static void TruncateInnerText (HtmlNode source, HtmlNode root, HtmlNode current, int length) {
    HtmlNode childClone;
    foreach (HtmlNode child in source.ChildNodes) {
        int expectedSize = child.InnerText.Length + root.InnerText.Length;
        if (expectedSize <= length) {
            childClone = child.CloneNode (true);
            current.ChildNodes.Add (childClone);
            continue;
        }
        HtmlTextNode text = child as HtmlTextNode;
        if (text != null) {
            int remove = expectedSize - length;
            childClone = root.OwnerDocument.CreateTextNode (text.InnerText.Substring (0, text.InnerText.Length - remove));
            current.ChildNodes.Add (childClone);
            return;
        }
        childClone = child.CloneNode (false);
        current.ChildNodes.Add (childClone);
        TruncateInnerText (child, root, childClone, length);
    }
}
----------------------------------------

public static HtmlNode TruncateInnerText (HtmlNode node, int length) {
    if (node == null)
        throw new ArgumentNullException ("node");

    if (node.InnerText.Length < length)
        return node;

    HtmlNode clone = node.CloneNode (false);
    TruncateInnerText (node, clone, clone, length);
    return clone;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3096586_3096659_1_15
3096586_3096745_1_11
Title: Remove objects of some kind of type from a List<T> in C# using extension methods? 
----------------------------------------

public static void Remove < T > (this IList list) {
    for (int index = list.Count; index >= 0; -- index) {
        object item = list [index];
        if (item == null)
            continue;

        if (typeof (T) == item.GetType ())
            list.RemoveAt (index);

    }
}
----------------------------------------

public static void Remove < T > (this IList list) {
    ArrayList deleteList = new ArrayList ();
    foreach (var item in list)
        if (item.GetType () == typeof (T))
            deleteList.Add (item);

    for (int i = 0; i < deleteList.Count; i ++)
        list.Remove (deleteList [i]);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30982245_30982431_3_13
30982245_30983173_1_23
Title: "Creating a generic / abstract ""DBContext"" Class for shared functionality among different DBs" 
----------------------------------------

static DataTable exec_DT (DBConnection conn, DBCommand cmd) {
    DataTable retVal = new DataTable ();
    conn.Open ();
    using (SqlDataReader rdr = cmd.ExecuteReader ())
    {
        retVal.Load (rdr);
        rdr.Close ();
    } return retVal;
}
----------------------------------------

static DataTable exec_DT (string query, string conn_str) {
    DataTable retVal = new DataTable ();
    using (DbConnection conn = MyDbProvider.CreateConnection ())
    {
        conn.ConnectionString = conn_str;
        using (DbCommand cmd = conn.CreateCommand ())
        {
            cmd.CommandText = query;
            conn.Open ();
            using (DbDataReader rdr = cmd.ExecuteReader ())
            {
                retVal.Load (rdr);
                rdr.Close ();
            }}} return retVal;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30992304_30992756_1_23
30992304_30993008_1_26
Title: Formatting large numbers in C# 
----------------------------------------

public void KMBMaker (Text txt, double num) {
    if (num < 1000) {
        double numStr = num;
        txt.text = numStr.ToString () + "";
    } else if (num < 1000000) {
        double numStr = num / 1000;
        txt.text = numStr.ToString () + "K";
    } else if (num < 1000000000) {
        double numStr = num / 1000000;
        txt.text = numStr.ToString () + "M";
    } else {
        double numStr = num / 1000000000;
        txt.text = numStr.ToString () + "B";
    }
}
----------------------------------------

public static string KMBMaker (double num) {
    double numStr;
    string suffix;
    if (num < 1000d) {
        numStr = num;
        suffix = "";
    } else if (num < 1000000d) {
        numStr = num / 1000d;
        suffix = "K";
    } else if (num < 1000000000d) {
        numStr = num / 1000000d;
        suffix = "M";
    } else {
        numStr = num / 1000000000d;
        suffix = "B";
    }
    return numStr.ToString () + suffix;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31057214_31058102_1_12
31057214_31059582_1_12
Title: Database not updated bug - Entity Framework 
----------------------------------------

public void DisableRow (int id) {
    var connection = new CategoryDBEntities ();
    var record = connection.Categories.Find (id);
    if (record == null)
        return;

    record.state = false;
    connection.SaveChanges ();
}
----------------------------------------

public void DisableRow (int id) {
    var connection = new CategoryDBEntities ();
    var record = connection.Categories.Find (id);
    if (record == null)
        return;

    record.state = false;
    connection.SaveChanges ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3109507_10179991_14_23
3109507_3117042_13_22
Title: HttpWebRequests sends parameterless URI in Authorization header 
----------------------------------------

private static string CalculateMd5Hash (string input) {
    var inputBytes = Encoding.ASCII.GetBytes (input);
    var hash = MD5.Create ().ComputeHash (inputBytes);
    var sb = new StringBuilder ();
    foreach (var b in hash)
        sb.Append (b.ToString ("x2"));

    return sb.ToString ();
}
----------------------------------------

private static string CalculateMd5Hash (string input) {
    var inputBytes = Encoding.ASCII.GetBytes (input);
    var hash = MD5.Create ().ComputeHash (inputBytes);
    var sb = new StringBuilder ();
    foreach (var b in hash)
        sb.Append (b.ToString ("x2"));

    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31102876_31102992_9_19
31102876_31103052_1_16
Title: I'm trying to create a subroutine to draw x's and spaces dependent on two numbers that a user specifies 
----------------------------------------

static void DrawX (int spaces, int symbols) {
    for (int i = 0; i < spaces; i ++)
        Console.Write (' ');

    for (int i = 0; i < symbols; i ++)
        Console.Write ('X');

    Console.WriteLine ();
}
----------------------------------------

static string DrawX (int spaces, int x) {
    char [] chrarr = new char [spaces + x];
    for (int i = 0; i < spaces; i ++) {
        chrarr [i] = '_';
    }
    for (int i = spaces - 1; i < chrarr.Length - spaces; i ++) {
        chrarr [i] = 'X';
    }
    return new string (chrarr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31109531_31159017_36_55
31109531_31159017_74_92
Title: Adding Labels or Edit boxes as actions of buttons in C# 
----------------------------------------

public override void getparameters () {
    PopForLine Popup = new PopForLine ();
    DialogResult dialogresult = Popup.ShowDialog ();
    if (dialogresult == DialogResult.OK) {
        try {
            this.x1 = (float) Convert.ToDouble (Popup.Point1XText.Text);
            this.y1 = (float) Convert.ToDouble (Popup.Point1YText.Text);
            this.x2 = (float) Convert.ToDouble (Popup.Point2XText.Text);
            this.y2 = (float) Convert.ToDouble (Popup.Point2YText.Text);
        }
        catch (Exception e) {
            x1 = x2 = y1 = y2 = 0;
        }
    }
    Popup.Dispose ();
}
----------------------------------------

public override void getparameters () {
    PopForRect Popup = new PopForRect ();
    DialogResult dialogresult = Popup.ShowDialog ();
    if (dialogresult == DialogResult.OK) {
        try {
            Length = (float) Convert.ToDouble (Popup.LengthText.Text);
            Breadth = (float) Convert.ToDouble (Popup.BreadthText.Text);
        }
        catch (Exception e) {
            Length = 0;
            Breadth = 0;
        }
    }
    Popup.Dispose ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3116606_3116633_24_41
3116606_3116633_55_68
Title: Extension methods overridden by class gives no warning 
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

private static void DetectCollisions (MethodBase method) {
    Console.WriteLine ("  Testing {0}.{1}", method.DeclaringType.Name, method.Name);
    Type extendedType = method.GetParameters () [0].ParameterType;
    foreach (var type in GetTypeAndAncestors (extendedType).Distinct ()) {
        foreach (var collision in DetectCollidingMethods (method, type)) {
            Console.WriteLine ("    Possible collision in {0}: {1}", collision.DeclaringType.Name, collision);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3118003_3118175_3_32
3118003_3119156_14_32
Title: Serialising and Deserialising V.Large Dictionary in C# 
----------------------------------------

public static void Main () {
    var dico = new Dictionary < long, uint > ();
    for (long i = 0; i < 7500000; i ++) {
        dico.Add (i, (uint) i);
    }
    using (var stream = File.OpenWrite ("data.dat"))
    using (var writer = new BinaryWriter (stream))
    {
        foreach (var key in dico.Keys) {
            writer.Write (key);
            writer.Write (dico [key]);
        }
    } dico.Clear ();
    using (var stream = File.OpenRead ("data.dat"))
    using (var reader = new BinaryReader (stream))
    {
        while (stream.Position < stream.Length) {
            var key = reader.ReadInt64 ();
            var value = reader.ReadUInt32 ();
            dico.Add (key, value);
        }
    }}
----------------------------------------

public static void Main () {
    Serializer.PrepareSerializer < Test > ();
    var dico = new Dictionary < long, uint > ();
    for (long i = 0; i < 7500000; i ++) {
        dico.Add (i, (uint) i);
    }
    var data = new Test {Data = dico};
    using (var stream = File.OpenWrite ("data.dat"))
    {
        Serializer.Serialize (stream, data);
    } dico.Clear ();
    using (var stream = File.OpenRead ("data.dat"))
    {
        Serializer.Merge < Test > (stream, data);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31186502_31186656_23_34
31186502_31186662_36_49
Title: Do While loop causing compile failure 
----------------------------------------

public void Button_Click_1 (object sender, EventArgs e) {
    if (A1.Checked) {
        Q1.Text = Q1.Text.Replace ("Hello, welcome to the Geography quiz. Press 'A' and then 'Enter' to begin the quiz.", "Question 1: What is the capital of Cuba");
        A1.Text = A1.Text.Replace ("A", "Greenwich");
        A2.Text = A2.Text.Replace ("B", "Berlin");
        A3.Text = A3.Text.Replace ("C", "Bogota");
        A4.Text = A4.Text.Replace ("D", "Havana");
    }
}
----------------------------------------

public void Button_Click_1 (object sender, EventArgs e) {
    if (A1.Checked) {
        Q1.Text = Q1.Text.Replace ("Hello, welcome to the Geography quiz. Press 'A' and then 'Enter' to begin the quiz.", "Question 1: What is the capital of Cuba");
        A1.Text = A1.Text.Replace ("A", "Greenwich");
        A2.Text = A2.Text.Replace ("B", "Berlin");
        A3.Text = A3.Text.Replace ("C", "Bogota");
        A4.Text = A4.Text.Replace ("D", "Havana");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31200283_31200805_1_24
31200283_31200970_21_63
Title: Threads do not start as expected 
----------------------------------------

void Main () {
    var cts = new CancellationTokenSource ();
    cts.CancelAfter (TimeSpan.FromSeconds (2));
    var task = Task.Run (() = > ReadLineFromConsole (cts.Token));
    task.Wait (cts.Token);
    if (task.IsCanceled) {
        Console.WriteLine ("Too slow!");
        return;
    }
    var result = task.Result;
    if (result != "144") {
        Console.WriteLine ("Wrong!");
        return;
    }
}
----------------------------------------

static void Main (string [] args) {
    Console.Title = "The Secret Agent Test";
    Console.ForegroundColor = ConsoleColor.Green;
    WriteText ("Welcome, agent. This is the test to see if\nyou are good enough to be a full member of the OT Secret Agency.", "Do you want to continue? [Y/N]");
    var readk = Console.ReadKey ();
    if (readk.Key == ConsoleKey.Y || readk.Key == ConsoleKey.N) {
        Console.Clear ();
        WriteText ("Let's continue the test.\n", "Crack the password:\n", "Username: IDIOT_NOOB1337\nPROFILE: Likes memes such as doge.", "Is an elitist (Over the things he likes)", "Only uses the word idiot as an insult", "Password:");
        string pass1 = Console.ReadLine ();
        if (pass1 != "AnyoneWhoDoesn'tLikeDogeIsAnIdiot" && pass1 != "anyonewhodoesn'tlikedogeisanidiot")
            return;

        WriteText (2, "Account accessed.", "Stage 1 Complete.", "Loading next level...");
        WriteText (1, "Level 2 loaded.");
        Console.Clear ();
        WriteText (2.5, "Nice. You certainly have skill. But this test.... determines speed of mind.");
        Console.Clear ();
        Console.WriteLine ("You only have two seconds to answer the next question. Press any key when ready.");
        Console.ReadKey ();
        Console.Clear ();
        Console.WriteLine ("What is 12x12?!");
        int allowedTime = 2 * 1000;
        new Thread (() = > {
            Stopwatch s = new Stopwatch ();
            s.Start ();
            while (s.ElapsedMilliseconds < allowedTime) {
            }
            WriteText (2, "Sorry, you're too late. Restart the test again.");
            Console.Clear ();
            Environment.Exit (- 1);
        }).Start ();
        string product = Console.ReadLine ();
        if (product == "144")
            Console.WriteLine ("Impressive. Your mind is fast, too. Well, be prepared for the next test. Pressure.");

        WriteText (2, "Sorry, you are incorrect. Restart the test again.");
        Console.Clear ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31229124_31229294_3_13
31229124_31229324_1_14
Title: How to remove duplicate list in List<List<int>> 
----------------------------------------

public bool Equals (List < int > x, List < int > y) {
    if (x.Count != y.Count)
        return false;

    for (int i = 0; i < x.Count; i ++) {
        if (x [i] != y [i])
            return false;

    }
    return true;
}
----------------------------------------

bool Equals (IntegerCollection col) {
    if (this.Count () != col.Count ())
        return false;

    if (this.Sum () != col.Sum ())
        return false;

    for (int i = 0; i < this.Count (); i ++) {
        if (this [i] == col [i]) {
            continue;
        } else {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31258219_31258299_1_20
31258219_31258984_6_21
Title: Checking if some list values belong to another list 
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

public static void Main () {
    List < string > mainList = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > checkList = new List < string > {"mother", "green", "father", "black", "gray"};
    Random r = new Random ();
    for (int i = 0; i < 5; i ++) {
        string mainListItem = mainList [r.Next (0, mainList.Count)];
        Console.WriteLine (checkList.Contains (mainListItem) ? "{0} found in checkList" : "{0} not found in checkList", mainListItem);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31263041_31267306_125_135
31263041_31267306_144_154
Title: Naming convention for GoF Factory? 
----------------------------------------

public virtual Intf Create (Key key) {
    Dictionary < Type, Dictionary < object, Type > > dict = Init ();
    Dictionary < object, Type > factoryDict;
    if (dict.TryGetValue (this.GetType (), out factoryDict)) {
        Type t;
        return (factoryDict.TryGetValue (typeConversion (key), out t)) ? (Intf) Activator.CreateInstance (t) : null;
    }
    return null;
}
----------------------------------------

public virtual Intf Create (Key key, params object [] constructorParameters) {
    Dictionary < Type, Dictionary < object, Type > > dict = Init ();
    Dictionary < object, Type > factoryDict;
    if (dict.TryGetValue (this.GetType (), out factoryDict)) {
        Type t;
        return (factoryDict.TryGetValue (typeConversion (key), out t)) ? (Intf) Activator.CreateInstance (t, constructorParameters) : null;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3129275_3129527_1_16
3129275_3129530_3_22
Title: How to make windows service application so it can run as a standalone program as well? 
----------------------------------------

static void Main (string [] args) {
    foreach (string arg in args) {
        if (arg.ToLower () == "-service") {
            ServiceBase [] servicesToRun = new ServiceBase [] {new Service1 ()};
            ServiceBase.Run (servicesToRun);
            return;
        }
    }
    Application.Run (new Form1 ());
}
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31295401_31296867_12_25
31295401_31296867_33_43
Title: How to elegantly check for equality in a hierarchy of classes which have a common base class that holds a primary key? 
----------------------------------------

protected virtual bool ? BaseEquals (object other) {
    if (other == null)
        return false;

    if (ReferenceEquals (this, other))
        return true;

    if (GetType () != other.GetType ())
        return false;

    DatabaseEntity databaseEntity = (DatabaseEntity) other;
    if (ID != databaseEntity.ID)
        return false;

    return null;
}
----------------------------------------

protected override bool ? BaseEquals (object other) {
    bool ? baseEquals = base.BaseEquals (other);
    if (baseEquals != null)
        return baseEquals;

    Person person = (Person) other;
    if (person.FirstName != FirstName || person.LastName != LastName)
        return false;

    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31301368_31302468_123_134
31301368_31302793_74_94
Title: How to Create a simple atm program in c# using inheritance 
----------------------------------------

public void Deposit () {
    Console.WriteLine ("Enter your account number");
    int accountNo = int.Parse (Console.ReadLine ());
    if (AccountsList.ContainsKey (accountNo)) {
        Console.WriteLine ("Enter your amount you wish to deposit");
        int amount = int.Parse (Console.ReadLine ());
        AccountsList [accountNo].InititailBalance += amount;
    }
}
----------------------------------------

public void Deposit () {
    int accountId;
    Console.Write ("Enter your account number: ");
    int.TryParse (Console.ReadLine (), out accountId);
    var account = Accounts.FirstOrDefault (a = > a.Id == accountId);
    if (account != null) {
        double amount;
        Console.Write ("Enter amount to deposit: ");
        double.TryParse (Console.ReadLine (), out amount);
        account.Balance += amount;
        Console.Write ("Your new balance is {0}", account.Balance);
    } else {
        Console.WriteLine ("That account does not exist!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31301368_31302468_140_165
31301368_31302793_3_31
Title: How to Create a simple atm program in c# using inheritance 
----------------------------------------

static void Main (string [] args) {
    ATM atm = new ATM ();
    while (true) {
        Console.WriteLine ("Menu");
        Console.WriteLine ("1.Create Account");
        Console.WriteLine ("2.ATM");
        Console.Write ("Please enter your selections: ");
        int select = int.Parse (Console.ReadLine ());
        switch (select) {
            case 1 :
                atm.CreateAccount ();
                break;
            case 2 :
                atm.Deposit ();
                break;
            default :
                Console.WriteLine ("Invalid selection!");
                break;
        }
    }
}
----------------------------------------

static void Main () {
    var atm = new Atm ();
    while (true) {
        int option;
        Console.WriteLine ();
        Console.WriteLine ("Menu:");
        Console.WriteLine ("1. Create Account");
        Console.WriteLine ("2. Deposit");
        Console.WriteLine ();
        Console.Write ("Please make a selection: ");
        var input = int.TryParse (Console.ReadLine (), out option);
        Console.WriteLine ("-----------------");
        switch (option) {
            case 1 :
                atm.CreateAccount ();
                break;
            case 2 :
                atm.Deposit ();
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31304236_31304428_1_15
31304236_31304434_1_16
Title: Get method specifically to handle a 0 value 
----------------------------------------

public IHttpActionResult GetMember (int id) {
    Member member = new Member ();
    if (id > 0) {
        var members = db.Members.Find ();
        member = members.FirstOrDefault ((m) = > m.MemberId == id);
    } else {
    }
    return Ok (member);
}
----------------------------------------

public IHttpActionResult GetMember (int id) {
    Member member = db.Members.Find (id);
    if (member == null) {
        if (id != 0) {
            member = new Member ();
        } else {
            return NotFound ();
        }
    }
    return Ok (member);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31304236_31304428_1_15
31304236_31304488_1_26
Title: Get method specifically to handle a 0 value 
----------------------------------------

public IHttpActionResult GetMember (int id) {
    Member member = new Member ();
    if (id > 0) {
        var members = db.Members.Find ();
        member = members.FirstOrDefault ((m) = > m.MemberId == id);
    } else {
    }
    return Ok (member);
}
----------------------------------------

public IHttpActionResult GetMember (int id) {
    Member member = null;
    if (id == 0) {
        member = new Member ();
        db.Members.Add (member);
        db.SaveChanges ();
    } else {
        member = db.Members.Where (m = > m.MemberId == id).FirstOrDefault ();
    }
    if (member == null)
        return NotFound ();

    return Ok (member);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31304236_31304434_1_16
31304236_31304488_1_26
Title: Get method specifically to handle a 0 value 
----------------------------------------

public IHttpActionResult GetMember (int id) {
    Member member = db.Members.Find (id);
    if (member == null) {
        if (id != 0) {
            member = new Member ();
        } else {
            return NotFound ();
        }
    }
    return Ok (member);
}
----------------------------------------

public IHttpActionResult GetMember (int id) {
    Member member = null;
    if (id == 0) {
        member = new Member ();
        db.Members.Add (member);
        db.SaveChanges ();
    } else {
        member = db.Members.Where (m = > m.MemberId == id).FirstOrDefault ();
    }
    if (member == null)
        return NotFound ();

    return Ok (member);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31314791_31315016_10_25
31314791_31315055_1_22
Title: c# gridview doesn't create new rows 
----------------------------------------

protected void Buton1_Click (object sender, EventArgs e) {
    Datatable dtable = (Datatable) ViewState ["dt"];
    if (ViewState ["dt"] == null) {
        DataColumn dc = new DataColumn ("Name");
        dtable.Columns.Add (dc);
    }
    DataRow dr = dtable.NewRow ();
    dr ["Name"] = TextBox1.Text;
    dtable.Rows.Add (dr);
    dtable.AcceptChanges ();
    GridView1.DataSource = dtable;
    GridView1.DataBind ();
    ViewState ["dt"] = dtable;
}
----------------------------------------

protected void Buton1_Click (object sender, EventArgs e) {
    DataTable dt = null;
    if (Session ["GridData"] == null) {
        dt = new DataTable ();
        DataColumn dc = new DataColumn ("Name");
        dt.Columns.Add (dc);
    } else {
        dt = Session ["GridData"] as DataTable;
    }
    DataRow dr = dt.NewRow ();
    dr ["Name"] = TextBox1.Text;
    dt.Rows.Add (dr);
    dt.AcceptChanges ();
    GridView1.DataSource = dt;
    GridView1.DataBind ();
    Session ["GridData"] = dt;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31320907_31320954_1_15
31320907_31321024_1_40
Title: How to loop an if-statement with many else if conditions 
----------------------------------------

public void Main (string [] args) {
    while (! doesUserWantToLeave) {
        Console.WriteLine ("Please specify the type of conversion you would like to accomplish:" + "\n(Bronze, Silver, 14k Gold, 18k Gold, 22k Gold, Platinum, or Exit):");
        string conversionType = Console.ReadLine ();
        Console.WriteLine ("What is the weight of the wax model?");
        double waxWeight = double.Parse (Console.ReadLine ());
        double weight = ConvertMethod (conversionType, waxWeight);
        Console.WriteLine (string.Format ("You need {0} grams of {1}.", weight, conversionType));
    }
}
----------------------------------------

static void Main (string [] args) {
    bool userWantsToStay = true;
    var conversions = new Dictionary < string, double > {{"Bronze", 10.0}, {"Silver", 10.5}, {"14k Gold", 13.5}, {"18k Gold", 15.0}, {"22k Gold", 17.3}, {"Platinum", 21.5}};
    while (userWantsToStay) {
        Console.WriteLine ("Please specify the type of conversion you would like to accomplish:");
        Console.WriteLine ("(Bronze, Silver, 14k Gold, 18k Gold, 22k Gold, Platinum, or Exit):");
        var metalType = Console.ReadLine ();
        Console.WriteLine ("What is the weight of the wax model?");
        var wW = Console.ReadLine ();
        var waxWeight = double.Parse (wW);
        if (conversions.ContainsKey (metalType)) {
            var metalWeight = waxWeight * conversions [metalType];
            Console.WriteLine ("You need {0} grams of {1}.", metalWeight, metalType.ToLower ());
            Console.ReadLine ();
        } else if (metalType == "Exit") {
            userWantsToStay = false;
        } else {
            Console.WriteLine ("Sorry! That was an invalid option! Try again");
            Console.ReadLine ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3132178_3132235_1_14
3132178_3132247_1_14
Title: C# Multithreaded Proxy Checker 
----------------------------------------

private int GetNextinQueue () {
    lock (lockqueue)
    {
        if (queue.Count > 0) {
            int temp = queue [0];
            queue.Remove (temp);
            return temp;
        } else
            return - 1;

    }}
----------------------------------------

private int GetNextinQueue () {
    int ret = - 1;
    lock (queue)
    {
        if (queue.Count > 0) {
            int temp = queue [0];
            queue.Remove (temp);
            ret = temp;
        }
    } return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31324092_31324344_1_25
31324092_31324398_1_17
Title: Allow only a set number of characters in a string 
----------------------------------------

public static string removeDuplicateCharacters (String text, int allowedDuplicates) {
    StringBuilder seen = new StringBuilder ();
    Dictionary < char, int > charCount = new Dictionary < char, int > ();
    foreach (char c in text) {
        char upperCase = c.ToUpper ();
        if (! charCount.ContainsKey (upperCase)) {
            seen.Append (c);
            charCount.Add (upperCase, 1);
        } else if (charCount [upperCase] < allowedDuplicates) {
            charCount [upperCase] += 1;
            seen.Append (c);
        } else {
        }
    }
    return seen.ToString ();
}
----------------------------------------

public static string removeDuplicateCharacters (string text, int allowedDuplicates) {
    var frequency = new Dictionary < char, int > ();
    StringBuilder output = new StringBuilder ();
    foreach (char c in text) {
        int count = 1;
        if (frequency.ContainsKey (c))
            count = ++ frequency [c];
        else
            frequency.Add (c, count);

        if (count <= allowedDuplicates)
            output.Append (c);

    }
    return output.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31324092_31324344_1_25
31324092_31324601_1_15
Title: Allow only a set number of characters in a string 
----------------------------------------

public static string removeDuplicateCharacters (String text, int allowedDuplicates) {
    StringBuilder seen = new StringBuilder ();
    Dictionary < char, int > charCount = new Dictionary < char, int > ();
    foreach (char c in text) {
        char upperCase = c.ToUpper ();
        if (! charCount.ContainsKey (upperCase)) {
            seen.Append (c);
            charCount.Add (upperCase, 1);
        } else if (charCount [upperCase] < allowedDuplicates) {
            charCount [upperCase] += 1;
            seen.Append (c);
        } else {
        }
    }
    return seen.ToString ();
}
----------------------------------------

public static string removeDuplicateCharacters (String text, int allowedDuplicates) {
    string seen = "";
    int count = 0;
    foreach (char c in text) {
        count = 0;
        foreach (char c2 in seen) {
            if (c2 == c)
                count ++;

        }
        if (count < allowedDuplicates) {
            seen = seen + c;
        }
    }
    return seen;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31324092_31324398_1_17
31324092_31324601_1_15
Title: Allow only a set number of characters in a string 
----------------------------------------

public static string removeDuplicateCharacters (string text, int allowedDuplicates) {
    var frequency = new Dictionary < char, int > ();
    StringBuilder output = new StringBuilder ();
    foreach (char c in text) {
        int count = 1;
        if (frequency.ContainsKey (c))
            count = ++ frequency [c];
        else
            frequency.Add (c, count);

        if (count <= allowedDuplicates)
            output.Append (c);

    }
    return output.ToString ();
}
----------------------------------------

public static string removeDuplicateCharacters (String text, int allowedDuplicates) {
    string seen = "";
    int count = 0;
    foreach (char c in text) {
        count = 0;
        foreach (char c2 in seen) {
            if (c2 == c)
                count ++;

        }
        if (count < allowedDuplicates) {
            seen = seen + c;
        }
    }
    return seen;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31333473_31333529_3_24
31333473_31333931_1_19
Title: Comparing two DataTables to determine if it is modified 
----------------------------------------

static void CompareRows (DataTable table1, DataTable table2) {
    foreach (DataRow row1 in table1.Rows) {
        foreach (DataRow row2 in table2.Rows) {
            var array1 = row1.ItemArray;
            var array2 = row2.ItemArray;
            if (array1.SequenceEqual (array2)) {
                Console.WriteLine ("Equal: {0} {1}", row1 ["Drug"], row2 ["Drug"]);
            } else {
                Console.WriteLine ("Not equal: {0} {1}", row1 ["Drug"], row2 ["Drug"]);
            }
        }
    }
}
----------------------------------------

static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        var array1 = row1.ItemArray;
        foreach (DataRow row2 in original.Rows) {
            var array2 = row2.ItemArray;
            if (array1.SequenceEqual (array2)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31341640_31341738_1_19
31341640_31342455_19_32
Title: C# Best way to share logic and re-use code 
----------------------------------------

public static T Cache < T > (string key, Func < T > loadFunction, Func < T > errorHandler) {
    if (HttpRuntime.Cache [key] == null) {
        try {
            T value = loadFunction ();
            HttpRuntime.Cache.Insert (key, value, null, DateTime.Now.AddMinutes (20), new TimeSpan (0, 10, 0));
            return value;
        }
        catch (Exception e) {
            return errorHandler ();
        }
    } else
        return (T) HttpRuntime.Cache [key];

}
----------------------------------------

public static Func < T > OnError < T > (this Func < T > inner, Func < Exception, T > onError) {
    return () = > {
        try {
            return inner ();
        }
        catch (Exception e) {
            return onError (e);
        }
    };
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31341640_31341738_1_19
31341640_31342455_3_17
Title: C# Best way to share logic and re-use code 
----------------------------------------

public static T Cache < T > (string key, Func < T > loadFunction, Func < T > errorHandler) {
    if (HttpRuntime.Cache [key] == null) {
        try {
            T value = loadFunction ();
            HttpRuntime.Cache.Insert (key, value, null, DateTime.Now.AddMinutes (20), new TimeSpan (0, 10, 0));
            return value;
        }
        catch (Exception e) {
            return errorHandler ();
        }
    } else
        return (T) HttpRuntime.Cache [key];

}
----------------------------------------

public static Func < T > Cache < T > (this Func < T > inner, string cacheName) {
    return () = > {
        if (HttpRuntime.Cache [cacheName] == null) {
            var result = inner ();
            HttpRuntime.Cache.Insert (cacheName, inner (), null, DateTime.Now.AddMinutes (20), new TimeSpan (0, 10, 0));
            return result;
        }
        return (T) HttpRuntime.Cache [cacheName];
    };
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31341640_31342455_19_32
31341640_31342455_3_17
Title: C# Best way to share logic and re-use code 
----------------------------------------

public static Func < T > OnError < T > (this Func < T > inner, Func < Exception, T > onError) {
    return () = > {
        try {
            return inner ();
        }
        catch (Exception e) {
            return onError (e);
        }
    };
}
----------------------------------------

public static Func < T > Cache < T > (this Func < T > inner, string cacheName) {
    return () = > {
        if (HttpRuntime.Cache [cacheName] == null) {
            var result = inner ();
            HttpRuntime.Cache.Insert (cacheName, inner (), null, DateTime.Now.AddMinutes (20), new TimeSpan (0, 10, 0));
            return result;
        }
        return (T) HttpRuntime.Cache [cacheName];
    };
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31359181_31359485_1_11
31359181_31359590_1_15
Title: C# why am I getting zero count back? 
----------------------------------------

public void Create () {
    String [] values = {"Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"};
    String [] suits = {"Hearts", "Diamonds", "Spades", "Clubs"};
    this.cardsInPack = 0;
    for (int i = 0; i < suits.Length; i ++) {
        for (int j = 0; j < values.Length; j ++, this.cardsInPack ++) {
            pack.Add (new Card (values [j], suits [i]));
        }
    }
}
----------------------------------------

public static PackOfCards Create () {
    PackOfCards newPack = new PackOfCards ();
    String [] values = {"Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"};
    String [] suits = {"Hearts", "Diamonds", "Spades", "Clubs"};
    for (int i = 0; i < suits.Length; i ++) {
        for (int j = 0; j < values.Length; j ++) {
            newPack.pack.Add (new Card (values [j], suits [i]));
        }
    }
    return newPack;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31377909_31377966_44_50
31377909_31377966_77_83
Title: Linq syntax to compare two lists 
----------------------------------------

public bool Equals (X other) {
    if (other == null)
        return false;

    if (object.ReferenceEquals (this, other))
        return true;

    return x == other.x && y == other.y;
}
----------------------------------------

public bool Equals (Y other) {
    if (other == null)
        return false;

    if (object.ReferenceEquals (this, other))
        return true;

    return str == other.str && y == other.y;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31377909_31377966_44_50
31377909_31377966_8_14
Title: Linq syntax to compare two lists 
----------------------------------------

public bool Equals (X other) {
    if (other == null)
        return false;

    if (object.ReferenceEquals (this, other))
        return true;

    return x == other.x && y == other.y;
}
----------------------------------------

public bool Equals (Obj other) {
    if (other == null)
        return false;

    if (object.ReferenceEquals (this, other))
        return true;

    if (mybool != other.mybool)
        return false;

    return xlist.SequenceEqual (other.xlist) && Ylist.SequenceEqual (other.Ylist);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31377909_31377966_77_83
31377909_31377966_8_14
Title: Linq syntax to compare two lists 
----------------------------------------

public bool Equals (Y other) {
    if (other == null)
        return false;

    if (object.ReferenceEquals (this, other))
        return true;

    return str == other.str && y == other.y;
}
----------------------------------------

public bool Equals (Obj other) {
    if (other == null)
        return false;

    if (object.ReferenceEquals (this, other))
        return true;

    if (mybool != other.mybool)
        return false;

    return xlist.SequenceEqual (other.xlist) && Ylist.SequenceEqual (other.Ylist);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31397132_31397428_1_33
31397132_31397528_1_30
Title: Keeps crashing on 3rd if condition 
----------------------------------------

static void Main (string [] args) {
    try {
        Console.WriteLine ("Enter numbers (Example 25,46,19)");
        var input = Console.ReadLine ();
        if (input == null) {
            Console.WriteLine ("Your input is wrong");
            return;
        }
        var numbers = input.Split (',');
        for (int i = 0; i < numbers.Length; i ++) {
            for (int j = 0; j < numbers.Length - 1; j ++) {
                if (Convert.ToInt32 (numbers [i]) > Convert.ToInt32 (numbers [j])) {
                    var temp = Convert.ToInt32 (numbers [i]);
                    numbers [i] = numbers [j];
                    numbers [j] = temp.ToString ();
                }
            }
        }
        Console.WriteLine ("Greater Number is {0}", numbers [0]);
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
    }
    Console.ReadKey ();
}
----------------------------------------

public static void Main (string [] args) {
    string [] input = Console.ReadLine ().Split (' ');
    List < int > nums = new List < int > ();
    for (int i = 0; i < input.Length; i ++) {
        int intValue;
        if (Int32.TryParse (input [i].Trim (), out intValue)) {
            nums.Add (intValue);
        }
    }
    int min = nums [0];
    int max = nums [0];
    for (int i = 0; i < nums.Count (); i ++) {
        if (nums [i] < min)
            min = nums [i];

        if (nums [i] > max)
            max = nums [i];

    }
    Console.WriteLine ("Largest: " + max);
    Console.WriteLine ("Smallest: " + min);
    Console.WriteLine ("Press Enter to exit.");
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31419443_31419484_1_27
31419443_31419518_1_15
Title: "not all code paths return a ""value""" 
----------------------------------------

public static int [] GetRandomNumberCount () {
    Random RandomClass = new Random ();
    int first = RandomClass.Next (1, 5);
    int second = RandomClass.Next (1, 5);
    int third = RandomClass.Next (1, 5);
    int forth = RandomClass.Next (1, 5);
    Console.WriteLine ("You are playing with M@sterB@t");
    Console.WriteLine ("Bot Says : You Go First");
    Console.WriteLine ("Game Settings ");
    Console.WriteLine ("The Game Begins");
    int [] numbers = new int [4];
    numbers.Add (first);
    numbers.Add (second);
    numbers.Add (third);
    numbers.Add (fourth);
    return numbers;
}
----------------------------------------

public static void GetRandomNumberCount () {
    Random RandomClass = new Random ();
    int first = RandomClass.Next (1, 5);
    int second = RandomClass.Next (1, 5);
    int third = RandomClass.Next (1, 5);
    int forth = RandomClass.Next (1, 5);
    Console.WriteLine ("You are playing with M@sterB@t");
    Console.WriteLine ("Bot Says : You Go First");
    Console.WriteLine ("Game Settings ");
    Console.WriteLine ("The Game Begins");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3143657_18066426_1_29
3143657_43639947_1_15
Title: Truncate Two decimal places without rounding 
----------------------------------------

string Truncate (double value, int precision) {
    if (precision < 0) {
        throw new ArgumentOutOfRangeException ("Precision cannot be less than zero");
    }
    string result = value.ToString ();
    int dot = result.IndexOf ('.');
    if (dot < 0) {
        return result;
    }
    int newLength = dot + precision + 1;
    if (newLength == dot + 1) {
        newLength --;
    }
    if (newLength > result.Length) {
        newLength = result.Length;
    }
    return result.Substring (0, newLength);
}
----------------------------------------

decimal Truncate (decimal d, byte decimals) {
    decimal r = Math.Round (d, decimals);
    if (d > 0 && r > d) {
        return r - new decimal (1, 0, 0, false, decimals);
    } else if (d < 0 && r < d) {
        return r + new decimal (1, 0, 0, false, decimals);
    }
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31464611_31464975_23_48
31464611_31464975_50_66
Title: Most effective way to lookup a substring C of string B in string A in LINQ 
----------------------------------------

public string Match (string a, string b) {
    if (a == null) {
        throw new ArgumentNullException ("a");
    }
    if (b == null) {
        throw new ArgumentNullException ("b");
    }
    string best = null;
    for (int i = 0; i < b.Length; i ++) {
        string match = Match (a, b, i);
        if (match != null && (best == null || match.Length > best.Length)) {
            best = match;
        }
    }
    return best;
}
----------------------------------------

private string Match (string a, string b, int offset) {
    string best = null;
    for (int i = offset; i < b.Length; i ++) {
        string s = b.Substring (offset, (i - offset) + 1);
        int index = a.IndexOf (s);
        if (index != - 1) {
            best = s;
        }
    }
    return best;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31534218_31534751_3_50
31534218_31534839_15_51
Title: linq ordered subset of another list 
----------------------------------------

public static bool IsSubset < T > (this IEnumerable < T > subsetEnumerable, IEnumerable < T > enumerable) {
    var found = false;
    var list = enumerable as IList < T > ?? enumerable.ToList ();
    var listCount = list.Count ();
    var subsetList = subsetEnumerable as IList < T > ?? subsetEnumerable.ToList ();
    var posListCount = subsetList.Count ();
    if (listCount < posListCount) {
        return false;
    }
    var firstElement = subsetList.First ();
    var indexes = new List < int > ();
    var index = 0;
    foreach (var elem in list) {
        if (elem.Equals (firstElement)) {
            indexes.Add (index);
        }
        index ++;
    }
    foreach (var i in indexes) {
        int x = 0;
        for (x = 0; x < posListCount && (i + x) < listCount; x ++) {
            if (! Equals (subsetList [x], list [(i + x)])) {
                found = false;
                break;
            }
            found = true;
        }
        if (x + 1 < posListCount)
            found = false;

    }
    return found;
}
----------------------------------------

public static int IndexOf < T > (this IList < T > haystack, IList < T > needle, IEqualityComparer < T > cmp) {
    if (haystack == null || needle == null)
        throw new ArgumentNullException ();

    int needleCount = needle.Count;
    if (needleCount == 0)
        return 0;

    if (cmp == null)
        cmp = EqualityComparer < T >.Default;

    int count = haystack.Count;
    if (needleCount == 1) {
        T item = needle [0];
        for (int idx = 0; idx != count; ++ idx)
            if (cmp.Equals (haystack [idx], item))
                return idx;

        return - 1;
    }
    int m = 0;
    int i = 0;
    int [] table = KMPTable (needle, cmp);
    while (m + i < count) {
        if (cmp.Equals (needle [i], haystack [m + i])) {
            if (i == needleCount - 1)
                return m == needleCount ? - 1 : m;

            ++ i;
        } else {
            m = m + i - table [i];
            i = table [i] > - 1 ? table [i] : 0;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31534218_31534751_3_50
31534218_31534839_52_67
Title: linq ordered subset of another list 
----------------------------------------

public static bool IsSubset < T > (this IEnumerable < T > subsetEnumerable, IEnumerable < T > enumerable) {
    var found = false;
    var list = enumerable as IList < T > ?? enumerable.ToList ();
    var listCount = list.Count ();
    var subsetList = subsetEnumerable as IList < T > ?? subsetEnumerable.ToList ();
    var posListCount = subsetList.Count ();
    if (listCount < posListCount) {
        return false;
    }
    var firstElement = subsetList.First ();
    var indexes = new List < int > ();
    var index = 0;
    foreach (var elem in list) {
        if (elem.Equals (firstElement)) {
            indexes.Add (index);
        }
        index ++;
    }
    foreach (var i in indexes) {
        int x = 0;
        for (x = 0; x < posListCount && (i + x) < listCount; x ++) {
            if (! Equals (subsetList [x], list [(i + x)])) {
                found = false;
                break;
            }
            found = true;
        }
        if (x + 1 < posListCount)
            found = false;

    }
    return found;
}
----------------------------------------

private static int [] KMPTable < T > (IList < T > sought, IEqualityComparer < T > cmp) {
    int [] table = new int [sought.Count];
    int pos = 2;
    int cnd = 0;
    table [0] = - 1;
    table [1] = 0;
    while (pos < table.Length)
        if (cmp.Equals (sought [pos - 1], sought [cnd]))
            table [pos ++] = ++ cnd;
        else if (cnd > 0)
            cnd = table [cnd];
        else
            table [pos ++] = 0;

    return table;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31534218_31534839_15_51
31534218_31534839_52_67
Title: linq ordered subset of another list 
----------------------------------------

public static int IndexOf < T > (this IList < T > haystack, IList < T > needle, IEqualityComparer < T > cmp) {
    if (haystack == null || needle == null)
        throw new ArgumentNullException ();

    int needleCount = needle.Count;
    if (needleCount == 0)
        return 0;

    if (cmp == null)
        cmp = EqualityComparer < T >.Default;

    int count = haystack.Count;
    if (needleCount == 1) {
        T item = needle [0];
        for (int idx = 0; idx != count; ++ idx)
            if (cmp.Equals (haystack [idx], item))
                return idx;

        return - 1;
    }
    int m = 0;
    int i = 0;
    int [] table = KMPTable (needle, cmp);
    while (m + i < count) {
        if (cmp.Equals (needle [i], haystack [m + i])) {
            if (i == needleCount - 1)
                return m == needleCount ? - 1 : m;

            ++ i;
        } else {
            m = m + i - table [i];
            i = table [i] > - 1 ? table [i] : 0;
        }
    }
    return - 1;
}
----------------------------------------

private static int [] KMPTable < T > (IList < T > sought, IEqualityComparer < T > cmp) {
    int [] table = new int [sought.Count];
    int pos = 2;
    int cnd = 0;
    table [0] = - 1;
    table [1] = 0;
    while (pos < table.Length)
        if (cmp.Equals (sought [pos - 1], sought [cnd]))
            table [pos ++] = ++ cnd;
        else if (cnd > 0)
            cnd = table [cnd];
        else
            table [pos ++] = 0;

    return table;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31578126_31578207_3_16
31578126_31578213_8_20
Title: "Exercise in C#it doesn't work" 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Give some numbers");
    int i = 0, j = 0;
    string n = Console.ReadLine ();
    string [] numbers = n.Split (' ');
    int s = 0;
    for (i = 0; i < numbers.Length; i ++) {
        s += int.Parse (numbers [i]);
    }
    Console.Write ("the sum of your numbers is: {0} ", s);
    Console.ReadLine ();
}
----------------------------------------

public static void Main () {
    Console.WriteLine ("Give some numbers");
    string n = Console.ReadLine ();
    int sum = 0;
    foreach (var i in n.Split (' ')) {
        sum += int.Parse (i);
    }
    Console.Write ("the sum of your numbers is: {0} ", sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3157936_14877224_1_11
3157936_3158137_1_13
Title: How can I test if an enum is defined or not whilst ignoring case? 
----------------------------------------

public bool TryParse < TEnum > (string value, bool ignoreCase, ref TEnum result) where TEnum : struct {
    bool parsed;
    try {
        result = (TEnum) Enum.Parse (typeof (TEnum), value, ignoreCase);
        parsed = true;
    }
    catch {
    }
    return parsed;
}
----------------------------------------

public static T ConvertStringToEnum < T > (string text) {
    T returnVal;
    try {
        returnVal = (T) Enum.Parse (typeof (T), text, true);
    }
    catch (ArgumentException) {
        returnVal = default (T);
    }
    return returnVal;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31580236_31580544_1_47
31580236_31580575_1_16
Title: C# DataGridView doesn't update in Database 
----------------------------------------

protected void insertBttn_Click (object sender, EventArgs e) {
    SqlConnection con = new SqlConnection (ConfigurationManager.ConnectionStrings ["ConnectionString"].ToString ());
    int i = 0;
    int j = 0;
    string query = "";
    string columnText = "";
    string valueText = "";
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandType = System.Data.CommandType.Text;
    cmd.Connection = con;
    for (i = 0; i < dataGridView1.Rows.Count; i ++) {
        columnText = "";
        valueText = "";
        for (j = 0; j < dataGridView1.Rows [0].Cells.Count; j ++) {
            if (j != 0) {
                columnText += ",";
                valueText += ",";
            }
            columnText += dataGridView1.HeaderRow.Cells [j].Text;
            valueText += "'" + dataGridView1.Rows [i].Cells [j].Text + "'";
        }
        query += "insert into " + comboBox1.SelectedValue.ToString () + " (" + columnText + ") values (" + valueText + ")";
    }
    try {
        cmd.CommandText = query;
        con.Open ();
        cmd.ExecuteNonQuery ();
        con.Close ();
    }
    catch (Exception ex) {
        Response.Write (ex.Message.ToString ());
    }
    finally {
        con.Close ();
    }
}
----------------------------------------

private void insertBttn_Click (object sender, EventArgs e) {
    SqlConnection con = new SqlConnection (@"Data Source=NUC\MICROGARDE;Initial Catalog=SQL;Integrated Security=True");
    int i = 0;
    con.Open ();
    for (i = 0; i < this.dataGridView1.Rows.Count; i ++) {
        string query = "insert into " + comboBox1.SelectedValue.ToString () + " (@" + dataGridView1.Columns [i] + ") VALUES ('" + this.dataGridView1.Columns [i] + "');";
        SqlCommand cmd = new SqlCommand (query, con);
        cmd.Parameters.Add (new SqlParameter (@Field, "value"));
        cmd.Parameters.Add (new SqlParameter (@Field, "value"));
        cmd.ExecuteNonQuery ();
    }
    con.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31588673_31588949_1_25
31588673_31589017_1_26
Title: Checking if a string begins with a given string 
----------------------------------------

public static bool StartHi (string str) {
    bool firstHi;
    if (string.IsNullOrEmpty (str)) {
        Console.WriteLine ("The string is empty!");
    } else {
        string strLower = str.ToLower ();
        string [] words = strLower.split (' ');
        if ((words.length == 0 && strLower == "hi") || (words [0] == "hi")) {
            firstHi = true;
            Console.WriteLine ("The string starts with \"hi\"");
        } else {
            firstHi = false;
            Console.WriteLine ("The string doesn't start with \"hi\"");
        }
    }
    Console.ReadLine ();
    return firstHi;
}
----------------------------------------

public static bool StartHi (string str) {
    bool firstHi = false;
    if (string.IsNullOrEmpty (str)) {
        Console.WriteLine ("The string is empty!");
        Console.ReadLine ();
        return false;
    }
    var array = str.Split (new string [] {" "}, StringSplitOptions.None);
    if (array [0].ToLower () == "hi") {
        firstHi = true;
        Console.WriteLine ("The string starts with \"hi\"");
    } else {
        firstHi = false;
        Console.WriteLine ("The string doesn't start with \"hi\"");
    }
    Console.ReadLine ();
    return firstHi;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31628768_31628844_5_16
31628768_40309837_5_20
Title: ConcurrentDictionary.GetOrAdd - Add only if not null 
----------------------------------------

public static TValue GetOrAddIfNotNull < TKey, TValue > (this ConcurrentDictionary < TKey, TValue > dictionary, TKey key, Func < TKey, TValue > valueFactory) where TValue : class {
    lock (myLock)
    {
        var value = dictionary.GetOrAdd (key, valueFactory);
        if (value == null)
            dictionary.TryRemove (key, out value);

        return value;
    }}
----------------------------------------

public static TValue GetOrAddIfNotNull < TKey, TValue > (this ConcurrentDictionary < TKey, TValue > dictionary, TKey key, Func < TKey, TValue > valueFactory) where TValue : class {
    TValue value;
    if (! dictionary.TryGetValue (key, out value)) {
        lock (myLock)
        {
            value = dictionary.GetOrAdd (key, valueFactory);
            if (value == null)
                dictionary.TryRemove (key, out value);

        }}
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31635476_31635571_1_15
31635476_31635644_1_19
Title: Iterating multiple items from list in MVC C# 
----------------------------------------

public ActionResult Bar () {
    List < WOWClass > list = new List < WOWClass > ();
    string url = "http://eu.battle.net/wow/en/feed/news";
    using (XmlReader reader = XmlReader.Create (url))
    {
        SyndicationFeed feed = SyndicationFeed.Load (reader);
        foreach (SyndicationItem item in feed.Items) {
        }
    } return PartialView ("_Bar", list);
}
----------------------------------------

public ActionResult Bar () {
    List < MyModel > _model = new List < MyModel > ();
    using (XmlReader reader = XmlReader.Create (url))
    {
        SyndicationFeed feed = SyndicationFeed.Load (reader);
        foreach (SyndicationItem item in feed.Items) {
            var newItem = new MyModel ();
            newItem.Topic = item.Title.Text;
            newItem.Signature = item.Summary.Text;
            newItem.Time = item.PublishDate.DateTime;
            _model.Add (newItem);
        }
    } return PartialView ("_Bar", _model);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3163657_3163667_10_25
3163657_3163712_1_23
Title: How can you do custom sorting in LINQ with null always on the end? 
----------------------------------------

public override int Compare (T first, T second) {
    if (first == null && second == null) {
        return 0;
    }
    if (first == null) {
        return 1;
    }
    if (second == null) {
        return - 1;
    }
    return proxy.Compare (first, second);
}
----------------------------------------

public int Compare (Object x, Object y) {
    int retVal = 0;
    IComparable valX = x as IComparable;
    IComparable valY = y as IComparable;
    if (valX == null && valY == null) {
        return 0;
    }
    if (valX == null) {
        return 1;
    } else if (valY == null) {
        return - 1;
    }
    return valX.CompareTo (valY);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31656460_31656534_1_15
31656460_31656736_11_22
Title: C# Enumerable.Take with default value 
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > items, int count, T defaultValue) {
    var i = 0;
    foreach (var item in items) {
        i ++;
        yield return item;
        if (i == count)
            yield break;

    }
    while (i ++ < count) {
        yield return defaultValue;
    }
}
----------------------------------------

public static IEnumerable < T > PadTo < T > (this IEnumerable < T > source, int len, Func < T > elem) {
    int i = 0;
    foreach (var t in source) {
        i ++;
        yield return t;
    }
    while (i ++ < len)
        yield return elem ();

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31656460_31656534_1_15
31656460_31656828_28_48
Title: C# Enumerable.Take with default value 
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > items, int count, T defaultValue) {
    var i = 0;
    foreach (var item in items) {
        i ++;
        yield return item;
        if (i == count)
            yield break;

    }
    while (i ++ < count) {
        yield return defaultValue;
    }
}
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > enumerable, int count, T defaultValue) {
    int returnedCount = 0;
    foreach (T variable in enumerable) {
        returnedCount ++;
        yield return variable;
        if (returnedCount == count) {
            yield break;
        }
    }
    if (returnedCount < count) {
        for (int i = returnedCount; i < count; i ++) {
            yield return defaultValue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31656460_31656534_1_15
31656460_31656907_3_16
Title: C# Enumerable.Take with default value 
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > items, int count, T defaultValue) {
    var i = 0;
    foreach (var item in items) {
        i ++;
        yield return item;
        if (i == count)
            yield break;

    }
    while (i ++ < count) {
        yield return defaultValue;
    }
}
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > list, int totalElements) {
    List < T > finalList = list.ToList ();
    if (list.Count () < totalElements) {
        for (int i = list.Count (); i < totalElements; i ++) {
            finalList.Add (Activator.CreateInstance < T > ());
        }
    }
    return finalList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31656460_31656736_11_22
31656460_31656828_28_48
Title: C# Enumerable.Take with default value 
----------------------------------------

public static IEnumerable < T > PadTo < T > (this IEnumerable < T > source, int len, Func < T > elem) {
    int i = 0;
    foreach (var t in source) {
        i ++;
        yield return t;
    }
    while (i ++ < len)
        yield return elem ();

}
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > enumerable, int count, T defaultValue) {
    int returnedCount = 0;
    foreach (T variable in enumerable) {
        returnedCount ++;
        yield return variable;
        if (returnedCount == count) {
            yield break;
        }
    }
    if (returnedCount < count) {
        for (int i = returnedCount; i < count; i ++) {
            yield return defaultValue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31656460_31656736_11_22
31656460_31656907_3_16
Title: C# Enumerable.Take with default value 
----------------------------------------

public static IEnumerable < T > PadTo < T > (this IEnumerable < T > source, int len, Func < T > elem) {
    int i = 0;
    foreach (var t in source) {
        i ++;
        yield return t;
    }
    while (i ++ < len)
        yield return elem ();

}
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > list, int totalElements) {
    List < T > finalList = list.ToList ();
    if (list.Count () < totalElements) {
        for (int i = list.Count (); i < totalElements; i ++) {
            finalList.Add (Activator.CreateInstance < T > ());
        }
    }
    return finalList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31656460_31656828_28_48
31656460_31656907_3_16
Title: C# Enumerable.Take with default value 
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > enumerable, int count, T defaultValue) {
    int returnedCount = 0;
    foreach (T variable in enumerable) {
        returnedCount ++;
        yield return variable;
        if (returnedCount == count) {
            yield break;
        }
    }
    if (returnedCount < count) {
        for (int i = returnedCount; i < count; i ++) {
            yield return defaultValue;
        }
    }
}
----------------------------------------

public static IEnumerable < T > TakeOrDefault < T > (this IEnumerable < T > list, int totalElements) {
    List < T > finalList = list.ToList ();
    if (list.Count () < totalElements) {
        for (int i = list.Count (); i < totalElements; i ++) {
            finalList.Add (Activator.CreateInstance < T > ());
        }
    }
    return finalList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31662622_31669635_1_16
31662622_31711463_19_29
Title: C# Threading and events for pin pad device 
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

public static bool GetResultPIN () {
    TimeSpan timeout = TimeSpan.FromSeconds (30);
    System.Diagnostics.Stopwatch SW = new System.Diagnostics.Stopwatch ();
    SW.Start ();
    while (mIPAD.getStatusCode () != 0 && SW.Elapsed < timeout) {
        System.Threading.Thread.Sleep (50);
    }
    return (mIPAD.getStatusCode () == 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31696480_31697428_3_60
31696480_31697806_1_28
Title: Optimize search in a collection with Ranking 
----------------------------------------

public static IEnumerable < Counterpart > SearchWithRank (this IEnumerable < Counterpart > source, string pattern) {
    Stopwatch sw = Stopwatch.StartNew ();
    var rankedItems = new List < CounterPartRanking > ();
    foreach (Counterpart counterpart in source) {
        if ((counterpart.Code != null) && (counterpart.Code == pattern)) {
            rankedItems.AddRange (new CounterPartRanking {Rank = 1, CounterPart = counterpart});
        } else {
            if ((counterpart.Code != null) && (counterpart.Code.StartsWith (pattern))) {
                rankedItems.AddRange (new CounterPartRanking {Rank = 2, CounterPart = counterpart});
            } else {
                if ((counterpart.Code != null) && (counterpart.Code.Contains (pattern) == pattern)) {
                    rankedItems.AddRange (new CounterPartRanking {Rank = 3, CounterPart = counterpart});
                }
            }
        }
        if ((counterpart.Description != null) && (counterpart.Description.Contains (pattern) == pattern)) {
            rankedItems.AddRange (new CounterPartRanking {Rank = 4, CounterPart = counterpart});
        }
        if ((counterpart.Aliases != null) && (counterpart.Aliases == pattern)) {
            rankedItems.AddRange (new CounterPartRanking {Rank = 5, CounterPart = counterpart});
        } else {
            if ((counterpart.Aliases != null) && (counterpart.Aliases.StartsWith (pattern))) {
                rankedItems.AddRange (new CounterPartRanking {Rank = 6, CounterPart = counterpart});
            } else {
                if ((counterpart.Aliases != null) && (counterpart.Aliases.Contains (pattern))) {
                    rankedItems.AddRange (new CounterPartRanking {Rank = 7, CounterPart = counterpart});
                }
            }
        }
    }
    sw.Stop ();
    Debug.WriteLine ("Time elapsed {0} for {1}", sw.Elapsed, pattern);
    var items = rankedItems.OrderBy (x = > x.Rank).Select (x = > x.CounterPart);
    var distinct = items.Distinct ();
    return distinct;
}
----------------------------------------

public static IEnumerable < Counterpart > SearchWithRank (this IEnumerable < Counterpart > source, string pattern) {
    var sources = new [] {source.Where (x = > x.Code == pattern), source.Where (x = > x.Code.StartsWith (pattern)), source.Where (x = > x.Code.Contains (pattern)), source.Where (x = > x.Description.Contains (pattern)), source.Where (x = > x.Aliases != null && x.Aliases.Any (y = > y.Description == pattern)), source.Where (x = > x.Aliases != null && x.Aliases.Any (y = > y.Description.StartsWith (pattern))), source.Where (x = > x.Aliases != null && x.Aliases.Any (y = > y.Description.Contains (pattern))),};
    Stopwatch sw = Stopwatch.StartNew ();
    var rankedItems = sources.SelectMany ((x, n) = > x.Select (y = > new CounterPartRanking {Rank = n + 1, CounterPart = y})).ToList ();
    sw.Stop ();
    Debug.WriteLine ("Time elapsed {0} for {1}", sw.Elapsed, pattern);
    var items = rankedItems.OrderBy (x = > x.Rank).Select (x = > x.CounterPart);
    var distinct = items.Distinct ();
    return distinct;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31731825_31731924_1_12
31731825_31732069_14_26
Title: Using a setter as a parameter in C#? (Maybe with delegate?) 
----------------------------------------

void TestSetter < T > (Func < T > getter, Action < T > setter, T value) {
    try {
        setter (value);
        PassIfTrue (EqualityComparer < T >.Default.Equals (getter (), value));
    }
    catch (Exception e) {
        Fail (e.Message);
    }
}
----------------------------------------

public static void TestSetter < T > (Action setMethod, Func < T > getMethod, T expectedVal) {
    try {
        setMethod ();
        T actual = getMethod ();
        PassIfTrue (expectedVal.Equals (actual));
    }
    catch (Exception ex) {
        Fail (ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31731825_31731924_1_12
31731825_31732069_1_12
Title: Using a setter as a parameter in C#? (Maybe with delegate?) 
----------------------------------------

void TestSetter < T > (Func < T > getter, Action < T > setter, T value) {
    try {
        setter (value);
        PassIfTrue (EqualityComparer < T >.Default.Equals (getter (), value));
    }
    catch (Exception e) {
        Fail (e.Message);
    }
}
----------------------------------------

public static void TestGetter < T > (Func < T > method, T expectedVal) {
    try {
        T actual = method ();
        PassIfTrue (expectedVal.Equals (actual));
    }
    catch (Exception ex) {
        Fail (ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31731825_31732069_14_26
31731825_31732069_1_12
Title: Using a setter as a parameter in C#? (Maybe with delegate?) 
----------------------------------------

public static void TestSetter < T > (Action setMethod, Func < T > getMethod, T expectedVal) {
    try {
        setMethod ();
        T actual = getMethod ();
        PassIfTrue (expectedVal.Equals (actual));
    }
    catch (Exception ex) {
        Fail (ex.Message);
    }
}
----------------------------------------

public static void TestGetter < T > (Func < T > method, T expectedVal) {
    try {
        T actual = method ();
        PassIfTrue (expectedVal.Equals (actual));
    }
    catch (Exception ex) {
        Fail (ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3176116_3176138_1_16
3176116_3176250_1_28
Title: Encode integer as variable-length big-endian byte-array 
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    int length = 0;
    int valueCopy = value;
    while (valueCopy != 0) {
        valueCopy > >= 8;
        length ++;
    }
    for (int i = 0; i < length; i ++) {
        buffer [index + length - i - 1] = (byte) value;
        value > >= 8;
    }
    return length;
}
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31778184_31778271_1_36
31778184_31778295_6_30
Title: how to check if an array has the same number 
----------------------------------------

static void Main (string [] args) {
    int userinput = Convert.ToInt16 (Console.ReadLine ());
    Random Dice = new Random ();
    int [] numberofdice = new int [userinput + 1];
    while (true) {
        var output = string.Empty;
        for (int i = 0; i < userinput; i ++) {
            numberofdice [i] = Dice.Next (1, 7);
            output += numberofdice [i];
        }
        Console.WriteLine (output);
        bool same = true;
        int first = numberofdice [0];
        for (int i = 1; i < userinput; i ++) {
            if (numberofdice [i] != first) {
                same = false;
                break;
            }
        }
        if (same)
            break;

    }
}
----------------------------------------

public static void Main () {
    Console.Write ("Enter number of columns: ");
    int userinput = Convert.ToInt16 (Console.ReadLine ());
    int [] columns = new int [userinput];
    Random Dice = new Random ();
    bool search = true;
    DateTime start = DateTime.Now;
    while (search) {
        for (int i = 0; i < columns.Length; i ++) {
            columns [i] = Dice.Next (1, 7);
        }
        if (columns.Distinct ().Count () == 1) {
            Console.WriteLine ("All columns match with the value of {0}", columns [0]);
            Console.WriteLine ("It took {0} to get all columns to match", DateTime.Now.Subtract (start));
            search = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31796689_31812179_40_54
31796689_38155562_13_25
Title: "How to write a ""filter"" stream wrapper for XML?" 
----------------------------------------

public override int Read (char [] buffer, int index, int count) {
    try {
        var rVal = base.Read (buffer, index, count);
        var filteredBuffer = buffer.Select (x = > XmlConvert.IsXmlChar (x) ? x : ' ').ToArray ();
        Buffer.BlockCopy (filteredBuffer, 0, buffer, 0, count);
        return rVal;
    }
    catch (Exception ex) {
        this._logger.Error ("Read(char[], int, int)", ex);
        throw;
    }
}
----------------------------------------

public override int Read (char [] buffer, int index, int count) {
    var ret = base.Read (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';

    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31796689_31812179_83_97
31796689_38155562_27_39
Title: "How to write a ""filter"" stream wrapper for XML?" 
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    try {
        var rVal = base.ReadBlock (buffer, index, count);
        var filteredBuffer = buffer.Select (x = > XmlConvert.IsXmlChar (x) ? x : ' ').ToArray ();
        Buffer.BlockCopy (filteredBuffer, 0, buffer, 0, count);
        return rVal;
    }
    catch (Exception ex) {
        this._logger.Error ("ReadBlock(char[], in, int)", ex);
        throw;
    }
}
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    var ret = base.ReadBlock (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';

    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31845216_31845350_1_13
31845216_31845444_1_40
Title: Code change vb.net to c# 
----------------------------------------

private byte [] RCON_Command (string command, byte serverdata) {
    byte [] packet = new byte [command.Length + 13];
    packet [0] = (byte) (command.Length + 9);
    packet [4] = 0;
    packet [8] = serverdata;
    for (int i = 0; i < command.Length; i ++) {
        packet [12 + i] = System.Text.Encoding.UTF8.GetBytes (command) [i];
    }
    return packet;
}
----------------------------------------

private byte [] RCON_Command (string Command, int ServerData) {
    byte [] commandBytes = System.Text.Encoding.Default.GetBytes (Command);
    byte [] Packet = new byte [13 + commandBytes.Length + 1];
    for (int i = 0; i < Packet.Length; i ++) {
        Packet [i] = (byte) 0;
    }
    int index = 0;
    byte [] bytes = BitConverter.GetBytes (Command.Length + 9);
    foreach (var byt in bytes) {
        Packet [index ++] = byt;
    }
    bytes = BitConverter.GetBytes ((int) 0);
    foreach (var byt in bytes) {
        Packet [index ++] = byt;
    }
    bytes = BitConverter.GetBytes (ServerData);
    foreach (var byt in bytes) {
        Packet [index ++] = byt;
    }
    foreach (var byt in commandBytes) {
        Packet [index ++] = byt;
    }
    return Packet;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31866767_31866821_14_25
31866767_31866971_22_37
Title: My max-min value of array code not working 
----------------------------------------

public int Max (int [] numbers) {
    int m = numbers [0];
    for (int i = 0; i < numbers.Length; i ++) {
        if (m < numbers [i]) {
            m = numbers [i];
        }
    }
    return m;
}
----------------------------------------

public static int Max (int [] numbers) {
    int m = numbers [0];
    for (int i = 1; i < numbers.Length; i ++) {
        if (m < numbers [i]) {
            m = numbers [i];
        }
    }
    return m;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31866767_31866821_1_12
31866767_31866971_4_20
Title: My max-min value of array code not working 
----------------------------------------

public int Min (int [] numbers) {
    int m = numbers [0];
    for (int i = 0; i < numbers.Length; i ++) {
        if (m > numbers [i]) {
            m = numbers [i];
        }
    }
    return m;
}
----------------------------------------

public static int Min (int [] numbers) {
    int m = numbers [0];
    for (int i = 1; i < numbers.Length; i ++) {
        if (m > numbers [i]) {
            m = numbers [i];
        }
    }
    return m;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31887762_31887827_1_12
31887762_31888005_1_14
Title: c# string to variable 
----------------------------------------

public DataTable Add_new (List < String > T) {
    OleDbParameter [] param = new OleDbParameter [10];
    for (int i = 1; i < 11; i ++) {
        param [i - 1] = new OleDbParameter (i.ToString (), OleDbType.VarChar);
        param [i - 1].Value = (T [i - 1]);
    }
    DataTable dt = new DataTable ();
    dt = DAL.selectdata ("Add_Code", param);
    return dt;
}
----------------------------------------

public DataTable Add_new (params string [] t) {
    OleDbParameter [] param = new OleDbParameter [10];
    for (int i = 0; i <= 10; i ++) {
        var paramName = String.Format ("t{0}", i + 1);
        param [i] = new OleDbParameter (paramName, OleDbType.VarChar);
        param [i].Value = (t [i]);
    }
    DataTable dt = new DataTable ();
    dt = DAL.selectdata ("Add_Code", param);
    return dt;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31887762_31887839_1_13
31887762_31888005_1_14
Title: c# string to variable 
----------------------------------------

public DataTable Add_new (string t1, string t2, string t3, string t4, string t5, string t6, string t7, string t8, string t9, string t10) {
    string [] t = {t1, t2, t3, t4, t5, t6, t7, t8, t9, t10};
    OleDbParameter [] param = new OleDbParameter [10];
    for (int i = 1; i < 11; i ++) {
        param [i - 1] = new OleDbParameter (i.ToString (), OleDbType.VarChar);
        param [i - 1].Value = (t [i - 1]);
    }
    DataTable dt = new DataTable ();
    dt = DAL.selectdata ("Add_Code", param);
    return dt;
}
----------------------------------------

public DataTable Add_new (params string [] t) {
    OleDbParameter [] param = new OleDbParameter [10];
    for (int i = 0; i <= 10; i ++) {
        var paramName = String.Format ("t{0}", i + 1);
        param [i] = new OleDbParameter (paramName, OleDbType.VarChar);
        param [i].Value = (t [i]);
    }
    DataTable dt = new DataTable ();
    dt = DAL.selectdata ("Add_Code", param);
    return dt;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31930308_31930411_3_24
31930308_31940000_20_39
Title: How can I extract part of an IEnumerable based on known elements of the collection? 
----------------------------------------

public static IEnumerable < TData > InBetween < TData > (this IEnumerable < TData > Target, TData StartItem, TData EndItem) {
    var Comparer = EqualityComparer < TData >.Default;
    var FetchData = false;
    var StopIt = false;
    foreach (var Item in Target) {
        if (StopIt)
            break;

        if (Comparer.Equals (Item, StartItem))
            FetchData = true;

        if (Comparer.Equals (Item, EndItem))
            StopIt = true;

        if (FetchData)
            yield return Item;

    }
    yield break;
}
----------------------------------------

public static IEnumerable < T > GetRangeUsingIterator < T > (this IEnumerable < T > source, Func < T, bool > isStart, Func < T, bool > isStop) {
    using (var iterator = source.GetEnumerator ())
    {
        while (iterator.MoveNext ()) {
            if (isStart (iterator.Current)) {
                yield return iterator.Current;
                break;
            }
        }
        while (iterator.MoveNext ()) {
            yield return iterator.Current;
            if (isStop (iterator.Current))
                break;

        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31932300_31932358_1_17
31932300_31932702_1_23
Title: use loop to determine if number is valid c# 
----------------------------------------

static void Main (string [] args) {
    int x = 0;
    do
        {
            Console.WriteLine ("Enter number between 2 and 12. (0 to exit)");
            x = int.Parse (Console.ReadLine ());
            if (x >= 2 && x <= 12) {
                Console.WriteLine ("{0} is good", x);
            } else if (x != 0) {
                Console.WriteLine ("{0} is not valid", x);
            }
        } while (x != 0);
}
----------------------------------------

static void Main (string [] args) {
    while (true) {
        Console.WriteLine ("Enter number between 2 and 12");
        int x = int.Parse (Console.ReadLine ());
        if (! Enumerable.Range (1, 12).Contains (x)) {
            Console.WriteLine ("{0} Its not Good\n", x);
        } else {
            Console.WriteLine ("{0} Its  Good\n", x);
            break;
        }
    }
    Console.WriteLine ("Press any key to exit..");
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31954129_31954587_6_22
31954129_31955207_5_23
Title: Get sub string or string tokenize from a large string 
----------------------------------------

public static void Main (string [] args) {
    var sourcestring = @"(Project in (""CI"") and Status in (""Open"") and issueType in (""Action Item"")) or issueKey = ""GR L-1"" order by Created asc";
    var mc = Regex.Matches (sourcestring, @"\(""(?<word>[A-Za-z0-9\s]+)""\)");
    foreach (Match m in mc) {
        foreach (Capture cap in m.Groups ["word"].Captures) {
            Console.WriteLine (cap.Value);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

public static void Main () {
    string input = @"(Project in (""CI"") and Status in (""Open"") and issueType in (""Action Item"")) or issueKey = ""GR L-1"" order by Created asc";
    int startIndex = input.IndexOf ("(\"", 0);
    while (startIndex > - 1) {
        int endIndex = input.IndexOf ("\")", startIndex);
        Console.WriteLine (input.Substring (startIndex + 2, endIndex - startIndex - 2));
        startIndex = input.IndexOf ("(\"", endIndex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31955816_31955915_1_5
31955816_31955915_7_13
Title: C# lambda behind the scenes 
----------------------------------------

public static IEnumerable < TResult > Select < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, int, TResult > selector) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    if (selector == null)
        throw Error.ArgumentNull ("selector");

    return SelectIterator < TSource, TResult > (source, selector);
}
----------------------------------------

static IEnumerable < TResult > SelectIterator < TSource, TResult > (IEnumerable < TSource > source, Func < TSource, int, TResult > selector) {
    int index = - 1;
    foreach (TSource element in source) {
        checked {
            index ++;
        }
        yield return selector (element, index);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31966459_31967086_1_24
31966459_31967086_26_44
Title: How to prepend AES ciphertext with IV 
----------------------------------------

private void Transform (string inputFileName, string outputFileName, bool encrypt) {
    using (var source = new FileStream (inputFileName, FileMode.Open, FileAccess.Read, FileShare.Read))
    using (var destination = new FileStream (outputFileName, FileMode.CreateNew, FileAccess.Write, FileShare.None))
    {
        ICryptoTransform cryptoTransform;
        if (encrypt) {
            destination.Write (AES.IV, 0, AES.BlockSize / 8);
            cryptoTransform = AES.CreateEncryptor (AES.Key, AES.IV);
        } else {
            byte [] bytes = new byte [AES.BlockSize / 8];
            source.Read (bytes, 0, bytes.Length);
            AES.IV = bytes;
            cryptoTransform = AES.CreateDecryptor (AES.Key, AES.IV);
        }
        Transform (source, destination, cryptoTransform, encrypt);
    }}
----------------------------------------

private static void Transform (Stream inputStream, Stream outputStream, ICryptoTransform transform, bool encrypt) {
    using (var cryptoStream = new CryptoStream (encrypt ? outputStream : inputStream, transform, encrypt ? CryptoStreamMode.Write : CryptoStreamMode.Read))
    {
        if (encrypt) {
            inputStream.CopyTo (cryptoStream);
        } else {
            cryptoStream.CopyTo (outputStream);
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31997707_31998071_1_11
31997707_31998115_1_12
Title: Rounding value to nearest power of two 
----------------------------------------

int ToNearest (int val, int pow) {
    if (pow < 0)
        return 0;

    if (pow == 0)
        return val;

    if (val & (1 << (pow - 1))) {
        return ((val > > pow) + 1) << pow;
    } else {
        return (val > > pow) << pow;
    }
}
----------------------------------------

int ToNearest (value x) {
    int num = 0;
    for (int i = 1; i < 65; i ++) {
        int cur = Math.Abs (value - 0 << i);
        if (Math.Abs (value - 0 << i) < Math.Abs (value - num))
            num = cur;
        else if (num != 0)
            break;

    }
    return num;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31998105_31998580_22_40
31998105_31998580_3_20
Title: Is it ok to use generic method for web api? 
----------------------------------------

public static T AuthorizationContentSerializedJsonData < T > (string url) where T : new () {
    string jsonData = null;
    try {
        var httpRequest = (HttpWebRequest) WebRequest.Create (url);
        var response = httpRequest.GetResponse ();
        Stream receiveStream = response.GetResponseStream ();
        var readStream = new StreamReader (receiveStream, Encoding.UTF8);
        jsonData = readStream.ReadToEnd ();
        response.Close ();
    }
    catch (Exception ex) {
        throw ex;
    }
    return ! string.IsNullOrEmpty (jsonData) ? JsonConvert.DeserializeObject < T > (jsonData) : new T ();
}
----------------------------------------

public static T DownloadSerializedJsonData < T > (string url) where T : new () {
    var contentType = ConfigurationManager.AppSettings ["ContentType"];
    using (var webClient = new WebClient ())
    {
        webClient.Headers.Add ("Content-Type", contentType);
        var jsonData = string.Empty;
        try {
            jsonData = webClient.DownloadString (url);
        }
        catch (Exception ex) {
            throw ex;
        }
        return ! string.IsNullOrEmpty (jsonData) ? JsonConvert.DeserializeObject < T > (jsonData) : new T ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32004229_32004500_8_19
32004229_32005585_1_14
Title: How to extract contact numbers from long description field? 
----------------------------------------

static void Main () {
    Regex regex = new Regex (@"\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*");
    Match match = regex.Match ("sgsdgsdgs 123-456-7890 sdgsdgs (123) 456-7890 sdgsdgsdg 123 456 7890 sdgsdgsdg 123.456.7890 sdfsdfsdfs +91 (123) 456-7890");
    List < string > list = new List < string > ();
    while (match.Success) {
        list.Add (match.Value);
        match = match.NextMatch ();
    }
    list.ForEach (Console.WriteLine);
}
----------------------------------------

static void Main (string [] args) {
    string txt = "sgsdgsdgs 123-456-7890 sdgsdgs (123) 456-7890 sdgsdgsdg 123 456 7890 sdgsdgsdg 123.456.7890 sdfsdfsdfs +91 (123) 456-7890";
    Regex regex = new Regex (@"\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*");
    List < string > list = new List < string > ();
    foreach (var item in regex.Matches (txt)) {
        list.Add (item.ToString ());
        Console.WriteLine (item);
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
320089_35893291_17_49
320089_4379965_8_55
Title: How do I bind a WPF DataGrid to a variable number of columns? 
----------------------------------------

private static void BindableColumnsPropertyChanged (DependencyObject source, DependencyPropertyChangedEventArgs e) {
    DataGrid dataGrid = source as DataGrid;
    ObservableCollection < DataGridColumn > oldColumns = e.OldValue as ObservableCollection < DataGridColumn >;
    if (oldColumns != null) {
        dataGrid.Columns.Clear ();
        NotifyCollectionChangedEventHandler h;
        if (_handlers.TryGetValue (dataGrid, out h)) {
            oldColumns.CollectionChanged -= h;
            _handlers.Remove (dataGrid);
        }
    }
    ObservableCollection < DataGridColumn > newColumns = e.NewValue as ObservableCollection < DataGridColumn >;
    dataGrid.Columns.Clear ();
    if (newColumns != null) {
        foreach (DataGridColumn column in newColumns)
            dataGrid.Columns.Add (column);

        NotifyCollectionChangedEventHandler h = (_, ne) = > OnCollectionChanged (ne, dataGrid);
        _handlers [dataGrid] = h;
        newColumns.CollectionChanged += h;
    }
}
----------------------------------------

private static void BindableColumnsPropertyChanged (DependencyObject source, DependencyPropertyChangedEventArgs e) {
    DataGrid dataGrid = source as DataGrid;
    ObservableCollection < DataGridColumn > columns = e.NewValue as ObservableCollection < DataGridColumn >;
    dataGrid.Columns.Clear ();
    if (columns == null) {
        return;
    }
    foreach (DataGridColumn column in columns) {
        dataGrid.Columns.Add (column);
    }
    columns.CollectionChanged += (sender, e2) = > {
        NotifyCollectionChangedEventArgs ne = e2 as NotifyCollectionChangedEventArgs;
        if (ne.Action == NotifyCollectionChangedAction.Reset) {
            dataGrid.Columns.Clear ();
            foreach (DataGridColumn column in ne.NewItems) {
                dataGrid.Columns.Add (column);
            }
        } else if (ne.Action == NotifyCollectionChangedAction.Add) {
            foreach (DataGridColumn column in ne.NewItems) {
                dataGrid.Columns.Add (column);
            }
        } else if (ne.Action == NotifyCollectionChangedAction.Move) {
            dataGrid.Columns.Move (ne.OldStartingIndex, ne.NewStartingIndex);
        } else if (ne.Action == NotifyCollectionChangedAction.Remove) {
            foreach (DataGridColumn column in ne.OldItems) {
                dataGrid.Columns.Remove (column);
            }
        } else if (ne.Action == NotifyCollectionChangedAction.Replace) {
            dataGrid.Columns [ne.NewStartingIndex] = ne.NewItems [0] as DataGridColumn;
        }
    };
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3203447_3203552_1_21
3203447_3203620_1_20
Title: How can I avoid code duplication 
----------------------------------------

public IList < T > DoYourThing < T > (IList < T > items, IList < T > currentItems, Project project) where T : CommonBaseType {
    if (currentItems != null) {
        foreach (var existingItem in currentItems) {
            if (items.Contains (existingItem.Name))
                items.Remove (existingItem.Name);
            else
                existingItems.Delete (Services.UserServices.User);

        }
        foreach (string item in items) {
            T newItem = Activator.CreateInstance (typeof (T), new object [] {project, item.ToString ()}) as T;
            newItem.Project = project;
            newItem.Save ();
        }
    }
    return currentItems;
}
----------------------------------------

public void SaveNewItems < T > (IList < string > newList, IList < T > currentList, string project) where T : new (), IStoreableItem {
    var toAdd = from itemName in newList
        where ! currentList.Contains (i = > i.Name = itemName)
        select new T {Name = itemName, Project = project};
    var toDelete = from item in currentList
        where ! newList.Contains (item.Name)
        select item;
    toAdd.ToList ().ForEach (item = > item.Save ());
    toDelete.ToList ().ForEach (item = > item.Delete ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
320636_6692286_1_26
320636_6692286_45_58
Title: How to get efficient Sql Server deadlock handling in C# with ADO? 
----------------------------------------

private static T Retry < T > (Func < T > func) {
    int count = 3;
    TimeSpan delay = TimeSpan.FromSeconds (5);
    while (true) {
        try {
            return func ();
        }
        catch (SqlException e) {
            -- count;
            if (count <= 0)
                throw;

            if (e.Number == 1205)
                _log.Debug ("Deadlock, retrying", e);
            else if (e.Number == - 2)
                _log.Debug ("Timeout, retrying", e);
            else
                throw;

            Thread.Sleep (delay);
        }
    }
}
----------------------------------------

protected static T GetValue < T > (string connectionString, string commandString) {
    _log.DebugFormat ("SQL Scalar Query \"{0}\" on {1}", commandString, connectionString);
    return Retry (() = > {
        using (SqlConnection connection = new SqlConnection (connectionString))
        using (SqlCommand command = new SqlCommand (commandString, connection))
        {
            object value = command.ExecuteScalar ();
            if (value is DBNull)
                return default (T);

            return (T) value;
        }});
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32070934_32071027_12_32
32070934_32071042_1_15
Title: What is the advantage of using Path.Combine over concatenating strings with '+'? 
----------------------------------------

private static string CombineNoChecks (string path1, string path2) {
    if (path2.Length == 0) {
        return path1;
    }
    if (path1.Length == 0) {
        return path2;
    }
    if (Path.IsPathRooted (path2)) {
        return path2;
    }
    char c = path1 [path1.Length - 1];
    if (c != Path.DirectorySeparatorChar && c != Path.AltDirectorySeparatorChar && c != Path.VolumeSeparatorChar) {
        return path1 + Path.DirectorySeparatorChar + path2;
    }
    return path1 + path2;
}
----------------------------------------

private static String CombineNoChecks (String path1, String path2) {
    if (path2.Length == 0)
        return path1;

    if (path1.Length == 0)
        return path2;

    if (IsPathRooted (path2))
        return path2;

    char ch = path1 [path1.Length - 1];
    if (ch != DirectorySeparatorChar && ch != AltDirectorySeparatorChar && ch != VolumeSeparatorChar)
        return path1 + DirectorySeparatorCharAsString + path2;

    return path1 + path2;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32079930_32080018_1_12
32079930_32080182_1_16
Title: C# - How to use a voided method in an if statement 
----------------------------------------

private static void SendEmail (string emailBody, string emailSubject, out bool isSent) {
    Email email = new Email ();
    email.To.Add ("POvermyer@TandT.com");
    email.Subject = emailSubject;
    email.Body = emailBody;
    try {
        email.Send ();
    }
    catch (Exception e) {
        isSent = false;
    }
    isSent = true;
}
----------------------------------------

private static bool SendEmail (string emailBody, string emailSubject) {
    try {
        Email email = new Email ();
        email.To.Add ("POvermyer@TandT.com");
        email.Subject = emailSubject;
        email.Body = emailBody;
        email.Send ();
        return true;
    }
    catch (Exception ex) {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3210010_16852411_6_23
3210010_3210034_6_31
Title: How to calculate free disk space? 
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

public static void Main () {
    DriveInfo [] allDrives = DriveInfo.GetDrives ();
    foreach (DriveInfo d in allDrives) {
        Console.WriteLine ("Drive {0}", d.Name);
        Console.WriteLine ("  File type: {0}", d.DriveType);
        if (d.IsReady == true) {
            Console.WriteLine ("  Volume label: {0}", d.VolumeLabel);
            Console.WriteLine ("  File system: {0}", d.DriveFormat);
            Console.WriteLine ("  Available space to current user:{0, 15} bytes", d.AvailableFreeSpace);
            Console.WriteLine ("  Total available space:          {0, 15} bytes", d.TotalFreeSpace);
            Console.WriteLine ("  Total size of drive:            {0, 15} bytes ", d.TotalSize);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
32114308_32115599_8_22
32114308_32116222_1_13
Title: Weird performance increase in simple benchmark 
----------------------------------------

public static void Test1 (bool warmup) {
    Point a = new Point (1, 1), b = new Point (1, 1);
    Stopwatch sw = Stopwatch.StartNew ();
    for (int i = 0; i < ITERATIONS; i ++)
        a = AddByVal (a, b);

    sw.Stop ();
    if (! warmup) {
        Console.WriteLine ("Result: x={0} y={1}, Time elapsed: {2} ms", a.X, a.Y, sw.ElapsedMilliseconds);
    }
}
----------------------------------------

static void Test1 () {
    Point a = new Point (1, 1), b = new Point (1, 1);
    var f = Stopwatch.Frequency;
    var sw = Stopwatch.StartNew ();
    for (int i = 0; i < ITERATIONS; i ++)
        a = AddByVal (a, b);

    sw.Stop ();
    Console.WriteLine ("Test1: x={0} y={1}, Time elapsed: {2} ms", a.X, a.Y, sw.ElapsedMilliseconds);
}
----------------------------------------

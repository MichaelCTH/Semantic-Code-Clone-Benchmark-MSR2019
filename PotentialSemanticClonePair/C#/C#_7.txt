$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16085516_16086289_25_36
16085516_16086289_6_19
Title: Generic image class with generic data type in C# 
----------------------------------------

IColor < U > IColor < T >.FromColor < U > (IColor < U > color) {
    if (null == color)
        return default (Bgr < U >);

    if (color is Bgr)
        return (Bgr < U >) (color as Bgr).Value;

    if (color is Bgr < U >)
        return color;

    throw new NotImplementedException ();
}
----------------------------------------

public IColor < T > FromColor < T > (IColor < T > color) {
    if (null == color)
        return default (Bgr < T >);

    if (color is Bgr)
        return color;

    if (color is Bgr < T >)
        return new Bgr {Value = color} as IColor < T >;

    throw new NotImplementedException ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1609153_21156127_15_29
1609153_21156127_1_13
Title: How to do a Bulk Insert -- Linq to Entities 
----------------------------------------

public static DataTable ConvertToDataTable < T > (IList < T > data) {
    PropertyDescriptorCollection properties = TypeDescriptor.GetProperties (typeof (T));
    DataTable table = new DataTable ();
    foreach (PropertyDescriptor prop in properties)
        table.Columns.Add (prop.Name, Nullable.GetUnderlyingType (prop.PropertyType) ?? prop.PropertyType);

    foreach (T item in data) {
        DataRow row = table.NewRow ();
        foreach (PropertyDescriptor prop in properties)
            row [prop.Name] = prop.GetValue (item) ?? DBNull.Value;

        table.Rows.Add (row);
    }
    return table;
}
----------------------------------------

public static void InsertData < T > (List < T > list, string TabelName) {
    DataTable dt = new DataTable ("MyTable");
    clsBulkOperation blk = new clsBulkOperation ();
    dt = ConvertToDataTable (list);
    ConfigurationManager.OpenExeConfiguration (ConfigurationUserLevel.PerUserRoamingAndLocal);
    using (SqlBulkCopy bulkcopy = new SqlBulkCopy (ConfigurationManager.ConnectionStrings ["SchoolSoulDataEntitiesForReport"].ConnectionString))
    {
        bulkcopy.BulkCopyTimeout = 660;
        bulkcopy.DestinationTableName = TabelName;
        bulkcopy.WriteToServer (dt);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16101157_16102430_1_18
16101157_16102485_1_16
Title: How to parse command line arguments 
----------------------------------------

public static void Main (string [] args) {
    List < string > Settings = new List < string > ();
    Console.WriteLine ("parameter qty = {0}", args.Length);
    for (int i = 0; i < args.Length; i ++) {
        Console.WriteLine ("Arg[{0}] = [{1}]", i, args [i]);
        if (i > 0) {
            Setting.Add (args [i]);
        }
    }
    foreach (string setting in Settings) {
    }
}
----------------------------------------

public static void Main (string [] args) {
    string parsedPath = null;
    Dictionary < string, string > parsedValues = new Dictionary < string, string > ();
    var set = new OptionSet () {{"p=", "the project path", v = > parsedPath = v}, {"s=", "a setting", (m, v) = > {
        parsedValues.Add (m, v);
    }},};
    set.Parse (args);
    Console.WriteLine (parsedPath ?? "<NULL>");
    foreach (var keyValuePair in parsedValues) {
        Console.WriteLine (keyValuePair.Key + "::::" + keyValuePair.Value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16101157_16102430_1_18
16101157_25951606_3_27
Title: How to parse command line arguments 
----------------------------------------

public static void Main (string [] args) {
    List < string > Settings = new List < string > ();
    Console.WriteLine ("parameter qty = {0}", args.Length);
    for (int i = 0; i < args.Length; i ++) {
        Console.WriteLine ("Arg[{0}] = [{1}]", i, args [i]);
        if (i > 0) {
            Setting.Add (args [i]);
        }
    }
    foreach (string setting in Settings) {
    }
}
----------------------------------------

static void Main (string [] args) {
    string cmd = "car.exe -ip 1.18.4.156 -port 123";
    string hostname = "localhost";
    string port = "5505";
    string [] array = cmd.Split (' ');
    int hostnameIndex = Array.FindIndex (array, key = > key == "-ip");
    int portIndex = Array.FindLastIndex (array, key = > key == "-port");
    if (hostnameIndex != - 1) {
        hostname = array [hostnameIndex + 1];
    }
    if (portIndex != - 1) {
        port = array [portIndex + 1];
    }
    Console.WriteLine ("ip :" + hostname);
    Console.WriteLine ("port :" + port);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16101157_16102485_1_16
16101157_25951606_3_27
Title: How to parse command line arguments 
----------------------------------------

public static void Main (string [] args) {
    string parsedPath = null;
    Dictionary < string, string > parsedValues = new Dictionary < string, string > ();
    var set = new OptionSet () {{"p=", "the project path", v = > parsedPath = v}, {"s=", "a setting", (m, v) = > {
        parsedValues.Add (m, v);
    }},};
    set.Parse (args);
    Console.WriteLine (parsedPath ?? "<NULL>");
    foreach (var keyValuePair in parsedValues) {
        Console.WriteLine (keyValuePair.Key + "::::" + keyValuePair.Value);
    }
}
----------------------------------------

static void Main (string [] args) {
    string cmd = "car.exe -ip 1.18.4.156 -port 123";
    string hostname = "localhost";
    string port = "5505";
    string [] array = cmd.Split (' ');
    int hostnameIndex = Array.FindIndex (array, key = > key == "-ip");
    int portIndex = Array.FindLastIndex (array, key = > key == "-port");
    if (hostnameIndex != - 1) {
        hostname = array [hostnameIndex + 1];
    }
    if (portIndex != - 1) {
        port = array [portIndex + 1];
    }
    Console.WriteLine ("ip :" + hostname);
    Console.WriteLine ("port :" + port);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16110936_16142791_31_96
16110936_23842609_106_212
Title: Read other process current directory in C# 
----------------------------------------

private static string GetProcessParametersString (int processId, int offset) {
    IntPtr handle = OpenProcess (PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, false, processId);
    if (handle == IntPtr.Zero)
        throw new Win32Exception (Marshal.GetLastWin32Error ());

    int processParametersOffset = Environment.Is64BitOperatingSystem ? 0x20 : 0x10;
    try {
        if (Environment.Is64BitOperatingSystem && ! Environment.Is64BitProcess) {
            PROCESS_BASIC_INFORMATION_WOW64 pbi = new PROCESS_BASIC_INFORMATION_WOW64 ();
            int hr = NtWow64QueryInformationProcess64 (handle, 0, ref pbi, Marshal.SizeOf (pbi), IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            long pp = 0;
            hr = NtWow64ReadVirtualMemory64 (handle, pbi.PebBaseAddress + processParametersOffset, ref pp, Marshal.SizeOf (pp), IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            UNICODE_STRING_WOW64 us = new UNICODE_STRING_WOW64 ();
            hr = NtWow64ReadVirtualMemory64 (handle, pp + offset, ref us, Marshal.SizeOf (us), IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            if ((us.Buffer == 0) || (us.Length == 0))
                return null;

            string s = new string ('\0', us.Length / 2);
            hr = NtWow64ReadVirtualMemory64 (handle, us.Buffer, s, us.Length, IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            return s;
        } else {
            PROCESS_BASIC_INFORMATION pbi = new PROCESS_BASIC_INFORMATION ();
            int hr = NtQueryInformationProcess (handle, 0, ref pbi, Marshal.SizeOf (pbi), IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            IntPtr pp = new IntPtr ();
            if (! ReadProcessMemory (handle, pbi.PebBaseAddress + processParametersOffset, ref pp, new IntPtr (Marshal.SizeOf (pp)), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            UNICODE_STRING us = new UNICODE_STRING ();
            if (! ReadProcessMemory (handle, pp + offset, ref us, new IntPtr (Marshal.SizeOf (us)), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            if ((us.Buffer == IntPtr.Zero) || (us.Length == 0))
                return null;

            string s = new string ('\0', us.Length / 2);
            if (! ReadProcessMemory (handle, us.Buffer, s, new IntPtr (us.Length), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            return s;
        }
    }
    finally {
        CloseHandle (handle);
    }
}
----------------------------------------

private static string GetProcessParametersString (int processId, PEB_OFFSET Offset) {
    IntPtr handle = OpenProcess (PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, false, processId);
    if (handle == IntPtr.Zero)
        throw new Win32Exception (Marshal.GetLastWin32Error ());

    bool IsWow64Process = Is64BitChecker.InternalCheckIsWow64 ();
    bool IsTargetWow64Process = Is64BitChecker.GetProcessIsWow64 (handle);
    bool IsTarget64BitProcess = Is64BitOperatingSystem && ! IsTargetWow64Process;
    long offset = 0;
    long processParametersOffset = IsTarget64BitProcess ? 0x20 : 0x10;
    switch (Offset) {
        case PEB_OFFSET.CurrentDirectory :
            offset = IsTarget64BitProcess ? 0x38 : 0x24;
            break;
        case PEB_OFFSET.CommandLine : default :
            return null;
    }
    try {
        long pebAddress = 0;
        if (IsTargetWow64Process) {
            IntPtr peb32 = new IntPtr ();
            int hr = NtQueryInformationProcess (handle, (int) PROCESSINFOCLASS.ProcessWow64Information, ref peb32, IntPtr.Size, IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            pebAddress = peb32.ToInt64 ();
            IntPtr pp = new IntPtr ();
            if (! ReadProcessMemory (handle, new IntPtr (pebAddress + processParametersOffset), ref pp, new IntPtr (Marshal.SizeOf (pp)), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            UNICODE_STRING_32 us = new UNICODE_STRING_32 ();
            if (! ReadProcessMemory (handle, new IntPtr (pp.ToInt64 () + offset), ref us, new IntPtr (Marshal.SizeOf (us)), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            if ((us.Buffer == 0) || (us.Length == 0))
                return null;

            string s = new string ('\0', us.Length / 2);
            if (! ReadProcessMemory (handle, new IntPtr (us.Buffer), s, new IntPtr (us.Length), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            return s;
        } else if (IsWow64Process) {
            PROCESS_BASIC_INFORMATION_WOW64 pbi = new PROCESS_BASIC_INFORMATION_WOW64 ();
            int hr = NtWow64QueryInformationProcess64 (handle, (int) PROCESSINFOCLASS.ProcessBasicInformation, ref pbi, Marshal.SizeOf (pbi), IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            pebAddress = pbi.PebBaseAddress;
            long pp = 0;
            hr = NtWow64ReadVirtualMemory64 (handle, pebAddress + processParametersOffset, ref pp, Marshal.SizeOf (pp), IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            UNICODE_STRING_WOW64 us = new UNICODE_STRING_WOW64 ();
            hr = NtWow64ReadVirtualMemory64 (handle, pp + offset, ref us, Marshal.SizeOf (us), IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            if ((us.Buffer == 0) || (us.Length == 0))
                return null;

            string s = new string ('\0', us.Length / 2);
            hr = NtWow64ReadVirtualMemory64 (handle, us.Buffer, s, us.Length, IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            return s;
        } else {
            PROCESS_BASIC_INFORMATION pbi = new PROCESS_BASIC_INFORMATION ();
            int hr = NtQueryInformationProcess (handle, (int) PROCESSINFOCLASS.ProcessBasicInformation, ref pbi, Marshal.SizeOf (pbi), IntPtr.Zero);
            if (hr != 0)
                throw new Win32Exception (hr);

            pebAddress = pbi.PebBaseAddress.ToInt64 ();
            IntPtr pp = new IntPtr ();
            if (! ReadProcessMemory (handle, new IntPtr (pebAddress + processParametersOffset), ref pp, new IntPtr (Marshal.SizeOf (pp)), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            UNICODE_STRING us = new UNICODE_STRING ();
            if (! ReadProcessMemory (handle, new IntPtr ((long) pp + offset), ref us, new IntPtr (Marshal.SizeOf (us)), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            if ((us.Buffer == IntPtr.Zero) || (us.Length == 0))
                return null;

            string s = new string ('\0', us.Length / 2);
            if (! ReadProcessMemory (handle, us.Buffer, s, new IntPtr (us.Length), IntPtr.Zero))
                throw new Win32Exception (Marshal.GetLastWin32Error ());

            return s;
        }
    }
    finally {
        CloseHandle (handle);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16129126_16129449_1_20
16129126_16129565_80_94
Title: Remove String from Text Box from back 
----------------------------------------

private void textBox1_KeyPress (object sender, KeyPressEventArgs e) {
    if (textBox1.Text.Length == 0)
        return;

    if ((e.KeyChar == (char) Keys.Back) && (textBox1.SelectionLength == 0)) {
        textBox1.SelectionStart = Math.Max (0, textBox1.Text.Substring (0, textBox1.Text.Length - 1).LastIndexOf (';'));
        if (textBox1.Text.Substring (textBox1.SelectionStart, 1) == ";")
            textBox1.SelectionStart ++;

        textBox1.SelectionLength = textBox1.Text.Length - textBox1.SelectionStart;
        e.Handled = true;
        return;
    }
    if ((e.KeyChar == (char) Keys.Back) && textBox1.SelectionLength >= 0) {
        textBox1.Text = textBox1.Text.Substring (0, textBox1.SelectionStart);
        textBox1.SelectionStart = textBox1.Text.Length;
        e.Handled = true;
    }
}
----------------------------------------

private void textBox1_KeyPress (object sender, KeyPressEventArgs e) {
    if (e.KeyChar == (char) Keys.Back) {
        if (textBox1.SelectionLength == 0) {
            selectToken ();
            e.Handled = true;
        } else {
            e.Handled = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1614137_1614503_1_24
1614137_1615032_79_105
Title: A C# Implementation of Number Line 
----------------------------------------

public string CheckRange (int start, int end) {
    NumberLine other = new NumberLine ();
    other.AddRange (start, end);
    IEnumerable < int > marked = other.Intersect (this);
    IEnumerable < int > notMarked = other.Except (this);
    int markedMin = marked.Min ();
    int markedMax = marked.Max ();
    int notMarkedMin = notMarked.Min ();
    int notMarkedMax = notMarked.Max ();
    string markedString = (markedMin == markedMax) ? markedMin.ToString () : string.Format ("{0} - {1}", markedMin, markedMax);
    string notMarkedString = (notMarkedMin == notMarkedMax) ? notMarkedMin.ToString () : string.Format ("{0} - {1}", notMarkedMin, notMarkedMax);
    return string.Format ("Marked: {0}\r\nNot Marked: {1}", markedString, notMarkedString);
}
----------------------------------------

public List < Range > CheckRange (int start, int end) {
    List < Range > result = new List < Range > ();
    foreach (Range currentRange in Ranges.Values) {
        if (start <= currentRange.End) {
            if (end <= currentRange.End) {
                result.Add (new Range () {Start = currentRange.Start, End = end});
                break;
            } else {
                if (start <= currentRange.Start) {
                    result.Add (new Range () {Start = currentRange.Start, End = currentRange.End});
                } else {
                    result.Add (new Range () {Start = start, End = currentRange.End});
                }
            }
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1615559_1615686_8_32
1615559_1615995_3_18
Title: Convert a Unicode string to an escaped ASCII string 
----------------------------------------

static void Main () {
    string unicodeString = "This string contains the unicode character Pi(\u03a0)";
    Encoding ascii = Encoding.ASCII;
    Encoding unicode = Encoding.Unicode;
    byte [] unicodeBytes = unicode.GetBytes (unicodeString);
    byte [] asciiBytes = Encoding.Convert (unicode, ascii, unicodeBytes);
    char [] asciiChars = new char [ascii.GetCharCount (asciiBytes, 0, asciiBytes.Length)];
    ascii.GetChars (asciiBytes, 0, asciiBytes.Length, asciiChars, 0);
    string asciiString = new string (asciiChars);
    Console.WriteLine ("Original string: {0}", unicodeString);
    Console.WriteLine ("Ascii converted string: {0}", asciiString);
}
----------------------------------------

static void Main (string [] args) {
    char [] originalString = "This string contains the unicode character Pi(π)".ToCharArray ();
    StringBuilder asAscii = new StringBuilder ();
    foreach (char c in originalString) {
        int cint = Convert.ToInt32 (c);
        if (cint <= 127 && cint >= 0)
            asAscii.Append (c);
        else
            asAscii.Append (String.Format ("\\u{0:x4} ", cint).Trim ());

    }
    Console.WriteLine ("Final string: {0}", asAscii);
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1615559_1615686_8_32
1615559_1616191_1_16
Title: Convert a Unicode string to an escaped ASCII string 
----------------------------------------

static void Main () {
    string unicodeString = "This string contains the unicode character Pi(\u03a0)";
    Encoding ascii = Encoding.ASCII;
    Encoding unicode = Encoding.Unicode;
    byte [] unicodeBytes = unicode.GetBytes (unicodeString);
    byte [] asciiBytes = Encoding.Convert (unicode, ascii, unicodeBytes);
    char [] asciiChars = new char [ascii.GetCharCount (asciiBytes, 0, asciiBytes.Length)];
    ascii.GetChars (asciiBytes, 0, asciiBytes.Length, asciiChars, 0);
    string asciiString = new string (asciiChars);
    Console.WriteLine ("Original string: {0}", unicodeString);
    Console.WriteLine ("Ascii converted string: {0}", asciiString);
}
----------------------------------------

static void Main (string [] args) {
    String originalString = "This string contains the unicode character Pi(π)";
    Byte [] bytes = Encoding.UTF32.GetBytes (originalString);
    StringBuilder asAscii = new StringBuilder ();
    for (int idx = 0; idx < bytes.Length; idx += 4) {
        uint codepoint = BitConverter.ToUInt32 (bytes, idx);
        if (codepoint <= 127)
            asAscii.Append (Convert.ToChar (codepoint));
        else
            asAscii.AppendFormat ("\\u{0:x4}", codepoint);

    }
    Console.WriteLine ("Final string: {0}", asAscii);
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1615559_1615995_3_18
1615559_1616191_1_16
Title: Convert a Unicode string to an escaped ASCII string 
----------------------------------------

static void Main (string [] args) {
    char [] originalString = "This string contains the unicode character Pi(π)".ToCharArray ();
    StringBuilder asAscii = new StringBuilder ();
    foreach (char c in originalString) {
        int cint = Convert.ToInt32 (c);
        if (cint <= 127 && cint >= 0)
            asAscii.Append (c);
        else
            asAscii.Append (String.Format ("\\u{0:x4} ", cint).Trim ());

    }
    Console.WriteLine ("Final string: {0}", asAscii);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    String originalString = "This string contains the unicode character Pi(π)";
    Byte [] bytes = Encoding.UTF32.GetBytes (originalString);
    StringBuilder asAscii = new StringBuilder ();
    for (int idx = 0; idx < bytes.Length; idx += 4) {
        uint codepoint = BitConverter.ToUInt32 (bytes, idx);
        if (codepoint <= 127)
            asAscii.Append (Convert.ToChar (codepoint));
        else
            asAscii.AppendFormat ("\\u{0:x4}", codepoint);

    }
    Console.WriteLine ("Final string: {0}", asAscii);
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16164215_16164243_1_13
16164215_16164789_1_14
Title: Not all code paths return a value (bools) 
----------------------------------------

bool userExists (string pcName) {
    string [] files = Directory.GetFiles (usersFile);
    foreach (string fileName in files) {
        if (fileName == pcName) {
            return true;
        }
    }
    return false;
}
----------------------------------------

bool userExists (string pcName) {
    string [] files = Directory.GetFiles (usersFile);
    foreach (string fileName in files) {
        if (fileName == pcName) {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1617049_1619375_10_52
1617049_37616088_1_22
Title: Calculate the number of business days between two dates? 
----------------------------------------

public static int BusinessDaysUntil (this DateTime firstDay, DateTime lastDay, params DateTime [] bankHolidays) {
    firstDay = firstDay.Date;
    lastDay = lastDay.Date;
    if (firstDay > lastDay)
        throw new ArgumentException ("Incorrect last day " + lastDay);

    TimeSpan span = lastDay - firstDay;
    int businessDays = span.Days + 1;
    int fullWeekCount = businessDays / 7;
    if (businessDays > fullWeekCount * 7) {
        int firstDayOfWeek = (int) firstDay.DayOfWeek;
        int lastDayOfWeek = (int) lastDay.DayOfWeek;
        if (lastDayOfWeek < firstDayOfWeek)
            lastDayOfWeek += 7;

        if (firstDayOfWeek <= 6) {
            if (lastDayOfWeek >= 7)
                businessDays -= 2;
            else if (lastDayOfWeek >= 6)
                businessDays -= 1;

        } else if (firstDayOfWeek <= 7 && lastDayOfWeek >= 7)
            businessDays -= 1;

    }
    businessDays -= fullWeekCount + fullWeekCount;
    foreach (DateTime bankHoliday in bankHolidays) {
        DateTime bh = bankHoliday.Date;
        if (firstDay <= bh && bh <= lastDay)
            -- businessDays;

    }
    return businessDays;
}
----------------------------------------

public int BusinessDaysUntil (DateTime start, DateTime end, params DateTime [] bankHolidays) {
    int tld = (int) ((end - start).TotalDays) + 1;
    int not_buss_day = 2 * (tld / 7);
    int rest = tld % 7;
    if (rest > 0) {
        int tmp = (int) start.DayOfWeek - 1 + rest;
        if (tmp == 6 || start.DayOfWeek == DayOfWeek.Sunday)
            not_buss_day ++;
        else if (tmp > 6)
            not_buss_day += 2;

    }
    foreach (DateTime bankHoliday in bankHolidays) {
        DateTime bh = bankHoliday.Date;
        if (! (bh.DayOfWeek == DayOfWeek.Saturday || bh.DayOfWeek == DayOfWeek.Sunday) && (start <= bh && bh <= end)) {
            not_buss_day ++;
        }
    }
    return tld - not_buss_day;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16196529_16196584_1_22
16196529_16196624_4_26
Title: In C# can you return a default int value from main? 
----------------------------------------

static int Main (string [] args) {
    int intRandNumber;
    try {
        Random myRandom = new Random ();
        intRandNumber = myRandom.Next (0, 2);
        if (intRandNumber == 1) {
            Console.WriteLine ("Got invalid random number!");
            return 0;
        }
    }
    catch (Exception exp) {
        Console.WriteLine ("Strange ... an error occurred! " + exp.ToString ());
        return - 1;
    }
    return 1;
}
----------------------------------------

static int Main (string [] args) {
    try {
        int intReturnCode = 1;
        int intRandNumber;
        Random myRandom = new Random ();
        intRandNumber = myRandom.Next (0, 2);
        if (intRandNumber == 1) {
            throw new Exception ("ErrorError");
        }
    }
    catch (Exception e) {
    }
    finally {
        return intReturnCode;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16201265_16201444_6_18
16201265_16201470_1_15
Title: C# Refactoring the same action with different details using design patterns 
----------------------------------------

private static List < IList < object > > convert < T > (IList < T > dataList, Action < IList < object >, T > foo) {
    var arrayRes = new List < IList < object > > ();
    foreach (var item in dataList) {
        var arrayObjProperty = new List < object > ();
        foo (arrayObjProperty, item);
        arrayRes.Add (arrayObjProperty);
    }
    return arrayRes;
}
----------------------------------------

static object [] [] ConvertToObjectArray < T > (IList < T > objects) {
    var fields = (from fieldInfo in typeof (T).GetFields (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)
        orderby fieldInfo.Name
        select fieldInfo).ToArray ();
    object [] [] table = new object [objects.Count] [];
    for (int i = 0; i < table.Length; i ++) {
        table [i] = (from fieldInfo in fields
            select fieldInfo.GetValue (objects [i])).ToArray ();
    }
    return table;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16211243_16211927_13_24
16211243_16211927_1_12
Title: Writing SQL queries without table access full 
----------------------------------------

public static IEnumerable < Tuple < T1, T2 > > SqlQuery < T1, T2 > (this DbContext context, string sql) {
    using (var connection = new SqlConnection (context.Database.Connection.ConnectionString))
    using (var command = new SqlCommand (sql, connection))
    {
        var reader = command.ExecuteReader ();
        while (reader.NextResult ()) {
            yield return new Tuple < T1, T2 > ((T1) reader [0], (T2) reader [1]);
        }
    }}
----------------------------------------

public static IEnumerable < Tuple < T > > SqlQuery < T > (this DbContext context, string sql) {
    using (var connection = new SqlConnection (context.Database.Connection.ConnectionString))
    using (var command = new SqlCommand (sql, connection))
    {
        var reader = command.ExecuteReader ();
        while (reader.NextResult ()) {
            yield return new Tuple < T > ((T) reader [0]);
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16222693_16222807_1_16
16222693_16222820_1_11
Title: Get Date from String 
----------------------------------------

public DateTime ? GetFirstDateFromString (string input) {
    DateTime d;
    foreach (Match m in Regex.Matches (input, @"[0-9]{2}\.[0-9]{2}\.[0-9]{4}")) {
        if (DateTime.TryParseExact (match.Value, "dd.MM.yyyy", null, DateTimeStyles.None, out d)) {
            return d;
        }
    }
    return null;
}
----------------------------------------

static DateTime ? GetFirstDateFromString (string inputText) {
    var regex = new Regex (@"\b\d{2}\.\d{2}.\d{4}\b");
    foreach (Match m in regex.Matches (inputText)) {
        DateTime dt;
        if (DateTime.TryParseExact (m.Value, "dd.MM.yyyy", null, DateTimeStyles.None, out dt))
            return dt;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1622440_1622466_1_11
1622440_1622491_1_12
Title: Benchmarking method calls in C# 
----------------------------------------

private static void Benchmark (Action act, int interval) {
    GC.Collect ();
    Stopwatch sw = Stopwatch.StartNew ();
    for (int i = 0; i < interval; i ++) {
        act.Invoke ();
    }
    sw.Stop ();
    Console.WriteLine (sw.ElapsedMilliseconds);
}
----------------------------------------

private static void Benchmark (Action act, int iterations) {
    GC.Collect ();
    act.Invoke ();
    Stopwatch sw = Stopwatch.StartNew ();
    for (int i = 0; i < iterations; i ++) {
        act.Invoke ();
    }
    sw.Stop ();
    Console.WriteLine ((sw.ElapsedMilliseconds / iterations).ToString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1624003_1624104_1_21
1624003_1624194_1_25
Title: "Problems loading WPF image in code where am i going wrong?" 
----------------------------------------

private void GetFloorImg () {
    string logoFileLocation = "pack://application:,,,/MyClient;component/Images/";
    switch (App.selectedBuilding.Floors) {
        case 1 :
            logoFileLocation += "FloorOne.png";
            break;
        case 2 :
            logoFileLocation += "FloorTwo.png";
            break;
        case 3 :
            logoFileLocation += "FloorThree.png";
            break;
        default :
            throw new NotImplementedException ();
    }
    TotalFloors.Source = BitmapFrame.Create (new Uri (logoFileLocation, UriKind.RelativeOrAbsolute));
}
----------------------------------------

private void GetFloorImg () {
    MessageBox.Show (TotalFloors.Source.ToString ());
    BitmapImage floorImage = new BitmapImage ();
    Uri uriSource;
    switch (App.selectedBuilding.Floors) {
        case 1 :
            uriSource = new Uri ("pack://application:,,,/MyClient;component/Images/FloorOne.png", UriKind.Absolute);
            break;
        case 2 :
            uriSource = new Uri ("pack://application:,,,/MyClient;component/Images/FloorTwo.png", UriKind.Absolute);
            break;
        case 3 :
            uriSource = new Uri ("pack://application:,,,/MyClient;component/Images/FloorThree.png", UriKind.Absolute);
            break;
        default :
            throw new NotImplementedException ();
    }
    floorImage.BeginInit ();
    floorImage.UriSource = uriSource;
    floorImage.EndInit ();
    TotalFloors.Source = floorImage;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1624341_1624363_1_13
1624341_8355088_1_18
Title: Getting pair-set using LINQ 
----------------------------------------

public static T Pairwise < T > (this IEnumerable < T > list) {
    T last;
    bool firstTime = true;
    foreach (var item in list) {
        if (! firstTime)
            return (Tuple.New (last, item));
        else
            firstTime = false;

        last = item;
    }
}
----------------------------------------

public static IEnumerable < TResult > Pairwise < TSource, TResult > (this IEnumerable < TSource > values, int count, Func < TSource [], TResult > pairCreator) {
    if (count < 1)
        throw new ArgumentOutOfRangeException ("count");

    if (values == null)
        throw new ArgumentNullException ("values");

    if (pairCreator == null)
        throw new ArgumentNullException ("pairCreator");

    int c = 0;
    var data = new TSource [count];
    foreach (var item in values) {
        if (c < count)
            data [c ++] = item;

        if (c == count) {
            yield return pairCreator (data);
            c = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1627064_1627088_1_17
1627064_1627132_1_13
Title: How could I improve this C# randomising method? 
----------------------------------------

public static IList < T > Randomise < T > (IList < T > list, int seed) {
    Random rng = new Random (seed);
    List < T > ret = new List < T > (list);
    int n = ret.Length;
    while (n > 1) {
        n --;
        int k = rng.Next (n + 1);
        T tmp = list [k];
        ret [k] = ret [n];
        ret [n] = tmp;
    }
    return ret;
}
----------------------------------------

public static IEnumerable < T > RandomiseList < T > (IList < T > list, int seed) {
    Random random = new Random (seed);
    List < T > takeFrom = new List < T > (list);
    while (takeFrom.Count > 0) {
        int pos = random.Next (0, takeFrom.Count - 1);
        T item = takeFrom [pos];
        takeFrom.RemoveAt (pos);
        yield return item;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16293643_16296106_1_16
16293643_19583076_1_20
Title: Import Excel to Datagridview 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    String name = "Items";
    String constr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + "C:\\Sample.xlsx" + ";Extended Properties='Excel 12.0 XML;HDR=YES;';";
    OleDbConnection con = new OleDbConnection (constr);
    OleDbCommand oconn = new OleDbCommand ("Select * From [" + name + "$]", con);
    con.Open ();
    OleDbDataAdapter sda = new OleDbDataAdapter (oconn);
    DataTable data = new DataTable ();
    sda.Fill (data);
    grid_items.DataSource = data;
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    try {
        OpenFileDialog openfile1 = new OpenFileDialog ();
        if (openfile1.ShowDialog () == System.Windows.Forms.DialogResult.OK) {
            this.textBox1.Text = openfile1.FileName;
        }
        {
            string pathconn = "Provider = Microsoft.jet.OLEDB.4.0; Data source=" + textBox1.Text + ";Extended Properties=\"Excel 8.0;HDR= yes;\";";
            OleDbConnection conn = new OleDbConnection (pathconn);
            OleDbDataAdapter MyDataAdapter = new OleDbDataAdapter ("Select * from [" + textBox2.Text + "$]", conn);
            DataTable dt = new DataTable ();
            MyDataAdapter.Fill (dt);
            dataGridView1.DataSource = dt;
        }}
    catch {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16293643_16296106_1_16
16293643_25058080_15_27
Title: Import Excel to Datagridview 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    String name = "Items";
    String constr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + "C:\\Sample.xlsx" + ";Extended Properties='Excel 12.0 XML;HDR=YES;';";
    OleDbConnection con = new OleDbConnection (constr);
    OleDbCommand oconn = new OleDbCommand ("Select * From [" + name + "$]", con);
    con.Open ();
    OleDbDataAdapter sda = new OleDbDataAdapter (oconn);
    DataTable data = new DataTable ();
    sda.Fill (data);
    grid_items.DataSource = data;
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    System.Data.OleDb.OleDbConnection MyConnection;
    System.Data.DataSet DtSet;
    System.Data.OleDb.OleDbDataAdapter MyCommand;
    MyConnection = new System.Data.OleDb.OleDbConnection (@"provider=Microsoft.Jet.OLEDB.4.0;Data Source='c:\csharp.net-informations.xls';Extended Properties=Excel 8.0;");
    MyCommand = new System.Data.OleDb.OleDbDataAdapter ("select * from [Sheet1$]", MyConnection);
    MyCommand.TableMappings.Add ("Table", "Net-informations.com");
    DtSet = new System.Data.DataSet ();
    MyCommand.Fill (DtSet);
    dataGridView1.DataSource = DtSet.Tables [0];
    MyConnection.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16293643_19583076_1_20
16293643_25058080_15_27
Title: Import Excel to Datagridview 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    try {
        OpenFileDialog openfile1 = new OpenFileDialog ();
        if (openfile1.ShowDialog () == System.Windows.Forms.DialogResult.OK) {
            this.textBox1.Text = openfile1.FileName;
        }
        {
            string pathconn = "Provider = Microsoft.jet.OLEDB.4.0; Data source=" + textBox1.Text + ";Extended Properties=\"Excel 8.0;HDR= yes;\";";
            OleDbConnection conn = new OleDbConnection (pathconn);
            OleDbDataAdapter MyDataAdapter = new OleDbDataAdapter ("Select * from [" + textBox2.Text + "$]", conn);
            DataTable dt = new DataTable ();
            MyDataAdapter.Fill (dt);
            dataGridView1.DataSource = dt;
        }}
    catch {
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    System.Data.OleDb.OleDbConnection MyConnection;
    System.Data.DataSet DtSet;
    System.Data.OleDb.OleDbDataAdapter MyCommand;
    MyConnection = new System.Data.OleDb.OleDbConnection (@"provider=Microsoft.Jet.OLEDB.4.0;Data Source='c:\csharp.net-informations.xls';Extended Properties=Excel 8.0;");
    MyCommand = new System.Data.OleDb.OleDbDataAdapter ("select * from [Sheet1$]", MyConnection);
    MyCommand.TableMappings.Add ("Table", "Net-informations.com");
    DtSet = new System.Data.DataSet ();
    MyCommand.Fill (DtSet);
    dataGridView1.DataSource = DtSet.Tables [0];
    MyConnection.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16317290_16318711_6_18
16317290_16319170_1_21
Title: "Looping through classes and child classes to retrieve properties and values in C#" 
----------------------------------------

private void GetProperties (Type classType, object instance) {
    foreach (PropertyInfo property in classType.GetProperties (BindingFlags.Public | BindingFlags.Instance)) {
        WriteToLog (property.Name + ": " + property.PropertyType + ": " + property.MemberType);
        object value = property.GetValue (instance, null);
        if (value != null) {
            WriteToLog (value.ToString ());
            GetProperties (property.PropertyType, value);
        }
    }
}
----------------------------------------

public IEnumerable < PropertyInfo > GetProperties (Type type) {
    if (type == typeof (String))
        return new PropertyInfo [] {};

    var properties = type.GetProperties ().ToList ();
    foreach (var p in properties.ToList ()) {
        if (p.PropertyType.IsClass)
            properties.AddRange (GetProperties (p.PropertyType));
        else if (p.PropertyType.IsGenericType) {
            foreach (var g in p.PropertyType.GetGenericArguments ()) {
                if (g.IsClass)
                    properties.AddRange (GetProperties (g));

            }
        }
    }
    return properties;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16322326_16322537_1_12
16322326_16322686_1_10
Title: Recursive function returns duplicates 
----------------------------------------

public IEnumerable < IEnumerable < int > > getCoins (int price) {
    int [] coinValues = new int [] {1, 2, 5, 10, 20, 50, 100, 200};
    if (coinValues.Contains (price))
        yield return new int [] {price};

    foreach (int coin in coinValues.Where (x = > x < price))
        foreach (IEnumerable < int > match in getCoins (price - coin))
            if (match.Min () >= coin)
                yield return match.Concat (new int [] {coin});

}
----------------------------------------

IEnumerable < IEnumerable < int > > getCoins (int price, int prev_coin) {
    int [] coinValues = new int [] {1, 2, 5, 10, 20, 50, 100, 200};
    if (coinValues.Contains (price))
        yield return new int [] {price};

    foreach (int coin in coinValues.Where (x = > (x < price && x <= prev_coin)))
        foreach (IEnumerable < int > match in getCoins (price - coin, coin))
            yield return match.Concat (new int [] {coin});

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16322326_16322537_1_12
16322326_16322797_5_14
Title: Recursive function returns duplicates 
----------------------------------------

public IEnumerable < IEnumerable < int > > getCoins (int price) {
    int [] coinValues = new int [] {1, 2, 5, 10, 20, 50, 100, 200};
    if (coinValues.Contains (price))
        yield return new int [] {price};

    foreach (int coin in coinValues.Where (x = > x < price))
        foreach (IEnumerable < int > match in getCoins (price - coin))
            if (match.Min () >= coin)
                yield return match.Concat (new int [] {coin});

}
----------------------------------------

IEnumerable < IEnumerable < int > > getCoins (int price, int lastValue) {
    int [] coinValues = new int [] {1, 2, 5, 10, 20, 50, 100, 200};
    if (coinValues.Contains (price) && price <= lastValue)
        yield return new int [] {price};

    foreach (int coin in coinValues.Where (x = > x < price && x <= lastValue))
        foreach (IEnumerable < int > match in getCoins (price - coin, coin))
            yield return match.Concat (new int [] {coin});

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16322326_16322686_1_10
16322326_16322797_5_14
Title: Recursive function returns duplicates 
----------------------------------------

IEnumerable < IEnumerable < int > > getCoins (int price, int prev_coin) {
    int [] coinValues = new int [] {1, 2, 5, 10, 20, 50, 100, 200};
    if (coinValues.Contains (price))
        yield return new int [] {price};

    foreach (int coin in coinValues.Where (x = > (x < price && x <= prev_coin)))
        foreach (IEnumerable < int > match in getCoins (price - coin, coin))
            yield return match.Concat (new int [] {coin});

}
----------------------------------------

IEnumerable < IEnumerable < int > > getCoins (int price, int lastValue) {
    int [] coinValues = new int [] {1, 2, 5, 10, 20, 50, 100, 200};
    if (coinValues.Contains (price) && price <= lastValue)
        yield return new int [] {price};

    foreach (int coin in coinValues.Where (x = > x < price && x <= lastValue))
        foreach (IEnumerable < int > match in getCoins (price - coin, coin))
            yield return match.Concat (new int [] {coin});

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1633320_1640208_3_46
1633320_2898836_3_40
Title: Reconciling a new BindingList into a master BindingList using LINQ 
----------------------------------------

public static void Reconcile < T, TKey > (this BindingList < T > left, BindingList < T > right, Func < T, TKey > keySelector) where T : class {
    Dictionary < TKey, T > leftDict = left.ToDictionary (key = > keySelector (key));
    foreach (T newObj in right) {
        TKey key = keySelector (newObj);
        T oldObj = null;
        if (leftDict.TryGetValue (key, out oldObj)) {
            foreach (PropertyInfo pi in typeof (T).GetProperties ()) {
                if (! pi.GetValue (oldObj, null).Equals (pi.GetValue (newObj, null))) {
                    left [left.IndexOf (oldObj)] = newObj;
                    break;
                }
            }
            leftDict.Remove (key);
        } else {
            left.Add (newObj);
        }
    }
    foreach (T removed in leftDict.Values) {
        left.Remove (removed);
    }
}
----------------------------------------

public static void Reconcile < T, TKey > (this IList < T > left, IList < T > right, Func < T, TKey > keySelector) where T : class {
    Dictionary < TKey, T > leftDict = left.ToDictionary (keySelector);
    int index = 0;
    foreach (T newObj in right) {
        TKey key = keySelector (newObj);
        T oldObj = null;
        if (leftDict.TryGetValue (key, out oldObj)) {
            ReconcileObject (left, oldObj, newObj);
            leftDict.Remove (key);
        } else {
            left.Insert (index, newObj);
        }
        index ++;
    }
    foreach (T removed in leftDict.Values) {
        left.Remove (removed);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1633320_1640208_3_46
1633320_2898836_42_68
Title: Reconciling a new BindingList into a master BindingList using LINQ 
----------------------------------------

public static void Reconcile < T, TKey > (this BindingList < T > left, BindingList < T > right, Func < T, TKey > keySelector) where T : class {
    Dictionary < TKey, T > leftDict = left.ToDictionary (key = > keySelector (key));
    foreach (T newObj in right) {
        TKey key = keySelector (newObj);
        T oldObj = null;
        if (leftDict.TryGetValue (key, out oldObj)) {
            foreach (PropertyInfo pi in typeof (T).GetProperties ()) {
                if (! pi.GetValue (oldObj, null).Equals (pi.GetValue (newObj, null))) {
                    left [left.IndexOf (oldObj)] = newObj;
                    break;
                }
            }
            leftDict.Remove (key);
        } else {
            left.Add (newObj);
        }
    }
    foreach (T removed in leftDict.Values) {
        left.Remove (removed);
    }
}
----------------------------------------

public static void ReconcileOrdered < T > (this IList < T > left, IList < T > right) where T : class {
    for (int i = left.Count; i > right.Count; i --) {
        left.RemoveAt (i - 1);
    }
    foreach (T newObj in right) {
        if (left.Count > right.IndexOf (newObj)) {
            T oldObj = left [right.IndexOf (newObj)];
            ReconcileObject (left, oldObj, newObj);
        } else {
            left.Add (newObj);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1633320_1640208_3_46
1633320_2898836_70_100
Title: Reconciling a new BindingList into a master BindingList using LINQ 
----------------------------------------

public static void Reconcile < T, TKey > (this BindingList < T > left, BindingList < T > right, Func < T, TKey > keySelector) where T : class {
    Dictionary < TKey, T > leftDict = left.ToDictionary (key = > keySelector (key));
    foreach (T newObj in right) {
        TKey key = keySelector (newObj);
        T oldObj = null;
        if (leftDict.TryGetValue (key, out oldObj)) {
            foreach (PropertyInfo pi in typeof (T).GetProperties ()) {
                if (! pi.GetValue (oldObj, null).Equals (pi.GetValue (newObj, null))) {
                    left [left.IndexOf (oldObj)] = newObj;
                    break;
                }
            }
            leftDict.Remove (key);
        } else {
            left.Add (newObj);
        }
    }
    foreach (T removed in leftDict.Values) {
        left.Remove (removed);
    }
}
----------------------------------------

private static void ReconcileObject < T > (IList < T > left, T oldObj, T newObj) where T : class {
    if (oldObj.GetType () == newObj.GetType ()) {
        foreach (PropertyInfo pi in oldObj.GetType ().GetProperties ()) {
            var mergable = (MergablePropertyAttribute) pi.GetCustomAttributes (false).FirstOrDefault (attribute = > attribute is MergablePropertyAttribute);
            if ((mergable == null || mergable.AllowMerge) && ! object.Equals (pi.GetValue (oldObj, null), pi.GetValue (newObj, null))) {
                if (left is ObservableCollection < T >) {
                    pi.SetValue (oldObj, pi.GetValue (newObj, null), null);
                } else {
                    left [left.IndexOf (oldObj)] = newObj;
                    break;
                }
            }
        }
    } else {
        left [left.IndexOf (oldObj)] = newObj;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1633320_2898836_3_40
1633320_2898836_42_68
Title: Reconciling a new BindingList into a master BindingList using LINQ 
----------------------------------------

public static void Reconcile < T, TKey > (this IList < T > left, IList < T > right, Func < T, TKey > keySelector) where T : class {
    Dictionary < TKey, T > leftDict = left.ToDictionary (keySelector);
    int index = 0;
    foreach (T newObj in right) {
        TKey key = keySelector (newObj);
        T oldObj = null;
        if (leftDict.TryGetValue (key, out oldObj)) {
            ReconcileObject (left, oldObj, newObj);
            leftDict.Remove (key);
        } else {
            left.Insert (index, newObj);
        }
        index ++;
    }
    foreach (T removed in leftDict.Values) {
        left.Remove (removed);
    }
}
----------------------------------------

public static void ReconcileOrdered < T > (this IList < T > left, IList < T > right) where T : class {
    for (int i = left.Count; i > right.Count; i --) {
        left.RemoveAt (i - 1);
    }
    foreach (T newObj in right) {
        if (left.Count > right.IndexOf (newObj)) {
            T oldObj = left [right.IndexOf (newObj)];
            ReconcileObject (left, oldObj, newObj);
        } else {
            left.Add (newObj);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1633320_2898836_3_40
1633320_2898836_70_100
Title: Reconciling a new BindingList into a master BindingList using LINQ 
----------------------------------------

public static void Reconcile < T, TKey > (this IList < T > left, IList < T > right, Func < T, TKey > keySelector) where T : class {
    Dictionary < TKey, T > leftDict = left.ToDictionary (keySelector);
    int index = 0;
    foreach (T newObj in right) {
        TKey key = keySelector (newObj);
        T oldObj = null;
        if (leftDict.TryGetValue (key, out oldObj)) {
            ReconcileObject (left, oldObj, newObj);
            leftDict.Remove (key);
        } else {
            left.Insert (index, newObj);
        }
        index ++;
    }
    foreach (T removed in leftDict.Values) {
        left.Remove (removed);
    }
}
----------------------------------------

private static void ReconcileObject < T > (IList < T > left, T oldObj, T newObj) where T : class {
    if (oldObj.GetType () == newObj.GetType ()) {
        foreach (PropertyInfo pi in oldObj.GetType ().GetProperties ()) {
            var mergable = (MergablePropertyAttribute) pi.GetCustomAttributes (false).FirstOrDefault (attribute = > attribute is MergablePropertyAttribute);
            if ((mergable == null || mergable.AllowMerge) && ! object.Equals (pi.GetValue (oldObj, null), pi.GetValue (newObj, null))) {
                if (left is ObservableCollection < T >) {
                    pi.SetValue (oldObj, pi.GetValue (newObj, null), null);
                } else {
                    left [left.IndexOf (oldObj)] = newObj;
                    break;
                }
            }
        }
    } else {
        left [left.IndexOf (oldObj)] = newObj;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1633320_2898836_42_68
1633320_2898836_70_100
Title: Reconciling a new BindingList into a master BindingList using LINQ 
----------------------------------------

public static void ReconcileOrdered < T > (this IList < T > left, IList < T > right) where T : class {
    for (int i = left.Count; i > right.Count; i --) {
        left.RemoveAt (i - 1);
    }
    foreach (T newObj in right) {
        if (left.Count > right.IndexOf (newObj)) {
            T oldObj = left [right.IndexOf (newObj)];
            ReconcileObject (left, oldObj, newObj);
        } else {
            left.Add (newObj);
        }
    }
}
----------------------------------------

private static void ReconcileObject < T > (IList < T > left, T oldObj, T newObj) where T : class {
    if (oldObj.GetType () == newObj.GetType ()) {
        foreach (PropertyInfo pi in oldObj.GetType ().GetProperties ()) {
            var mergable = (MergablePropertyAttribute) pi.GetCustomAttributes (false).FirstOrDefault (attribute = > attribute is MergablePropertyAttribute);
            if ((mergable == null || mergable.AllowMerge) && ! object.Equals (pi.GetValue (oldObj, null), pi.GetValue (newObj, null))) {
                if (left is ObservableCollection < T >) {
                    pi.SetValue (oldObj, pi.GetValue (newObj, null), null);
                } else {
                    left [left.IndexOf (oldObj)] = newObj;
                    break;
                }
            }
        }
    } else {
        left [left.IndexOf (oldObj)] = newObj;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1634027_1634326_17_34
1634027_1634326_36_52
Title: Transfer stringlist into treeview 
----------------------------------------

public void AddPath (List < TreeNode > collection, String path) {
    LinkedList < String > pathToBeAdded = new LinkedList < String > (path.Split (new String [] {@"/"}, StringSplitOptions.RemoveEmptyEntries));
    if (pathToBeAdded.Count == 0) {
        return;
    }
    String rootPath = pathToBeAdded.First.Value;
    TreeNode root = collection.FirstOrDefault (n = > n.Text.Equals (rootPath));
    if (root == null) {
        root = new TreeNode (rootPath);
        collection.Add (root);
    }
    pathToBeAdded.RemoveFirst ();
    AddPath (root, pathToBeAdded);
}
----------------------------------------

public void AddPath (TreeNode rootNode, LinkedList < String > pathToBeAdded) {
    if (pathToBeAdded.Count == 0) {
        return;
    }
    String part = pathToBeAdded.First.Value;
    TreeNode subNode = null;
    if (! rootNode.Nodes.ContainsKey (part)) {
        subNode = rootNode.Nodes.Add (part, part);
    } else {
        subNode = rootNode.Nodes [part];
    }
    pathToBeAdded.RemoveFirst ();
    AddPath (subNode, pathToBeAdded);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16360036_16364080_24_50
16360036_16364879_5_29
Title: ArrayList sort method 
----------------------------------------

private static void Main (string [] args) {
    const int NumItems = 100000;
    DateTime endDate = DateTime.Now;
    DateTime baseDate = endDate.AddYears (- 1);
    int secondsRange = (int) ((endDate - baseDate).TotalSeconds);
    Random rnd = new Random ();
    Console.WriteLine ("Adding {0} items to list.", NumItems);
    ArrayList dataList = new ArrayList ();
    for (int i = 0; i < NumItems; ++ i) {
        DateTime ts = baseDate.AddSeconds (rnd.Next ());
        DataObject item = new DataObject (ts, "Foo", "bar");
        dataList.Add (item);
    }
    Console.Write ("Sorting list...");
    Stopwatch sw = Stopwatch.StartNew ();
    dataList.Sort ();
    sw.Stop ();
    Console.WriteLine ("done!");
    Console.WriteLine ("Elapsed time {0} ms", sw.ElapsedMilliseconds);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    string connString = "data source=... size=4096";
    ArrayList al = new ArrayList ();
    using (SqlConnection sqlCon = new SqlConnection (connString))
    {
        sqlCon.Open ();
        SqlCommand sqlCmd = sqlCon.CreateCommand ();
        sqlCmd.CommandText = "SELECT [timestamp], [value] FROM [TimeStmp] Order By [timestamp] desc";
        SqlDataReader rdr = sqlCmd.ExecuteReader ();
        while (rdr.Read ()) {
            for (int i = 0; i < 10000; i ++)
                al.Add (new ValueWithTimeStamp (rdr.GetSqlBinary (0), rdr.GetString (1)));

        }
    } for (int i = 0; i < 10; i ++)
        Debug.WriteLine (((ValueWithTimeStamp) al [i]).TimeStampUInt64.ToString ());

    System.Diagnostics.Stopwatch sw = new Stopwatch ();
    sw.Start ();
    al.Sort ();
    sw.Stop ();
    for (int i = 0; i < 10; i ++)
        Debug.WriteLine (((ValueWithTimeStamp) al [i]).TimeStampUInt64.ToString ());

    Debug.WriteLine (sw.ElapsedMilliseconds.ToString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1638128_3191992_21_36
1638128_9686534_64_109
Title: How to Bind BlackoutDates in WPF Toolkit Calendar control? 
----------------------------------------

private static void OnRegisterCommandBindingChanged (DependencyObject sender, DependencyPropertyChangedEventArgs e) {
    System.Windows.Controls.DatePicker element = sender as System.Windows.Controls.DatePicker;
    if (element != null) {
        System.Windows.Controls.CalendarBlackoutDatesCollection bindings = e.NewValue as System.Windows.Controls.CalendarBlackoutDatesCollection;
        if (bindings != null) {
            element.BlackoutDates.Clear ();
            foreach (var dateRange in bindings) {
                element.BlackoutDates.Add (dateRange);
            }
        }
    }
}
----------------------------------------

private static void OnRegisterCommandBindingChanged (DependencyObject sender, DependencyPropertyChangedEventArgs e) {
    Calendar calendar = sender as Calendar;
    if (calendar != null) {
        ObservableCollection < DateTime > bindings = e.NewValue as ObservableCollection < DateTime >;
        if (bindings != null) {
            if (! _calendars.Contains (calendar)) {
                calendar.Tag = bindings;
                _calendars.Add (calendar);
            }
            calendar.BlackoutDates.Clear ();
            foreach (DateTime date in bindings) {
                calendar.BlackoutDates.Add (new CalendarDateRange (date));
            }
            bindings.CollectionChanged += CalendarBindings_CollectionChanged;
        }
    } else {
        DatePicker datePicker = sender as DatePicker;
        if (datePicker != null) {
            ObservableCollection < DateTime > bindings = e.NewValue as ObservableCollection < DateTime >;
            if (bindings != null) {
                if (! _datePickers.Contains (datePicker)) {
                    datePicker.Tag = bindings;
                    _datePickers.Add (datePicker);
                }
                datePicker.BlackoutDates.Clear ();
                foreach (DateTime date in bindings) {
                    datePicker.BlackoutDates.Add (new CalendarDateRange (date));
                }
                bindings.CollectionChanged += DatePickerBindings_CollectionChanged;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16406203_16406256_1_27
16406203_16406341_1_22
Title: How to add user input together 
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int i1 = 0;
    int i2 = 0;
    int i3 = 0;
    int inputInt = 0;
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true) {
                i3 = i2;
                i2 = i1;
                i1 = inputInt;
            }
            Console.WriteLine ("Sum of the past three numbers is: {0}", i1 + i2 + i3);
        } while (inputInt != QUIT);
}
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int inputInt = 0, tempint = 0;
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out tempint);
            if (inputBool == true) {
                inputInt += tempint;
            }
            Console.WriteLine ("Sum of the past three numbers is: {0}", inputInt);
        } while (tempint != QUIT);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16406203_16406256_1_27
16406203_16406424_1_35
Title: How to add user input together 
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int i1 = 0;
    int i2 = 0;
    int i3 = 0;
    int inputInt = 0;
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true) {
                i3 = i2;
                i2 = i1;
                i1 = inputInt;
            }
            Console.WriteLine ("Sum of the past three numbers is: {0}", i1 + i2 + i3);
        } while (inputInt != QUIT);
}
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int inputInt = 0;
    Queue myQ = new Queue ();
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true) {
                if (myQ.Count () == 3) {
                    myQ.Dequeue ();
                    myQ.Enqueue (inputInt);
                } else {
                    myQ.Enqueue (inputInt);
                }
            }
            if (myQ.Count () == 3) {
                Console.WriteLine ("Sum of the past three numbers is: {0}", myQ.Sum ());
            }
        } while (inputInt != QUIT);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16406203_16406256_1_27
16406203_16406479_1_16
Title: How to add user input together 
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int i1 = 0;
    int i2 = 0;
    int i3 = 0;
    int inputInt = 0;
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true) {
                i3 = i2;
                i2 = i1;
                i1 = inputInt;
            }
            Console.WriteLine ("Sum of the past three numbers is: {0}", i1 + i2 + i3);
        } while (inputInt != QUIT);
}
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    List < int > allNumbers = new List < int > ();
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true)
                allNumbers.Add (inputInt);

            Console.WriteLine ("Sum of the past " + allNumbers.Count + " numbers is: {0}", allNumbers.Sum ());
        } while (inputInt != QUIT);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16406203_16406341_1_22
16406203_16406424_1_35
Title: How to add user input together 
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int inputInt = 0, tempint = 0;
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out tempint);
            if (inputBool == true) {
                inputInt += tempint;
            }
            Console.WriteLine ("Sum of the past three numbers is: {0}", inputInt);
        } while (tempint != QUIT);
}
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int inputInt = 0;
    Queue myQ = new Queue ();
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true) {
                if (myQ.Count () == 3) {
                    myQ.Dequeue ();
                    myQ.Enqueue (inputInt);
                } else {
                    myQ.Enqueue (inputInt);
                }
            }
            if (myQ.Count () == 3) {
                Console.WriteLine ("Sum of the past three numbers is: {0}", myQ.Sum ());
            }
        } while (inputInt != QUIT);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16406203_16406341_1_22
16406203_16406479_1_16
Title: How to add user input together 
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int inputInt = 0, tempint = 0;
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out tempint);
            if (inputBool == true) {
                inputInt += tempint;
            }
            Console.WriteLine ("Sum of the past three numbers is: {0}", inputInt);
        } while (tempint != QUIT);
}
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    List < int > allNumbers = new List < int > ();
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true)
                allNumbers.Add (inputInt);

            Console.WriteLine ("Sum of the past " + allNumbers.Count + " numbers is: {0}", allNumbers.Sum ());
        } while (inputInt != QUIT);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16406203_16406424_1_35
16406203_16406479_1_16
Title: How to add user input together 
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    int inputInt = 0;
    Queue myQ = new Queue ();
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true) {
                if (myQ.Count () == 3) {
                    myQ.Dequeue ();
                    myQ.Enqueue (inputInt);
                } else {
                    myQ.Enqueue (inputInt);
                }
            }
            if (myQ.Count () == 3) {
                Console.WriteLine ("Sum of the past three numbers is: {0}", myQ.Sum ());
            }
        } while (inputInt != QUIT);
}
----------------------------------------

static void Main (string [] args) {
    const int QUIT = - 1;
    string inputStr;
    List < int > allNumbers = new List < int > ();
    do
        {
            Console.Write ("Type a number (type -1 to quit): ");
            inputStr = Console.ReadLine ();
            bool inputBool = int.TryParse (inputStr, out inputInt);
            if (inputBool == true)
                allNumbers.Add (inputInt);

            Console.WriteLine ("Sum of the past " + allNumbers.Count + " numbers is: {0}", allNumbers.Sum ());
        } while (inputInt != QUIT);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1641269_1641281_3_12
1641269_1641285_1_11
Title: Finding a control within a TabControl 
----------------------------------------

public static Control FindControl (string id, ControlCollection col) {
    foreach (Control c in col) {
        Control child = FindControlRecursive (c, id);
        if (child != null)
            return child;

    }
    return null;
}
----------------------------------------

Control FindControl (Control root, string controlName) {
    foreach (Control c in root.Controls) {
        if (c.Controls.Count > 0)
            return FindControl (c);
        else if (c.Name == controlName)
            return c;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16415774_16415919_1_17
16415774_16416318_1_19
Title: How do you go through two int arrays and sum their values if they exist 
----------------------------------------

int [] ArrTotal (int [] a, int [] b) {
    if (a == null || b == null) {
        return (int []) (a ?? b).Clone ();
    }
    int length = Math.Max (a.Length, b.Length);
    int [] result = new int [length];
    for (int i = 0; i < length; i ++) {
        int sum = 0;
        if (a.Length > i)
            sum += a [i];

        if (b.Length > i)
            sum += b [i];

        result [i] = sum;
    }
    return result;
}
----------------------------------------

int [] ArrTotal (int [] array1, int [] array2) {
    if ((array1 == null) && (array2 == null))
        return new int [0];
    else if (array1 == null)
        return (int []) array2.Clone ();
    else if (array2 == null)
        return (int []) array1.Clone ();
    else {
        int skip = Math.Min (array1.Length, array2.Length);
        return Enumerable.Zip (array1, array2, (i1, i2) = > i1 + i2).Concat (array1.Skip (skip)).Concat (array2.Skip (skip)).ToArray ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16436323_16440312_16_30
16436323_16440312_3_14
Title: Reading Properties of an Object with Expression Trees 
----------------------------------------

public static Action < T, object > GetValueSetter < T > (this PropertyInfo propertyInfo) {
    if (typeof (T) != propertyInfo.DeclaringType) {
        throw new ArgumentException ();
    }
    var instance = Expression.Parameter (propertyInfo.DeclaringType, "i");
    var argument = Expression.Parameter (typeof (object), "a");
    var setterCall = Expression.Call (instance, propertyInfo.GetSetMethod (), Expression.Convert (argument, propertyInfo.PropertyType));
    return (Action < T, object >) Expression.Lambda (setterCall, instance, argument).Compile ();
}
----------------------------------------

public static Func < T, object > GetValueGetter < T > (this PropertyInfo propertyInfo) {
    if (typeof (T) != propertyInfo.DeclaringType) {
        throw new ArgumentException ();
    }
    var instance = Expression.Parameter (propertyInfo.DeclaringType, "i");
    var property = Expression.Property (instance, propertyInfo);
    var convert = Expression.TypeAs (property, typeof (object));
    return (Func < T, object >) Expression.Lambda (convert, instance).Compile ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1644440_1644539_1_17
1644440_1644655_6_26
Title: Bubble sort using recursion in C# 
----------------------------------------

public int [] Sort (int [] sortArray) {
    for (int i = 0; i < sortArray.Length - 1; i ++) {
        for (int j = sortArray.Length - 1; j > i; j --) {
            if (sortArray [j] < sortArray [j - 1]) {
                int x = sortArray [j];
                sortArray [j] = sortArray [j - 1];
                sortArray [j - 1] = x;
            }
        }
    }
    return sortArray;
}
----------------------------------------

static void Sort (IList < int > data, int startIndex) {
    if (startIndex >= data.Count)
        return;

    int minIndex = startIndex;
    for (int i = startIndex; i < data.Count; i ++)
        if (data [i] < data [minIndex])
            minIndex = i;

    if (minIndex != startIndex) {
        var temp = data [startIndex];
        data [startIndex] = data [minIndex];
        data [minIndex] = temp;
    }
    Sort (data, startIndex + 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1645449_1645560_1_25
1645449_1645582_1_29
Title: Refactor method with multiple return points 
----------------------------------------

public void processStuff () {
    Status returnStatus = Status.Success;
    try {
        if (! performStep1 ())
            return returnStatus = Status.Error;

        if (! performStep2 ())
            return returnStatus = Status.Warning;

    }
    catch (Exception ex) {
        log (ex);
        return returnStatus = Status.Exception;
    }
    finally {
        FinalProcessing (returnStatus);
    }
}
----------------------------------------

public void processStuff () {
    Status returnStatus = Status.Success;
    try {
        if (! performStep1 ())
            returnStatus = Status.Error;
        else if (! performStep2 ())
            returnStatus = Status.Warning;
        else if (! performStep3 ())
            returnStatus = Status.Error;

    }
    catch (Exception ex) {
        log (ex);
        returnStatus = Status.Error;
    }
    finally {
    }
    return returnStatus;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16463773_17683133_33_64
16463773_25168857_118_144
Title: The DELETE statement conflicted with the SAME TABLE REFERENCE constraint with Entity Framework 
----------------------------------------

static void Main (string [] args) {
    Database.SetInitializer < MyContext > (new DropCreateDatabaseAlways < MyContext > ());
    using (var ctx = new MyContext ())
    {
        ctx.Database.Initialize (false);
        var parent = new MyEntity {Name = "Parent", Children = new List < MyEntity > ()};
        parent.Children.Add (new MyEntity {Name = "Child 1"});
        parent.Children.Add (new MyEntity {Name = "Child 2"});
        ctx.MyEntities.Add (parent);
        ctx.SaveChanges ();
    } using (var ctx = new MyContext ())
    {
        var parent = ctx.MyEntities.Include (e = > e.Children).FirstOrDefault ();
        foreach (var child in parent.Children.ToList ())
            ctx.MyEntities.Remove (child);

        ctx.MyEntities.Remove (parent);
        ctx.SaveChanges ();
    }}
----------------------------------------

static void Main (string [] args) {
    Database.SetInitializer < MyContext > (new DropCreateDatabaseAlways < MyContext > ());
    using (var ctx = new MyContext ())
    {
        ctx.Database.Initialize (false);
        ctx.MyEntities.Add (new TestObjectGraph ().RootEntity ());
        ctx.SaveChanges ();
    } using (var ctx = new MyContext ())
    {
        var parent = ctx.MyEntities.Include (e = > e.Children).FirstOrDefault ();
        var deleteme = parent.Children.First ();
        ctx.DeleteMyEntity (deleteme);
    } Console.WriteLine ("Completed....");
    Console.WriteLine ("Press any key to exit");
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16476359_16477729_14_23
16476359_16477888_36_51
Title: Randomise an array of integers 
----------------------------------------

public static IEnumerable < T > RandomizeUniquely < T > (this IEnumerable < T > source) {
    while (true) {
        var randomized = source.Randomize ();
        var isNotUnique = source.Zip (randomized, (a, b) = > Equals (a, b)).Any (equal = > equal);
        if (! isNotUnique)
            return randomized;

    }
}
----------------------------------------

public static IEnumerable < IEnumerable < T > > Randomise < T > (this IEnumerable < T > source, Func < T, byte [] > byteFunction, int x) {
    var foundValues = new ConcurrentDictionary < byte [], T [] > ();
    int found = 0;
    do
        {
            T [] y = source.Randomise ().ToArray ();
            var h = y.Hash (byteFunction);
            if (! foundValues.Keys.Contains (h)) {
                found ++;
                foundValues [h] = y;
                yield return y;
            }
        } while (found < x);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16492078_18362453_1_41
16492078_19590652_1_28
Title: Checking if an object exists after calling Activator.GetObject 
----------------------------------------

[System.Diagnostics.DebuggerHidden] internal static bool Ping < T > (T svr) {
    if (svr == null)
        return false;

    System.Reflection.MethodInfo PingFunc = typeof (T).GetMethod ("Ping");
    if (PingFunc == null)
        return false;

    TimeSpan timeout = TimeSpan.FromSeconds (5);
    Exception pingexception = null;
    System.Threading.Thread ping = new System.Threading.Thread (delegate () {
        try {
            PingFunc.Invoke (svr, null);
        }
        catch (Exception ex) {
            pingexception = ex;
        }
    });
    ping.Start ();
    if (ping.Join (timeout)) {
        if (pingexception == null)
            return true;

    }
    return false;
}
----------------------------------------

internal static TResult GetRemoteProperty < T, TResult > (string Url, System.Linq.Expressions.Expression < Func < T, TResult > > expr) {
    T remoteObject = GetRemoteObject < T > (Url);
    System.Exception remoteException = null;
    TimeSpan timeout = TimeSpan.FromSeconds (5);
    System.Threading.Tasks.Task < TResult > t = new System.Threading.Tasks.Task < TResult > (() = > {
        try {
            if (expr.Body is System.Linq.Expressions.MemberExpression) {
                System.Reflection.MemberInfo memberInfo = ((System.Linq.Expressions.MemberExpression) expr.Body).Member;
                System.Reflection.PropertyInfo propInfo = memberInfo as System.Reflection.PropertyInfo;
                if (propInfo != null)
                    return (TResult) propInfo.GetValue (remoteObject, null);

            }
        }
        catch (Exception ex) {
            remoteException = ex;
        }
        return default (TResult);
    });
    t.Start ();
    if (t.Wait (timeout))
        return t.Result;

    throw new NotSupportedException ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1650763_1657267_13_26
1650763_1765127_26_51
Title: Call unmanaged Code from C# - returning a struct with arrays 
----------------------------------------

private void ReadSharedMem_Click (object sender, EventArgs e) {
    try {
        if (getStatus (out output) != 0) {
        }
    }
    catch (AccessViolationException ave) {
        label1.Text = ave.Message;
    }
}
----------------------------------------

private void ReadSharedMem_Click (object sender, EventArgs e) {
    IntPtr ptr;
    try {
        ptr = Marshall.AllocHGlobal (Marshall.SizeOf (typeof (SYSTEM_OUTPUT)));
        int ret = getStatus (ptr);
        if (ret == 0) {
            output = (SYSTEM_OUTPUT) Marshal.PtrToStructure (ptr, typeof (SYSTEM_OUTPUT));
        }
        label1.Text = ret;
    }
    catch (AccessViolationException ave) {
        label1.Text = ave.Message;
    }
    finally {
        Marshal.FreeHGlobal (ptr);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16530058_16530142_9_22
16530058_16530479_4_15
Title: CountDownEvent won't wait until all the signals have been called 
----------------------------------------

static void Main () {
    new Thread (() = > SaySomething ("I am Thread one.")).Start ();
    new Thread (() = > SaySomething ("I am thread two.")).Start ();
    new Thread (() = > SaySomethingElse ("Hello From a different Thread")).Start ();
    new Thread (() = > SaySomething ("I am Thread Three.")).Start ();
    for (int i = 0; i < 4; i ++) {
        Console.WriteLine ("Calling Signal (time #{0})", i);
        CountDown.Signal ();
        Thread.Sleep (1000);
    }
    Console.WriteLine ("Done");
}
----------------------------------------

static void Main () {
    new Thread (() = > SaySomething ("I am Thread one.")).Start ();
    new Thread (() = > SaySomething ("I am thread two.")).Start ();
    new Thread (() = > SaySomethingElse ("Hello From a different Thread")).Start ();
    new Thread (() = > SaySomething ("I am Thread Three.")).Start ();
    CountDown.Wait ();
    Console.WriteLine ("Done!");
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16537676_16537691_1_19
16537676_16537755_1_16
Title: Unreachable Code Detected Return Value 
----------------------------------------

protected MyReturnObject SendState (Object ID_DIP, Object ID_SEQ, Object MODUL) {
    try {
        ViewState ["ssDIP"] = ID_DIP.ToString ();
        ViewState ["ssSEQ"] = ID_SEQ.ToString ();
        ViewState ["ssMOD"] = MODUL.ToString ();
        MyReturnObject obj = new MyReturnObject ();
        obj.ID_DIP = ID_DIP.ToString ();
        obj.ID_SEQ = ID_SEQ.ToString ();
        obj.MODUL = MODUL.ToString ();
        return obj;
    }
    catch (Exception) {
        return null;
    }
}
----------------------------------------

protected string [] SendState (Object ID_DIP, Object ID_SEQ, Object MODUL) {
    try {
        ViewState ["ssDIP"] = ID_DIP.ToString ();
        ViewState ["ssSEQ"] = ID_SEQ.ToString ();
        ViewState ["ssMOD"] = MODUL.ToString ();
        return new string [] {ID_DIP.ToString (), ID_SEQ.ToString (), MODUL.ToString ()};
    }
    catch (Exception) {
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16537676_16537691_1_19
16537676_16537809_1_21
Title: Unreachable Code Detected Return Value 
----------------------------------------

protected MyReturnObject SendState (Object ID_DIP, Object ID_SEQ, Object MODUL) {
    try {
        ViewState ["ssDIP"] = ID_DIP.ToString ();
        ViewState ["ssSEQ"] = ID_SEQ.ToString ();
        ViewState ["ssMOD"] = MODUL.ToString ();
        MyReturnObject obj = new MyReturnObject ();
        obj.ID_DIP = ID_DIP.ToString ();
        obj.ID_SEQ = ID_SEQ.ToString ();
        obj.MODUL = MODUL.ToString ();
        return obj;
    }
    catch (Exception) {
        return null;
    }
}
----------------------------------------

public List < string > SendState (Object ID_DIP, Object ID_SEQ, Object MODUL) {
    var returnValue = new List < string > ();
    try {
        ViewState ["ssDIP"] = ID_DIP.ToString ();
        ViewState ["ssSEQ"] = ID_SEQ.ToString ();
        ViewState ["ssMOD"] = MODUL.ToString ();
        returnValue.add (ID_DIP.AsString ());
        returnValue.add (ID_DIP.AsString ());
        returnValue.add (MODUL.ToString ());
    }
    catch (Exception) {
        returnValue = null;
    }
    return returnValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16537676_16537755_1_16
16537676_16537809_1_21
Title: Unreachable Code Detected Return Value 
----------------------------------------

protected string [] SendState (Object ID_DIP, Object ID_SEQ, Object MODUL) {
    try {
        ViewState ["ssDIP"] = ID_DIP.ToString ();
        ViewState ["ssSEQ"] = ID_SEQ.ToString ();
        ViewState ["ssMOD"] = MODUL.ToString ();
        return new string [] {ID_DIP.ToString (), ID_SEQ.ToString (), MODUL.ToString ()};
    }
    catch (Exception) {
        return null;
    }
}
----------------------------------------

public List < string > SendState (Object ID_DIP, Object ID_SEQ, Object MODUL) {
    var returnValue = new List < string > ();
    try {
        ViewState ["ssDIP"] = ID_DIP.ToString ();
        ViewState ["ssSEQ"] = ID_SEQ.ToString ();
        ViewState ["ssMOD"] = MODUL.ToString ();
        returnValue.add (ID_DIP.AsString ());
        returnValue.add (ID_DIP.AsString ());
        returnValue.add (MODUL.ToString ());
    }
    catch (Exception) {
        returnValue = null;
    }
    return returnValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16558243_16558352_1_21
16558243_16558355_15_22
Title: Do Enumerable.FirstOrDefault() stop when it finds item? 
----------------------------------------

[__DynamicallyInvokable] public static TSource FirstOrDefault < TSource > (this IEnumerable < TSource > source) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    IList < TSource > list = source as IList < TSource >;
    if (list != null) {
        if (list.Count > 0)
            return list [0];

    } else {
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            if (enumerator.MoveNext ())
                return enumerator.Current;

        }}
    return default (TSource);
}
----------------------------------------

public static TSource FirstOrDefault < TSource > (this IEnumerable < TSource > source, Func < TSource, bool > predicate) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    if (predicate == null)
        throw Error.ArgumentNull ("predicate");

    foreach (TSource element in source) {
        if (predicate (element))
            return element;

    }
    return default (TSource);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16558243_16558355_15_22
16558243_16558355_1_13
Title: Do Enumerable.FirstOrDefault() stop when it finds item? 
----------------------------------------

public static TSource FirstOrDefault < TSource > (this IEnumerable < TSource > source, Func < TSource, bool > predicate) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    if (predicate == null)
        throw Error.ArgumentNull ("predicate");

    foreach (TSource element in source) {
        if (predicate (element))
            return element;

    }
    return default (TSource);
}
----------------------------------------

public static TSource FirstOrDefault < TSource > (this IEnumerable < TSource > source) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    IList < TSource > list = source as IList < TSource >;
    if (list != null) {
        if (list.Count > 0)
            return list [0];

    } else {
        using (IEnumerator < TSource > e = source.GetEnumerator ())
        {
            if (e.MoveNext ())
                return e.Current;

        }}
    return default (TSource);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16567268_16567561_1_29
16567268_16567638_1_19
Title: Sorting strings in C# 
----------------------------------------

private string SortFrench (string langs) {
    string _frenchLangs = String.Empty;
    List < string > languages = langs.Split (';').Select (s = > s.Trim ()).OrderBy (s = > s).ToList ();
    int insertAt = 0;
    if (languages.Contains ("Francais")) {
        languages.Remove ("Francais");
        languages.Insert (insertAt, "Francais");
        insertAt ++;
    }
    if (languages.Contains ("Anglais")) {
        languages.Remove ("Anglais");
        languages.Insert (insertAt, "Anglais");
    }
    _frenchLangs = string.Join (" ; ", languages);
    return _frenchLangs;
}
----------------------------------------

private static string SortFrench (string langs, string [] setStartList) {
    string _frenchLangs = String.Empty;
    List < string > list = langs.Split (';').Select (s = > s.Trim ()).ToList ();
    list.Sort ();
    foreach (var item in setStartList) {
        if (list.Contains (item)) {
            list.Remove (setFirst);
        }
    }
    List < string > tempList = List < string > ();
    tempList.AddRange (setStartList);
    tempList.AddRange (list);
    list = tempList;
    _frenchLangs = string.Join (" ; ", list);
    return _frenchLangs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16571164_16571593_18_30
16571164_16571593_32_45
Title: How to return SqlDataReader in C# WCF? 
----------------------------------------

public static IList < T > ToList < T > (this DataTable table) where T : new () {
    IList < PropertyInfo > properties = typeof (T).GetProperties ().ToList ();
    IList < T > result = new List < T > ();
    foreach (var row in table.Rows) {
        var item = CreateItemFromRow < T > ((DataRow) row, properties);
        result.Add (item);
    }
    return result;
}
----------------------------------------

private static T CreateItemFromRow < T > (DataRow row, IList < PropertyInfo > properties) where T : new () {
    T item = new T ();
    foreach (var property in properties) {
        if (row.Table.Columns.Contains (property.Name)) {
            var prop = row [property.Name] == System.DBNull.Value ? null : row [property.Name];
            property.SetValue (item, prop, null);
        }
    }
    return item;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16579021_16579151_1_23
16579021_16579174_1_33
Title: StreamReader Multiple lines 
----------------------------------------

public void ConsoleEnter_KeyDown (object sender, KeyEventArgs e) {
    string line;
    if (e.KeyCode == Keys.Enter) {
        StreamReader file = new StreamReader ("C:\\Users\\Home\\Desktop\\commands.txt");
        while ((line = file.ReadLine ()) != null) {
            if (line.Contains (ConsoleEnter.Text)) {
                COMBOX.Items.Add (ConsoleEnter.Text);
            } else {
                COMBOX.Items.Add ("Invalid Command");
            }
        }
        COMBOX.Items.Remove ("");
        ConsoleEnter.Text = "";
    }
}
----------------------------------------

public void ConsoleEnter_KeyDown (object sender, KeyEventArgs e) {
    string line;
    string path = @"C:\\Users\\Home\\Desktop\\commands.txt";
    WebClient client = new WebClient ();
    System.IO.Stream stream = client.OpenRead (path);
    System.IO.StreamReader str = new StreamReader (stream);
    string Text = str.ReadToEnd ();
    string [] words = Text.Split (':');
    if (e.KeyCode == Keys.Enter) {
        for (int i = 1; i < words.Length; i ++) {
            if (string.compare (words [i], textBox1.text) == 0) {
                COMBOX.Items.Add (ConsoleEnter.Text);
                COMBOX.Items.Remove ("");
                ConsoleEnter.Text = "";
            } else {
                COMBOX.Items.Add ("Invalid Command");
                COMBOX.Items.Remove ("");
                ConsoleEnter.Text = "";
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16581271_16586231_67_94
16581271_16586231_95_112
Title: Merge Xml files 
----------------------------------------

private static void CheckDescandants (XElement left, XElement node) {
    if (node.Descendants ().Count ((XElement x) = > x.HasElements) > 0) {
        MergeXml.Merge (left.Element (node.Name.LocalName), node);
        return;
    }
    if (left.Element (node.Name.LocalName) != null) {
        if (node.HasElements) {
            left.Element (node.Name.LocalName).Add (node.Descendants ());
            return;
        }
        left.Element (node.Name.LocalName).Add (node);
        return;
    } else {
        if (node.HasElements) {
            left.Add (node.Descendants ());
            return;
        }
        left.Add (node);
        return;
    }
}
----------------------------------------

private static void CheckDescandants (XElement left, XElement node, int recursivCallIndex) {
    if (node.Descendants ().Count ((XElement x) = > x.HasElements) > 0) {
        MergeXml.Merge (left.Elements ().ElementAt (recursivCallIndex).Element (node.Name.LocalName), node);
        return;
    }
    IEnumerable < XElement > source = from x in left.Elements ().ElementAt (recursivCallIndex).Descendants ()
        where x.Name == node.Name
        select x;
    if (source.Count < XElement > () > 0) {
        source.ElementAt (0).Add (node.Descendants ());
        return;
    }
    left.Elements ().ElementAt (recursivCallIndex).Add (node);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16583665_26953726_11_25
16583665_33316870_1_12
Title: For loop to calculate factorials 
----------------------------------------

static void Main (string [] args) {
    NumberManipulator manipulator = new NumberManipulator ();
    Console.WriteLine ("Please Enter Factorial Number:");
    int a = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("---Basic Calling--");
    Console.WriteLine ("Factorial of {0} is: {1}", a, manipulator.factorial (a));
    Console.WriteLine ("--Recursively Calling--");
    Console.WriteLine ("Factorial of {0} is: {1}", a, manipulator.recursively (a));
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    int numberFactorial = int.Parse (Console.ReadLine ());
    int result = numberFactorial;
    for (int i = 1; i < numberFactorial; i ++) {
        result = result * i;
        Console.WriteLine ("{0}*{1}", numberFactorial, i);
    }
    Console.WriteLine (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16610567_16611142_1_10
16610567_34438218_1_10
Title: Enable/Disable TaskManager 
----------------------------------------

public void SetTaskManager (bool enable) {
    RegistryKey objRegistryKey = Registry.CurrentUser.CreateSubKey (@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
    if (enable && objRegistryKey.GetValue ("DisableTaskMgr") != null)
        objRegistryKey.DeleteValue ("DisableTaskMgr");
    else
        objRegistryKey.SetValue ("DisableTaskMgr", "1");

    objRegistryKey.Close ();
}
----------------------------------------

public void SetTaskManager (bool enable) {
    RegistryKey objRegistryKey = Registry.CurrentUser.CreateSubKey (@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
    if (enable && objRegistryKey.GetValue ("DisableTaskMgr") != null)
        objRegistryKey.DeleteValue ("DisableTaskMgr");
    else
        objRegistryKey.SetValue ("DisableTaskMgr", "1");

    objRegistryKey.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16612086_16612122_9_22
16612086_16612711_1_12
Title: Compare very large numbers stored in string 
----------------------------------------

private int CompareNumbers (string x, string y) {
    for (int i = int.Max (x.Length, y.Length); i >= 0; i --) {
        char xc = GetEffectiveDigit (x, i);
        char yc = GetEffectiveDigit (y, i);
        int comparison = xc.CompareTo (yc);
        if (comparison != 0) {
            return comparison;
        }
    }
    return 0;
}
----------------------------------------

public static int CompareNumbers (string x, string y) {
    if (x.Length > y.Length)
        y = y.PadLeft (x.Length, '0');
    else if (y.Length > x.Length)
        x = x.PadLeft (y.Length, '0');

    for (int i = 0; i < x.Length; i ++) {
        if (x [i] < y [i])
            return - 1;

        if (x [i] > y [i])
            return 1;

    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1661647_1661655_1_16
1661647_1662346_1_37
Title: List of email address to public folders in exchange 
----------------------------------------

public static void GetPublicFolderList () {
    DirectoryEntry entry = new DirectoryEntry ("LDAP://FakeDomain.com");
    DirectorySearcher mySearcher = new DirectorySearcher (entry);
    mySearcher.Filter = "(&(objectClass=publicfolder))";
    mySearcher.SizeLimit = int.MaxValue;
    mySearcher.PageSize = int.MaxValue;
    foreach (SearchResult resEnt in mySearcher.FindAll ()) {
        if (resEnt.Properties.Count == 1)
            continue;

        object OO = resEnt.Properties ["mail"] [0];
    }
}
----------------------------------------

public static void GetPublicFolderList () {
    DirectoryEntry entry = new DirectoryEntry ("LDAP://sorcogruppen.no");
    DirectorySearcher mySearcher = new DirectorySearcher (entry);
    mySearcher.Filter = "(&(objectClass=publicfolder))";
    mySearcher.PropertiesToLoad.Add ("mail");
    mySearcher.PageSize = 100;
    using (SearchResultCollection searchResults = mySearcher.FindAll ())
    {
        foreach (SearchResult resEnt in searchResults) {
            if (resEnt.Properties ["mail"] != null && resEnt.Properties ["mail"].Count > 0) {
                string email = resEnt.Properties ["mail"] [0] as string;
                if (! String.IsNullOrEmpty (email)) {
                }
            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16630238_16632882_7_16
16630238_21900798_9_21
Title: high frequency timing .NET 
----------------------------------------

static void Main (string [] args) {
    timeBeginPeriod (10);
    while (! Console.KeyAvailable) {
        var sw = Stopwatch.StartNew ();
        for (int ix = 0; ix < 100; ++ ix)
            Thread.Sleep (1);

        sw.Stop ();
        Console.WriteLine ("{0} msec", sw.ElapsedMilliseconds);
    }
    timeEndPeriod (10);
}
----------------------------------------

static void Main (string [] args) {
    var count = 0;
    var stopwatch = new Stopwatch ();
    stopwatch.Start ();
    while (count <= 1000) {
        Thread.Sleep (1);
        count ++;
    }
    stopwatch.Stop ();
    Console.WriteLine ("C# .NET 4.0 avg. {0}", stopwatch.Elapsed.TotalSeconds / count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16633586_16633613_1_13
16633586_16633644_1_13
Title: Combobox items from a list c# 
----------------------------------------

public List < string > Province (String province) {
    province = UppercaseFirst (province);
    List < string > disttListB = new List < string > ();
    disttListB.Add ("Quetta");
    disttListB.Add ("Chaman");
    disttListB.Add ("Gawadar");
    disttListB.Add ("Kalat");
    return disttListB;
}
----------------------------------------

public List < string > Province (String province) {
    province = UppercaseFirst (province);
    List < string > disttListB = new List < string > ();
    disttListB.Add ("Quetta");
    disttListB.Add ("Chaman");
    disttListB.Add ("Gawadar");
    disttListB.Add ("Kalat");
    return disttListB;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16648158_16648309_5_20
16648158_16648335_1_15
Title: CA2000 : Microsoft.Reliability : Call System.IDisposable.Dispose on object 'dt' before all references to it are out of scope 
----------------------------------------

public void testMethod () {
    DataTable dt = null;
    try {
        dt = new DataTable ();
    }
    catch {
    }
    finally {
        if (dt != null)
            dt.Dispose ();

    }
}
----------------------------------------

public void testMethod () {
    DataTable dt = new DataTable ();
    DataView dv = null;
    try {
        dv = new DataView (dt);
    }
    finally {
        if (dt != null)
            dt.Dispose ();

        if (dv != null)
            dv.Dispose ();

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16648158_16648309_5_20
16648158_16648378_5_25
Title: CA2000 : Microsoft.Reliability : Call System.IDisposable.Dispose on object 'dt' before all references to it are out of scope 
----------------------------------------

public void testMethod () {
    DataTable dt = null;
    try {
        dt = new DataTable ();
    }
    catch {
    }
    finally {
        if (dt != null)
            dt.Dispose ();

    }
}
----------------------------------------

public void testMethod () {
    DataTable dt = null;
    DataView dv = null;
    try {
        dt = new DataTable (dt);
        dv = new DataView (dt);
    }
    catch {
    }
    finally {
        if (dt != null)
            dt.Dispose ();

        if (dv != null)
            dv.Dispose ();

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16667746_16668838_1_16
16667746_16669383_1_14
Title: Search within Enum attribute 
----------------------------------------

public static T GetEnumValueByAttributeString < T > (string code) where T : struct {
    if (! typeof (T).IsEnum)
        throw new ArgumentException ("T should be an enum");

    var matches = typeof (T).GetFields ().Where (f = > ((CodeAttribute []) (f.GetCustomAttributes (typeof (CodeAttribute), false))).Any (c = > c.Code == code)).ToList ();
    if (matches.Count < 1)
        throw new Exception ("No match");

    if (matches.Count > 1)
        throw new Exception ("More than one match");

    return (T) (matches [0].GetValue (null));
}
----------------------------------------

public static T GetEnumValueFromDescription < T > (string description) {
    var type = typeof (T);
    if (! type.IsEnum)
        throw new ArgumentException ();

    FieldInfo [] fields = type.GetFields ();
    var field = fields.SelectMany (f = > f.GetCustomAttributes (typeof (CodeAttribute), false), (f, a) = > new {Field = f, Att = a}).Where (a = > ((CodeAttribute) a.Att).Code == description).SingleOrDefault ();
    return field == null ? default (T) : (T) field.Field.GetRawConstantValue ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16682659_16692631_1_32
16682659_16695234_1_16
Title: How Can i Distribute String in rectangle 
----------------------------------------

private void Form1_Paint (object sender, PaintEventArgs e) {
    string text = "this is distribute";
    Rectangle displayRectangle = new Rectangle (new Point (40, 40), new Size (400, 80));
    e.Graphics.DrawRectangle (Pens.Black, displayRectangle);
    StringFormat format1 = new StringFormat (StringFormatFlags.NoClip);
    format1.LineAlignment = StringAlignment.Center;
    format1.Alignment = StringAlignment.Near;
    RectangleF rcF = (RectangleF) displayRectangle;
    List < Region > regions = new List < System.Drawing.Region > ();
    for (int i = 0; i < text.Length; i ++) {
        format1.SetMeasurableCharacterRanges (new CharacterRange [] {new CharacterRange (i, 1)});
        regions.AddRange (e.Graphics.MeasureCharacterRanges (text, this.Font, rcF, format1));
    }
    RectangleF minBounds = regions [0].GetBounds (e.Graphics);
    RectangleF maxBounds = regions [regions.Count - 1].GetBounds (e.Graphics);
    float ratio = (float) displayRectangle.Width / (float) ((maxBounds.X + maxBounds.Width) - minBounds.X);
    for (int i = 0; i < regions.Count; i ++) {
        Region region = regions [i];
        RectangleF boundsF = region.GetBounds (e.Graphics);
        PointF ptF = new PointF (displayRectangle.X + (int) ((boundsF.Left - minBounds.X) * ratio), (int) boundsF.Top);
        e.Graphics.DrawString (text.Substring (i, 1), this.Font, Brushes.Black, ptF);
    }
}
----------------------------------------

private void Form1_Paint (object sender, PaintEventArgs e) {
    string text = "this is distribute";
    Rectangle displayRectangle = new Rectangle (new Point (40, 40), new Size (400, 80));
    e.Graphics.DrawRectangle (Pens.Black, displayRectangle);
    int step = displayRectangle.Width / text.Length;
    SizeF szF = e.Graphics.MeasureString (text, this.Font);
    int y = (displayRectangle.Y + displayRectangle.Height / 2) - (int) szF.Height / 2;
    for (int i = 0; i < text.Length; i ++) {
        e.Graphics.DrawString (text.Substring (i, 1), this.Font, Brushes.Black, displayRectangle.X + (i * step), y);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1668451_10877820_1_16
1668451_48434457_8_27
Title: Use LINQ to move item to top of list 
----------------------------------------

public static IEnumerable < T > ServeFirst < T > (this IEnumerable < T > source, Predicate < T > p) {
    var list = new List < T > ();
    foreach (var s in source) {
        if (p (s))
            yield return s;
        else
            list.Add (s);

    }
    foreach (var s in list)
        yield return s;

}
----------------------------------------

public static bool MoveToFrontOfListWhere < T > (this List < T > collection, Func < T, bool > predicate) {
    if (collection == null || collection.Count <= 0)
        return false;

    int index = - 1;
    for (int i = 0; i < collection.Count; i ++) {
        T element = collection.ElementAt (i);
        if (! predicate (element))
            continue;

        index = i;
        break;
    }
    if (index == - 1)
        return false;

    T item = collection [index];
    collection [index] = collection [0];
    collection [0] = item;
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16717143_16717255_1_17
16717143_16717263_1_11
Title: How to create an ActionController to work both at run time and with ajax 
----------------------------------------

public ActionResult GetFolderList (int ? parent) {
    List < String > folderList = new List < String > ();
    folderList.Add ("East Midlands");
    folderList.Add ("West Midlands");
    folderList.Add ("South West");
    folderList.Add ("North East");
    folderList.Add ("North West");
    if (Request.IsAjaxRequest ()) {
        return Json (folderList);
    }
    return View ("someView", folderList);
}
----------------------------------------

public List < string > GetFolderList () {
    List < String > folderList = new List < String > ();
    folderList.Add ("East Midlands");
    folderList.Add ("West Midlands");
    folderList.Add ("South West");
    folderList.Add ("North East");
    folderList.Add ("North West");
    return folderList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16717143_16717263_1_11
16717143_16718338_1_16
Title: How to create an ActionController to work both at run time and with ajax 
----------------------------------------

public List < string > GetFolderList () {
    List < String > folderList = new List < String > ();
    folderList.Add ("East Midlands");
    folderList.Add ("West Midlands");
    folderList.Add ("South West");
    folderList.Add ("North East");
    folderList.Add ("North West");
    return folderList;
}
----------------------------------------

public ActionResult GetFolderList (int ? parent) {
    List < String > folderList = new List < String > ();
    folderList.Add ("East Midlands");
    folderList.Add ("West Midlands");
    folderList.Add ("South West");
    folderList.Add ("North East");
    folderList.Add ("North West");
    if (Request.IsAjaxRequest ()) {
        return Json (folderList);
    }
    return View ("FolderList", folderList);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1673639_26382550_10_23
1673639_7992981_1_10
Title: Checking for null in an object hierarchy 
----------------------------------------

public TResult SafeGet < TSource, TResult > (TSource source, Func < TSource, TResult > getResult, TResult defaultResult) {
    if (EqualityComparer < TSource >.Default.Equals (source, default (TSource)))
        return defaultResult;

    try {
        return getResult (source);
    }
    catch {
        return defaultResult;
    }
}
----------------------------------------

public static TResult SafeGet < TSource, TResult > (this TSource source, Func < TSource, TResult > getResult) {
    if (source == null)
        return default (TResult);

    try {
        return getResult (source);
    }
    catch {
        return default (TResult);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16741035_16741586_1_24
16741035_16741590_1_18
Title: C# mysql UPDATE and SELECT in one button 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string input = label1.Text.Trim ();
    string conn = "server=46.28.110.147;user=______;password=________;database=________;";
    string sql = "SELECT numbers FROM domestic WHERE used=0 ORDER BY numbers LIMIT 1; UPDATE domestic SET used = 1 WHERE numbers = @numbers";
    MySqlConnection myconn = new MySqlConnection (conn);
    MySqlCommand cmd = new MySqlCommand (sql, myconn);
    MySqlDataAdapter da = null;
    DataSet ds = null;
    DataTable dt = null;
    cmd.Parameters.Add ("numbers", SqlDbType.VarChar, 50).Value = input;
    da = new MySqlDataAdapter (cmd);
    ds = new DataSet ();
    da.Fill (ds);
    if (ds.Tables.Count > 0) {
        if (ds.Tables (0).Rows.Count > 0) {
            dt = ds.Tables (0);
            label1.Text = dt.Rows (0) (0) + "";
        }
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string input = label1.Text.Trim ();
    string conn = "server=46.28.110.147;user=______;password=________;database=________;";
    MySqlConnection myconn = new MySqlConnection (conn);
    string sql = "SELECT numbers FROM domestic WHERE used=0 ORDER BY numbers LIMIT 1";
    MySqlDataAdapter da = new MySqlDataAdapter (sql, myconn);
    DataTable dt = new DataTable ();
    da.Fill (dt);
    label1.Text = dt.Rows [0] [0] + "";
    MySqlCommand cmd = new MySqlCommand (sq2, myconn);
    string sq2 = "UPDATE domestic SET used = 1 WHERE numbers = '" + label1.Text + "'";
    myconn.Open ();
    cmd.ExecuteNonQuery ();
    myconn.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16744615_18866949_176_187
16744615_18866949_189_202
Title: WinCE 6.0 connecting to PC via ActiveSync/Window Mobile Device Center C# 
----------------------------------------

public void SendData (byte [] data) {
    try {
        bool a = currentST.Write (data, 0, data.Length);
    }
    catch (Exception ex) {
        IsConnected = false;
        MessageBox.Show ("Error!\n" + ex.Message + "\n" + ex.StackTrace);
    }
}
----------------------------------------

public void SendData (string data) {
    try {
        byte [] msg = Encoding.UTF8.GetBytes (data + Convert.ToChar (Convert.ToByte (3)));
        bool a = currentST.Write (msg, 0, msg.Length);
        msg = null;
    }
    catch (Exception ex) {
        IsConnected = false;
        MessageBox.Show ("Error!\n" + ex.Message + "\n" + ex.StackTrace);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16774725_16774759_1_21
16774725_16774759_25_48
Title: Serialize any type of list to XML? 
----------------------------------------

public string ObjectToXml < T > (T obj) {
    var stream = new StringWriter ();
    string xmlDoc = string.Empty;
    try {
        var xmlSerializer = new XmlSerializer (typeof (T));
        xmlSerializer.Serialize (stream, obj);
        xmlDoc = stream.GetStringBuilder ().ToString ();
    }
    catch (Exception ex) {
        Console.WriteLine ("Błąd pliku xml: " + ex);
    }
    finally {
        stream.Close ();
    }
    return xmlDoc;
}
----------------------------------------

public static T XmlToObject < T > (string xmlDoc) {
    var stream = new MemoryStream ();
    byte [] xmlObject = Encoding.Unicode.GetBytes (xmlDoc);
    stream.Write (xmlObject, 0, xmlObject.Length);
    stream.Position = 0;
    T message;
    var ss = new XmlSerializer (typeof (T));
    try {
        message = (T) ss.Deserialize (stream);
    }
    catch (Exception) {
        message = default (T);
    }
    finally {
        stream.Close ();
    }
    return message;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16819470_16954699_10_21
16819470_16957215_18_36
Title: AutoFixture.AutoMoq supply a known value for one constructor parameter 
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var pi = request as ParameterInfo;
    if (pi == null)
        return new NoSpecimen (request);

    if (pi.ParameterType != typeof (TimeSpan) || pi.Name != "lifespan")
        return new NoSpecimen (request);

    return this.lifespan;
}
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var pi = request as ParameterInfo;
    if (pi == null) {
        return new NoSpecimen (request);
    }
    if (pi.ParameterType != typeof (T) || ! string.Equals (pi.Name, this.name, StringComparison.CurrentCultureIgnoreCase)) {
        return new NoSpecimen (request);
    }
    return this.value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16819470_16954699_10_21
16819470_27774580_12_25
Title: AutoFixture.AutoMoq supply a known value for one constructor parameter 
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var pi = request as ParameterInfo;
    if (pi == null)
        return new NoSpecimen (request);

    if (pi.ParameterType != typeof (TimeSpan) || pi.Name != "lifespan")
        return new NoSpecimen (request);

    return this.lifespan;
}
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    if (context == null)
        throw new ArgumentNullException ("context");

    ParameterInfo parameter = request as ParameterInfo;
    if (parameter == null)
        return (object) new NoSpecimen (request);

    if (parameter.Member.DeclaringType != typeof (TTarget) || parameter.Member.MemberType != MemberTypes.Constructor || parameter.ParameterType != typeof (TValueType) || parameter.Name != _paramName)
        return (object) new NoSpecimen (request);

    return _value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16819470_16954699_10_21
16819470_28627595_5_34
Title: AutoFixture.AutoMoq supply a known value for one constructor parameter 
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var pi = request as ParameterInfo;
    if (pi == null)
        return new NoSpecimen (request);

    if (pi.ParameterType != typeof (TimeSpan) || pi.Name != "lifespan")
        return new NoSpecimen (request);

    return this.lifespan;
}
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var type = typeof (T);
    var sr = request as SeededRequest;
    if (sr == null || ! sr.Request.Equals (type)) {
        return new NoSpecimen (request);
    }
    var ctor = type.GetConstructors (BindingFlags.Instance | BindingFlags.Public).FirstOrDefault ();
    if (ctor == null) {
        return new NoSpecimen (request);
    }
    var values = new List < object > ();
    foreach (var parameter in ctor.GetParameters ()) {
        if (_ctorParameters.ContainsKey (parameter.Name)) {
            values.Add (_ctorParameters [parameter.Name]);
        } else {
            values.Add (context.Resolve (parameter.ParameterType));
        }
    }
    return ctor.Invoke (BindingFlags.CreateInstance, null, values.ToArray (), CultureInfo.InvariantCulture);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16819470_16957215_18_36
16819470_27774580_12_25
Title: AutoFixture.AutoMoq supply a known value for one constructor parameter 
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var pi = request as ParameterInfo;
    if (pi == null) {
        return new NoSpecimen (request);
    }
    if (pi.ParameterType != typeof (T) || ! string.Equals (pi.Name, this.name, StringComparison.CurrentCultureIgnoreCase)) {
        return new NoSpecimen (request);
    }
    return this.value;
}
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    if (context == null)
        throw new ArgumentNullException ("context");

    ParameterInfo parameter = request as ParameterInfo;
    if (parameter == null)
        return (object) new NoSpecimen (request);

    if (parameter.Member.DeclaringType != typeof (TTarget) || parameter.Member.MemberType != MemberTypes.Constructor || parameter.ParameterType != typeof (TValueType) || parameter.Name != _paramName)
        return (object) new NoSpecimen (request);

    return _value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16819470_16957215_18_36
16819470_28627595_5_34
Title: AutoFixture.AutoMoq supply a known value for one constructor parameter 
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var pi = request as ParameterInfo;
    if (pi == null) {
        return new NoSpecimen (request);
    }
    if (pi.ParameterType != typeof (T) || ! string.Equals (pi.Name, this.name, StringComparison.CurrentCultureIgnoreCase)) {
        return new NoSpecimen (request);
    }
    return this.value;
}
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var type = typeof (T);
    var sr = request as SeededRequest;
    if (sr == null || ! sr.Request.Equals (type)) {
        return new NoSpecimen (request);
    }
    var ctor = type.GetConstructors (BindingFlags.Instance | BindingFlags.Public).FirstOrDefault ();
    if (ctor == null) {
        return new NoSpecimen (request);
    }
    var values = new List < object > ();
    foreach (var parameter in ctor.GetParameters ()) {
        if (_ctorParameters.ContainsKey (parameter.Name)) {
            values.Add (_ctorParameters [parameter.Name]);
        } else {
            values.Add (context.Resolve (parameter.ParameterType));
        }
    }
    return ctor.Invoke (BindingFlags.CreateInstance, null, values.ToArray (), CultureInfo.InvariantCulture);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16819470_27774580_12_25
16819470_28627595_5_34
Title: AutoFixture.AutoMoq supply a known value for one constructor parameter 
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    if (context == null)
        throw new ArgumentNullException ("context");

    ParameterInfo parameter = request as ParameterInfo;
    if (parameter == null)
        return (object) new NoSpecimen (request);

    if (parameter.Member.DeclaringType != typeof (TTarget) || parameter.Member.MemberType != MemberTypes.Constructor || parameter.ParameterType != typeof (TValueType) || parameter.Name != _paramName)
        return (object) new NoSpecimen (request);

    return _value;
}
----------------------------------------

public object Create (object request, ISpecimenContext context) {
    var type = typeof (T);
    var sr = request as SeededRequest;
    if (sr == null || ! sr.Request.Equals (type)) {
        return new NoSpecimen (request);
    }
    var ctor = type.GetConstructors (BindingFlags.Instance | BindingFlags.Public).FirstOrDefault ();
    if (ctor == null) {
        return new NoSpecimen (request);
    }
    var values = new List < object > ();
    foreach (var parameter in ctor.GetParameters ()) {
        if (_ctorParameters.ContainsKey (parameter.Name)) {
            values.Add (_ctorParameters [parameter.Name]);
        } else {
            values.Add (context.Resolve (parameter.ParameterType));
        }
    }
    return ctor.Invoke (BindingFlags.CreateInstance, null, values.ToArray (), CultureInfo.InvariantCulture);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16820731_16823932_15_28
16820731_16823932_1_13
Title: Parsing String to DateTime with TryParseExact in C# 
----------------------------------------

public override bool IsValid (string value) {
    string format = "dd/MM/yyyy HH:mm:ss";
    DateTime dt;
    if (DateTime.TryParseExact ((String) value, format, CultureInfo.InvariantCulture, DateTimeStyles.None, out dt)) {
        return IsValid (dt);
    } else {
        return false;
    }
}
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;

    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16820855_16902277_1_29
16820855_16950371_1_12
Title: Convert String To Int in LINQ 
----------------------------------------

public bool GetElectricalStatus (string printName) {
    List < object > eGoodList = new List < object > ();
    var eGoodCountQuery = from row in singulationOne.Table.AsEnumerable ()
        where row.Field < String > ("print") == printName
        select row.Field < String > ("electrical");
    foreach (var eCode in eGoodCountQuery) {
        if (! string.IsNullOrEmpty (eCode.ToString ())) {
            int ? eCodeInt = Convert.ToInt32 (eCode);
            if (eCodeInt != null && (eCodeInt >= 100 && eCodeInt <= 135) || eCodeInt == 19) {
                eGoodList.Add (eCode);
            }
        }
    }
    if (eGoodList.Count () > 0) {
        return false;
    } else {
        return true;
    }
}
----------------------------------------

public bool GetElectricalStatus (string printName) {
    var query = from row in singulationOne.Table.AsEnumerable ()
        where row.Field < string > ("print") == printName
        let electrical = ParseInt32 (row.Field < string > ("electrical"))
        where electrical != null
        where electrical == 19 || electrical >= 100 && electrical <= 135
        select row;
    return ! query.Any ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1682902_11813276_57_78
1682902_44450379_46_76
Title: Streaming input to System.Speech.Recognition.SpeechRecognitionEngine 
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int i = 0;
    while (i < count && _writeEvent != null) {
        if (! _reset && _readposition >= _writeposition) {
            _writeEvent.WaitOne (100, true);
            continue;
        }
        buffer [i] = _buffer [_readposition + offset];
        _readposition ++;
        if (_readposition == _buffersize) {
            _readposition = 0;
            _reset = false;
        }
        i ++;
    }
    return count;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            if (e.HResult == - 2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16830243_21934835_1_54
16830243_25863270_10_21
Title: Combining Forms Authentication and Basic Authentication 
----------------------------------------

protected void Application_AuthenticateRequest (object sender, EventArgs e) {
    if (DoesUrlNeedBasicAuth () && Request.IsSecureConnection) {
        if (HttpContext.Current.User != null && HttpContext.Current.User.Identity.IsAuthenticated) {
            _log.Debug ("Web service requested by user " + HttpContext.Current.User.Identity.Name);
        } else {
            _log.Debug ("Null user - use basic auth");
            HttpContext ctx = HttpContext.Current;
            bool authenticated = false;
            string authHeader = ctx.Request.Headers ["Authorization"];
            if (authHeader != null && authHeader.StartsWith ("Basic")) {
                string [] credentials = extractCredentials (authHeader);
                var localAuthSection = ConfigurationManager.GetSection ("apiUsers") as ApiUsersSection;
                authenticated = CheckAuthSectionForCredentials (credentials [0], credentials [1], localAuthSection);
                if (! authenticated) {
                    var webAuth = System.Web.Configuration.WebConfigurationManager.GetSection ("apiUsers") as ApiUsersSection;
                    authenticated = CheckAuthSectionForCredentials (credentials [0], credentials [1], webAuth);
                }
            }
            if (authenticated == false) {
                ctx.Response.StatusCode = 401;
                ctx.Response.AddHeader ("WWW-Authenticate", "Basic realm=\"localhost\"");
                ctx.Response.Flush ();
                ctx.Response.Close ();
                return;
            }
        }
    } else {
    }
}
----------------------------------------

protected void Application_AuthenticateRequest (object sender, EventArgs e) {
    var application = (HttpApplication) sender;
    if (application.Context.Request.Path.StartsWith ("/HealthCheck", StringComparison.OrdinalIgnoreCase)) {
        if (HttpContext.Current.User == null) {
            var context = HttpContext.Current;
            context.Response.SuppressFormsAuthenticationRedirect = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16842339_16842376_1_11
16842339_16842382_1_13
Title: """Not all code paths return a value"" error message in method using foreach" 
----------------------------------------

Pracownik Search (string nazwisko) {
    if (List == null)
        return null;

    foreach (Pracownik pracownik in List) {
        if (pracownik.someProp.Equals (nazwisko))
            return pracownik;

    }
    return null;
}
----------------------------------------

Pracownik Search (string nazwisko) {
    foreach (Pracownik pracownik in List) {
        if (List.Contains (pracownik))
            return pracownik;
        else
            return null;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16842339_16842376_1_11
16842339_16842424_1_12
Title: """Not all code paths return a value"" error message in method using foreach" 
----------------------------------------

Pracownik Search (string nazwisko) {
    if (List == null)
        return null;

    foreach (Pracownik pracownik in List) {
        if (pracownik.someProp.Equals (nazwisko))
            return pracownik;

    }
    return null;
}
----------------------------------------

Pracownik Search (string nazwisko) {
    foreach (Pracownik pracownik in List) {
        if (List.Contains (pracownik))
            return pracownik;
        else
            return null;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16842339_16842382_1_13
16842339_16842424_1_12
Title: """Not all code paths return a value"" error message in method using foreach" 
----------------------------------------

Pracownik Search (string nazwisko) {
    foreach (Pracownik pracownik in List) {
        if (List.Contains (pracownik))
            return pracownik;
        else
            return null;

    }
    return null;
}
----------------------------------------

Pracownik Search (string nazwisko) {
    foreach (Pracownik pracownik in List) {
        if (List.Contains (pracownik))
            return pracownik;
        else
            return null;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16842911_16842956_1_37
16842911_16843160_1_34
Title: System.NullReferenceException: Object reference not set to an instance of an object 
----------------------------------------

public List < Car > getCars (String ownerid) {
    Car car;
    List < Car > c = new List < Car > ();
    String appPath = HttpContext.Current.Request.PhysicalApplicationPath;
    String filePath = appPath + "DataStorage\\car.xml";
    XmlDocument xd = new XmlDocument ();
    FileStream xdfile = new FileStream (filePath, FileMode.Open);
    xd.Load (xdfile);
    XmlNodeList cars = xd.GetElementsByTagName ("Car");
    for (int i = 0; i < cars.Count; i ++) {
        XmlElement CAR = (XmlElement) xd.GetElementsByTagName ("Car") [i];
        if (CAR.GetAttribute ("Owner").Equals (ownerid)) {
            car = new Car ();
            car.setRegistrationNumber (CAR.GetAttribute ("reistrationNumber"));
            car.setYearOfManufacture (CAR.GetAttribute ("yearOfManufacture"));
            car.setOwnerId (CAR.GetAttribute ("Owner"));
            car.setDateOfPurchase (CAR.GetElementsByTagName ("DateOfPurchase") [0].ToString ());
            car.setColour (CAR.GetElementsByTagName ("Colour") [0].ToString ());
            car.setImage (CAR.GetElementsByTagName ("Photos") [0].FirstChild.InnerText);
            c.Add (car);
        }
    }
    xdfile.Close ();
    return c;
}
----------------------------------------

public List < Car > getCars (String ownerid) {
    List < Car > c = new List < Car > ();
    String appPath = HttpContext.Current.Request.PhysicalApplicationPath;
    String filePath = appPath + "DataStorage\\car.xml";
    XmlDocument xd = new XmlDocument ();
    FileStream xdfile = new FileStream (filePath, FileMode.Open);
    xd.Load (xdfile);
    XmlNodeList cars = xd.GetElementsByTagName ("Car");
    for (int i = 0; i < cars.Count; i ++) {
        XmlElement CAR = (XmlElement) xd.GetElementsByTagName ("Car") [i];
        if (CAR.GetAttribute ("Owner").Equals (ownerid)) {
            c [i].setRegistrationNumber (CAR.GetAttribute ("reistrationNumber"));
            c [i].setYearOfManufacture (CAR.GetAttribute ("yearOfManufacture"));
            c [i].setOwnerId (CAR.GetAttribute ("Owner"));
            c [i].setDateOfPurchase (CAR.GetElementsByTagName ("DateOfPurchase") [0].ToString ());
            c [i].setColour (CAR.GetElementsByTagName ("Colour") [0].ToString ());
            c [i].setImage (CAR.GetElementsByTagName ("Photos") [0].FirstChild.InnerText);
            c.Add (c [i]);
        }
    }
    xdfile.Close ();
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16843510_16843597_1_13
16843510_16843600_1_13
Title: Index was outside the bounds of the array while trying to start multiple threads 
----------------------------------------

private void buttonDoSomething_Click (object sender, EventArgs e) {
    List < Thread > t = new List < Thread > ();
    string [] bla = textBoxBla.Lines;
    for (int i = 0; i < bla.Length; i ++) {
        int y = i;
        t.Add (new Thread (() = > some_thread_funmction (bla [y])));
        t [i].Start ();
    }
}
----------------------------------------

private void buttonDoSomething_Click (object sender, EventArgs e) {
    List < Thread > t = new List < Thread > ();
    string [] bla = textBoxBla.Lines;
    for (int i = 0; i < bla.Length; i ++) {
        int index = i;
        t.Add (new Thread (() = > some_thread_funmction (bla [index])));
        t [i].Start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16856642_16856945_23_35
16856642_16857521_17_27
Title: producer consumer using AutoReset Event in c# 
----------------------------------------

private static void Producer () {
    while (true) {
        if (num == 0) {
            num ++;
            Console.WriteLine ("Produced " + num);
            Thread.Sleep (1000);
            e.Set ();
        }
    }
}
----------------------------------------

static void Producer () {
    while (true) {
        consumed.WaitOne ();
        num ++;
        Console.WriteLine ("Produced " + num);
        Thread.Sleep (1000);
        produced.Set ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16856642_16856945_37_49
16856642_16857521_29_39
Title: producer consumer using AutoReset Event in c# 
----------------------------------------

private static void Consumer () {
    while (true) {
        if (num == 1) {
            Console.WriteLine ("Consumed " + num);
            Thread.Sleep (1000);
            num --;
            e.WaitOne ();
        }
    }
}
----------------------------------------

static void Consumer () {
    while (true) {
        produced.WaitOne ();
        Console.WriteLine ("Consumed " + num);
        Thread.Sleep (1000);
        num --;
        consumed.Set ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16880975_16881065_209_220
16880975_16881065_232_247
Title: Random number from a seed 
----------------------------------------

public override int Next (int maxValue) {
    if (maxValue <= 0) {
        if (maxValue == 0)
            return 0;
        else
            throw new ArgumentOutOfRangeException ("maxValue", "Next() called with a negative parameter");

    }
    return (int) (this.GenerateUInt () / (uint.MaxValue / maxValue));
}
----------------------------------------

public override int Next (int minValue, int maxValue) {
    if (minValue >= maxValue) {
        if (minValue == maxValue) {
            return minValue;
        } else {
            throw new ArgumentOutOfRangeException ("minValue", "Next() called with minValue > maxValue");
        }
    }
    return (int) (this.GenerateUInt () / ((double) uint.MaxValue / (maxValue - minValue)) + minValue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16880975_16881834_138_233
16880975_16881834_44_63
Title: Random number from a seed 
----------------------------------------

public static float Generate (float x, float y, float z) {
    const float F3 = 0.333333333f;
    const float G3 = 0.166666667f;
    float n0, n1, n2, n3;
    float s = (x + y + z) * F3;
    float xs = x + s;
    float ys = y + s;
    float zs = z + s;
    int i = FastFloor (xs);
    int j = FastFloor (ys);
    int k = FastFloor (zs);
    float t = (float) (i + j + k) * G3;
    float X0 = i - t;
    float Y0 = j - t;
    float Z0 = k - t;
    float x0 = x - X0;
    float y0 = y - Y0;
    float z0 = z - Z0;
    int i1, j1, k1;
    int i2, j2, k2;
    if (x0 >= y0) {
        if (y0 >= z0) {
            i1 = 1;
            j1 = 0;
            k1 = 0;
            i2 = 1;
            j2 = 1;
            k2 = 0;
        } else if (x0 >= z0) {
            i1 = 1;
            j1 = 0;
            k1 = 0;
            i2 = 1;
            j2 = 0;
            k2 = 1;
        } else {
            i1 = 0;
            j1 = 0;
            k1 = 1;
            i2 = 1;
            j2 = 0;
            k2 = 1;
        }
    } else {
        if (y0 < z0) {
            i1 = 0;
            j1 = 0;
            k1 = 1;
            i2 = 0;
            j2 = 1;
            k2 = 1;
        } else if (x0 < z0) {
            i1 = 0;
            j1 = 1;
            k1 = 0;
            i2 = 0;
            j2 = 1;
            k2 = 1;
        } else {
            i1 = 0;
            j1 = 1;
            k1 = 0;
            i2 = 1;
            j2 = 1;
            k2 = 0;
        }
    }
    float x1 = x0 - i1 + G3;
    float y1 = y0 - j1 + G3;
    float z1 = z0 - k1 + G3;
    float x2 = x0 - i2 + 2.0f * G3;
    float y2 = y0 - j2 + 2.0f * G3;
    float z2 = z0 - k2 + 2.0f * G3;
    float x3 = x0 - 1.0f + 3.0f * G3;
    float y3 = y0 - 1.0f + 3.0f * G3;
    float z3 = z0 - 1.0f + 3.0f * G3;
    int ii = i % 256;
    int jj = j % 256;
    int kk = k % 256;
    float t0 = 0.6f - x0 * x0 - y0 * y0 - z0 * z0;
    if (t0 < 0.0f)
        n0 = 0.0f;
    else {
        t0 *= t0;
        n0 = t0 * t0 * grad (perm [ii + perm [jj + perm [kk]]], x0, y0, z0);
    }
    float t1 = 0.6f - x1 * x1 - y1 * y1 - z1 * z1;
    if (t1 < 0.0f)
        n1 = 0.0f;
    else {
        t1 *= t1;
        n1 = t1 * t1 * grad (perm [ii + i1 + perm [jj + j1 + perm [kk + k1]]], x1, y1, z1);
    }
    float t2 = 0.6f - x2 * x2 - y2 * y2 - z2 * z2;
    if (t2 < 0.0f)
        n2 = 0.0f;
    else {
        t2 *= t2;
        n2 = t2 * t2 * grad (perm [ii + i2 + perm [jj + j2 + perm [kk + k2]]], x2, y2, z2);
    }
    float t3 = 0.6f - x3 * x3 - y3 * y3 - z3 * z3;
    if (t3 < 0.0f)
        n3 = 0.0f;
    else {
        t3 *= t3;
        n3 = t3 * t3 * grad (perm [ii + 1 + perm [jj + 1 + perm [kk + 1]]], x3, y3, z3);
    }
    return 32.0f * (n0 + n1 + n2 + n3);
}
----------------------------------------

public static float Generate (float x) {
    int i0 = FastFloor (x);
    int i1 = i0 + 1;
    float x0 = x - i0;
    float x1 = x0 - 1.0f;
    float n0, n1;
    float t0 = 1.0f - x0 * x0;
    t0 *= t0;
    n0 = t0 * t0 * grad (perm [i0 & 0xff], x0);
    float t1 = 1.0f - x1 * x1;
    t1 *= t1;
    n1 = t1 * t1 * grad (perm [i1 & 0xff], x1);
    return 0.395f * (n0 + n1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16880975_16881834_138_233
16880975_16881834_71_135
Title: Random number from a seed 
----------------------------------------

public static float Generate (float x, float y, float z) {
    const float F3 = 0.333333333f;
    const float G3 = 0.166666667f;
    float n0, n1, n2, n3;
    float s = (x + y + z) * F3;
    float xs = x + s;
    float ys = y + s;
    float zs = z + s;
    int i = FastFloor (xs);
    int j = FastFloor (ys);
    int k = FastFloor (zs);
    float t = (float) (i + j + k) * G3;
    float X0 = i - t;
    float Y0 = j - t;
    float Z0 = k - t;
    float x0 = x - X0;
    float y0 = y - Y0;
    float z0 = z - Z0;
    int i1, j1, k1;
    int i2, j2, k2;
    if (x0 >= y0) {
        if (y0 >= z0) {
            i1 = 1;
            j1 = 0;
            k1 = 0;
            i2 = 1;
            j2 = 1;
            k2 = 0;
        } else if (x0 >= z0) {
            i1 = 1;
            j1 = 0;
            k1 = 0;
            i2 = 1;
            j2 = 0;
            k2 = 1;
        } else {
            i1 = 0;
            j1 = 0;
            k1 = 1;
            i2 = 1;
            j2 = 0;
            k2 = 1;
        }
    } else {
        if (y0 < z0) {
            i1 = 0;
            j1 = 0;
            k1 = 1;
            i2 = 0;
            j2 = 1;
            k2 = 1;
        } else if (x0 < z0) {
            i1 = 0;
            j1 = 1;
            k1 = 0;
            i2 = 0;
            j2 = 1;
            k2 = 1;
        } else {
            i1 = 0;
            j1 = 1;
            k1 = 0;
            i2 = 1;
            j2 = 1;
            k2 = 0;
        }
    }
    float x1 = x0 - i1 + G3;
    float y1 = y0 - j1 + G3;
    float z1 = z0 - k1 + G3;
    float x2 = x0 - i2 + 2.0f * G3;
    float y2 = y0 - j2 + 2.0f * G3;
    float z2 = z0 - k2 + 2.0f * G3;
    float x3 = x0 - 1.0f + 3.0f * G3;
    float y3 = y0 - 1.0f + 3.0f * G3;
    float z3 = z0 - 1.0f + 3.0f * G3;
    int ii = i % 256;
    int jj = j % 256;
    int kk = k % 256;
    float t0 = 0.6f - x0 * x0 - y0 * y0 - z0 * z0;
    if (t0 < 0.0f)
        n0 = 0.0f;
    else {
        t0 *= t0;
        n0 = t0 * t0 * grad (perm [ii + perm [jj + perm [kk]]], x0, y0, z0);
    }
    float t1 = 0.6f - x1 * x1 - y1 * y1 - z1 * z1;
    if (t1 < 0.0f)
        n1 = 0.0f;
    else {
        t1 *= t1;
        n1 = t1 * t1 * grad (perm [ii + i1 + perm [jj + j1 + perm [kk + k1]]], x1, y1, z1);
    }
    float t2 = 0.6f - x2 * x2 - y2 * y2 - z2 * z2;
    if (t2 < 0.0f)
        n2 = 0.0f;
    else {
        t2 *= t2;
        n2 = t2 * t2 * grad (perm [ii + i2 + perm [jj + j2 + perm [kk + k2]]], x2, y2, z2);
    }
    float t3 = 0.6f - x3 * x3 - y3 * y3 - z3 * z3;
    if (t3 < 0.0f)
        n3 = 0.0f;
    else {
        t3 *= t3;
        n3 = t3 * t3 * grad (perm [ii + 1 + perm [jj + 1 + perm [kk + 1]]], x3, y3, z3);
    }
    return 32.0f * (n0 + n1 + n2 + n3);
}
----------------------------------------

public static float Generate (float x, float y) {
    const float F2 = 0.366025403f;
    const float G2 = 0.211324865f;
    float n0, n1, n2;
    float s = (x + y) * F2;
    float xs = x + s;
    float ys = y + s;
    int i = FastFloor (xs);
    int j = FastFloor (ys);
    float t = (float) (i + j) * G2;
    float X0 = i - t;
    float Y0 = j - t;
    float x0 = x - X0;
    float y0 = y - Y0;
    int i1, j1;
    if (x0 > y0) {
        i1 = 1;
        j1 = 0;
    } else {
        i1 = 0;
        j1 = 1;
    }
    float x1 = x0 - i1 + G2;
    float y1 = y0 - j1 + G2;
    float x2 = x0 - 1.0f + 2.0f * G2;
    float y2 = y0 - 1.0f + 2.0f * G2;
    int ii = i % 256;
    int jj = j % 256;
    float t0 = 0.5f - x0 * x0 - y0 * y0;
    if (t0 < 0.0f)
        n0 = 0.0f;
    else {
        t0 *= t0;
        n0 = t0 * t0 * grad (perm [ii + perm [jj]], x0, y0);
    }
    float t1 = 0.5f - x1 * x1 - y1 * y1;
    if (t1 < 0.0f)
        n1 = 0.0f;
    else {
        t1 *= t1;
        n1 = t1 * t1 * grad (perm [ii + i1 + perm [jj + j1]], x1, y1);
    }
    float t2 = 0.5f - x2 * x2 - y2 * y2;
    if (t2 < 0.0f)
        n2 = 0.0f;
    else {
        t2 *= t2;
        n2 = t2 * t2 * grad (perm [ii + 1 + perm [jj + 1]], x2, y2);
    }
    return 40.0f * (n0 + n1 + n2);
}
----------------------------------------

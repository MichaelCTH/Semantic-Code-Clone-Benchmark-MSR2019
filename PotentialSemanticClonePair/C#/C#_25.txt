$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36801143_36894454_8_42
36801143_36900492_9_52
Title: Algorithm To Calculate Different Types Of Memory 
----------------------------------------

static void Main (string [] args) {
    var categories = PerformanceCounterCategory.GetCategories ();
    foreach (var cat in categories) {
        if (cat.CategoryType != PerformanceCounterCategoryType.MultiInstance) {
            Console.WriteLine ("Category: " + cat.CategoryName);
            foreach (var counter in cat.GetCounters ()) {
                Console.WriteLine ("Counter: " + counter.CounterName + ": " + counter.NextSample ().RawValue);
            }
        } else {
            foreach (var instance in cat.GetInstanceNames ()) {
                Console.WriteLine ("Instance: " + instance);
                foreach (var counter in cat.GetCounters (instance)) {
                    try {
                        Console.WriteLine ("Counter: " + counter.CounterName + ": " + counter.NextSample ().RawValue);
                    }
                    catch {
                    }
                }
            }
        }
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    try {
        ManagementScope Scope;
        Scope = new ManagementScope (String.Format ("\\\\{0}\\root\\CIMV2", "."), null);
        Scope.Connect ();
        double totalVisibleMemory = 0;
        ObjectQuery wql = new ObjectQuery ("SELECT * FROM Win32_OperatingSystem");
        ManagementObjectSearcher searcher = new ManagementObjectSearcher (wql);
        ManagementObjectCollection results = searcher.Get ();
        foreach (ManagementObject result in results) {
            totalVisibleMemory = double.Parse (result ["TotalVisibleMemorySize"].ToString ()) / 1024;
            Console.WriteLine ("Total Visible Memory: {0:0} mb", totalVisibleMemory);
            Console.WriteLine ("Free Physical Memory: {0:0} mb", double.Parse (result ["FreePhysicalMemory"].ToString ()) / 1024);
            Console.WriteLine ("Total Virtual Memory: {0:0} mb", double.Parse (result ["TotalVirtualMemorySize"].ToString ()) / 1024);
            Console.WriteLine ("Free Virtual Memory: {0:0} mb", double.Parse (result ["FreeVirtualMemory"].ToString ()) / 1024);
        }
        ObjectQuery Query = new ObjectQuery ("SELECT Capacity FROM Win32_PhysicalMemory");
        ManagementObjectSearcher Searcher = new ManagementObjectSearcher (Scope, Query);
        UInt64 Capacity = 0;
        foreach (ManagementObject WmiObject in Searcher.Get ()) {
            Capacity += (UInt64) WmiObject ["Capacity"];
        }
        var totalPhysicalMemory = Capacity / (1024 * 1024);
        Console.WriteLine (String.Format ("Total Physical Memory {0:0} mb", Capacity / (1024 * 1024)));
        var hardwareReserved = totalPhysicalMemory - totalVisibleMemory;
        Console.WriteLine (string.Format ("Hardware Reserved Memory {0:0} mb", hardwareReserved));
    }
    catch (Exception e) {
        Console.WriteLine (string.Format ("Exception {0} Trace {1}", e.Message, e.StackTrace));
    }
    Console.WriteLine ("Press Enter to exit");
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36832989_36834451_1_33
36832989_36834777_12_34
Title: How to split every pages of a pdf into multiple pdf files in C# (using iTextSharp)? 
----------------------------------------

public void ExtractPage (string sourcePdfPath, string outputPdfPath, int pageNumber) {
    PdfReader reader = null;
    Document document = null;
    PdfCopy pdfCopyProvider = null;
    PdfImportedPage importedPage = null;
    try {
        reader = new PdfReader (sourcePdfPath);
        document = new Document (reader.GetPageSizeWithRotation (pageNumber));
        pdfCopyProvider = new PdfCopy (document, new System.IO.FileStream (outputPdfPath, System.IO.FileMode.Create));
        document.Open ();
        importedPage = pdfCopyProvider.GetImportedPage (reader, pageNumber);
        pdfCopyProvider.AddPage (importedPage);
        document.Close ();
        reader.Close ();
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

public void ExtractPage (string sourcePath, string outputPath) {
    int startPage = 1;
    int endPage = 6;
    for (int index = startPage; index <= endPage; index ++) {
        PdfReader objReader = new PdfReader (sourcePath + ".pdf");
        Document objDocument = new Document (objReader.GetPageSizeWithRotation (startPage));
        string destination = Path.Combine (outputPath, index + ".pdf");
        PdfCopy pdfCopyProvider = new PdfCopy (objDocument, new FileStream (destination, FileMode.Create));
        objDocument.Open ();
        PdfImportedPage importedPage = pdfCopyProvider.GetImportedPage (objReader, index);
        pdfCopyProvider.AddPage (importedPage);
        objDocument.Close ();
        objReader.Close ();
    }
    MessageBox.Show (@"Splitting successful!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36865167_36865326_1_34
36865167_36865398_1_25
Title: WebService only returning first row using a sql queryC# 
----------------------------------------

public List < typVenda > getListaVendas (string dt_min, string dt_max) {
    venda vendas = new List < typVenda > ();
    typVenda objVenda = new typVenda ();
    SqlConnection con = new SqlConnection (@"Data Source=server;Initial Catalog=database;User ID=user;password=password");
    SqlCommand cmd = new SqlCommand ("SELECT * FROM dbo.vcnosadesoes_getlistavendas", con);
    con.Open ();
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        while (dr.Read ()) {
            var objVenda = new typVenda ();
            objVenda.id = dr ["id"].ToString ();
            objVenda.contact_moment = dr ["contact_moment"].ToString ();
            objVenda.nome = dr ["nome"].ToString ();
            objVenda.pacote = dr ["pacote"].ToString ();
            objVenda.telefone = dr ["telefone"].ToString ();
            objVenda.codigo_wc = dr ["codigo_wc"].ToString ();
            vendas.Add (objVenda);
        }
        dr.Close ();
    }
    con.Close ();
    return vendas;
}
----------------------------------------

public List < typVenda > getListaVendas (string dt_min, string dt_max) {
    List < typVenda > objVendaList = new List < typVenda > ();
    using (SqlConnection con = new SqlConnection ("connection String here"))
    {
        using (SqlCommand cmd = new SqlCommand ("SELECT * FROM dbo.vcnosadesoes_getlistavendas", con))
        {
            con.Open ();
            SqlDataReader dr = cmd.ExecuteReader ();
            while (dr.Read ()) {
                var objVenda = new typVenda ();
                objVendaList.Add (objVenda);
            }
            dr.Close ();
        }} return objVendaList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36869323_36870117_1_17
36869323_36870150_1_27
Title: 3d unity c# car reverse direction movement 
----------------------------------------

void Update () {
    var reverseDeltaTime = Time.deltaTime;
    if (Input.GetKey (KeyCode.DownArrow))
        reverseDeltaTime = - reverseDeltaTime;

    if (Input.GetKey (KeyCode.UpArrow))
        transform.Translate (Vector3.forward * speed * Time.deltaTime);

    if (Input.GetKey (KeyCode.LeftArrow))
        transform.Rotate (0, - 90 * reverseDeltaTime, 0);

    if (Input.GetKey (KeyCode.RightArrow))
        transform.Rotate (0, 90 * reverseDeltaTime, 0);

    if (Input.GetKey (KeyCode.DownArrow))
        transform.Translate (Vector3.back * speed * Time.deltaTime);

    if (Input.GetKey (KeyCode.Escape))
        Application.LoadLevel ("Menu");

}
----------------------------------------

void Update () {
    if (Input.GetKey (KeyCode.UpArrow)) {
        transform.Translate (Vector3.forward * speed * Time.deltaTime);
        if (Input.GetKey (KeyCode.LeftArrow))
            transform.Rotate (0, - 90 * Time.deltaTime, 0);

        if (Input.GetKey (KeyCode.RightArrow))
            transform.Rotate (0, 90 * Time.deltaTime, 0);

    }
    if (Input.GetKey (KeyCode.DownArrow)) {
        transform.Translate (Vector3.back * speed * Time.deltaTime);
        if (Input.GetKey (KeyCode.LeftArrow))
            transform.Rotate (0, 90 * Time.deltaTime, 0);

        if (Input.GetKey (KeyCode.RightArrow))
            transform.Rotate (0, - 90 * Time.deltaTime, 0);

    }
    if (Input.GetKey (KeyCode.Escape))
        Application.LoadLevel ("Menu");

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3690472_3690577_8_33
3690472_3690844_80_97
Title: What is my internet accessing IP 
----------------------------------------

static void Main (string [] args) {
    ManagementObjectSearcher searcher = new ManagementObjectSearcher ("root\\CIMV2", "SELECT * FROM Win32_IP4RouteTable WHERE Destination=\"0.0.0.0\"");
    int interfaceIndex = - 1;
    foreach (var item in searcher.Get ()) {
        interfaceIndex = Convert.ToInt32 (item ["InterfaceIndex"]);
    }
    searcher = new ManagementObjectSearcher ("root\\CIMV2", string.Format ("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE InterfaceIndex={0}", interfaceIndex));
    foreach (var item in searcher.Get ()) {
        var ipAddresses = (string []) item ["IPAddress"];
        foreach (var ipAddress in ipAddresses) {
            Console.WriteLine (ipAddress);
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    List < IPAddress > internetIP = GetInternetIPAddressUsingSocket ("google.com", 80);
    foreach (IPAddress ip in internetIP) {
        Console.WriteLine (ip);
    }
    Console.WriteLine ("======");
    HashSet < IPAddress > internetIP2 = GetInternetIPAddress ("google.com");
    foreach (IPAddress ip in internetIP2) {
        Console.WriteLine (ip);
    }
    Console.WriteLine ("Press any key");
    Console.ReadKey (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36915987_36916148_16_28
36915987_36916148_1_13
Title: Is there any benefit to using LINQ to get the first (and only) element in IEnumberable<T>? 
----------------------------------------

public static TSource ElementAt < TSource > (this IEnumerable < TSource > source, int index) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    IList < TSource > list = source as IList < TSource >;
    if (list != null)
        return list [index];

    if (index < 0)
        throw Error.ArgumentOutOfRange ("index");

    using (IEnumerator < TSource > e = source.GetEnumerator ())
    {
        while (true) {
            if (! e.MoveNext ())
                throw Error.ArgumentOutOfRange ("index");

            if (index == 0)
                return e.Current;

            index --;
        }
    }}
----------------------------------------

public static TSource First < TSource > (this IEnumerable < TSource > source) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    IList < TSource > list = source as IList < TSource >;
    if (list != null) {
        if (list.Count > 0)
            return list [0];

    } else {
        using (IEnumerator < TSource > e = source.GetEnumerator ())
        {
            if (e.MoveNext ())
                return e.Current;

        }}
    throw Error.NoElements ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36915987_36916148_16_28
36915987_36916148_30_47
Title: Is there any benefit to using LINQ to get the first (and only) element in IEnumberable<T>? 
----------------------------------------

public static TSource ElementAt < TSource > (this IEnumerable < TSource > source, int index) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    IList < TSource > list = source as IList < TSource >;
    if (list != null)
        return list [index];

    if (index < 0)
        throw Error.ArgumentOutOfRange ("index");

    using (IEnumerator < TSource > e = source.GetEnumerator ())
    {
        while (true) {
            if (! e.MoveNext ())
                throw Error.ArgumentOutOfRange ("index");

            if (index == 0)
                return e.Current;

            index --;
        }
    }}
----------------------------------------

public static TSource Single < TSource > (this IEnumerable < TSource > source) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    IList < TSource > list = source as IList < TSource >;
    if (list != null) {
        switch (list.Count) {
            case 0 :
                throw Error.NoElements ();
            case 1 :
                return list [0];
        }
    } else {
        using (IEnumerator < TSource > e = source.GetEnumerator ())
        {
            if (! e.MoveNext ())
                throw Error.NoElements ();

            TSource result = e.Current;
            if (! e.MoveNext ())
                return result;

        }}
    throw Error.MoreThanOneElement ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36915987_36916148_1_13
36915987_36916148_30_47
Title: Is there any benefit to using LINQ to get the first (and only) element in IEnumberable<T>? 
----------------------------------------

public static TSource First < TSource > (this IEnumerable < TSource > source) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    IList < TSource > list = source as IList < TSource >;
    if (list != null) {
        if (list.Count > 0)
            return list [0];

    } else {
        using (IEnumerator < TSource > e = source.GetEnumerator ())
        {
            if (e.MoveNext ())
                return e.Current;

        }}
    throw Error.NoElements ();
}
----------------------------------------

public static TSource Single < TSource > (this IEnumerable < TSource > source) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    IList < TSource > list = source as IList < TSource >;
    if (list != null) {
        switch (list.Count) {
            case 0 :
                throw Error.NoElements ();
            case 1 :
                return list [0];
        }
    } else {
        using (IEnumerator < TSource > e = source.GetEnumerator ())
        {
            if (! e.MoveNext ())
                throw Error.NoElements ();

            TSource result = e.Current;
            if (! e.MoveNext ())
                return result;

        }}
    throw Error.MoreThanOneElement ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37064449_37064551_1_21
37064449_37064611_1_13
Title: Extracting Number from a Text File in C# Windows Form 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    string [] lines = System.IO.File.ReadAllLines (infile);
    string temp = "";
    int i = 0;
    foreach (string line in lines) {
        string result = Regex.Match (line, @"\d+").Value;
        if (i == 0) {
            temp = result;
        } else {
            temp = temp + "," + result;
        }
        i ++;
    }
    richTextBox1.Text = temp;
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    StreamReader sr = new StreamReader (infile);
    string allDetails = File.ReadAllText (infile);
    var regexMatchCollection = Regex.Matches (allDetails, @"\d+");
    foreach (Match mc in regexMatchCollection) {
        richTextBox1.AppendText (mc.Value);
        richTextBox1.AppendText (",");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37064449_37064551_1_21
37064449_37064665_1_15
Title: Extracting Number from a Text File in C# Windows Form 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    string [] lines = System.IO.File.ReadAllLines (infile);
    string temp = "";
    int i = 0;
    foreach (string line in lines) {
        string result = Regex.Match (line, @"\d+").Value;
        if (i == 0) {
            temp = result;
        } else {
            temp = temp + "," + result;
        }
        i ++;
    }
    richTextBox1.Text = temp;
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    StringBuilder numbers = new StringBuilder ();
    string allDetails = File.ReadAllText (textBox1.Text);
    foreach (string word in allDetails.Split (' ')) {
        int number;
        if (int.TryParse (word, out number)) {
            numbers.Append (number);
            numbers.Append (",");
        }
    }
    richTextBox1.Text = numbers.Trim (',');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37064449_37064551_1_21
37064449_37064777_1_13
Title: Extracting Number from a Text File in C# Windows Form 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    string [] lines = System.IO.File.ReadAllLines (infile);
    string temp = "";
    int i = 0;
    foreach (string line in lines) {
        string result = Regex.Match (line, @"\d+").Value;
        if (i == 0) {
            temp = result;
        } else {
            temp = temp + "," + result;
        }
        i ++;
    }
    richTextBox1.Text = temp;
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    StreamReader sr = new StreamReader (infile);
    string allDetails = File.ReadAllText (infile);
    string result = string.Empty;
    foreach (var item in Regex.Matches (allDetails, @"\d+")) {
        result = result + item.ToString () + ",";
    }
    richTextBox1.Text = result.TrimEnd (',');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37064449_37064611_1_13
37064449_37064665_1_15
Title: Extracting Number from a Text File in C# Windows Form 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    StreamReader sr = new StreamReader (infile);
    string allDetails = File.ReadAllText (infile);
    var regexMatchCollection = Regex.Matches (allDetails, @"\d+");
    foreach (Match mc in regexMatchCollection) {
        richTextBox1.AppendText (mc.Value);
        richTextBox1.AppendText (",");
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    StringBuilder numbers = new StringBuilder ();
    string allDetails = File.ReadAllText (textBox1.Text);
    foreach (string word in allDetails.Split (' ')) {
        int number;
        if (int.TryParse (word, out number)) {
            numbers.Append (number);
            numbers.Append (",");
        }
    }
    richTextBox1.Text = numbers.Trim (',');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37064449_37064611_1_13
37064449_37064777_1_13
Title: Extracting Number from a Text File in C# Windows Form 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    StreamReader sr = new StreamReader (infile);
    string allDetails = File.ReadAllText (infile);
    var regexMatchCollection = Regex.Matches (allDetails, @"\d+");
    foreach (Match mc in regexMatchCollection) {
        richTextBox1.AppendText (mc.Value);
        richTextBox1.AppendText (",");
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    StreamReader sr = new StreamReader (infile);
    string allDetails = File.ReadAllText (infile);
    string result = string.Empty;
    foreach (var item in Regex.Matches (allDetails, @"\d+")) {
        result = result + item.ToString () + ",";
    }
    richTextBox1.Text = result.TrimEnd (',');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37064449_37064665_1_15
37064449_37064777_1_13
Title: Extracting Number from a Text File in C# Windows Form 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    StringBuilder numbers = new StringBuilder ();
    string allDetails = File.ReadAllText (textBox1.Text);
    foreach (string word in allDetails.Split (' ')) {
        int number;
        if (int.TryParse (word, out number)) {
            numbers.Append (number);
            numbers.Append (",");
        }
    }
    richTextBox1.Text = numbers.Trim (',');
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string infile = textBox1.Text;
    StreamReader sr = new StreamReader (infile);
    string allDetails = File.ReadAllText (infile);
    string result = string.Empty;
    foreach (var item in Regex.Matches (allDetails, @"\d+")) {
        result = result + item.ToString () + ",";
    }
    richTextBox1.Text = result.TrimEnd (',');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37069574_37092523_19_38
37069574_37094284_1_13
Title: C# JSON Deserialization : Type is an interface or abstract class and cannot be instantiated 
----------------------------------------

private IDictionary < string, IBalance > GetBalances () {
    IDictionary < string, IBalance > data = null;
    var postData = new Dictionary < string, object > ();
    Hashtable output = PostData < Hashtable > ("returnCompleteBalances", postData);
    if (output.Count > 0) {
        data = new Dictionary < string, IBalance > ();
    }
    foreach (string jsonObjKey in output.Keys) {
        IBalance balace = CreateFactoty ("balanceClassIdentification", output [jsonObjKey].ToString ());
        data.Add (jsonObjKey, balace);
    }
    return data;
}
----------------------------------------

private IDictionary < string, IBalance > GetBalances () {
    var postData = new Dictionary < string, object > ();
    var data = PostData < IDictionary < string, Balance > > ("returnCompleteBalances", postData);
    var returnData = new Dictionary < string, IBalance > ();
    foreach (string key in data.Keys) {
        returnData.Add (key, data [key]);
    }
    return returnData;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37079097_37079457_1_11
37079097_37081030_17_27
Title: How to extract information from text validated against a regex 
----------------------------------------

public static IEnumerable < int > GetNumbers (string text) {
    var match = Regex.Match (text, "^(\\[(?<number>[0-9]+)\\])*$");
    if (! match.Success)
        throw new FormatException ();

    var captures = match.Groups ["number"].Captures;
    foreach (Capture capture in captures)
        yield return int.Parse (capture.Value);

}
----------------------------------------

public static IEnumerable < int > GetNumbers (string text) {
    if (string.IsNullOrWhiteSpace (text))
        return Enumerable.Empty < int > ();

    var match = Regex.Match (text, @"^(\[[0-9]+\])*$");
    if (! match.Success)
        return Enumerable.Empty < int > ();

    return match.Groups [1].Captures.Cast < Capture > ().Select (n = > Int32.Parse (n.Value.Trim ('[', ']')));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37100709_37100789_37_69
37100709_37100789_7_28
Title: Setting the textbox value once permanently in visual C# 
----------------------------------------

public T DeSerializeObject < T > (string fileName) {
    if (string.IsNullOrEmpty (fileName)) {
        return default (T);
    }
    T objectOut = default (T);
    try {
        XmlDocument xmlDocument = new XmlDocument ();
        xmlDocument.Load (fileName);
        string xmlString = xmlDocument.OuterXml;
        using (StringReader read = new StringReader (xmlString))
        {
            Type outType = typeof (T);
            XmlSerializer serializer = new XmlSerializer (outType);
            using (XmlReader reader = new XmlTextReader (read))
            {
                objectOut = (T) serializer.Deserialize (reader);
                reader.Close ();
            } read.Close ();
        }}
    catch (Exception ex) {
    }
    return objectOut;
}
----------------------------------------

public void SerializeObject < T > (T serializableObject, string fileName) {
    if (serializableObject == null) {
        return;
    }
    try {
        XmlDocument xmlDocument = new XmlDocument ();
        XmlSerializer serializer = new XmlSerializer (serializableObject.GetType ());
        using (MemoryStream stream = new MemoryStream ())
        {
            serializer.Serialize (stream, serializableObject);
            stream.Position = 0;
            xmlDocument.Load (stream);
            xmlDocument.Save (fileName);
            stream.Close ();
        }}
    catch (Exception ex) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37108185_37108186_1_14
37108185_37108662_1_16
Title: @Html.DropDownListFor Options with value and text without using ViewModels 
----------------------------------------

public ActionResult Index () {
    var dictionary = new Dictionary < string, string > ();
    var allGroup = GetAllGroupNames ();
    foreach (var ag in allGroup) {
        dictionary.Add (ag.GroupId.ToString (), ag.Name);
    }
    ViewBag.selectGroupList = dictionary;
    return View ();
}
----------------------------------------

public ActionResult Index () {
    AddressModel model = new AddressModel ();
    model.AvailableCountries.Add (new SelectListItem {Text = "-Please select-", Value = "Selects items"});
    var countries = _repository.GetAllCountries ();
    foreach (var country in countries) {
        model.AvailableCountries.Add (new SelectListItem () {Text = country.Name, Value = country.Id.ToString ()});
    }
    return View (model);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37113159_37113232_9_21
37113159_37113234_1_13
Title: textbox and label won't hide during page_load 
----------------------------------------

private void buttonVisibility () {
    if (lblUserType.Text == "special_user") {
        txtDisc.Visible = true;
        lblLock.Visible = false;
    } else {
        txtDisc.Visible = false;
        lblLock.Visible = true;
    }
}
----------------------------------------

private void buttonVisibility () {
    if (lblUserType.Text == "special_user") {
        txtDisc.Visible = true;
        lblLock.Visible = false;
    } else {
        txtDisc.Visible = false;
        lblLock.Visible = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37128001_37128139_1_22
37128001_37128359_1_18
Title: Calculate datetime difference in C# 
----------------------------------------

static int CalcFine (DateTime returnedOn, DateTime dueOn) {
    TimeSpan dateDiff = (returnedOn - dueOn);
    int TotalDays = dateDiff.Days;
    if (TotalDays >= 365) {
        return 10000;
    } else if (TotalDays < 365 && TotalDays > 30 && TotalDays % 30 > 1) {
        return (500 * (TotalDays % 30));
    } else if (TotalDays < 30 && TotalDays > 0) {
        return 15 * TotalDays;
    } else {
        return 0;
    }
}
----------------------------------------

static int CalcFine (string returnedOn, string dueOn) {
    DateTime returnedDate = DateTime.ParseExact (returnedOn, "d M yyyy", CultureInfo.InvariantCulture);
    DateTime dueDate = DateTime.ParseExact (dueOn, "d M yyyy", CultureInfo.InvariantCulture);
    if (returnedDate < dueDate)
        return 0;

    if (returnedDate.Year > dueDate.Year)
        return 10000;

    if (returnedDate.Month > dueDate.Month)
        return 500 * (returnedDate.Month - dueDate.Month);

    if (returnedDate.Day > dueDate.Day)
        return 15 * (returnedDate.Day - dueDate.Day);
    else
        return 0;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37133825_37133943_1_22
37133825_37134135_1_19
Title: Text Box to accept all values in Windows Form C# 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    float num1, num2, res;
    try {
        num1 = float.Parse (textBox1.Text);
    }
    catch (Exception) {
        MessageBox.Show ("Error");
    }
    try {
        num2 = float.Parse (textBox2.Text);
    }
    catch (Exception) {
        MessageBox.Show ("Error");
    }
    res = num1 * num2;
    textBox3.Text = (num1 * num2).ToString ();
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    double num1, num2;
    if (! double.TryParse (textBox1.Text, out num1)) {
        if (textBox1.CanFocus)
            textBox1.Focus ();

        MessageBox.Show (String.Format ("\"{0}\" is not a valid value", textBox1.Text));
    } else if (! double.TryParse (textBox2.Text, out num2)) {
        if (textBox2.CanFocus)
            textBox2.Focus ();

        MessageBox.Show (String.Format ("\"{0}\" is not a valid value", textBox2.Text));
    } else
        textBox3.Text = (num1 * num2).ToString ();

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37136854_37137062_1_14
37136854_37138029_1_14
Title: Not able to select a default value for DropDownList 
----------------------------------------

public static SelectList Titles (string selectedValue) {
    List < SelectListItem > titles = new List < SelectListItem > ();
    titles.Add (new SelectListItem {Text = "Prof.", Value = "1"});
    titles.Add (new SelectListItem {Text = "Dr.", Value = "2"});
    titles.Add (new SelectListItem {Text = "Miss.", Value = "3"});
    titles.Add (new SelectListItem {Text = "Mr.", Value = "4"});
    titles.Add (new SelectListItem {Text = "Mrs.", Value = "5"});
    titles.Add (new SelectListItem {Text = "Ms.", Value = "6"});
    SelectList sl = new SelectList (titles, "Value", "Text", selectedValue);
    return sl;
}
----------------------------------------

public static SelectList Titles (string selectedValue) {
    List < SelectListItem > titles = new List < SelectListItem > ();
    titles.Add (new SelectListItem {Text = "Prof.", Value = "Prof."});
    titles.Add (new SelectListItem {Text = "Dr.", Value = "Dr."});
    titles.Add (new SelectListItem {Text = "Miss", Value = "Miss"});
    titles.Add (new SelectListItem {Text = "Mr.", Value = "Mr.", Selected = true});
    titles.Add (new SelectListItem {Text = "Mrs.", Value = "Mrs."});
    titles.Add (new SelectListItem {Text = "Ms.", Value = "Ms."});
    SelectList sl = new SelectList (titles, "Value", "Text");
    return sl;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37156422_37156456_1_12
37156422_37186171_34_48
Title: How to read dynamical added text box value inside a gridview using C#? 
----------------------------------------

protected void gv_OnRowCreated (object sender, GridViewRowEventArgs e) {
    if (e.Row.RowType == DataControlRowType.DataRow) {
        for (int i = 0; i < e.Row.Cells.Count; i ++) {
            TextBox txt = new TextBox ();
            txt.ID = "tbx" + i;
            e.Row.Cells [i].Controls.Add (txt);
        }
    }
}
----------------------------------------

protected void gv_OnRowCreated (object sender, GridViewRowEventArgs e) {
    if (e.Row.RowType == DataControlRowType.DataRow) {
        for (int i = 0; i < e.Row.Cells.Count; i ++) {
            if (i > 0) {
                TextBox txt = new TextBox ();
                txt.ID = "tbx" + i;
                e.Row.Cells [i].Controls.Add (txt);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37160450_37160754_3_31
37160450_37160756_3_20
Title: Square of Stars 
----------------------------------------

static void Main (string [] args) {
    var n = int.Parse (Console.ReadLine ());
    for (int row = 1; row <= n; row ++) {
        for (int col = 1; col <= n; col ++) {
            if (row == 1 || row == n) {
                Console.Write ("*");
            } else {
                if (col == 1 || col == n) {
                    Console.Write ("*");
                } else {
                    Console.Write (" ");
                }
            }
        }
        Console.WriteLine ();
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    var n = int.Parse (Console.ReadLine ());
    for (int i = 0; i < n - 1; i ++) {
        Console.Write ("*");
    }
    for (int i = 0; i < n - 1; i ++) {
        Console.WriteLine (i == 0 ? "*" : "*" + string.Empty.PadLeft (n - 2) + "*");
    }
    for (int i = 0; i < n; i ++) {
        Console.Write ("*");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37285743_37287575_1_27
37285743_37305660_1_12
Title: MsChart - Rangebar marker at a specific value 
----------------------------------------

private void Form1_Load (object sender, EventArgs e) {
    chart1.Series.Clear ();
    chart1.ChartAreas [0].Position = new ElementPosition (0, 0, 100, 100);
    Series s1 = new Series ();
    s1.ChartType = SeriesChartType.RangeBar;
    s1.Points.AddXY (2, 2);
    s1.Points.AddXY (1, 1);
    chart1.Series.Add (s1);
    ChartArea ca2 = new ChartArea ();
    chart1.ChartAreas.Add (ca2);
    ca2.Position = new ElementPosition (0, 0, 100, 100);
    ca2.BackColor = Color.Transparent;
    Series s2 = new Series ();
    s2.ChartType = SeriesChartType.Point;
    s2.MarkerStyle = MarkerStyle.Triangle;
    s2.MarkerSize = 10;
    s2.Points.AddXY (2, 2);
    s2.ChartArea = ca2.Name;
    chart1.Series.Add (s2);
}
----------------------------------------

private void Form1_Load (object sender, EventArgs e) {
    DataPoint dp1 = new DataPoint (1, new double [] {5, 15});
    dp1.MarkerStyle = MarkerStyle.Triangle;
    dp1.MarkerSize = 12;
    dp1.MarkerColor = Color.Red;
    DataPoint dp2 = new DataPoint (1, new double [] {15, 20});
    chart1.Series [0].Points.Add (dp1);
    chart1.Series [0].Points.Add (dp2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37321906_37322634_27_47
37321906_37322634_49_75
Title: how to send integer type data in xml 
----------------------------------------

private static void Serialize < T > (T data) {
    using (TextWriter WriteFileStream = new StreamWriter ("test.xml"))
    {
        XmlSerializer SerializerObj = new XmlSerializer (typeof (T));
        try {
            SerializerObj.Serialize (WriteFileStream, data);
        }
        catch (Exception ex) {
            Console.WriteLine (string.Format ("Failed to serialize. Reason: {0}", ex.Message));
        }
    }}
----------------------------------------

private static T Deserialize < T > () where T : new () {
    T ReturnListOfT = CreateInstance < T > ();
    using (FileStream ReadFileStream = new FileStream ("test.xml", FileMode.Open, FileAccess.Read, FileShare.Read))
    {
        XmlSerializer SerializerObj = new XmlSerializer (typeof (T));
        try {
            ReturnListOfT = (T) SerializerObj.Deserialize (ReadFileStream);
        }
        catch (Exception ex) {
            Console.WriteLine (string.Format ("Failed to serialize. Reason: {0}", ex.Message));
        }
    } return ReturnListOfT;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37346383_37459649_3_29
37346383_37464074_1_20
Title: Hosting ASP.NET Core as Windows service 
----------------------------------------

public static void Main (string [] args) {
    IWebHost host = new WebHostBuilder ().UseKestrel ().UseContentRoot (Directory.GetCurrentDirectory ()).UseIISIntegration ().UseStartup < Startup > ().Build ();
    if (args.Contains ("--windows-service")) {
        host = new WebHostBuilder ().UseKestrel ().UseContentRoot ("<directory-containing-wwwroot>").UseIISIntegration ().UseStartup < Startup > ().UseUrls ("http://+:5000").Build ();
        Startup.is_service = true;
        host.RunAsService ();
    } else {
        host.Run ();
    }
}
----------------------------------------

public static void Main (string [] args) {
    var exePath = System.Diagnostics.Process.GetCurrentProcess ().MainModule.FileName;
    var directoryPath = Path.GetDirectoryName (exePath);
    var host = new WebHostBuilder ().UseKestrel ().UseContentRoot (directoryPath).UseStartup < Startup > ().Build ();
    if (Debugger.IsAttached || args.Contains ("--debug")) {
        host.Run ();
    } else {
        host.RunAsService ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3734796_26942526_189_198
3734796_26942526_200_210
Title: How to customize message box 
----------------------------------------

internal static DialogResult Show (string messageText, string messageTitle) {
    frmShowMessage frmMessage = new frmShowMessage ();
    frmMessage.Text = messageTitle;
    frmMessage.setMessage (messageText);
    frmMessage.addIconImage (enumMessageIcon.Information);
    frmMessage.addButton (enumMessageButton.OK);
    frmMessage.ShowDialog ();
    return frmMessage.DialogResult;
}
----------------------------------------

internal static DialogResult Show (string messageText, string messageTitle, enumMessageIcon messageIcon, enumMessageButton messageButton) {
    frmShowMessage frmMessage = new frmShowMessage ();
    frmMessage.setMessage (messageText);
    frmMessage.Text = messageTitle;
    frmMessage.addIconImage (messageIcon);
    frmMessage.addButton (messageButton);
    frmMessage.ShowDialog ();
    return frmMessage.DialogResult;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37354142_37354286_1_13
37354142_37354600_1_24
Title: c# console: How to ReadLine without the need of pressing [Enter] 
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    ConsoleKeyInfo e;
    string userName = "";
    while (true) {
        e = Console.ReadKey ();
        if (e.Key == ConsoleKey.Enter) {
            break;
        } else if (e.Key == ConsoleKey.F2) {
        }
        userName += e.KeyChar;
    }
    Console.WriteLine ("username: " + userName);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37369810_37373507_3_18
37369810_37375037_3_15
Title: "How to output ""EVEN"" for even numbers between 1 and 100?" 
----------------------------------------

static void Main (string [] args) {
    var stringBuilder = new StringBuilder ();
    var numbers = new List < object > ();
    numbers = Enumerable.Range (0, 100).Cast < object > ().ToList ();
    foreach (var number in numbers) {
        if (Convert.ToInt32 (number) % 2 == 0)
            stringBuilder.Append ("EVEN");
        else
            stringBuilder.Append (number);

    }
    Console.WriteLine (stringBuilder.ToString ());
}
----------------------------------------

static void Main (string [] args) {
    IEnumerable < int > numbers = Enumerable.Range (1, 100);
    foreach (int number in numbers) {
        if (number % 2 == 0) {
            Console.WriteLine ("{0} is even", number);
        }
    }
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3738639_48242398_3_20
3738639_8489468_18_37
Title: Sorting a List<int> 
----------------------------------------

static void Main (string [] args) {
    List < int > myList = new List < int > ();
    myList.Add (38);
    myList.Add (34);
    myList.Add (35);
    myList.Add (36);
    myList.Add (37);
    myList.Sort ();
    myList.Reverse ();
    myList.ForEach (Console.WriteLine);
}
----------------------------------------

static void Main (string [] args) {
    intlist.Add (5);
    intlist.Add (3);
    intlist.Add (5);
    intlist.Add (15);
    intlist.Add (7);
    Console.WriteLine ("Unsorted list :");
    Printlist (intlist);
    Console.WriteLine ();
    intlist.Sort (new SortIntDescending ());
    Console.WriteLine ("Sorted descending list :");
    Printlist (intlist);
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37389084_37390188_3_17
37389084_37390215_3_22
Title: Send decimal number with commas working on c sharp mvc 
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    var result = bindingContext.ValueProvider.GetValue ("Hardware");
    if (result != null) {
        decimal hardware;
        if (Decimal.TryParse (result.AttemptedValue, NumberStyles.Currency, null, out hardware))
            return new Test {Hardware = hardware};

        bindingContext.ModelState.AddModelError ("Hardware", "Wrong amount format");
    }
    return base.BindModel (controllerContext, bindingContext);
}
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    ValueProviderResult valueResult = bindingContext.ValueProvider.GetValue (bindingContext.ModelName);
    ModelState modelState = new ModelState {Value = valueResult};
    object actualValue = null;
    try {
        actualValue = Convert.ToDecimal (valueResult.AttemptedValue, CultureInfo.CurrentCulture);
    }
    catch (FormatException e) {
        modelState.Errors.Add (e);
    }
    bindingContext.ModelState.Add (bindingContext.ModelName, modelState);
    return actualValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37400141_37401153_27_35
37400141_37401153_42_50
Title: Static method call in generic manner 
----------------------------------------

protected internal override void Load (Dictionary < string, string > elements) {
    if (elements.ContainsKey ("CustomProp1"))
        CustomProp1 = elements ["CustomProp1"];

    if (elements.ContainsKey ("CustomProp2"))
        CustomProp2 = elements ["CustomProp2"];

    if (elements.ContainsKey ("CustomProp3"))
        CustomProp3 = elements ["CustomProp3"];

}
----------------------------------------

protected internal override void Load (Dictionary < string, string > elements) {
    if (elements.ContainsKey ("CustomProp1"))
        CustomProp1 = elements ["CustomProp1"];

    if (elements.ContainsKey ("CustomProp2"))
        CustomProp2 = elements ["CustomProp2"];

    if (elements.ContainsKey ("CustomProp3"))
        CustomProp3 = elements ["CustomProp3"];

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37403663_37403752_1_24
37403663_37403768_1_29
Title: Using array in different methods 
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < item; i ++) {
        var product = new Product ();
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product.Name = Console.ReadLine ();
        Console.Write ("Code[" + i + "]: ");
        product.Code = Console.ReadLine ();
        Console.Write ("Price[" + i + "]: ");
        product.Price = double.Parse (Console.ReadLine ());
        Console.Write ("Unit[" + i + "]: ");
        product.Unit = int.Parse (Console.ReadLine ());
        products.Add (product);
    }
}
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    product = new string [item];
    code = new string [item];
    price = new string [item];
    unit = new string [item];
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < item; i ++) {
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product [i] = Console.ReadLine ();
        Console.Write ("Code[" + i + "]: ");
        code [i] = Console.ReadLine ();
        Console.Write ("Price[" + i + "]: ");
        price [i] = Console.ReadLine ();
        Console.Write ("Unit[" + i + "]: ");
        unit [i] = Console.ReadLine ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37403663_37403752_1_24
37403663_37403977_48_72
Title: Using array in different methods 
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < item; i ++) {
        var product = new Product ();
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product.Name = Console.ReadLine ();
        Console.Write ("Code[" + i + "]: ");
        product.Code = Console.ReadLine ();
        Console.Write ("Price[" + i + "]: ");
        product.Price = double.Parse (Console.ReadLine ());
        Console.Write ("Unit[" + i + "]: ");
        product.Unit = int.Parse (Console.ReadLine ());
        products.Add (product);
    }
}
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    int numbItemsToAdd = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < numbItemsToAdd; i ++) {
        Item item = new Item ();
        Console.WriteLine ("\nItem[" + (i + 1) + "]: ");
        Console.Write ("Product[" + (i + 1) + "]: ");
        item.product = Console.ReadLine ();
        Console.Write ("Code[" + (i + 1) + "]: ");
        item.code = Console.ReadLine ();
        Console.Write ("Price[" + (i + 1) + "]: ");
        item.price = Console.ReadLine ();
        Console.Write ("Unit[" + (i + 1) + "]: ");
        item.unit = Console.ReadLine ();
        items.Add (item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37403663_37403752_1_24
37403663_37404042_40_61
Title: Using array in different methods 
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < item; i ++) {
        var product = new Product ();
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product.Name = Console.ReadLine ();
        Console.Write ("Code[" + i + "]: ");
        product.Code = Console.ReadLine ();
        Console.Write ("Price[" + i + "]: ");
        product.Price = double.Parse (Console.ReadLine ());
        Console.Write ("Unit[" + i + "]: ");
        product.Unit = int.Parse (Console.ReadLine ());
        products.Add (product);
    }
}
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 1; i <= item; i ++) {
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product.Add (Console.ReadLine ());
        Console.Write ("Code[" + i + "]: ");
        code.Add (Console.ReadLine ());
        Console.Write ("Price[" + i + "]: ");
        price.Add (Console.ReadLine ());
        Console.Write ("Unit[" + i + "]: ");
        unit.Add (Console.ReadLine ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37403663_37403768_1_29
37403663_37403977_48_72
Title: Using array in different methods 
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    product = new string [item];
    code = new string [item];
    price = new string [item];
    unit = new string [item];
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < item; i ++) {
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product [i] = Console.ReadLine ();
        Console.Write ("Code[" + i + "]: ");
        code [i] = Console.ReadLine ();
        Console.Write ("Price[" + i + "]: ");
        price [i] = Console.ReadLine ();
        Console.Write ("Unit[" + i + "]: ");
        unit [i] = Console.ReadLine ();
    }
}
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    int numbItemsToAdd = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < numbItemsToAdd; i ++) {
        Item item = new Item ();
        Console.WriteLine ("\nItem[" + (i + 1) + "]: ");
        Console.Write ("Product[" + (i + 1) + "]: ");
        item.product = Console.ReadLine ();
        Console.Write ("Code[" + (i + 1) + "]: ");
        item.code = Console.ReadLine ();
        Console.Write ("Price[" + (i + 1) + "]: ");
        item.price = Console.ReadLine ();
        Console.Write ("Unit[" + (i + 1) + "]: ");
        item.unit = Console.ReadLine ();
        items.Add (item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37403663_37403768_1_29
37403663_37404042_40_61
Title: Using array in different methods 
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    product = new string [item];
    code = new string [item];
    price = new string [item];
    unit = new string [item];
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < item; i ++) {
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product [i] = Console.ReadLine ();
        Console.Write ("Code[" + i + "]: ");
        code [i] = Console.ReadLine ();
        Console.Write ("Price[" + i + "]: ");
        price [i] = Console.ReadLine ();
        Console.Write ("Unit[" + i + "]: ");
        unit [i] = Console.ReadLine ();
    }
}
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 1; i <= item; i ++) {
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product.Add (Console.ReadLine ());
        Console.Write ("Code[" + i + "]: ");
        code.Add (Console.ReadLine ());
        Console.Write ("Price[" + i + "]: ");
        price.Add (Console.ReadLine ());
        Console.Write ("Unit[" + i + "]: ");
        unit.Add (Console.ReadLine ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37403663_37403977_48_72
37403663_37404042_40_61
Title: Using array in different methods 
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    int numbItemsToAdd = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 0; i < numbItemsToAdd; i ++) {
        Item item = new Item ();
        Console.WriteLine ("\nItem[" + (i + 1) + "]: ");
        Console.Write ("Product[" + (i + 1) + "]: ");
        item.product = Console.ReadLine ();
        Console.Write ("Code[" + (i + 1) + "]: ");
        item.code = Console.ReadLine ();
        Console.Write ("Price[" + (i + 1) + "]: ");
        item.price = Console.ReadLine ();
        Console.Write ("Unit[" + (i + 1) + "]: ");
        item.unit = Console.ReadLine ();
        items.Add (item);
    }
}
----------------------------------------

public static void addItem () {
    Console.WriteLine ("\nAmount of items to add");
    item = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine ("Insert the items.");
    for (int i = 1; i <= item; i ++) {
        Console.WriteLine ("\nItem[" + i + "]: ");
        Console.Write ("Product[" + i + "]: ");
        product.Add (Console.ReadLine ());
        Console.Write ("Code[" + i + "]: ");
        code.Add (Console.ReadLine ());
        Console.Write ("Price[" + i + "]: ");
        price.Add (Console.ReadLine ());
        Console.Write ("Unit[" + i + "]: ");
        unit.Add (Console.ReadLine ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3741010_3741027_13_29
3741010_3741027_33_53
Title: C# Replace HEX in binary file 
----------------------------------------

public static int IndexOfSubarray < T > (this T [] sourceArray, T [] findWhat, int startIndex, int sourceLength) where T : IEquatable < T > {
    if (sourceArray == null)
        throw new ArgumentNullException ("sourceArray");

    if (findWhat == null)
        throw new ArgumentNullException ("findWhat");

    if (startIndex < 0 || startIndex > sourceArray.Length)
        throw new ArgumentOutOfRangeException ();

    var maxIndex = sourceLength - findWhat.Length;
    for (int i = startIndex; i <= maxIndex; i ++) {
        if (sourceArray.SubarrayEquals (i, findWhat, 0, findWhat.Length))
            return i;

    }
    return - 1;
}
----------------------------------------

public static bool SubarrayEquals < T > (this T [] sourceArray, int sourceStartIndex, T [] otherArray, int otherStartIndex, int length) where T : IEquatable < T > {
    if (sourceArray == null)
        throw new ArgumentNullException ("sourceArray");

    if (otherArray == null)
        throw new ArgumentNullException ("otherArray");

    if (sourceStartIndex < 0 || length < 0 || otherStartIndex < 0 || sourceStartIndex + length > sourceArray.Length || otherStartIndex + length > otherArray.Length)
        throw new ArgumentOutOfRangeException ();

    for (int i = 0; i < length; i ++) {
        if (! sourceArray [sourceStartIndex + i].Equals (otherArray [otherStartIndex + i]))
            return false;

    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
374267_1069820_1_23
374267_374703_1_20
Title: 'Contains()' workaround using Linq to Entities? 
----------------------------------------

public static IQueryable < TEntity > WhereIn < TEntity, TValue > (this ObjectQuery < TEntity > query, Expression < Func < TEntity, TValue > > selector, IEnumerable < TValue > collection) {
    if (selector == null)
        throw new ArgumentNullException ("selector");

    if (collection == null)
        throw new ArgumentNullException ("collection");

    if (! collection.Any ())
        return query.Where (t = > false);

    ParameterExpression p = selector.Parameters.Single ();
    IEnumerable < Expression > equals = collection.Select (value = > (Expression) Expression.Equal (selector.Body, Expression.Constant (value, typeof (TValue))));
    Expression body = equals.Aggregate ((accumulate, equal) = > Expression.Or (accumulate, equal));
    return query.Where (Expression.Lambda < Func < TEntity, bool > > (body, p));
}
----------------------------------------

static Expression < Func < TElement, bool > > BuildContainsExpression < TElement, TValue > (Expression < Func < TElement, TValue > > valueSelector, IEnumerable < TValue > values) {
    if (null == valueSelector) {
        throw new ArgumentNullException ("valueSelector");
    }
    if (null == values) {
        throw new ArgumentNullException ("values");
    }
    ParameterExpression p = valueSelector.Parameters.Single ();
    if (! values.Any ()) {
        return e = > false;
    }
    var equals = values.Select (value = > (Expression) Expression.Equal (valueSelector.Body, Expression.Constant (value, typeof (TValue))));
    var body = equals.Aggregate < Expression > ((accumulate, equal) = > Expression.Or (accumulate, equal));
    return Expression.Lambda < Func < TElement, bool > > (body, p);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
374386_379324_6_36
374386_380695_14_73
Title: Helper functions for marshalling arrays of structures (with pointers) 
----------------------------------------

static void Main (string [] args) {
    const int rowsCount = 3;
    const int colsCount = 4;
    IntPtr ptr = AllocateMatrix (rowsCount, colsCount);
    try {
        InitializeMatrix (ptr, rowsCount, colsCount);
        int [] [] matrix = GetMatrixFromPointer (ptr, rowsCount, colsCount);
        for (int i = 0; i < rowsCount; i ++) {
            for (int j = 0; j < colsCount; j ++) {
                Console.Write ("{0} ", matrix [i] [j]);
            }
            Console.WriteLine ();
        }
    }
    finally {
        FreeMatrix (ptr, rowsCount, colsCount);
    }
}
----------------------------------------

static void Main (string [] args) {
    const int count = 3;
    IntPtr ptr = Marshal.AllocHGlobal (count * Marshal.SizeOf (typeof (IntPtr)));
    IntPtr [] matrices = new IntPtr [count];
    for (int i = 0; i < count; i ++) {
        Matrix matrix = new Matrix ();
        matrix.RowsCount = 4;
        matrix.ColsCount = 3;
        int size = matrix.RowsCount * matrix.ColsCount;
        int [] data = new int [size];
        matrix.Data = Marshal.AllocHGlobal (size * Marshal.SizeOf (typeof (int)));
        Marshal.Copy (data, 0, matrix.Data, size);
        matrices [i] = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Matrix)));
        Marshal.StructureToPtr (matrix, matrices [i], true);
    }
    Marshal.Copy (matrices, 0, ptr, count);
    InitializeMatrix (ptr, count);
    Console.WriteLine ("<managed>");
    Marshal.Copy (ptr, matrices, 0, count);
    for (int i = 0; i < count; i ++) {
        Matrix m = (Matrix) Marshal.PtrToStructure (matrices [i], typeof (Matrix));
        int size = m.RowsCount * m.ColsCount;
        int [] data = new int [size];
        Marshal.Copy (m.Data, data, 0, size);
        Console.WriteLine ("rows: {0} cols: {1}", m.RowsCount, m.ColsCount);
        for (int j = 0; j < m.RowsCount; j ++) {
            for (int k = 0; k < m.ColsCount; k ++) {
                Console.Write ("{0} ", data [k * m.RowsCount + j]);
            }
            Console.WriteLine ();
        }
    }
    Console.WriteLine ("</managed>");
    for (int i = 0; i < count; i ++) {
        Matrix m = (Matrix) Marshal.PtrToStructure (matrices [i], typeof (Matrix));
        Marshal.FreeHGlobal (m.Data);
        Marshal.FreeHGlobal (matrices [i]);
    }
    Marshal.FreeHGlobal (ptr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37466673_37506819_1_15
37466673_38268747_1_19
Title: RSA signing with imported private key 
----------------------------------------

public string SignRsa (string stringToSign) {
    ASCIIEncoding encoder;
    var signed = string.Empty;
    var ipCert = new X509Certificate2 (Server.MapPath ("~/App_Data/pfxFile.pfx"), "password");
    var RSA = (RSACryptoServiceProvider) ipCert.PrivateKey;
    encoder = new ASCIIEncoding ();
    var binData = encoder.GetBytes (stringToSign);
    byte [] binSignature;
    using (var sha1 = new SHA1CryptoServiceProvider ())
    binSignature = RSA.SignData (binData, sha1);
    if (RSA.VerifyData (binData, new SHA1CryptoServiceProvider (), binSignature))
        signed = BitConverter.ToString (binSignature).Replace ("-", string.Empty);

    return signed;
}
----------------------------------------

public string SignRsa (string stringToSign) {
    var signed = string.Empty;
    using (var ipCert = new X509Certificate2 (Server.MapPath ("~/App_Data/pfxFile.pfx"), "password"))
    using (var RSA = ipCert.GetRSAPrivateKey ())
    {
        var binData = System.Text.Encoding.ASCII.GetBytes (stringToSign);
        byte [] binSignature = RSA.SignData (binData, HashAlgorithmName.SHA1, RSASignaturePadding.Pkcs1);
        if (RSA.VerifyData (binData, binSignature, HashAlgorithmName.SHA1, RSASignaturePadding.Pkcs1))
            signed = BitConverter.ToString (binSignature).Replace ("-", string.Empty);

        return signed;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37517980_37518090_1_10
37517980_37518107_1_12
Title: C# Save File at Location of Your App 
----------------------------------------

public static void WriteToFile (string s, string fileName) {
    string path = Path.Combine (AppDomain.CurrentDomain.BaseDirectory, fileName);
    fs = new System.IO.FileStream (path, System.IO.FileMode.Append, System.IO.FileAccess.Write);
    sw = new System.IO.StreamWriter (fs);
    sw.WriteLine (s);
    sw.Flush ();
    sw.Close ();
    fs.Close ();
}
----------------------------------------

public static void WriteToFile (string s) {
    string path = AppDomain.CurrentDomain.BaseDirectory + "a.txt";
    var fs = new System.IO.FileStream (path, System.IO.FileMode.Append, System.IO.FileAccess.Write);
    var sw = new System.IO.StreamWriter (fs);
    sw.WriteLine (s);
    sw.Flush ();
    sw.Close ();
    fs.Close ();
    Console.WriteLine (path);
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37573774_37574341_1_19
37573774_37574982_6_31
Title: Split List of objects based on object type 
----------------------------------------

public static IEnumerable < List < object > > PartitionByTypes (List < object > values) {
    Type prevType = null;
    List < object > cache = new List < object > ();
    foreach (var value in values) {
        if (prevType != null && value.GetType () != prevType) {
            yield return cache;
            cache = new List < object > ();
        }
        cache.Add (value);
        prevType = value.GetType ();
    }
    if (cache.Count > 0)
        yield return cache;

}
----------------------------------------

static IEnumerable < List < object > > PartitionByTypes (List < object > values) {
    if (values == null)
        throw new ArgumentNullException ("values");

    if (values.Count == 0)
        yield break;

    Type currentType = GetObjectTypeOrNull (values);
    List < object > buffer = new List < object > ();
    foreach (object value in values) {
        Type valueType = GetObjectTypeOrNull (value);
        if (valueType != currentType) {
            currentType = valueType;
            yield return buffer;
            buffer = new List < object > ();
        }
        currentType = valueType;
        buffer.Add (value);
    }
    if (buffer.Count > 0) {
        yield return buffer;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3759880_25911768_29_72
3759880_4432145_16_72
Title: Customize rounded corner radius of a WPF polyline 
----------------------------------------

private void DefineGeometry () {
    var points = PointCollection;
    _figure.Segments.Clear ();
    if (points.Any ()) {
        _figure.StartPoint = points [0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i ++) {
                var v1 = (Point) points [i] - points [i - 1];
                var v2 = (Point) points [i + 1] - points [i];
                var radius = (points [i].Radius ?? Radius) ?? 0;
                radius = Math.Min (Math.Min (v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1.Normalize ();
                v1 *= (len - radius);
                var line = new LineSegment ((Point) points [i - 1] + v1, true);
                _figure.Segments.Add (line);
                v2.Normalize ();
                v2 *= radius;
                var direction = (Vector.AngleBetween (v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                var arc = new ArcSegment ((Point) points [i] + v2, new Size (radius, radius), 0, false, direction, true);
                _figure.Segments.Add (arc);
            }
            _figure.Segments.Add (new LineSegment (points [points.Count - 1], true));
        }
    }
}
----------------------------------------

private void DefineGeometry () {
    PointCollection points = Points;
    if (points == null) {
        _geometry = Geometry.Empty;
        return;
    }
    PathFigure figure = new PathFigure ();
    if (points.Count > 0) {
        figure.StartPoint = points [0];
        if (points.Count > 1) {
            double desiredRadius = Radius;
            for (int i = 1; i < (points.Count - 1); i ++) {
                Vector v1 = points [i] - points [i - 1];
                Vector v2 = points [i + 1] - points [i];
                double radius = Math.Min (Math.Min (v1.Length, v2.Length) / 2, desiredRadius);
                double len = v1.Length;
                v1.Normalize ();
                v1 *= (len - radius);
                LineSegment line = new LineSegment (points [i - 1] + v1, true);
                figure.Segments.Add (line);
                v2.Normalize ();
                v2 *= radius;
                SweepDirection direction = (Vector.AngleBetween (v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                ArcSegment arc = new ArcSegment (points [i] + v2, new Size (radius, radius), 0, false, direction, true);
                figure.Segments.Add (arc);
            }
            figure.Segments.Add (new LineSegment (points [points.Count - 1], true));
        }
    }
    PathGeometry geometry = new PathGeometry ();
    geometry.Figures.Add (figure);
    geometry.FillRule = FillRule;
    if (geometry.Bounds == Rect.Empty) {
        _geometry = Geometry.Empty;
    } else {
        _geometry = geometry;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37605983_37606174_24_42
37605983_37606174_3_22
Title: How to Convert HTTP Response XML Document into object in C#? 
----------------------------------------

public T Deserialize < T > (string stringValue) where T : class {
    var xmlSerializer = new XmlSerializer (typeof (T));
    var xmlStart = stringValue.IndexOf ("<?xml", StringComparison.Ordinal);
    if (xmlStart > 0) {
        stringValue = stringValue.Remove (0, xmlStart);
    }
    using (var stringReader = new StringReader (stringValue))
    {
        using (var xmlReader = XmlReader.Create (stringReader))
        {
            return xmlSerializer.Deserialize (xmlReader) as T;
        }}}
----------------------------------------

public string Serialize < T > (T objectValue) where T : class {
    var utf8WithoutBom = new UTF8Encoding (false);
    var xmlSerializer = new XmlSerializer (typeof (T));
    var xmlWriterSettings = new XmlWriterSettings {Indent = true, Encoding = utf8WithoutBom};
    using (var memoryStream = new MemoryStream ())
    {
        using (var writer = XmlWriter.Create (memoryStream, xmlWriterSettings))
        {
            xmlSerializer.Serialize (writer, objectValue);
            return utf8WithoutBom.GetString (memoryStream.ToArray ());
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37635974_37640624_1_12
37635974_37641339_1_25
Title: how to get the selectedIndex of many comboBox in the form? 
----------------------------------------

internal static void getComboSelectedIndex (Control control) {
    foreach (Control c in control.Controls) {
        getComboSelectedIndex (c);
        if (c is ComboBox) {
            int i = ((ComboBox) c).SelectedIndex;
            if (i > 0)
                MessageBox.Show ("selected index of " + c.Name + " is " + i.ToString ());

        }
    }
}
----------------------------------------

internal static void getComboSelectedIndex (Control control) {
    List < ComboBox > comboBoxes = new List < ComboBox > ();
    foreach (Control c in control.Controls) {
        getComboSelectedIndex (c);
        if (c is ComboBox) {
            ComboBox curretComboBox = ((ComboBox) c);
            if (curretComboBox.SelectedIndex > - 1)
                comboBoxes.Add (curretComboBox);

        }
    }
    var orderedList = comboBoxes.OrderBy (item = > item.TabIndex).ToList ();
    for (int i = 0; i < orderedList.Count; i ++) {
        ComboBox _current = orderedList [i];
        MessageBox.Show ("selected index of " + _current.Name + " is " + _current.SelectedIndex.ToString () + " / TabIndex: " + _current.TabIndex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37650054_37650165_1_20
37650054_37650248_11_24
Title: select two point to Draw a circle 
----------------------------------------

private void Form1_MouseDown (object sender, MouseEventArgs e) {
    if (_lastPosition != Point.Empty) {
        var currentPosition = Cursor.Position;
        var oradius = Math.Sqrt (((_lastPosition.X - currentPosition.X) ^ 2) + ((_lastPosition.Y - currentPosition.Y) ^ 2));
        var radius = Convert.ToInt32 (oradius);
        using (var g = this.CreateGraphics ())
        {
            var arg = new PaintEventArgs (g, new Rectangle ());
            DrawCircle (arg, currentPosition, radius, radius);
        } _lastPosition = Point.Empty;
    } else {
        _lastPosition = Cursor.Position;
    }
}
----------------------------------------

private void Form1_MouseDown (object sender, MouseEventArgs e) {
    clickPrev = clickCurrent;
    clickCurrent = this.PointToClient (Cursor.Position);
    if (clickPrev == Point.Empty)
        return;

    Graphics g;
    double oradius = Math.Sqrt ((Math.Pow (clickPrev.X - clickCurrent.X, 2)) + (Math.Pow (clickPrev.Y - clickCurrent.Y, 2)));
    int radius = Convert.ToInt32 (oradius);
    g = this.CreateGraphics ();
    Rectangle rectangle = new Rectangle ();
    PaintEventArgs arg = new PaintEventArgs (g, rectangle);
    DrawCircle (arg, clickPrev.X, clickPrev.Y, radius * 2, radius * 2);
    clickCurrent = Point.Empty;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3765283_43295397_1_12
3765283_45534443_1_39
Title: How to subtract a rectangle from another? 
----------------------------------------

public static Rectangle [] Subtract (this Rectangle source, Rectangle [] subtractions) {
    Region tmp = new Region (source);
    foreach (var sub in subtractions) {
        tmp.Xor (sub);
    }
    Region src = new Region (source);
    src.Intersect (tmp);
    return src.GetRegionScans (new Matrix ()).Select (Rectangle.Ceiling).ToArray ();
}
----------------------------------------

public static List < Rect > Subtract (this Rect rect, Rect subtracted) {
    if (rect.HasNoArea ()) {
        return _emptyList;
    }
    if (rect.Equals (subtracted)) {
        return new List < Rect > {new Rect (0, 0, 0, 0)};
    }
    Rect intersectedRect = rect;
    intersectedRect.Intersect (subtracted);
    if (intersectedRect.HasNoArea ()) {
        return new List < Rect > {rect};
    }
    List < Rect > results = new List < Rect > ();
    var topRect = GetTopRect (rect, subtracted);
    if (! topRect.HasNoArea ()) {
        results.Add (topRect);
    }
    var leftRect = GetLeftRect (rect, subtracted);
    if (! leftRect.HasNoArea ()) {
        results.Add (leftRect);
    }
    var rightRect = GetRightRect (rect, subtracted);
    if (! rightRect.HasNoArea ()) {
        results.Add (rightRect);
    }
    var bottomRect = GetBottomRect (rect, subtracted);
    if (! bottomRect.HasNoArea ()) {
        results.Add (bottomRect);
    }
    return results;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3765283_43295397_1_12
3765283_48076236_1_11
Title: How to subtract a rectangle from another? 
----------------------------------------

public static Rectangle [] Subtract (this Rectangle source, Rectangle [] subtractions) {
    Region tmp = new Region (source);
    foreach (var sub in subtractions) {
        tmp.Xor (sub);
    }
    Region src = new Region (source);
    src.Intersect (tmp);
    return src.GetRegionScans (new Matrix ()).Select (Rectangle.Ceiling).ToArray ();
}
----------------------------------------

public Rectangle [] Subtract (Rectangle [] subtractions) {
    Region src = new Region (Bounds);
    foreach (var sub in subtractions) {
        Region tmp = src.Clone ();
        tmp.Xor (sub);
        src.Intersect (tmp);
    }
    return src.GetRegionScans (new Matrix ()).Select (Rectangle.Ceiling).ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3765283_45534443_1_39
3765283_48076236_1_11
Title: How to subtract a rectangle from another? 
----------------------------------------

public static List < Rect > Subtract (this Rect rect, Rect subtracted) {
    if (rect.HasNoArea ()) {
        return _emptyList;
    }
    if (rect.Equals (subtracted)) {
        return new List < Rect > {new Rect (0, 0, 0, 0)};
    }
    Rect intersectedRect = rect;
    intersectedRect.Intersect (subtracted);
    if (intersectedRect.HasNoArea ()) {
        return new List < Rect > {rect};
    }
    List < Rect > results = new List < Rect > ();
    var topRect = GetTopRect (rect, subtracted);
    if (! topRect.HasNoArea ()) {
        results.Add (topRect);
    }
    var leftRect = GetLeftRect (rect, subtracted);
    if (! leftRect.HasNoArea ()) {
        results.Add (leftRect);
    }
    var rightRect = GetRightRect (rect, subtracted);
    if (! rightRect.HasNoArea ()) {
        results.Add (rightRect);
    }
    var bottomRect = GetBottomRect (rect, subtracted);
    if (! bottomRect.HasNoArea ()) {
        results.Add (bottomRect);
    }
    return results;
}
----------------------------------------

public Rectangle [] Subtract (Rectangle [] subtractions) {
    Region src = new Region (Bounds);
    foreach (var sub in subtractions) {
        Region tmp = src.Clone ();
        tmp.Xor (sub);
        src.Intersect (tmp);
    }
    return src.GetRegionScans (new Matrix ()).Select (Rectangle.Ceiling).ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37657331_37657679_18_37
37657331_37657679_1_16
Title: How to edit multiple tables in MVC using ViewModel pattern 
----------------------------------------

[HttpPost] public bool UpdateStudent (UpdateStudentViewModel viewModel) {
    try {
        using (var entities = new SalesOrderEntities ())
        {
            var existingStudent = entities.Students.FirstOrDefault (s = > s.StudentID == viewModel.StudentID);
            existingStudent.Property = viewModel.Property;
            entities.SaveChanges ();
        }}
    catch (Exception ex) {
    }
}
----------------------------------------

public ActionResult UpdateStudent (int studentId) {
    using (var entities = new SalesOrderEntities ())
    {
        var student = entities.Students.FirstOrDefault (s = > s.StudentID == studentId);
        if (student == null) {
            return HttpNotFound ();
        }
        return View (student);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37680802_37681774_47_71
37680802_37682524_1_19
Title: How to save TextBox value input (from UserForm) to a cell on a sheet? 
----------------------------------------

private void button2_Click (object sender, EventArgs e) {
    num ++;
    string [] saNames = new string [13];
    saNames [0] = txtUsername1.Text;
    saNames [1] = txtWorkName1.Text;
    saNames [2] = cbxManufac.Text;
    saNames [3] = cbxMachType.Text;
    saNames [4] = txtModel.Text;
    saNames [5] = txtSerial.Text;
    saNames [6] = txtCPU.Text;
    saNames [7] = cbxRAM.Text;
    saNames [8] = cbxOS.Text;
    saNames [9] = txtVersion.Text;
    saNames [10] = txtMcstOffice.Text;
    saNames [11] = txtRecomend.Text;
    saNames [12] = txtComments.Text;
    string startposition = "A" + num.toString ();
    oSheet.get_Range (startposition, "L1000").Value = saNames;
}
----------------------------------------

private void button2_Click (object sender, EventArgs e) {
    int _lastRow = oSheet.Range ["A" + oSheet.Rows.Count].End [Microsoft.Office.Interop.Excel.XlDirection.xlUp].Row + 1;
    oSheet.Cells [_lastRow, 1] = txtUsername1.Text;
    oSheet.Cells [_lastRow, 2] = txtWorkName1.Text;
    oSheet.Cells [_lastRow, 3] = cbxManufac.Text;
    oSheet.Cells [_lastRow, 4] = cbxMachType.Text;
    oSheet.Cells [_lastRow, 5] = txtModel.Text;
    oSheet.Cells [_lastRow, 6] = txtSerial.Text;
    oSheet.Cells [_lastRow, 7] = txtCPU.Text;
    oSheet.Cells [_lastRow, 8] = cbxRAM.Text;
    oSheet.Cells [_lastRow, 9] = cbxOS.Text;
    oSheet.Cells [_lastRow, 10] = txtVersion.Text;
    oSheet.Cells [_lastRow, 11] = txtMcstOffice.Text;
    oSheet.Cells [_lastRow, 12] = txtRecomend.Text;
    oSheet.Cells [_lastRow, 13] = txtComments.Text;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37694560_37701765_60_75
37694560_37744081_14_31
Title: Send Data from a Service to BroadcastReceiver of other Activity (Xamarin Android) 
----------------------------------------

public override Void OnReceive (Context context, Intent intent) {
    double SampleLatitude = 52.01566;
    double SampleLongitude = 65.00487;
    Intent i = new Intent ();
    i.SetAction ("LocationData");
    i.PutExtra ("Latitude", SampleLatitude);
    i.PutExtra ("Longitude", SampleLongitude);
    SendBroadcast (i);
}
----------------------------------------

public override void OnReceive (Context context, Intent intent) {
    if (intent.Action == GRID_STARTED) {
        try {
            a = new LatLng (intent.GetDoubleExtra ("latitude", 0), intent.GetDoubleExtra ("longitude", 0));
            mInterface = (LocationDataInterface) context;
            mInterface.OnLocationChanged (a);
        }
        catch (Exception ex) {
            Toast.MakeText (context, ex.Message, ToastLength.Short).Show ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37703724_37704195_1_18
37703724_37706347_1_11
Title: Largest substring composed of identical characters 
----------------------------------------

public static int MaxSubstringLength (string s) {
    if (string.IsNullOrEmpty (s))
        return 0;

    int max = 0, cur = 1;
    for (int i = 1; i < s.Length; ++ i, ++ cur) {
        if (s [i] != s [i - 1]) {
            max = cur > max ? cur : max;
            cur = 0;
        }
    }
    return cur > max ? cur : max;
}
----------------------------------------

public static int MaxSubstringLength (string s) {
    int maxLength = 0;
    for (int length = s != null ? s.Length : 0, pos = 0; pos < length;) {
        int start = pos;
        while (++ pos < length && s [pos] == s [start]) {
        }
        maxLength = Math.Max (maxLength, pos - start);
    }
    return maxLength;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37711547_37711651_29_48
37711547_37711651_4_24
Title: chunking an enumerable via linq 
----------------------------------------

public IEnumerable < IEnumerable < T > > Chunk < T > (this IEnumerable < T > collection, int size) {
    bool shouldContinue = collection != null && collection.Any ();
    using (var iter = collection.GetEnumerator ())
    {
        while (shouldContinue) {
            var result = Segment (iter, size, out shouldContinue);
            if (shouldContinue || result != null)
                yield return result;
            else
                yield break;

        }
    }}
----------------------------------------

private IEnumerable < T > Segment < T > (IEnumerator < T > iter, int size, out bool cont) {
    var ret = new List < T > ();
    cont = true;
    bool hit = false;
    for (var i = 0; i < size; i ++) {
        if (iter.MoveNext ()) {
            hit = true;
            ret.Add (iter.Current);
        } else {
            cont = false;
            break;
        }
    }
    return hit ? ret : null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37717415_37717516_1_19
37717415_37717524_6_18
Title: "In C# How can I determine if a given string is a palindrome or not?" 
----------------------------------------

static void Main (string [] args) {
    string s, revs = "";
    Console.WriteLine (" Enter string");
    s = Console.ReadLine ();
    for (int i = s.Length - 1; i >= 0; i --) {
        revs += s [i].ToString ();
    }
    if (revs == s) {
        Console.WriteLine ("String is Palindrome \n Entered String Was {0} and reverse string is {1}", s, revs);
    } else {
        Console.WriteLine ("String is not Palindrome \n Entered String Was {0} and reverse string is {1}", s, revs);
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    string str = Console.ReadLine ();
    string backwardsGuy = new string (str.Reverse ().ToArray ());
    if (str == backwardsGuy) {
        Console.WriteLine ("True");
    } else {
        Console.WriteLine ("False");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37727955_37728495_1_13
37727955_37747777_1_17
Title: How to pass parameters in a oracle SQL query? 
----------------------------------------

public void VerifierVersionDejaPresnte (ParseurXML.DonneesGlobales donneGlobale) {
    OracleCommand cmd = new OracleCommand ();
    cmd.Connection = conn;
    cmd.CommandText = "select nom_projet from analyses where nom_projet=:test";
    cmd.Parameters.Add (new OracleParameter (":test", "demonstration"));
    cmd.CommandType = CommandType.Text;
    OracleDataReader dr = cmd.ExecuteReader ();
    if (dr.Read ())
        Console.WriteLine ("Data already exist");
    else
        Console.WriteLine ("Data doesn't exist");

}
----------------------------------------

public Boolean VerifierVersionDejaPresnte (ParseurXML.DonneesGlobales donneGlobale) {
    string str = "demonstration";
    OracleCommand cmd = new OracleCommand ();
    cmd.Connection = conn;
    cmd.BindByName = true;
    cmd.CommandText = "select * from analyses where nom_projet='" + str + "'";
    cmd.CommandType = CommandType.Text;
    OracleDataReader dr = cmd.ExecuteReader ();
    if (dr.Read ()) {
        Console.WriteLine ("Data already exist");
        return true;
    }
    Console.WriteLine ("Data doesn't already exist");
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37728386_37728520_1_26
37728386_37728671_1_18
Title: Text file to two string arrays in wpf using streamreader 
----------------------------------------

private void ReadFile (string filePath, string customerPhone, string customerName) {
    string line = string.Empty;
    using (var fileSR = new StreamReader (filePath))
    {
        bool number = true;
        List < string > customerPhone = new List < string > ();
        List < string > customerName = new List < string > ();
        while ((line = fileSR.ReadLine ()) != null) {
            if (number) {
                customerPhone.Add (line);
                number = false;
            } else {
                customerName.Add (line);
                number = true;
            }
        }
        fileSR.Close ();
    }}
----------------------------------------

private static void ReadFile (String filePath, IList < String > oddLines, IList < String > evenLines) {
    oddLines.Clear ();
    evenLines.Clear ();
    int index = 1;
    foreach (String line in File.ReadLines (filePath)) {
        if (index % 2 == 0)
            evenLines.Add (line);
        else
            oddLines.Add (line);

        index += 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37801304_37801340_1_33
37801304_37801382_1_19
Title: display error or success message when using c# foreach statement 
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    DataDTO data = new DataDTO ();
    BaseDAO connexion = new BaseDAO ();
    bool success = true;
    foreach (GridViewRow row in this.GridView1.Rows) {
        data.lblId = ((Label) row.FindControl ("lblId")).Text;
        try {
            connexion.update_database (data);
        }
        catch {
            ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", "alert('<success message>')", true);
            success = false;
            break;
        }
    }
    GridView1.EditIndex = - 1;
    LoadGrid ();
    if (success) {
        ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", "alert('<success message>')", true);
    }
}
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    DataDTO data = new DataDTO ();
    BaseDAO connexion = new BaseDAO ();
    try {
        foreach (GridViewRow row in this.GridView1.Rows) {
        }
    }
    catch {
        isError = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37801304_37801340_1_33
37801304_37801404_1_26
Title: display error or success message when using c# foreach statement 
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    DataDTO data = new DataDTO ();
    BaseDAO connexion = new BaseDAO ();
    bool success = true;
    foreach (GridViewRow row in this.GridView1.Rows) {
        data.lblId = ((Label) row.FindControl ("lblId")).Text;
        try {
            connexion.update_database (data);
        }
        catch {
            ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", "alert('<success message>')", true);
            success = false;
            break;
        }
    }
    GridView1.EditIndex = - 1;
    LoadGrid ();
    if (success) {
        ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", "alert('<success message>')", true);
    }
}
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    DataDTO data = new DataDTO ();
    BaseDAO connexion = new BaseDAO ();
    try {
        foreach (GridViewRow row in this.GridView1.Rows) {
            data.lblId = ((Label) row.FindControl ("lblId")).Text;
            connexion.update_database (data);
        }
        GridView1.EditIndex = - 1;
        LoadGrid ();
        ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", "alert('Record Update Successfully')", true);
    }
    catch (Exception ex) {
        ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", string.Format ("alert('Record Update Failed: {0}')", ex.Message), true);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37801304_37801340_1_33
37801304_37801552_1_20
Title: display error or success message when using c# foreach statement 
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    DataDTO data = new DataDTO ();
    BaseDAO connexion = new BaseDAO ();
    bool success = true;
    foreach (GridViewRow row in this.GridView1.Rows) {
        data.lblId = ((Label) row.FindControl ("lblId")).Text;
        try {
            connexion.update_database (data);
        }
        catch {
            ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", "alert('<success message>')", true);
            success = false;
            break;
        }
    }
    GridView1.EditIndex = - 1;
    LoadGrid ();
    if (success) {
        ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", "alert('<success message>')", true);
    }
}
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    DataDTO data = new DataDTO ();
    BaseDAO connexion = new BaseDAO ();
    try {
        foreach (GridViewRow row in this.GridView1.Rows) {
            data.lblId = ((Label) row.FindControl ("lblId")).Text;
            connexion.update_database (data);
        }
    }
    catch (Exception exc) {
        MessageBox.Show (exc.Message);
        isError = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37801304_37801382_1_19
37801304_37801404_1_26
Title: display error or success message when using c# foreach statement 
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    DataDTO data = new DataDTO ();
    BaseDAO connexion = new BaseDAO ();
    try {
        foreach (GridViewRow row in this.GridView1.Rows) {
        }
    }
    catch {
        isError = true;
    }
}
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    DataDTO data = new DataDTO ();
    BaseDAO connexion = new BaseDAO ();
    try {
        foreach (GridViewRow row in this.GridView1.Rows) {
            data.lblId = ((Label) row.FindControl ("lblId")).Text;
            connexion.update_database (data);
        }
        GridView1.EditIndex = - 1;
        LoadGrid ();
        ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", "alert('Record Update Successfully')", true);
    }
    catch (Exception ex) {
        ScriptManager.RegisterClientScriptBlock (this, this.GetType (), "alertMessage", string.Format ("alert('Record Update Failed: {0}')", ex.Message), true);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37824091_37825596_3_15
37824091_37825673_3_12
Title: Why is my OrderBy running forever with this comparator? 
----------------------------------------

public int Compare (int ? x, int ? y) {
    if (y == null)
        return - 1;
    else if (x == null)
        return 1;
    else {
        int diff = x - y;
        if (diff == 0)
            return 0;

        if (diff < 0)
            return 1;

        if (diff > 0)
            return - 1;

    }
}
----------------------------------------

public int Compare (int ? x, int ? y) {
    if (! y.HasValue) {
        if (! x.HasValue)
            return 0;

        return - 1;
    }
    if (! x.HasValue)
        return 1;

    return x.Value.CompareTo (y.Value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3782609_3869282_12_46
3782609_3900813_1_17
Title: Improving speed of Windows Workflow 
----------------------------------------

public Request Execute (Action action) {
    var request = new Request ();
    var workflowRuntime = WorkflowFactory.GetWorkflowRuntime ();
    workflowRuntime.StartRuntime ();
    var waitHandle = new AutoResetEvent (false);
    WorkflowInstance instance = null;
    workflowRuntime.WorkflowCompleted += ((sender, e) = > {
        if (e.WorkflowInstance != instance)
            return;

        waitHandle.Set ();
        request = e.OutputParameters ["gRequest"] as Request;
    });
    workflowRuntime.WorkflowTerminated += ((sender, e) = > {
        if (e.WorkflowInstance != instance)
            return;

        waitHandle.Set ();
        Logger.LogError (e.Exception, true, action.Serialize ());
    });
    var parameters = new Dictionary < string, object > {{"RepositoryInstance", Repository}, {"RequestID", action.RequestID.ToString ()}, {"ActionCode", action.ToString ()}};
    instance = workflowRuntime.CreateWorkflow (typeof (ApprovalFlow), parameters);
    instance.Start ();
    waitHandle.WaitOne ();
    return request;
}
----------------------------------------

public Request Execute (Action action, WorkflowRuntime workflowRuntime) {
    workflowRuntime.WorkflowCompleted += new EventHandler < WorkflowCompletedEventArgs > (workflowRuntime_WorkflowCompleted);
    workflowRuntime.WorkflowTerminated += new EventHandler < WorkflowTerminatedEventArgs > (workflowRuntime_WorkflowTerminated);
    var parameters = new Dictionary < string, object > {{"RepositoryInstance", Repository}, {"RequestID", action.RequestID.ToString ()}, {"ActionCode", action.ToString ()}};
    mWorkflowInstance = workflowRuntime.CreateWorkflow (typeof (ApprovalFlow), parameters);
    mWorkflowInstance.Start ();
    mWaitHandle.WaitOne ();
    return mRequest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37832232_37832644_2_20
37832232_37834555_24_35
Title: How to make aspx pages Read Only? 
----------------------------------------

public static void EnableControls (this Page page, ControlCollection ctrl, bool isEnable) {
    if (ctrl == null)
        ctrl = page.Controls;

    foreach (Control item in ctrl) {
        if (item.Controls.Count > 0)
            EnableControls (page, item.Controls, isEnable);

        if (item.GetType () == typeof (DropDownList))
            ((DropDownList) item).Enabled = isEnable;
        else if (item.GetType () == typeof (TextBox))
            ((TextBox) item).Enabled = isEnable;
        else if (item.GetType () == typeof (Button))
            ((Button) item).Enabled = isEnable;
        else if (item.GetType () == typeof (HtmlInputButton))
            ((HtmlInputButton) item).Disabled = ! isEnable;

    }
}
----------------------------------------

public void EnableControls (ControlCollection ctrl, bool isEnable) {
    foreach (Control item in ctrl) {
        if (item.HasControls ())
            EnableControls (item.Controls, isEnable);
        else if (item is WebControl)
            ((WebControl) item).Enabled = isEnable;
        else if (item is HtmlControl)
            ((HtmlControl) item).Disabled = ! isEnable;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37832392_37832688_1_26
37832392_37833155_1_18
Title: How to catch a child procedure exception from parent function? 
----------------------------------------

public void ParentFunction () {
    try {
        foreach (var item in someArray) {
            try {
                procedure1 ();
                procedure2 ();
                procedure3 ();
            }
            catch (Exception exc) {
                console.Writeline (exc.Message);
            }
        }
    }
    catch (Exception exc) {
        console.Writeline (exc.Message);
    }
}
----------------------------------------

public void ParentFunction () {
    try {
        foreach (var item in someArray) {
            if (! child_function1 ())
                continue;

            if (! child_function1 ())
                continue;

            child_function3 ();
        }
    }
    catch (Exception exc) {
        console.Writeline (exc.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37832392_37832694_1_24
37832392_37833155_1_18
Title: How to catch a child procedure exception from parent function? 
----------------------------------------

public void ParentFunction () {
    try {
        foreach (var item in someArray) {
            try {
                procedure1 ();
                procedure2 ();
                procedure3 ();
            }
            catch (Exception exc) {
                continue;
            }
        }
    }
    catch (Exception exc) {
        console.Writeline (exc.Message);
    }
}
----------------------------------------

public void ParentFunction () {
    try {
        foreach (var item in someArray) {
            if (! child_function1 ())
                continue;

            if (! child_function1 ())
                continue;

            child_function3 ();
        }
    }
    catch (Exception exc) {
        console.Writeline (exc.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37837191_37838293_1_19
37837191_37838293_21_28
Title: Automapper IDataReader to List<T> - Missing type map configuration or unsupported mapping 
----------------------------------------

public IEnumerable < T > FillDataRows < T > (String query, params SqlParameter [] sqlParams) {
    var properties = typeof (T).GetProperties ().ToList ();
    IList < T > result = new List < T > ();
    var source = FillDataRows (query, sqlParams).ToList ();
    var firstInSource = source.FirstOrDefault ();
    if (firstInSource == null)
        return result;

    properties.RemoveAll (p = > firstInSource.Table.Columns.Contains (p.Name) == false);
    foreach (var row in source) {
        var item = createItemFromRow < T > ((DataRow) row, properties);
        result.Add (item);
    }
    return result;
}
----------------------------------------

private T createItemFromRow < T > (DataRow row, IList < PropertyInfo > properties) {
    T item = Activator.CreateInstance < T > ();
    foreach (var property in properties) {
        if (row [property.Name] != System.DBNull.Value)
            property.SetValue (item, row [property.Name], null);

    }
    return item;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37879361_37879664_1_15
37879361_37879669_1_16
Title: How to convert multidimensional int array to multidimensional string array 
----------------------------------------

private static void Main (string [] args) {
    var arr = new int [,] {{1, 2}, {3, 4}, {5, 6}};
    var sb = new StringBuilder ();
    for (int x = 0; x < arr.GetLength (0); x += 1) {
        for (int y = 0; y < arr.GetLength (1); y += 1) {
            sb.Append (arr [x, y]).Append (" ");
        }
        sb.AppendLine ();
    }
    Console.Write (sb.ToString ());
    Console.Read ();
}
----------------------------------------

public static void Main () {
    int [,] array = {{1, 2}, {3, 4}, {5, 6}};
    StringBuilder sb = new StringBuilder ();
    for (int x = 0; x < array.GetLength (0); x ++) {
        for (int y = 0; y < array.GetLength (1); y ++) {
            sb.Append (array [x, y] + " ");
        }
        sb.Append (Environment.NewLine);
    }
    Console.Write (sb);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37884280_37884492_3_17
37884280_37884509_1_12
Title: Parse a String to a generic Comparable 
----------------------------------------

public static Boolean TryParse (String [] values, out List < T > result) {
    result = null;
    try {
        TypeConverter converter = TypeDescriptor.GetConverter (typeof (T));
        result = values.Select (v = > converter.ConvertFromInvariantString (v)).ToList ();
        return true;
    }
    catch {
        return false;
    }
}
----------------------------------------

public static Boolean TryParse (String [] values, out List < T > result) {
    var converter = TypeDescriptor.GetConverter (typeof (T));
    if (! converter.CanConvertFrom (typeof (T))) {
        result = null;
        return false;
    }
    result = values.Select (value = > (T) converter.ConvertFromInvariantString (value)).ToList ();
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37930751_37930868_18_30
37930751_37930868_9_16
Title: DistinctBy but ignore null/empty 
----------------------------------------

private static IEnumerable < TSource > ConditionalDistinctByImpl < TSource, TKey > (IEnumerable < TSource > source, Func < TSource, TKey > keySelector, Func < TKey, bool > shouldApplyFilter, IEqualityComparer < TKey > comparer) {
    var knownKeys = new HashSet < TKey > (comparer);
    foreach (var element in source) {
        var key = keySelector (element);
        if (shouldApplyFilter (key) && knownKeys.Add (key)) {
            yield return element;
        }
    }
}
----------------------------------------

public static IEnumerable < TSource > ConditionalDistinctBy < TSource, TKey > (this IEnumerable < TSource > source, Func < TSource, TKey > keySelector, Func < TKey, bool > shouldApplyFilter, IEqualityComparer < TKey > comparer) {
    if (source == null)
        throw new ArgumentNullException ("source");

    if (keySelector == null)
        throw new ArgumentNullException ("keySelector");

    if (shouldApplyFilter == null)
        throw new ArgumentNullException ("shouldApplyFilter");

    return ConditionalDistinctByImpl (source, keySelector, shouldApplyFilter, comparer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37960793_37962037_146_150
37960793_37962037_152_156
Title: Still can't get sort and search an array to work 
----------------------------------------

static public int meny (string rubrik, string m_val1, string m_val2, string m_val3) {
    int menSvar;
    menyRubrik (rubrik);
    menyRad (m_val1);
    menyRad (m_val2);
    menyRad (m_val3);
    menSvar = menyInm ();
    return menSvar;
}
----------------------------------------

static public int meny (string rubrik, string m_val1, string m_val2, string m_val3, string m_val4) {
    int menSvar;
    menyRubrik (rubrik);
    menyRad (m_val1);
    menyRad (m_val2);
    menyRad (m_val3);
    menyRad (m_val4);
    menSvar = menyInm ();
    return menSvar;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37960793_37962037_146_150
37960793_37962037_158_162
Title: Still can't get sort and search an array to work 
----------------------------------------

static public int meny (string rubrik, string m_val1, string m_val2, string m_val3) {
    int menSvar;
    menyRubrik (rubrik);
    menyRad (m_val1);
    menyRad (m_val2);
    menyRad (m_val3);
    menSvar = menyInm ();
    return menSvar;
}
----------------------------------------

static public int meny (string rubrik, string m_val1, string m_val2, string m_val3, string m_val4, string m_val5) {
    int menSvar;
    menyRubrik (rubrik);
    menyRad (m_val1);
    menyRad (m_val2);
    menyRad (m_val3);
    menyRad (m_val4);
    menyRad (m_val5);
    menSvar = menyInm ();
    return menSvar;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37960793_37962037_146_150
37960793_37962037_164_168
Title: Still can't get sort and search an array to work 
----------------------------------------

static public int meny (string rubrik, string m_val1, string m_val2, string m_val3) {
    int menSvar;
    menyRubrik (rubrik);
    menyRad (m_val1);
    menyRad (m_val2);
    menyRad (m_val3);
    menSvar = menyInm ();
    return menSvar;
}
----------------------------------------

static public int meny (string rubrik, string m_val1, string m_val2, string m_val3, string m_val4, string m_val5, string m_val6) {
    int menSvar;
    menyRubrik (rubrik);
    menyRad (m_val1);
    menyRad (m_val2);
    menyRad (m_val3);
    menyRad (m_val4);
    menyRad (m_val5);
    menyRad (m_val6);
    menSvar = menyInm ();
    return menSvar;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3796520_3796556_1_30
3796520_3796578_1_27
Title: "in C# how do I order items in a list where the ""largest"" values are in the middle of the list" 
----------------------------------------

public static IEnumerable < T > SortToMiddle < T, TU > (IEnumerable < T > input, Func < T, TU > getSortKey) {
    var sorted = new List < TU > (input.Select (getSortKey));
    sorted.Sort ();
    var firstHalf = new List < TU > ();
    var secondHalf = new List < TU > ();
    var sendToFirst = true;
    foreach (var current in sorted) {
        if (sendToFirst) {
            firstHalf.Add (current);
        } else {
            secondHalf.Add (current);
        }
        sendToFirst = ! sendToFirst;
    }
    secondHalf.Reverse ();
    sorted = new List < TU > (firstHalf.Concat (secondHalf));
    return sorted.Select (s = > input.First (t = > s.Equals (getSortKey (t))));
}
----------------------------------------

static T [] SortFromMiddleOut < T, U > (IList < T > list, Func < T, U > orderSelector, bool largestInside) where U : IComparable < U > {
    T [] sortedArray = new T [list.Count];
    bool add = false;
    int index = (list.Count / 2);
    int iterations = 0;
    IOrderedEnumerable < T > orderedList;
    if (largestInside)
        orderedList = list.OrderByDescending (orderSelector);
    else
        orderedList = list.OrderBy (orderSelector);

    foreach (T item in orderedList) {
        sortedArray [index] = item;
        if (add)
            index += ++ iterations;
        else
            index -= ++ iterations;

        add = ! add;
    }
    return sortedArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37987556_37997433_1_37
37987556_38002699_23_45
Title: Unity Google Play Services: Authentication Failed always: 
----------------------------------------

void Start () {
    PlayGamesClientConfiguration config = new PlayGamesClientConfiguration.Builder ().Build ();
    PlayGamesPlatform.InitializeInstance (config);
    GooglePlayGames.PlayGamesPlatform.DebugLogEnabled = false;
    PlayGamesPlatform.Activate ();
    Advertisement.Initialize ("CORRECT_NUMBER", true);
    if (PlayerPrefs.HasKey ("record")) {
        record.text = "Record actual: " + PlayerPrefs.GetInt ("record");
        Analytics.CustomEvent ("Start Play", new Dictionary < string, object > {{"Record", PlayerPrefs.GetInt ("record")}});
        if (Social.localUser.authenticated) {
            Social.ReportScore (PlayerPrefs.GetInt ("record"), "CORRECT_CODE", (bool success) = > {
            });
        }
    } else {
        record.text = "Consigue un record!!";
    }
    if (Social.localUser.authenticated) {
        signIn.SetActive (false);
    }
    test.SetActive (false);
}
----------------------------------------

void Start () {
    PlayGamesClientConfiguration config = new PlayGamesClientConfiguration.Builder ().Build ();
    PlayGamesPlatform.InitializeInstance (config);
    GooglePlayGames.PlayGamesPlatform.DebugLogEnabled = true;
    PlayGamesPlatform.Activate ();
    Advertisement.Initialize ("NUMBER", true);
    test.SetActive (false);
    SignIn ();
    if (PlayerPrefs.HasKey ("record")) {
        record.text = "Record actual: " + PlayerPrefs.GetInt ("record");
        Analytics.CustomEvent ("Start Play", new Dictionary < string, object > {{"Record", PlayerPrefs.GetInt ("record")}});
    } else {
        record.text = "Consigue un record!!";
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38052656_38054426_1_28
38052656_38056444_1_24
Title: How to check/uncheck only particular list items in checkBoxlist based on another list item in asp.net 
----------------------------------------

protected void chklstOptions_SelectedIndexChanged (object sender, EventArgs e) {
    foreach (ListItem lt in chklstOptions.Items) {
        if (lt.Value == "RepOptionB")
            if (lt.Selected) {
                foreach (ListItem lm in chklstOptions.Items) {
                    if (lm.Value == "RepOptionA")
                        lm.Selected = false;

                }
            }

    }
    foreach (ListItem lt in chklstOptions.Items) {
        if (lt.Value == "RepOptionA")
            if (lt.Selected) {
                foreach (ListItem lm in chklstOptions.Items) {
                    if (lm.Value == "RepOptionB")
                        lm.Selected = false;

                }
            }

    }
}
----------------------------------------

protected void chklstOptions_SelectedIndexChanged (object sender, EventArgs e) {
    var selectedItem = chklstOptions.SelectedItem;
    string result = Request.Form ["__EVENTTARGET"];
    string [] checkedBox = result.Split ('$');
    int index = int.Parse (checkedBox [checkedBox.Length - 1]);
    string latestItem = chklstOptions.Items [index].Value;
    foreach (ListItem Item in chklstOptions.Items) {
        if (Item.Selected) {
            if (Item.Text == "RepOptionA" && latestItem == "RepOptionB") {
                chklstOptions.Items.FindByText ("RepOptionA").Selected = false;
                chklstOptions.Items.FindByText ("RepOptionB").Selected = true;
            }
            if (Item.Text == "RepOptionB" && latestItem == "RepOptionA") {
                chklstOptions.Items.FindByText ("RepOptionB").Selected = false;
                chklstOptions.Items.FindByText ("RepOptionA").Selected = true;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38093972_44425580_26_51
38093972_46363980_1_21
Title: Azure Functions binding redirect 
----------------------------------------

public static void RedirectAssembly (BindingRedirect bindingRedirect) {
    ResolveEventHandler handler = null;
    handler = (sender, args) = > {
        var requestedAssembly = new AssemblyName (args.Name);
        if (requestedAssembly.Name != bindingRedirect.ShortName) {
            return null;
        }
        var targetPublicKeyToken = new AssemblyName ("x, PublicKeyToken=" + bindingRedirect.PublicKeyToken).GetPublicKeyToken ();
        requestedAssembly.Version = new Version (bindingRedirect.RedirectToVersion);
        requestedAssembly.SetPublicKeyToken (targetPublicKeyToken);
        requestedAssembly.CultureInfo = CultureInfo.InvariantCulture;
        AppDomain.CurrentDomain.AssemblyResolve -= handler;
        return Assembly.Load (requestedAssembly);
    };
    AppDomain.CurrentDomain.AssemblyResolve += handler;
}
----------------------------------------

public static void RedirectAssembly () {
    var list = AppDomain.CurrentDomain.GetAssemblies ().Select (a = > a.GetName ()).OrderByDescending (a = > a.Name).ThenByDescending (a = > a.Version).Select (a = > a.FullName).ToList ();
    AppDomain.CurrentDomain.AssemblyResolve += (sender, args) = > {
        var requestedAssembly = new AssemblyName (args.Name);
        foreach (string asmName in list) {
            if (asmName.StartsWith (requestedAssembly.Name + ",")) {
                return Assembly.Load (asmName);
            }
        }
        return null;
    };
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38100618_38101146_1_12
38100618_38116008_1_12
Title: SignalR: can't connect to local or any other ip address 
----------------------------------------

public static string GetLocalIPAddress () {
    var host = Dns.GetHostEntry (Dns.GetHostName ());
    foreach (var ip in host.AddressList) {
        if (ip.AddressFamily == AddressFamily.InterNetwork) {
            return ip.ToString ();
        }
    }
    throw new Exception ("Local IP Address Not Found!");
}
----------------------------------------

public static string GetLocalIPAddress () {
    var host = Dns.GetHostEntry (Dns.GetHostName ());
    foreach (var ip in host.AddressList) {
        if (ip.AddressFamily == AddressFamily.InterNetwork) {
            return ip.ToString ();
        }
    }
    throw new Exception ("Local IP Address Not Found!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38133765_38133860_1_38
38133765_38134090_1_36
Title: Assign ComboBox to Display Int label 
----------------------------------------

private void RaceCmbBx_SelectedIndexChanged_1 (object sender, EventArgs e) {
    int num1, num2, num0;
    int index = RaceCmbBx.SelectedIndex;
    num1 = 1;
    num2 = 2;
    num0 = 0;
    if (index == 1) {
        StrRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        DexRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        ConRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        WisRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        IntRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        ChaRaceLbl.Text = (Convert.ToInt32 (num0)).ToString ();
    } else if (index == 2) {
        StrRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        DexRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        ConRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        WisRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        IntRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
        ChaRaceLbl.Text = (Convert.ToInt32 (num1)).ToString ();
    } else {
        StrRaceLbl.Text = (Convert.ToInt32 (num2)).ToString ();
        DexRaceLbl.Text = (Convert.ToInt32 (num2)).ToString ();
        ConRaceLbl.Text = (Convert.ToInt32 (num2)).ToString ();
        WisRaceLbl.Text = (Convert.ToInt32 (num2)).ToString ();
        IntRaceLbl.Text = (Convert.ToInt32 (num2)).ToString ();
        ChaRaceLbl.Text = (Convert.ToInt32 (num2)).ToString ();
    }
}
----------------------------------------

private void RaceCmbBx_SelectedIndexChanged_1 (object sender, EventArgs e) {
    int num1, num2, num0;
    int index = RaceCmbBx.SelectedIndex;
    num1 = 1;
    num2 = 2;
    num0 = 0;
    if (index == 0) {
        StrRaceLbl.Text = num1.ToString ();
        DexRaceLbl.Text = num1.ToString ();
        ConRaceLbl.Text = num1.ToString ();
        WisRaceLbl.Text = num1.ToString ();
        IntRaceLbl.Text = num1.ToString ();
        ChaRaceLbl.Text = num1.ToString ();
    } else if (index == 1) {
        StrRaceLbl.Text = num2.ToString ();
        DexRaceLbl.Text = num1.ToString ();
        ConRaceLbl.Text = num2.ToString ();
        WisRaceLbl.Text = num1.ToString ();
        IntRaceLbl.Text = num1.ToString ();
        ChaRaceLbl.Text = num2.ToString ();
    } else {
        StrRaceLbl.Text = num2.ToString ();
        DexRaceLbl.Text = num0.ToString ();
        ConRaceLbl.Text = num1.ToString ();
        WisRaceLbl.Text = num0.ToString ();
        IntRaceLbl.Text = num1.ToString ();
        ChaRaceLbl.Text = num0.ToString ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3823848_17372444_58_79
3823848_33104179_54_72
Title: Creating a very simple linked list 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Add First:");
    LinkedList myList1 = new LinkedList ();
    myList1.AddFirst ("Hello");
    myList1.AddFirst ("Magical");
    myList1.AddFirst ("World");
    myList1.printAllNodes ();
    Console.WriteLine ();
    Console.WriteLine ("Add Last:");
    LinkedList myList2 = new LinkedList ();
    myList2.AddLast ("Hello");
    myList2.AddLast ("Magical");
    myList2.AddLast ("World");
    myList2.printAllNodes ();
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    LinkedList < int > LL = new LinkedList < int > ();
    if (! LL.Contain (0))
        Console.WriteLine ("0 is not exist.");

    LL.Print ();
    LL.Add (0);
    LL.Add (1);
    LL.Add (2);
    LL.Add (2);
    if (LL.Contain (0))
        Console.WriteLine ("0 is exist.");

    LL.Print ();
    LL.Delete (0);
    LL.Delete (2);
    if (! LL.Delete (0))
        Console.WriteLine ("0 is not exist.");

    LL.Print ();
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3823848_17372444_58_79
3823848_40584202_80_95
Title: Creating a very simple linked list 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Add First:");
    LinkedList myList1 = new LinkedList ();
    myList1.AddFirst ("Hello");
    myList1.AddFirst ("Magical");
    myList1.AddFirst ("World");
    myList1.printAllNodes ();
    Console.WriteLine ();
    Console.WriteLine ("Add Last:");
    LinkedList myList2 = new LinkedList ();
    myList2.AddLast ("Hello");
    myList2.AddLast ("Magical");
    myList2.AddLast ("World");
    myList2.printAllNodes ();
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Program p = new Program ();
    p.AddEnd (2);
    p.AddStart (1);
    p.AddStart (0);
    p.AddEnd (3);
    p.Display ();
    p.RemoveStart ();
    Console.WriteLine ("Removed node from Start");
    p.Display ();
    Console.WriteLine ("Removed node from End");
    p.RemoveEnd ();
    p.Display ();
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3823848_33104179_54_72
3823848_40584202_80_95
Title: Creating a very simple linked list 
----------------------------------------

static void Main () {
    LinkedList < int > LL = new LinkedList < int > ();
    if (! LL.Contain (0))
        Console.WriteLine ("0 is not exist.");

    LL.Print ();
    LL.Add (0);
    LL.Add (1);
    LL.Add (2);
    LL.Add (2);
    if (LL.Contain (0))
        Console.WriteLine ("0 is exist.");

    LL.Print ();
    LL.Delete (0);
    LL.Delete (2);
    if (! LL.Delete (0))
        Console.WriteLine ("0 is not exist.");

    LL.Print ();
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Program p = new Program ();
    p.AddEnd (2);
    p.AddStart (1);
    p.AddStart (0);
    p.AddEnd (3);
    p.Display ();
    p.RemoveStart ();
    Console.WriteLine ("Removed node from Start");
    p.Display ();
    Console.WriteLine ("Removed node from End");
    p.RemoveEnd ();
    p.Display ();
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38250885_38251167_1_13
38250885_38251173_1_12
Title: How to change All DatePicker's to Custom Format on many forms from external class 
----------------------------------------

public void FormatDateTimePickers (Form customform) {
    foreach (Control c in customform.Controls) {
        var dateTimePicker = c as DateTimePicker;
        if (dateTimePicker != null) {
            dateTimePicker.Format = DateTimePickerFormat.Custom;
            dateTimePicker.CustomFormat = "dd/MM/yyyy";
        }
    }
}
----------------------------------------

public void FormatDateTimePickers (Form customform) {
    foreach (Control c in customform.Controls) {
        var dateTimePicker = c as DateTimePicker;
        if (dateTimePicker != null) {
            dateTimePicker.Format = DateTimePickerFormat.Custom;
            dateTimePicker.CustomFormat = "dd/MM/yyyy";
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38299084_38299116_7_34
38299084_38299121_7_26
Title: If a num is divisible by two number logic C# 
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0 && n % 5 == 0) {
        Console.WriteLine ("This Number is Divisible by 3 and 5 ");
    } else {
        Console.WriteLine ("This Number is Not Divisible by 3 and 5");
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3832344_3832540_3_21
3832344_3832808_12_27
Title: Repeat LINQ Query 
----------------------------------------

static void Main (string [] args) {
    List < char > s = "ABCDEFGHIJ".ToList ();
    for (int x = 0; x < 10; x ++) {
        s.rotate (x + 1).ForEach (Console.Write);
        Console.WriteLine ();
    }
    Console.WriteLine ();
    for (int x = 0; x < 10; x ++) {
        s.rotate2 (x + 1).ForEach (Console.Write);
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    List < char > chars = new List < char > ();
    for (int i = 65; i < 75; ++ i) {
        chars.Add ((char) i);
    }
    var r1 = chars.Rotate (10);
    var r2 = chars.Rotate (1);
    var r3 = chars.Rotate (101);
    var r4 = chars.Rotate (102);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38380823_38381008_5_28
38380823_38382695_1_38
Title: Enumerator stuck in endless loop when removing excess items from a List 
----------------------------------------

static void Main (string [] args) {
    int [] arr = new int [] {1, 2, 1, 4, 5, 1, 2, 2, 2};
    int occurrenceLimit = 2;
    var newList = new List < Vm > ();
    var result = new List < Vm > ();
    for (int i = 0; i < arr.Length; i ++) {
        var a = new Vm {Value = arr [i], Index = i};
        result.Add (a);
    }
    foreach (var item in result.GroupBy (x = > x.Value)) {
        newList.AddRange (item.Select (x = > x).Take (occurrenceLimit));
    }
    Console.WriteLine (string.Join (",", newList.OrderBy (x = > x.Index).Select (a = > a.Value)));
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    int [] arr = new int [] {1, 2, 1, 4, 5, 1, 2, 2, 2};
    int occurrenceLimit = 2;
    var intList = arr.ToList ();
    for (int i = 0; i < intList.Count; i ++) {
        int occursintegerOccurrence = intList.Count (n = > n == intList [i]);
        while (occursintegerOccurrence > occurrenceLimit) {
            for (var ii = 0; ii < occursintegerOccurrence - occurrenceLimit; ii ++) {
                var index = intList.LastIndexOf (intList [i]);
                intList.RemoveAt (index);
            }
            occursintegerOccurrence = intList.Count (n = > n == intList [i]);
        }
    }
    foreach (var item in intList) {
        Console.Write (item + " ");
    }
    Console.WriteLine (Environment.NewLine + "Done");
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38382410_38383258_1_26
38382410_38384565_1_13
Title: Pass Property and get class 
----------------------------------------

private static void AttachProperties < T1, T2 > (Expression < Func < T1, object > > property1, T1 instance1, Expression < Func < T2, object > > property2, T2 instance2) where T1 : INotifyPropertyChanged where T2 : INotifyPropertyChanged {
    var p1 = property1.GetPropertyInfo ();
    var p2 = property2.GetPropertyInfo ();
    ((INotifyPropertyChanged) instance1).PropertyChanged += (_, e) = > {
        if (e.PropertyName == p1.Name || string.IsNullOrEmpty (e.PropertyName)) {
            SyncProperties (p1, p2, instance1, instance2);
        }
    };
    ((INotifyPropertyChanged) instance2).PropertyChanged += (_, e) = > {
        if (e.PropertyName == p2.Name || string.IsNullOrEmpty (e.PropertyName)) {
            SyncProperties (p2, p1, instance2, instance1);
        }
    };
}
----------------------------------------

public static void AttachProperties < T1, T2 > (Expression < Func < T1 > > property1, Expression < Func < T2 > > property2) {
    var instance1 = Expression.Lambda < Func < object > > (((MemberExpression) property1.Body).Expression).Compile () ();
    var iNotify1 = instance1 as INotifyPropertyChanged;
    var prop1 = GetPropertyInfo (property1);
    var instance2 = Expression.Lambda < Func < object > > (((MemberExpression) property2.Body).Expression).Compile () ();
    var iNotify2 = instance2 as INotifyPropertyChanged;
    var prop2 = GetPropertyInfo (property2);
    AttachProperty (prop1, iNotify1, prop2, iNotify2);
    AttachProperty (prop2, iNotify2, prop1, iNotify1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38382410_38383258_1_26
38382410_38384565_31_50
Title: Pass Property and get class 
----------------------------------------

private static void AttachProperties < T1, T2 > (Expression < Func < T1, object > > property1, T1 instance1, Expression < Func < T2, object > > property2, T2 instance2) where T1 : INotifyPropertyChanged where T2 : INotifyPropertyChanged {
    var p1 = property1.GetPropertyInfo ();
    var p2 = property2.GetPropertyInfo ();
    ((INotifyPropertyChanged) instance1).PropertyChanged += (_, e) = > {
        if (e.PropertyName == p1.Name || string.IsNullOrEmpty (e.PropertyName)) {
            SyncProperties (p1, p2, instance1, instance2);
        }
    };
    ((INotifyPropertyChanged) instance2).PropertyChanged += (_, e) = > {
        if (e.PropertyName == p2.Name || string.IsNullOrEmpty (e.PropertyName)) {
            SyncProperties (p2, p1, instance2, instance1);
        }
    };
}
----------------------------------------

static PropertyInfo GetPropertyInfo < T1 > (Expression < Func < T1 > > property) {
    MemberExpression expression = null;
    if (property.Body.NodeType == ExpressionType.Convert) {
        var body = (UnaryExpression) property.Body;
        expression = body.Operand as MemberExpression;
    } else if (property.Body.NodeType == ExpressionType.MemberAccess) {
        expression = property.Body as MemberExpression;
    }
    if (expression == null) {
        throw new ArgumentException ("Not a member access", nameof (property));
    }
    return expression.Member as PropertyInfo;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38382410_38384565_1_13
38382410_38384565_31_50
Title: Pass Property and get class 
----------------------------------------

public static void AttachProperties < T1, T2 > (Expression < Func < T1 > > property1, Expression < Func < T2 > > property2) {
    var instance1 = Expression.Lambda < Func < object > > (((MemberExpression) property1.Body).Expression).Compile () ();
    var iNotify1 = instance1 as INotifyPropertyChanged;
    var prop1 = GetPropertyInfo (property1);
    var instance2 = Expression.Lambda < Func < object > > (((MemberExpression) property2.Body).Expression).Compile () ();
    var iNotify2 = instance2 as INotifyPropertyChanged;
    var prop2 = GetPropertyInfo (property2);
    AttachProperty (prop1, iNotify1, prop2, iNotify2);
    AttachProperty (prop2, iNotify2, prop1, iNotify1);
}
----------------------------------------

static PropertyInfo GetPropertyInfo < T1 > (Expression < Func < T1 > > property) {
    MemberExpression expression = null;
    if (property.Body.NodeType == ExpressionType.Convert) {
        var body = (UnaryExpression) property.Body;
        expression = body.Operand as MemberExpression;
    } else if (property.Body.NodeType == ExpressionType.MemberAccess) {
        expression = property.Body as MemberExpression;
    }
    if (expression == null) {
        throw new ArgumentException ("Not a member access", nameof (property));
    }
    return expression.Member as PropertyInfo;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38382819_45071263_21_34
38382819_45071263_56_69
Title: Output console in RichTextBox c# WindowsForm 
----------------------------------------

public override void Write (char value) {
    if (this.richTextBox.Parent.InvokeRequired) {
        Action < char > action = Write;
        this.richTextBox.Parent.Invoke (action, value);
    } else {
        base.Write (value);
        this.richTextBox.AppendText (value.ToString ());
        this.richTextBox.ScrollToCaret ();
    }
}
----------------------------------------

public override void Write (string format, object arg0) {
    if (this.richTextBox.Parent.InvokeRequired) {
        Action < string, object > action = Write;
        this.richTextBox.Parent.Invoke (action, format, arg0);
    } else {
        base.Write (format, arg0);
        this.richTextBox.AppendText (string.Format (format, arg0));
        this.richTextBox.ScrollToCaret ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3838563_3842294_52_64
3838563_3845808_38_51
Title: Relation Of KeyDown Event With Datagridview's RowHeaderVisible 
----------------------------------------

protected override bool ProcessCmdKey (ref Message msg, Keys keyData) {
    CommandKeyPressHandler eventDelegate = CommandKeyPress;
    if (eventDelegate != null) {
        foreach (CommandKeyPressHandler handler in eventDelegate.GetInvocationList ()) {
            if (handler (this, keyData))
                return true;

        }
    }
    return base.ProcessCmdKey (ref msg, keyData);
}
----------------------------------------

protected override bool ProcessCmdKey (ref Message msg, Keys keyData) {
    if ((keyData & (Keys.Alt | Keys.C)) == (Keys.Alt | Keys.C)) {
        if (dgv.Handle == msg.HWnd || IsChild (dgv.Handle, msg.HWnd)) {
            Form form = new Form ();
            form.Text = "Form2";
            form.Show (this);
            return true;
        }
    }
    return base.ProcessCmdKey (ref msg, keyData);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38393923_38394077_1_22
38393923_38394140_1_11
Title: Is this kind of a bool method a bad practice? 
----------------------------------------

public bool isRunning () {
    bool result = false;
    if (move != Moving.None && staminaRegan) {
        if (keyState.IsKeyDown (Keys.Space)) {
            EntityAnimation.interval = 10;
            result = true;
        } else {
            EntityAnimation.interval = 65;
        }
    } else {
        EntityAnimation.interval = 65;
    }
    return result;
}
----------------------------------------

public bool isRunning () {
    bool isMovingQuickly = (move != Moving.None) && staminaIsRegenerating && keyState.IsKeyDown (Keys.Space);
    if (isMovingQuickly)
        EntityAnimation.interval = 10;
    else
        EntityAnimation.interval = 65;

    return isMovingQuickly;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3839978_3840013_10_24
3839978_3841440_12_28
Title: using collection of strings in a switch statement 
----------------------------------------

static void Main (string [] args) {
    var command = Enum.Parse (typeof (Commands), args [0]);
    switch (command) {
        case Command.CommandOne :
            break;
        case Command.CommandTwo :
            break;
        case Command.CommandThree :
            break;
        default :
            break;
    }
}
----------------------------------------

static void Main (string [] args) {
    string Command = args [0];
    switch (Command) {
        case command1 :
            break;
        case command2 :
            break;
        case command3 :
            break;
        case command4 :
            break;
        default :
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3844351_3847510_18_29
3844351_3847510_34_45
Title: Nhibernate Architecture - Generic Nhibernate Repository to serve many different types 
----------------------------------------

public void Save < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Save (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------

public void Update < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Update (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3844351_3847510_18_29
3844351_3847510_50_61
Title: Nhibernate Architecture - Generic Nhibernate Repository to serve many different types 
----------------------------------------

public void Save < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Save (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------

public void Delete < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Delete (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3844351_3847510_18_29
3844351_3847510_66_77
Title: Nhibernate Architecture - Generic Nhibernate Repository to serve many different types 
----------------------------------------

public void Save < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Save (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------

public T GetById < T > (Guid id) {
    Reconnect (_session);
    try {
        return _session.Get < T > (id);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------

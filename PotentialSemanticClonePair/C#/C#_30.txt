$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44221454_44222169_1_60
44221454_44266945_1_39
Title: Bug in Microsoft's internal PriorityQueue<T>? 
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 1) {
        int parent = 0;
        int leftChild = HeapLeftChild (parent);
        while (leftChild < _count) {
            int rightChild = HeapRightFromLeft (leftChild);
            int bestChild = (rightChild < _count && _comparer.Compare (_heap [rightChild], _heap [leftChild]) < 0) ? rightChild : leftChild;
            _heap [parent] = _heap [bestChild];
            parent = bestChild;
            leftChild = HeapLeftChild (parent);
        }
        _heap [parent] = _heap [_count - 1];
        int index = parent;
        var value = _heap [parent];
        while (index > 0) {
            int parentIndex = HeapParent (index);
            if (_comparer.Compare (value, _heap [parentIndex]) < 0) {
                var pivot = _heap [index];
                _heap [index] = _heap [parentIndex];
                _heap [parentIndex] = pivot;
                index = parentIndex;
            } else {
                break;
            }
        }
    }
    _count --;
}
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        while (ix < _count / 2) {
            int smallestChild = HeapLeftChild (ix);
            int rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44238773_44239133_14_20
44238773_44242380_22_28
Title: How to change label number and text with method from another Class? 
----------------------------------------

public void ChangeLabel (string msg, Label label) {
    if (label.InvokeRequired)
        label.Invoke (new MethodInvoker (delegate {
            label.Text = msg;
        }));
    else
        label.Text = msg;

}
----------------------------------------

private void ChangeLabel (string msg, Label label) {
    if (label.InvokeRequired)
        label.Invoke (new MethodInvoker (delegate {
            label.Text = msg;
        }));
    else
        label.Text = msg;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44260594_44260634_1_34
44260594_44260735_1_19
Title: Function not all code paths return a value 
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var user = _userManager.Users.Where (u = > u.Email == currentUserId).FirstOrDefault ();
    if (user == null) {
        return 0;
    }
    var stakeholder = _context.Stakeholders.Where (s = > s.StakeholderId == user.IdentityId).FirstOrDefault ();
    return stakeholder == null ? 0 : stakeholder.StakeholderId;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44260594_44260640_1_28
44260594_44260735_1_19
Title: Function not all code paths return a value 
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var user = _userManager.Users.Where (u = > u.Email == currentUserId).FirstOrDefault ();
    if (user == null) {
        return 0;
    }
    var stakeholder = _context.Stakeholders.Where (s = > s.StakeholderId == user.IdentityId).FirstOrDefault ();
    return stakeholder == null ? 0 : stakeholder.StakeholderId;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44260594_44260641_1_34
44260594_44260735_1_19
Title: Function not all code paths return a value 
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var user = _userManager.Users.Where (u = > u.Email == currentUserId).FirstOrDefault ();
    if (user == null) {
        return 0;
    }
    var stakeholder = _context.Stakeholders.Where (s = > s.StakeholderId == user.IdentityId).FirstOrDefault ();
    return stakeholder == null ? 0 : stakeholder.StakeholderId;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44260594_44260735_1_19
44260594_44260838_1_25
Title: Function not all code paths return a value 
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var user = _userManager.Users.Where (u = > u.Email == currentUserId).FirstOrDefault ();
    if (user == null) {
        return 0;
    }
    var stakeholder = _context.Stakeholders.Where (s = > s.StakeholderId == user.IdentityId).FirstOrDefault ();
    return stakeholder == null ? 0 : stakeholder.StakeholderId;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4432_11215149_1_16
4432_17305_1_14
Title: CSV string handling 
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    using (StringWriter stringWriter = new StringWriter (sb))
    {
        using (var csvWriter = new CsvHelper.CsvWriter (stringWriter))
        {
            csvWriter.Configuration.HasHeaderRecord = false;
            foreach (Contact c in contactList) {
                csvWriter.WriteField (c.Name);
            }
        }} return sb.ToString ();
}
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    foreach (Contact c in contactList) {
        sb.Append (c.Name + ",");
    }
    if (sb.Length > 0)
        sb.Length -= 1;

    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4432_11215149_1_16
4432_4438_1_18
Title: CSV string handling 
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    using (StringWriter stringWriter = new StringWriter (sb))
    {
        using (var csvWriter = new CsvHelper.CsvWriter (stringWriter))
        {
            csvWriter.Configuration.HasHeaderRecord = false;
            foreach (Contact c in contactList) {
                csvWriter.WriteField (c.Name);
            }
        }} return sb.ToString ();
}
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    bool isFirst = true;
    foreach (Contact c in contactList) {
        if (! isFirst) {
            sb.Append (",");
        } else {
            isFirst = false;
        }
        sb.Append (c.Name);
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4432_11215149_1_16
4432_4611_1_15
Title: CSV string handling 
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    using (StringWriter stringWriter = new StringWriter (sb))
    {
        using (var csvWriter = new CsvHelper.CsvWriter (stringWriter))
        {
            csvWriter.Configuration.HasHeaderRecord = false;
            foreach (Contact c in contactList) {
                csvWriter.WriteField (c.Name);
            }
        }} return sb.ToString ();
}
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    if (contactList == null || contactList.Count == 0)
        return string.Empty;

    StringBuilder sb = new StringBuilder (contactList [0].Name);
    for (int i = 1; i < contactList.Count; i ++) {
        sb.Append (",");
        sb.Append (contactList [i].Name);
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4432_17305_1_14
4432_4438_1_18
Title: CSV string handling 
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    foreach (Contact c in contactList) {
        sb.Append (c.Name + ",");
    }
    if (sb.Length > 0)
        sb.Length -= 1;

    return sb.ToString ();
}
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    bool isFirst = true;
    foreach (Contact c in contactList) {
        if (! isFirst) {
            sb.Append (",");
        } else {
            isFirst = false;
        }
        sb.Append (c.Name);
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4432_17305_1_14
4432_4611_1_15
Title: CSV string handling 
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    foreach (Contact c in contactList) {
        sb.Append (c.Name + ",");
    }
    if (sb.Length > 0)
        sb.Length -= 1;

    return sb.ToString ();
}
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    if (contactList == null || contactList.Count == 0)
        return string.Empty;

    StringBuilder sb = new StringBuilder (contactList [0].Name);
    for (int i = 1; i < contactList.Count; i ++) {
        sb.Append (",");
        sb.Append (contactList [i].Name);
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4432_4438_1_18
4432_4611_1_15
Title: CSV string handling 
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    StringBuilder sb = new StringBuilder ();
    bool isFirst = true;
    foreach (Contact c in contactList) {
        if (! isFirst) {
            sb.Append (",");
        } else {
            isFirst = false;
        }
        sb.Append (c.Name);
    }
    return sb.ToString ();
}
----------------------------------------

public string ReturnAsCSV (ContactList contactList) {
    if (contactList == null || contactList.Count == 0)
        return string.Empty;

    StringBuilder sb = new StringBuilder (contactList [0].Name);
    for (int i = 1; i < contactList.Count; i ++) {
        sb.Append (",");
        sb.Append (contactList [i].Name);
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
443378_1053551_1_25
443378_444507_1_41
Title: Return String from a webmethod instead of a dataset. 
----------------------------------------

[WebMethod] public String GetPONumber (string Database) {
    object po = "";
    using (SqlConnection connection = new SqlConnection (GetConnString (Database)))
    {
        string Query = @" SQL QUERY GOES HERE!!!! ";
        using (SqlCommand command = new SqlCommand (Query, connection))
        {
            try {
                connection.Open ();
                po = Command.ExecuteScalar ();
            }
            catch {
            }
        }} return po.ToString ();
}
----------------------------------------

[WebMethod] public String GetPONumber (string Database) {
    object po = "";
    SqlConnection Connection = new SqlConnection (GetConnString (Database));
    Connection.Open ();
    string Query = @" SQL QUERY GOES HERE!!!! ";
    SqlCommand Command = new SqlCommand (Query, Connection);
    try {
        po = Command.ExecuteScalar ();
    }
    catch {
    }
    Command.Dispose ();
    Command = null;
    Connection.Close ();
    Connection.Dispose ();
    Connection = null;
    return po.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44400322_44481375_14_34
44400322_44488529_1_25
Title: How to draw text in Xamarin iOS? 
----------------------------------------

void DrawText (CGContext context, string text, nfloat textHeight, nfloat x, nfloat y) {
    context.TranslateCTM (- x, - (y + textHeight));
    context.SetFillColor (UIColor.Red.CGColor);
    var attributedString = new NSAttributedString (text, new CTStringAttributes {ForegroundColorFromContext = true, Font = new CTFont ("Arial", 16)});
    CGRect sizeOfText;
    using (var textLine = new CTLine (attributedString))
    {
        textLine.Draw (context);
        sizeOfText = textLine.GetBounds (CTLineBoundsOptions.UseOpticalBounds);
    } context.TranslateCTM (x - sizeOfText.Width, y + sizeOfText.Height);
}
----------------------------------------

public void DrawText (FormattedText formattedText, Point point) {
    context.SaveState ();
    context.ScaleCTM (1, - 1);
    context.SetFillColor (formattedText.Brush.Color.ToiOS ());
    var sizeOfText = formattedText.DesiredSize;
    var ctFont = new CTFont (formattedText.FontName, formattedText.FontSize);
    var attributedString = new NSAttributedString (formattedText.Text, new CTStringAttributes {ForegroundColor = formattedText.Brush.Color.ToiOS (), Font = ctFont});
    context.TextPosition = new CGPoint (point.X, - (point.Y + sizeOfText.Height - ctFont.DescentMetric));
    using (var textLine = new CTLine (attributedString))
    {
        textLine.Draw (context);
    } context.RestoreState ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44402669_44402865_1_18
44402669_44404683_1_14
Title: Trying to pass SqlCommand in SqlDataAdapter as parameters 
----------------------------------------

public DataTable SelectData (string query) {
    DataTable dt = new DataTable ();
    using (SqlConnection con = new SqlConnection ("Your Connection String here"))
    {
        con.Open ();
        using (SqlCommand cmd = con.CreateCommand ())
        {
            cmd.CommandText = query;
            cmd.CommandType = CommandType.Text;
            using (SqlDataAdapter adp = new SqlDataAdapter (cmd))
            {
                adp.Fill (dt);
                return dt;
            }}}}
----------------------------------------

public DataTable SelectData (string query) {
    using (var connection = new SqlConnection ("myConnectionString"))
    using (var command = new SqlCommand (query, connection))
    using (var adapter = new SqlDataAdapter (command))
    {
        var dt = new DataTable ();
        connection.Open ();
        adapter.Fill (dt);
        return dt;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44402898_44415788_15_36
44402898_44540868_114_129
Title: MF SinkWriter Write Sample Failed 
----------------------------------------

private void Dispose (bool disposing) {
    if (! disposedValue) {
        if (disposing) {
        }
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture.Dispose ();
            }
            m_freeStack = null;
        }
        disposedValue = true;
    }
}
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! disposedValue) {
        if (disposing) {
        }
        if (m_pDebugTexture != null) {
            m_pDebugTexture.Dispose ();
        }
        disposedValue = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44405979_44406135_4_21
44405979_44406267_1_23
Title: Method to return username and Id 
----------------------------------------

public int CheckUserLogin (UserL User) {
    using (SqlConnection con = new SqlConnection (conexion))
    {
        SqlCommand comObj = new SqlCommand ("spLogin", con);
        comObj.CommandType = CommandType.StoredProcedure;
        comObj.Parameters.Add (new SqlParameter ("@username", User.UserName));
        comObj.Parameters.Add (new SqlParameter ("@password", User.Password));
        con.Open ();
        var dr = comObj.ExecuteScalar ();
        while (dr.read ()) {
            int userid = convert.toint16 (dr [0]);
            string Password = dr [1].tostring ();
        }
    }}
----------------------------------------

public Dictionary < int, string > CheckUserLogin (UserL User) {
    var dict = new Dictionary < int, string > ();
    using (SqlConnection con = new SqlConnection (conexion))
    {
        SqlCommand comObj = new SqlCommand ("spLogin", con);
        comObj.CommandType = CommandType.StoredProcedure;
        comObj.Parameters.Add (new SqlParameter ("@username", User.UserName));
        comObj.Parameters.Add (new SqlParameter ("@password", User.Password));
        con.Open ();
        using (SqlDataReader reader = command.ExecuteReader ())
        {
            while (reader.Read ()) {
                dict.Add ((int) reader ["Id"], reader ["Username"] == DBNull.Value ? "" : (string) reader ["Username"]);
            }
        }} return dict;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4441027_4441122_1_17
4441027_4441134_1_17
Title: Linq to many objects using MVC 
----------------------------------------

public IEnumerable < SupplierCategories > GetAllOrdered () {
    IEnumerable < SupplierCategories > areaList;
    var results = from cat in dbContext.categories
        join sub in dbContext.category_sub on cat.id equals sub.categoryid
        orderby cat.id ascending, sub.name ascending
        select new SupplierCategories {_category = new category {cat.id, cat.name}, _category_sub = new category_sub {sub.id, sub.categoryid, sub.name}};
    areaList = results.ToList ();
    return areaList;
}
----------------------------------------

public IEnumerable < SupplierCategories > GetAllOrdered () {
    IEnumerable < SupplierCategories > areaList;
    var results = from cat in dbContext.categories
        join sub in dbContext.category_sub on cat.id equals sub.categoryid
        orderby cat.id ascending, sub.name ascending
        select new SupplierCategories () {_category = cat, _category_sub = sub};
    areaList = results.ToList ();
    return areaList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44472019_44472090_1_18
44472019_44472652_1_32
Title: "C#: Add ""Select"" item to Dynamic Fill ComboBox method" 
----------------------------------------

public static void ComboBoxFill (ComboBox cbo, string Query, string cboDisplayMember, string cboValueMember) {
    con.Open ();
    SqlCommand cmd = new SqlCommand (Query, con);
    SqlDataReader dr = cmd.ExecuteReader ();
    DataTable dt = new DataTable ();
    dt.Load (dr);
    cbo.DataSource = dt;
    DataRow newRow = dt.NewRow ();
    newRow [0] = "Select";
    dt.Rows.InsertAt (newRow, 0);
    cbo.DisplayMember = cboDisplayMember;
    cbo.ValueMember = cboValueMember;
    cbo.SelectedIndex = 0;
    con.Close ();
}
----------------------------------------

public static void ComboBoxFill (ComboBox cbo, string Query, string cboDisplayMember, string cboValueMember) {
    con.Open ();
    SqlCommand cmd = new SqlCommand (Query, con);
    SqlDataReader dr = cmd.ExecuteReader ();
    DataTable dt = new DataTable ();
    dt.Load (dr);
    DataRow drow = dt.NewRow ();
    for (int i = 0; i < dt.Columns.Count; i ++) {
        if (dt.Columns [i].ColumnName == cboDisplayMember) {
            drow [i] = "Select";
        } else if (dt.Columns [i].ColumnName == cboValueMember) {
            drow [i] = 0;
        } else {
            drow [i] = null;
        }
    }
    dt.Rows.InsertAt (drow, 0);
    cbo.DataSource = dt;
    cbo.DisplayMember = cboDisplayMember;
    cbo.ValueMember = cboValueMember;
    cbo.SelectedIndex = 0;
    con.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44480319_44480374_1_16
44480319_44480528_1_15
Title: Can I iterate through a dictionary using all items in a comboBox? 
----------------------------------------

private void finalizeButton_Click (object sender, EventArgs e) {
    foreach (var cmbObj in cartComboBox.Items) {
        if (prices.Keys.Contains (cmbObj.ToString ())) {
            BookTitle tempOut;
            ListViewItem list = cartListView.Items.Add (cmbObj.ToString ());
            if (prices.TryGetValue (cmbObj.ToString (), out tempOut))
                list.SubItems.Add (tempOut.Prices [0].ToString ());

        }
    }
}
----------------------------------------

private void finalizeButton_Click (object sender, EventArgs e) {
    foreach (var comboItem in cartComboBox.Items) {
        if (prices.Keys.Contains (comboItem.ToString ())) {
            BookTitle bt = prices [comboItem.ToString ()];
            ListViewItem list = cartListView.Items.Add (comboItem.ToString ());
            foreach (var p in bt.Prices) {
                list.SubItems.Add (p);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44481813_44482140_1_19
44481813_44482184_1_13
Title: C# access to TreeNode variable file.CreationTime outside treeView 
----------------------------------------

private static TreeNode CreateDirectoryNode (DirectoryInfo directoryInfo) {
    var directoryNode = new TreeNode (directoryInfo.Name + " (" + DirectorySize (directoryInfo) + " bytes)" + " (" + directoryInfo.GetFileSystemInfos ().Length + " files)");
    foreach (var directory in directoryInfo.GetDirectories ())
        directoryNode.Nodes.Add (CreateDirectoryNode (directory));

    foreach (var file in directoryInfo.GetFiles ()) {
        TreeNode node = new TreeNode (file.Name + " (" + file.Length + " bytes)" + file.CreationTime);
        directoryNode.Nodes.Add (node);
        node.Tag = file;
    }
    directoryNode.Tag = directoryInfo;
    return directoryNode;
}
----------------------------------------

private static TreeNode CreateDirectoryNode (DirectoryInfo directoryInfo) {
    var directoryNode = new TreeNode (directoryInfo.Name);
    foreach (var directory in directoryInfo.GetDirectories ())
        directoryNode.Nodes.Add (CreateDirectoryNode (directory));

    foreach (var file in directoryInfo.GetFiles ())
        directoryNode.Nodes.Add (new TreeNode (file.Name + " (" + file.Length + " bytes)" + file.CreationTime));

    directoryNode.Tag = directoryInfo;
    return directoryNode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44508721_44508819_6_18
44508721_44508836_1_16
Title: C# How to manually clear TCP socket buffer? 
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    try {
        int received = SimNetSocket.EndReceive (async);
        var tmpArr = new byte [received];
        Buffer.BlockCopy (ReadBuffer, 0, tmpArr, 0, received);
        msg = ByteArrayToString (tmpArr);
        Debug.Log ("RAW RECEIVE: " + msg);
        MessageBuffer += msg;
        BeginReceive ();
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44508721_44508819_6_18
44508721_44508882_1_28
Title: C# How to manually clear TCP socket buffer? 
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    try {
        int byteCount = SimNetSocket.EndReceive (async);
        string msg = Encoding.ASCII.GetString (ReadBuffer, 0, byteCount);
        Debug.Log ("RAW RECEIVE: " + msg);
        MessageBuffer += msg;
        BeginReceive ();
    }
    catch (IOException e) {
        Debug.LogError (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
445967_14709971_12_29
445967_5708053_15_26
Title: Change CSS classes from code 
----------------------------------------

public static string RemoveCssClass (string classContainer, string className) {
    if (string.IsNullOrEmpty (classContainer))
        return className ?? string.Empty;

    if (string.IsNullOrEmpty (className))
        return classContainer;

    var classNames = classContainer.Split (new [] {' '}, StringSplitOptions.RemoveEmptyEntries);
    int index = Array.FindIndex (classNames, delegate (string s) {
        return s.Equals (className);
    });
    if (index >= 0) {
        return string.Join (" ", classNames, 0, index) + (index + 1 < classNames.Length ? " " + string.Join (" ", classNames, index + 1, classNames.Length - index - 1) : string.Empty);
    }
    return classContainer;
}
----------------------------------------

public static void RemoveCssClass (WebControl control, string cssClass) {
    string [] cssClasses = control.CssClass.Split (new char [] {' '}, StringSplitOptions.RemoveEmptyEntries);
    List < string > classes = new List < string > (cssClasses);
    bool removed = true;
    while (removed) {
        removed = classes.Remove (cssClass);
    }
    control.CssClass = StringExtensions.ToDelimitedString (classes, " ");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
445967_450313_24_36
445967_5708053_29_40
Title: Change CSS classes from code 
----------------------------------------

public static string ToDelimitedString (this IEnumerable < string > list, string delimiter) {
    StringBuilder sb = new StringBuilder ();
    foreach (string item in list) {
        if (sb.Length > 0)
            sb.Append (delimiter);

        sb.Append (item);
    }
    return sb.ToString ();
}
----------------------------------------

public static string ToDelimitedString (List < string > list, string delimiter) {
    StringBuilder sb = new StringBuilder ();
    foreach (string item in list) {
        if (sb.Length > 0)
            sb.Append (delimiter);

        sb.Append (item);
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44613989_44614109_1_21
44613989_44614331_1_14
Title: How to turn this into an algorithm? my code detects split cell lines and joins them together but is limited to three cases 
----------------------------------------

public void JoinSplitCellLines () {
    for (var i = 0; i < list.Count; i ++) {
        if (list [i].StartsWith ("\"", StringComparison.CurrentCultureIgnoreCase)) {
            if (! list [i].EndsWith ("\"", StringComparison.CurrentCultureIgnoreCase)) {
                for (var j = i + 1; j < list.Count; j ++) {
                    if (string.IsNullOrWhiteSpace (list [j])) {
                        list [i] = list [i] + list [j + 1];
                        list.RemoveRange (i, j - i);
                        break;
                    }
                }
            }
        }
    }
}
----------------------------------------

public void JoinSplitCellLines () {
    for (var i = 0; i < list.Count; i ++) {
        if (list [i].StartsWith ("\"", StringComparison.CurrentCultureIgnoreCase) && ! list [i].EndsWith ("\"", StringComparison.CurrentCultureIgnoreCase)) {
            while (! list [i + 1].EndsWith ("\"", StringComparison.CurrentCultureIgnoreCase)) {
                list.RemoveAt (i + 1);
            }
            list [i] += list [i + 1];
            list.RemoveAt (i + 1);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4464149_4464204_131_152
4464149_4464204_88_106
Title: Should MVVM events be routed? 
----------------------------------------

public bool Equals (FullName other) {
    if (other == null) {
        return false;
    }
    if (! String.Equals (this.FirstName, other.FirstName, StringComparison.Ordinal)) {
        return false;
    } else if (! String.Equals (this.LastName, other.LastName, StringComparison.Ordinal)) {
        return false;
    } else if (! String.Equals (this.MiddleName, other.MiddleName, StringComparison.Ordinal)) {
        return false;
    }
    return true;
}
----------------------------------------

public static bool Equals (FullName first, FullName second) {
    if (first == null && second != null) {
        return false;
    } else if (first != null && second == null) {
        return false;
    } else if (first == null && second == null) {
        return true;
    } else {
        return first.Equals (second);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44645023_44645125_1_20
44645023_44645213_1_18
Title: Return user input into an undefined array? 
----------------------------------------

public static decimal [] PromptForDecimals (string [] array1) {
    decimal [] inputArray = new decimal [array1.Length];
    for (int i = 0; i < array1.Length; i ++) {
        Console.WriteLine ("");
        string inputString = Console.ReadLine ();
        decimal input;
        while (! decimal.TryParse (inputString, out input)) {
            Console.WriteLine ("Please enter a number value.");
            inputString = Console.ReadLine ();
        }
        inputArray [i] = input;
    }
    return inputArray;
}
----------------------------------------

public static decimal [] PromptForDecimals (string [] array1) {
    return array1.Select (x = > {
        Console.WriteLine (x);
        string inputString = Console.ReadLine ();
        decimal input;
        while (! decimal.TryParse (inputString, out input)) {
            Console.WriteLine ("Please enter a number value.");
            inputString = Console.ReadLine ();
        }
        return input;
    }).ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44645023_44645163_1_19
44645023_44645213_1_18
Title: Return user input into an undefined array? 
----------------------------------------

public static decimal [] PromptForDecimals (string [] array1) {
    decimal [] inputArray = new decimal [array1.Length];
    for (int i = 0; i < array1.Length; i ++) {
        Console.WriteLine ("");
        string inputString = Console.ReadLine ();
        decimal input;
        while (! decimal.TryParse (inputString, out input)) {
            Console.WriteLine ("Please enter a number value.");
            inputString = Console.ReadLine ();
        }
        inputArray [i] = input;
    }
    return inputArray;
}
----------------------------------------

public static decimal [] PromptForDecimals (string [] array1) {
    return array1.Select (x = > {
        Console.WriteLine (x);
        string inputString = Console.ReadLine ();
        decimal input;
        while (! decimal.TryParse (inputString, out input)) {
            Console.WriteLine ("Please enter a number value.");
            inputString = Console.ReadLine ();
        }
        return input;
    }).ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44655001_44655492_1_15
44655001_44655963_1_15
Title: How do I split an array into smaller arrays using a specific character? 
----------------------------------------

public IEnumerable < IEnumerable < T > > Split < T > (IEnumerable < T > input, T splitOn) {
    var l = new List < T > ();
    foreach (var item in input) {
        if (object.Equals (item, splitOn)) {
            yield return l;
            l = new List < T > ();
        } else
            l.Add (item);

    }
    yield return l;
}
----------------------------------------

public static IEnumerable < IEnumerable < T > > SplitArray < T > (this IEnumerable < T > s, T splitItem) {
    var indexes = s.Select ((b, i) = > b.Equals (splitItem) ? i : - 1).Where (i = > i != - 1).Union (new int [] {s.Count ()}).ToArray ();
    int skip = 0;
    foreach (int index in indexes) {
        IEnumerable < T > array = s.Skip (skip).Take (index - skip).ToArray ();
        yield return array;
        skip = index + 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44705106_44705163_1_29
44705106_44705857_1_30
Title: "Select conditional in C # it is not visible" 
----------------------------------------

public IList getRents () {
    IList result = new List ();
    try {
        SqlConnection con = new SqlConnection (sCon);
        String query = "SELECT r.RentID,c.CustomerName,v.VehicleName,r.[Hours], r.[Hours] , v.Rent AS Total FROM Rent as r INNER JOIN Customer AS c ON r.CustomerID = c.CustomerID INNER JOIN Vehicle AS v ON r.VehicleID = v.VehicleID";
        SqlCommand com = new SqlCommand (query, con);
        con.Open ();
        SqlDataReader reader = com.ExecuteReader ();
        while (reader.Read ()) {
            Rent r = new Rent ();
            r.rentID = (int) reader [0];
            r.customerID = (int) reader [1];
            r.vehicleID = (int) reader [2];
            r.hours = (int) reader [3];
            result.Add (r);
        }
        con.Close ();
    }
    catch (Exception ex) {
        ex.ToString ();
    }
    return result;
}
----------------------------------------

public IList getRents () {
    using (var con = new SqlConnection (sCon))
    {
        var query = "SELECT r.RentID,c.CustomerName,v.VehicleName,r.[Hours], r.[Hours] * v.Rent AS Total FROM Rent as r INNER JOIN Customer AS c ON r.CustomerID = c.CustomerID INNER JOIN Vehicle AS v ON r.VehicleID = v.VehicleID";
        using (var com = new SqlCommand (query, con))
        {
            con.Open ();
            using (var reader = com.ExecuteReader ())
            {
                IList result = new List < Rent > ();
                while (reader.Read ()) {
                    Rent r = new Rent ();
                    r.rentID = (int) reader [0];
                    r.customerID = (int) reader [1];
                    r.vehicleID = (int) reader [2];
                    r.hours = (int) reader [3];
                    result.Add (r);
                }
                return result;
            }}}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752816_1_12
44752527_44752825_27_45
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

private BCAmessage DeserializeStanData (string stanresponse) {
    string xmlStanResponseText = Convert.ToString (Variables.xmlresponse);
    XmlSerializer serializerStan = new XmlSerializer (typeof (BCAmessage));
    BCAmessage dsResult;
    using (TextReader xmlResponseText = new StringReader (xmlStanResponseText))
    {
        dsResult = serializerStan.Deserialize (xmlResponseText);
    } return dsResult;
}
----------------------------------------

private BCAmessage DeserializeStanData (string stanresponse) {
    BCAmessage dsResult = null;
    string xmlStanResponseText = stanresponse;
    XmlSerializer serializerStan = new XmlSerializer (typeof (BCAmessage));
    using (TextReader xmlResponseText = new StringReader (xmlStanResponseText))
    {
        dsResult = (BCAmessage) serializerStan.Deserialize (xmlResponseText);
    } return dsResult;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_127_156
44752527_44752825_190_217
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("ASICNumber", typeof (int));
    report.Columns.Add ("ABN", typeof (string));
    report.Columns.Add ("ABNStatus", typeof (string));
    report.Columns.Add ("ABNStatusFromDate", typeof (string));
    report.Columns.Add ("EntityTypeInd", typeof (string));
    report.Columns.Add ("Non-IndividualName", typeof (string));
    report.Columns.Add ("BusinessAddressState", typeof (string));
    report.Columns.Add ("BusnessAddressPostcode", typeof (string));
    report.Columns.Add ("GSTStatus", typeof (string));
    report.Columns.Add ("GSTStatusFromDate", typeof (string));
    report.Columns.Add ("TradingName", typeof (string));
    report.Rows.Add (new object [] {ASICNumber, ABN, ABNStatus, ABNStatusFromDate, EntityTypeInd, NonIndividualName, BusinessAddressState, BusinessAddressPostcode, GSTStatus, GSTStatusFromDate, TradingName});
    return report;
}
----------------------------------------

public void GetReport (DataTable report, List < object > row) {
    report.Columns.Add ("unit-number", typeof (int));
    report.Columns.Add ("street-number", typeof (int));
    report.Columns.Add ("property", typeof (string));
    report.Columns.Add ("street-name", typeof (string));
    report.Columns.Add ("Streettype-code", typeof (string));
    report.Columns.Add ("Suburb", typeof (string));
    report.Columns.Add ("state", typeof (string));
    report.Columns.Add ("postcode", typeof (string));
    report.Columns.Add ("first-reported", typeof (string));
    report.Columns.Add ("type", typeof (string));
    row.AddRange (new object [] {Unitnumber, Streetnumber, Property, Streetname, Streettype.Code, Suburb, State, Postcode, Firstreported, Type});
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_127_156
44752527_44752825_240_265
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("ASICNumber", typeof (int));
    report.Columns.Add ("ABN", typeof (string));
    report.Columns.Add ("ABNStatus", typeof (string));
    report.Columns.Add ("ABNStatusFromDate", typeof (string));
    report.Columns.Add ("EntityTypeInd", typeof (string));
    report.Columns.Add ("Non-IndividualName", typeof (string));
    report.Columns.Add ("BusinessAddressState", typeof (string));
    report.Columns.Add ("BusnessAddressPostcode", typeof (string));
    report.Columns.Add ("GSTStatus", typeof (string));
    report.Columns.Add ("GSTStatusFromDate", typeof (string));
    report.Columns.Add ("TradingName", typeof (string));
    report.Rows.Add (new object [] {ASICNumber, ABN, ABNStatus, ABNStatusFromDate, EntityTypeInd, NonIndividualName, BusinessAddressState, BusinessAddressPostcode, GSTStatus, GSTStatusFromDate, TradingName});
    return report;
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("last-search-date", typeof (string));
    report.Columns.Add ("nature-of-business", typeof (string));
    report.Columns.Add ("ErrorMsg", typeof (string));
    report.Columns.Add ("WarmingMsg", typeof (string));
    report.Columns.Add ("bureau-reference", typeof (string));
    report.Columns.Add ("bca-name", typeof (string));
    List < object > row = new List < object > ();
    Address.GetReport (report, row);
    row.AddRange (new object [] {Lastsearchdate, Natureofbusiness, ErrorMsg, WarningMsg, Bureaureference, Bcaname});
    report.Rows.Add (row);
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_127_156
44752527_44752825_290_316
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("ASICNumber", typeof (int));
    report.Columns.Add ("ABN", typeof (string));
    report.Columns.Add ("ABNStatus", typeof (string));
    report.Columns.Add ("ABNStatusFromDate", typeof (string));
    report.Columns.Add ("EntityTypeInd", typeof (string));
    report.Columns.Add ("Non-IndividualName", typeof (string));
    report.Columns.Add ("BusinessAddressState", typeof (string));
    report.Columns.Add ("BusnessAddressPostcode", typeof (string));
    report.Columns.Add ("GSTStatus", typeof (string));
    report.Columns.Add ("GSTStatusFromDate", typeof (string));
    report.Columns.Add ("TradingName", typeof (string));
    report.Rows.Add (new object [] {ASICNumber, ABN, ABNStatus, ABNStatusFromDate, EntityTypeInd, NonIndividualName, BusinessAddressState, BusinessAddressPostcode, GSTStatus, GSTStatusFromDate, TradingName});
    return report;
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("match-name", typeof (string));
    report.Columns.Add ("organisation-number", typeof (long));
    report.Columns.Add ("organistion-type", typeof (string));
    report.Columns.Add ("australian-business-number", typeof (long));
    report.Columns.Add ("organisation-number-header", typeof (string));
    report.Columns.Add ("state", typeof (string));
    report.Columns.Add ("Asicorganisationnumber", typeof (int));
    report.Columns.Add ("ASICNumber", typeof (int));
    report.Columns.Add ("Bcaname", typeof (string));
    report.Rows.Add (new object [] {Matchname, Organisationnumber, Organisationtype, Australianbusinessnumber, State, Asicreport.Asicorganisationnumber, Australianbusinessregisterreport.ASICNumber, Bureaureport.Bcaname});
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_127_156
44752527_44752825_406_422
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("ASICNumber", typeof (int));
    report.Columns.Add ("ABN", typeof (string));
    report.Columns.Add ("ABNStatus", typeof (string));
    report.Columns.Add ("ABNStatusFromDate", typeof (string));
    report.Columns.Add ("EntityTypeInd", typeof (string));
    report.Columns.Add ("Non-IndividualName", typeof (string));
    report.Columns.Add ("BusinessAddressState", typeof (string));
    report.Columns.Add ("BusnessAddressPostcode", typeof (string));
    report.Columns.Add ("GSTStatus", typeof (string));
    report.Columns.Add ("GSTStatusFromDate", typeof (string));
    report.Columns.Add ("TradingName", typeof (string));
    report.Rows.Add (new object [] {ASICNumber, ABN, ABNStatus, ABNStatusFromDate, EntityTypeInd, NonIndividualName, BusinessAddressState, BusinessAddressPostcode, GSTStatus, GSTStatusFromDate, TradingName});
    return report;
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    List < object > row = new List < object > ();
    report.Columns.Add ("Sercicerequestid", typeof (string));
    report.Columns.Add ("type", typeof (string));
    BCAservices.GetReport (report, row);
    row.AddRange (new object [] {Servicerequestid, Type});
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_190_217
44752527_44752825_240_265
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public void GetReport (DataTable report, List < object > row) {
    report.Columns.Add ("unit-number", typeof (int));
    report.Columns.Add ("street-number", typeof (int));
    report.Columns.Add ("property", typeof (string));
    report.Columns.Add ("street-name", typeof (string));
    report.Columns.Add ("Streettype-code", typeof (string));
    report.Columns.Add ("Suburb", typeof (string));
    report.Columns.Add ("state", typeof (string));
    report.Columns.Add ("postcode", typeof (string));
    report.Columns.Add ("first-reported", typeof (string));
    report.Columns.Add ("type", typeof (string));
    row.AddRange (new object [] {Unitnumber, Streetnumber, Property, Streetname, Streettype.Code, Suburb, State, Postcode, Firstreported, Type});
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("last-search-date", typeof (string));
    report.Columns.Add ("nature-of-business", typeof (string));
    report.Columns.Add ("ErrorMsg", typeof (string));
    report.Columns.Add ("WarmingMsg", typeof (string));
    report.Columns.Add ("bureau-reference", typeof (string));
    report.Columns.Add ("bca-name", typeof (string));
    List < object > row = new List < object > ();
    Address.GetReport (report, row);
    row.AddRange (new object [] {Lastsearchdate, Natureofbusiness, ErrorMsg, WarningMsg, Bureaureference, Bcaname});
    report.Rows.Add (row);
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_190_217
44752527_44752825_290_316
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public void GetReport (DataTable report, List < object > row) {
    report.Columns.Add ("unit-number", typeof (int));
    report.Columns.Add ("street-number", typeof (int));
    report.Columns.Add ("property", typeof (string));
    report.Columns.Add ("street-name", typeof (string));
    report.Columns.Add ("Streettype-code", typeof (string));
    report.Columns.Add ("Suburb", typeof (string));
    report.Columns.Add ("state", typeof (string));
    report.Columns.Add ("postcode", typeof (string));
    report.Columns.Add ("first-reported", typeof (string));
    report.Columns.Add ("type", typeof (string));
    row.AddRange (new object [] {Unitnumber, Streetnumber, Property, Streetname, Streettype.Code, Suburb, State, Postcode, Firstreported, Type});
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("match-name", typeof (string));
    report.Columns.Add ("organisation-number", typeof (long));
    report.Columns.Add ("organistion-type", typeof (string));
    report.Columns.Add ("australian-business-number", typeof (long));
    report.Columns.Add ("organisation-number-header", typeof (string));
    report.Columns.Add ("state", typeof (string));
    report.Columns.Add ("Asicorganisationnumber", typeof (int));
    report.Columns.Add ("ASICNumber", typeof (int));
    report.Columns.Add ("Bcaname", typeof (string));
    report.Rows.Add (new object [] {Matchname, Organisationnumber, Organisationtype, Australianbusinessnumber, State, Asicreport.Asicorganisationnumber, Australianbusinessregisterreport.ASICNumber, Bureaureport.Bcaname});
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_190_217
44752527_44752825_406_422
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public void GetReport (DataTable report, List < object > row) {
    report.Columns.Add ("unit-number", typeof (int));
    report.Columns.Add ("street-number", typeof (int));
    report.Columns.Add ("property", typeof (string));
    report.Columns.Add ("street-name", typeof (string));
    report.Columns.Add ("Streettype-code", typeof (string));
    report.Columns.Add ("Suburb", typeof (string));
    report.Columns.Add ("state", typeof (string));
    report.Columns.Add ("postcode", typeof (string));
    report.Columns.Add ("first-reported", typeof (string));
    report.Columns.Add ("type", typeof (string));
    row.AddRange (new object [] {Unitnumber, Streetnumber, Property, Streetname, Streettype.Code, Suburb, State, Postcode, Firstreported, Type});
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    List < object > row = new List < object > ();
    report.Columns.Add ("Sercicerequestid", typeof (string));
    report.Columns.Add ("type", typeof (string));
    BCAservices.GetReport (report, row);
    row.AddRange (new object [] {Servicerequestid, Type});
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_240_265
44752527_44752825_290_316
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("last-search-date", typeof (string));
    report.Columns.Add ("nature-of-business", typeof (string));
    report.Columns.Add ("ErrorMsg", typeof (string));
    report.Columns.Add ("WarmingMsg", typeof (string));
    report.Columns.Add ("bureau-reference", typeof (string));
    report.Columns.Add ("bca-name", typeof (string));
    List < object > row = new List < object > ();
    Address.GetReport (report, row);
    row.AddRange (new object [] {Lastsearchdate, Natureofbusiness, ErrorMsg, WarningMsg, Bureaureference, Bcaname});
    report.Rows.Add (row);
    return report;
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("match-name", typeof (string));
    report.Columns.Add ("organisation-number", typeof (long));
    report.Columns.Add ("organistion-type", typeof (string));
    report.Columns.Add ("australian-business-number", typeof (long));
    report.Columns.Add ("organisation-number-header", typeof (string));
    report.Columns.Add ("state", typeof (string));
    report.Columns.Add ("Asicorganisationnumber", typeof (int));
    report.Columns.Add ("ASICNumber", typeof (int));
    report.Columns.Add ("Bcaname", typeof (string));
    report.Rows.Add (new object [] {Matchname, Organisationnumber, Organisationtype, Australianbusinessnumber, State, Asicreport.Asicorganisationnumber, Australianbusinessregisterreport.ASICNumber, Bureaureport.Bcaname});
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_240_265
44752527_44752825_406_422
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("last-search-date", typeof (string));
    report.Columns.Add ("nature-of-business", typeof (string));
    report.Columns.Add ("ErrorMsg", typeof (string));
    report.Columns.Add ("WarmingMsg", typeof (string));
    report.Columns.Add ("bureau-reference", typeof (string));
    report.Columns.Add ("bca-name", typeof (string));
    List < object > row = new List < object > ();
    Address.GetReport (report, row);
    row.AddRange (new object [] {Lastsearchdate, Natureofbusiness, ErrorMsg, WarningMsg, Bureaureference, Bcaname});
    report.Rows.Add (row);
    return report;
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    List < object > row = new List < object > ();
    report.Columns.Add ("Sercicerequestid", typeof (string));
    report.Columns.Add ("type", typeof (string));
    BCAservices.GetReport (report, row);
    row.AddRange (new object [] {Servicerequestid, Type});
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44752527_44752825_290_316
44752527_44752825_406_422
Title: C# Deserialize XML to SSIS Output Buffer 
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    report.Columns.Add ("match-name", typeof (string));
    report.Columns.Add ("organisation-number", typeof (long));
    report.Columns.Add ("organistion-type", typeof (string));
    report.Columns.Add ("australian-business-number", typeof (long));
    report.Columns.Add ("organisation-number-header", typeof (string));
    report.Columns.Add ("state", typeof (string));
    report.Columns.Add ("Asicorganisationnumber", typeof (int));
    report.Columns.Add ("ASICNumber", typeof (int));
    report.Columns.Add ("Bcaname", typeof (string));
    report.Rows.Add (new object [] {Matchname, Organisationnumber, Organisationtype, Australianbusinessnumber, State, Asicreport.Asicorganisationnumber, Australianbusinessregisterreport.ASICNumber, Bureaureport.Bcaname});
    return report;
}
----------------------------------------

public DataTable GetReport () {
    DataTable report = new DataTable ();
    List < object > row = new List < object > ();
    report.Columns.Add ("Sercicerequestid", typeof (string));
    report.Columns.Add ("type", typeof (string));
    BCAservices.GetReport (report, row);
    row.AddRange (new object [] {Servicerequestid, Type});
    return report;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44756839_44757080_1_19
44756839_44757275_11_28
Title: "list integersfor each index find the product of every integer except the that index" 
----------------------------------------

static void Main (string [] args) {
    int outcome = 1;
    int removed;
    List < int > list = new List < int > (new int [] {1, 2, 6, 4, 6, 4, 9, 8, 3, 1});
    for (int j = 0; j < 9; j ++) {
        removed = list [j];
        list.RemoveAt (j);
        for (int i = 0; i < list.Count; i ++) {
            outcome *= list [i];
        }
        list.Add (removed);
        Console.WriteLine (outcome);
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    double outcome = 1;
    List < double > list = new List < double > (new double [] {1, 2, 6, 4, 6, 4, 9, 8, 3, 1});
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list.Count; j ++) {
            if (i == j)
                continue;

            outcome *= list [j];
        }
    }
    Console.WriteLine (outcome);
    Console.WriteLine ("Press any key to continue . . .");
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44766837_44767132_49_111
44766837_44767287_11_81
Title: c# image recognition - RUN ON ENTIRE FOLDER 
----------------------------------------

public static void Analyis () {
    var writetext = new StreamWriter (@"C:\stackoverflowtests\4476837\working.txt", true);
    var writetext2 = new StreamWriter (@"C:\stackoverflowtests\4476837\notworking.txt", true);
    try {
        string [] files = Directory.GetFiles (@"C:\stackoverflowtests\4476837\MTO_Image");
        for (var i = 0; i < (files.Length - 1); i ++) {
            string filename1 = files [i];
            string filename2 = files [i + 1];
            int equalElements = CompareImgSimilarityvalue (filename1, filename2);
            if (equalElements < 253.44) {
                Console.WriteLine ("NOT Same Images");
                Console.WriteLine ("These images below are DIFFERENT - conclusion CAMERA WORKING");
                Console.WriteLine (filename1);
                Console.WriteLine (filename2);
                writetext.Write (filename1);
                writetext.Write (",");
                writetext.Write (filename2);
                writetext.Write (",");
                Console.WriteLine ("The image file names of the non working cameras above have been appened to list of nonworking cameras.");
            } else {
                Console.WriteLine ("These images below are the same- conclusion CAMERA NOT WORKING ");
                Console.WriteLine (filename1);
                Console.WriteLine (filename2);
                writetext2.Write (filename1);
                writetext2.Write (",");
                writetext2.Write (filename2);
                writetext2.Write (",");
                Console.WriteLine ("The image file names of the non working cameras above have been appened to list of nonworking cameras.");
            }
        }
        Console.ReadLine ();
    }
    catch (Exception e) {
    }
    finally {
        writetext.Dispose ();
        writetext2.Dispose ();
    }
}
----------------------------------------

public static void Analyis () {
    string [] files = Directory.GetFiles (@"C:\Users\ChawlaRa\Desktop\FilezilleIMGS\MTO_Image\", "*.jpg");
    Array.Sort (files);
    int equalElements = 0;
    StringBuilder workingText = new StringBuilder ();
    StringBuilder notWorkingText = new StringBuilder ();
    for (var i = 0; i < (files.Length - 1); i ++) {
        equalElements = CompareImgSimilarityvalue (files [i], files [i + 1]);
        if (equalElements < 253.44) {
            Console.WriteLine ("NOT Same Images");
            Console.WriteLine ("These images below are DIFFERENT - conclusion CAMERA WORKING");
            Console.WriteLine (files [i] + ".jpg");
            Console.WriteLine (files [i + 1] + ".jpg");
            workingText.AppendLine (files [i] + ".jpg");
            workingText.AppendLine (",");
            workingText.AppendLine (files [i + 1] + ".jpg");
            workingText.AppendLine (",");
            Console.WriteLine ("The image file names of the non working cameras above have been appended to list of nonworking cameras.");
        } else {
            Console.WriteLine ("These images below are the same- conclusion CAMERA NOT WORKING ");
            Console.WriteLine (files [i] + ".jpg");
            Console.WriteLine (files [i + 1] + ".jpg");
            notWorkingText.AppendLine (files [i] + ".jpg");
            notWorkingText.AppendLine (",");
            notWorkingText.AppendLine (files [i + 1] + ".jpg");
            notWorkingText.AppendLine (",");
            Console.WriteLine ("The image file names of the non working cameras above have been appended to list of nonworking cameras.");
        }
    }
    using (writetext)
    {
        writetext.Write (workingText.ToString ());
    } using (writetext2)
    {
        writetext2.Write (notWorkingText.ToString ());
    } Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44794126_44795071_18_25
44794126_44795071_9_16
Title: Pattern for creating a dictionary of singleton for caching objects 
----------------------------------------

public static void InjectRepository < T > (object value) {
    var type = typeof (T);
    object item;
    var result = _dictionary.TryGetValue (type, out item);
    if (result)
        return;

    _dictionary.Add (type, value);
}
----------------------------------------

public static T ReadRepository < T > () {
    var type = typeof (T);
    object item;
    var result = _dictionary.TryGetValue (type, out item);
    if (! result)
        return default (T);

    return (T) Convert.ChangeType (item, typeof (T));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44838360_44838698_5_14
44838360_44839918_1_10
Title: Output values inside class object 
----------------------------------------

public override string ToString () {
    System.Text.StringBuilder val = new System.Text.StringBuilder ();
    val.Append (string.Format ("reducing_value = {0},", reducing_value));
    val.Append (string.Format ("financial_year = {0},", financial_year));
    val.Append (string.Format ("lower_limit = {0},", lower_limit));
    val.Append (string.Format ("upper_limit = {0},", upper_limit));
    val.Append (string.Format ("percentage = {0},", percentage));
    return val.ToString ();
}
----------------------------------------

public override string ToString () {
    string result = "";
    foreach (System.Reflection.PropertyInfo p in this.GetType ().GetProperties ()) {
        if (! string.IsNullOrEmpty (result))
            result += Environment.NewLine;

        result += p.Name + ": " + p.GetValue (this);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44876757_44876914_1_18
44876757_44877932_1_16
Title: Linq query construction based on empty parameters 
----------------------------------------

public static List < Table > TestFunction (Filters pParameter) {
    ExampleDataContext dc = new ExampleDataContext (Properties.Settings.Default.ExampleConnectionString);
    var SelectResult = dc.Table;
    if (pParameter.A.count != 0)
        SelectResult = from x in SelectResult
            where pParameter.A.Contains (x.A)
            select x;

    if (pParameter.B.count != 0) {
        SelectResult = from x in SelectResult
            where pParameter.B.Contains (x.B)
            select x;
    }
    return SelectResult.ToList ();
}
----------------------------------------

public static List < Table > TestFunction (Filters pParameter) {
    ExampleDataContext dc = new ExampleDataContext (Properties.Settings.Default.ExampleConnectionString);
    IQueryable < Table > SelectResult = dc.Table;
    if (pParameter.A.count != 0)
        SelectResult = SelectResult.Where (x = > pParameter.A.Contains (x.B));

    if (pParameter.B.count != 0)
        SelectResult = SelectResult.Where (x = > pParameter.A.Contains (x.B));

    return SelectResult.ToList ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44950149_44950326_1_17
44950149_44950406_1_27
Title: C# foreach with string - ignore last character 
----------------------------------------

public int addFromString (string str) {
    string trimmed = str.Trim ();
    if (str.StartsWith ("+") || str.EndsWith ("+"))
        return 0;

    string [] numbers = str.Split ('+').Select (s = > s.Trim ()).ToArray ();
    int result = 0;
    foreach (string number in numbers) {
        int n;
        if (! int.TryParse (number, out n))
            return 0;

        result += n;
    }
    return result;
}
----------------------------------------

public int addFromString (string str) {
    int parsedNumber = 0;
    int result = 0;
    if (string.IsNullOrEmpty (chaine)) {
        return result;
    } else {
        if (! int.TryParse (str [0].ToString (), out parsedNumber) || ! int.TryParse (str [str.Length - 1].ToString (), out parsedNumber)) {
            return result;
        }
    }
    try {
        result = str.Split (new char [] {'+'}).Select (s = > Convert.ToInt32 (s)).Sum ();
    }
    finally {
        return result;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
44953930_44953994_1_13
44953930_44954023_1_12
Title: Program Flow C# 
----------------------------------------

public static string ReturnAgeGroup (int age) {
    if (age >= 65) {
        return "senior citizen";
    }
    if (age < 21) {
        return "minor";
    }
    return "adult";
}
----------------------------------------

public static string ReturnAgeGroup (int age) {
    if (age >= 65) {
        return "senior citizen";
    }
    if (age < 21) {
        return "minor";
    }
    return "adult";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45007789_45008026_9_26
45007789_45008175_1_20
Title: How to change UserControl property from static class? 
----------------------------------------

private void Button_Click (object sender, RoutedEventArgs e) {
    Grid parent = FindParent < Grid > (this);
    if (! Globals.Player) {
        Button.Content = new cross ();
        Globals.Player = true;
        parent.Background = Brushes.Blue;
    } else {
        Button.Content = new circle ();
        Globals.Player = false;
        parent.Background = Brushes.Red;
    }
}
----------------------------------------

private void Button_Click (object sender, RoutedEventArgs e) {
    MainWindow mainWindow = Window.GetWindow (this) as MainWindow;
    if (! Globals.Player) {
        Button.Content = new cross ();
        Globals.Player = true;
        if (mainWindow != null)
            mainWindow.grid.Background = Brushes.Green;

    } else {
        Button.Content = new circle ();
        Globals.Player = false;
        if (mainWindow != null)
            mainWindow.grid.Background = Brushes.Red;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45025373_45025593_11_26
45025373_45026169_15_31
Title: How to access a file more than once inside a loop or recursion function in C# 
----------------------------------------

private static void Print (SpanningTree parent, int level, StreamWriter sw) {
    sw.WriteLine ("----------------------------------------------------------------------------------------");
    sw.WriteLine ("{0} Level : '{1}' ", new string (' ', 4 * level), level);
    sw.WriteLine (" , Row : '{0}', Col : '{1}'", parent.row, parent.col);
    sw.WriteLine ("Length : '{0}'", parent.length);
    sw.WriteLine ("----------------------------------------------------------------------------------------");
    if (parent.children != null) {
        foreach (SpanningTree child in parent.children) {
            Print (child, level + 1, sw);
        }
    }
}
----------------------------------------

public static void Print (int level) {
    using (StreamWriter sw = new StreamWriter (fs))
    {
        sw.WriteLine ("----------------------------------------------------------------------------------------");
        sw.WriteLine ("{0} Level : '{1}' ", new string (' ', 4 * level), level);
        sw.WriteLine ("----------------------------------------------------------------------------------------");
        if (level < 10) {
            Print (level + 1);
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4506258_4506361_24_35
4506258_4506361_38_49
Title: LINQ Transformation Function 
----------------------------------------

public static List < T > TransformWhere < T > (this List < T > list, Func < T, bool > predicate, Func < T, T > converter) {
    for (int i = 0; i < list.Count; i ++) {
        T item = list [i];
        if (predicate (item))
            list [i] = converter (item);

    }
    return list;
}
----------------------------------------

public static List < T > TransformWhere < T > (this List < T > list, Func < T, int, bool > predicate, Func < T, int, T > converter) {
    for (int i = 0; i < list.Count; i ++) {
        T item = list [i];
        if (predicate (item, i))
            list [i] = converter (item, i);

    }
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45064268_45065712_30_44
45064268_45066709_12_25
Title: CQRS Dispatcher Without Service Locator 
----------------------------------------

private TReturnValue ExecuteHandler < TReturnValue > (Type handlerType, object argument, Type argumentType) {
    object handler = GetService (handlerType);
    if (handler == null)
        throw new ConfigurationErrorsException ("Handler not registered for type " + argumentType.Name);

    try {
        MethodInfo handleMethod = handlerType.GetMethod (HandleMethodName, new [] {argumentType});
        return (TReturnValue) handleMethod.Invoke (handler, new [] {argument});
    }
    catch (TargetInvocationException ex) {
        if (ex.InnerException != null)
            throw ex.InnerException;

        throw;
    }
}
----------------------------------------

public TResponse Request < TResponse > (IQuery < TResponse > query) {
    Type queryType = query.GetType ();
    Type operationResultTrueReturnType = typeof (TResponse);
    if (operationResultTrueReturnType == typeof (object)) {
        operationResultTrueReturnType = queryType.GetInterface (typeof (IQuery < >).Name).GenericTypeArguments [0];
    }
    Type handlerType = typeof (IQueryHandler <, >).MakeGenericType (query.GetType (), operationResultTrueReturnType);
    return ExecuteHandler < TResponse > (handlerType, query, queryType);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45064268_45065712_30_44
45064268_45066709_46_63
Title: CQRS Dispatcher Without Service Locator 
----------------------------------------

private TReturnValue ExecuteHandler < TReturnValue > (Type handlerType, object argument, Type argumentType) {
    object handler = GetService (handlerType);
    if (handler == null)
        throw new ConfigurationErrorsException ("Handler not registered for type " + argumentType.Name);

    try {
        MethodInfo handleMethod = handlerType.GetMethod (HandleMethodName, new [] {argumentType});
        return (TReturnValue) handleMethod.Invoke (handler, new [] {argument});
    }
    catch (TargetInvocationException ex) {
        if (ex.InnerException != null)
            throw ex.InnerException;

        throw;
    }
}
----------------------------------------

public OperationResult < TResult > Submit < TResult > (ICommand < TResult > command) {
    Type commandType = command.GetType ();
    var baseTypeAttribute = (CommandBaseTypeAttribute) commandType.GetCustomAttributes (typeof (CommandBaseTypeAttribute), false).FirstOrDefault ();
    if (baseTypeAttribute != null)
        commandType = baseTypeAttribute.BaseType;

    try {
        Type handlerType = typeof (ICommandHandler <, >).MakeGenericType (commandType, typeof (TResult));
        return ExecuteHandler < OperationResult < TResult > > (handlerType, command, commandType);
    }
    catch (InvalidOperationException ex) {
        return new OperationResult < TResult > (OperationResultStatus.Failure, default (TResult), ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45064268_45066709_12_25
45064268_45066709_46_63
Title: CQRS Dispatcher Without Service Locator 
----------------------------------------

public TResponse Request < TResponse > (IQuery < TResponse > query) {
    Type queryType = query.GetType ();
    Type operationResultTrueReturnType = typeof (TResponse);
    if (operationResultTrueReturnType == typeof (object)) {
        operationResultTrueReturnType = queryType.GetInterface (typeof (IQuery < >).Name).GenericTypeArguments [0];
    }
    Type handlerType = typeof (IQueryHandler <, >).MakeGenericType (query.GetType (), operationResultTrueReturnType);
    return ExecuteHandler < TResponse > (handlerType, query, queryType);
}
----------------------------------------

public OperationResult < TResult > Submit < TResult > (ICommand < TResult > command) {
    Type commandType = command.GetType ();
    var baseTypeAttribute = (CommandBaseTypeAttribute) commandType.GetCustomAttributes (typeof (CommandBaseTypeAttribute), false).FirstOrDefault ();
    if (baseTypeAttribute != null)
        commandType = baseTypeAttribute.BaseType;

    try {
        Type handlerType = typeof (ICommandHandler <, >).MakeGenericType (commandType, typeof (TResult));
        return ExecuteHandler < OperationResult < TResult > > (handlerType, command, commandType);
    }
    catch (InvalidOperationException ex) {
        return new OperationResult < TResult > (OperationResultStatus.Failure, default (TResult), ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45064268_45066709_12_25
45064268_45066709_65_83
Title: CQRS Dispatcher Without Service Locator 
----------------------------------------

public TResponse Request < TResponse > (IQuery < TResponse > query) {
    Type queryType = query.GetType ();
    Type operationResultTrueReturnType = typeof (TResponse);
    if (operationResultTrueReturnType == typeof (object)) {
        operationResultTrueReturnType = queryType.GetInterface (typeof (IQuery < >).Name).GenericTypeArguments [0];
    }
    Type handlerType = typeof (IQueryHandler <, >).MakeGenericType (query.GetType (), operationResultTrueReturnType);
    return ExecuteHandler < TResponse > (handlerType, query, queryType);
}
----------------------------------------

private TReturnValue ExecuteHandler < TReturnValue > (Type handlerType, object argument, Type argumentType) {
    object handler = _serviceProvider.GetService (handlerType);
    if (handler == null)
        throw new ArgumentException ("Handler not registered for type " + argumentType.Name);

    try {
        MethodInfo handleMethod = handlerType.GetMethod (HandleMethodName, new [] {argumentType});
        return (TReturnValue) handleMethod.Invoke (handler, new [] {argument});
    }
    catch (TargetInvocationException ex) {
        if (ex.InnerException != null)
            throw ex.InnerException;

        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45064268_45066709_46_63
45064268_45066709_65_83
Title: CQRS Dispatcher Without Service Locator 
----------------------------------------

public OperationResult < TResult > Submit < TResult > (ICommand < TResult > command) {
    Type commandType = command.GetType ();
    var baseTypeAttribute = (CommandBaseTypeAttribute) commandType.GetCustomAttributes (typeof (CommandBaseTypeAttribute), false).FirstOrDefault ();
    if (baseTypeAttribute != null)
        commandType = baseTypeAttribute.BaseType;

    try {
        Type handlerType = typeof (ICommandHandler <, >).MakeGenericType (commandType, typeof (TResult));
        return ExecuteHandler < OperationResult < TResult > > (handlerType, command, commandType);
    }
    catch (InvalidOperationException ex) {
        return new OperationResult < TResult > (OperationResultStatus.Failure, default (TResult), ex.Message);
    }
}
----------------------------------------

private TReturnValue ExecuteHandler < TReturnValue > (Type handlerType, object argument, Type argumentType) {
    object handler = _serviceProvider.GetService (handlerType);
    if (handler == null)
        throw new ArgumentException ("Handler not registered for type " + argumentType.Name);

    try {
        MethodInfo handleMethod = handlerType.GetMethod (HandleMethodName, new [] {argumentType});
        return (TReturnValue) handleMethod.Invoke (handler, new [] {argument});
    }
    catch (TargetInvocationException ex) {
        if (ex.InnerException != null)
            throw ex.InnerException;

        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45097176_45097604_1_16
45097176_45097630_1_16
Title: Ui not updating while connecting to wifi? 
----------------------------------------

private static bool ConnectToWifi (string profileName, WlanClient.WlanInterface wlanIface, Wifi wifi, string profile, Action < bool > resultCallback, Dispatcher dispatcher) {
    bool result;
    if (status == WifiStatus.Disconnected) {
        result = false;
    } else {
        result = true;
    }
    dispatcher.BeginInvoke (() = > resultCallback (result));
    return result;
}
----------------------------------------

private static bool ConnectToWifi (string profileName, WlanClient.WlanInterface wlanIface, Wifi wifi, string profile) {
    try {
        wlanIface.WlanConnectionNotification += Interface_ConnectionStateChanged;
        wlanIface.SetProfile (Wlan.WlanProfileFlags.AllUser, profile, true);
        wlanIface.Connect (Wlan.WlanConnectionMode.Profile, Wlan.Dot11BssType.Infrastructure, profileName);
        return true;
    }
    catch (Exception e) {
        var ex = e;
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45159815_45160698_30_42
45159815_45160698_8_22
Title: C# - How to unit test private methods in producer/consumer scenario? 
----------------------------------------

public void OrderReceived (OrderDto orderDto, Action < Exception > callback) {
    try {
        taskManager.ProcessWorkItem (() = > _strategy.OrderReceived (orderDto, callback));
    }
    catch (Exception ex) {
        Logger.Error (ex);
        callback (ex);
    }
}
----------------------------------------

public void OrderReceived (OrderDto orderDto, Action < Exception > callback) {
    try {
        callback (null);
    }
    catch (Exception ex) {
        Logger.Error (ex);
        callback (ex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45204512_45204513_1_12
45204512_45205696_1_21
Title: Check if adding TimeSpans exceeds TimeSpan.MaxValue 
----------------------------------------

public static TimeSpan AddTimeSpan (this TimeSpan firstTimeSpan, TimeSpan secondTimeSpan) {
    if (firstTimeSpan.TotalMinutes + secondTimeSpan.TotalMinutes > TimeSpan.MaxValue.TotalMinutes) {
        return TimeSpan.MaxValue;
    }
    if (firstTimeSpan.TotalMinutes + secondTimeSpan.TotalMinutes < TimeSpan.MinValue.TotalMinutes) {
        return TimeSpan.MinValue;
    }
    return firstTimeSpan + secondTimeSpan;
}
----------------------------------------

public static TimeSpan AddTimeSpan (this TimeSpan ts1, TimeSpan ts2) {
    bool sign1 = ts1 < TimeSpan.Zero, sign2 = ts2 < TimeSpan.Zero;
    if (sign1 && sign2) {
        if (TimeSpan.MinValue - ts1 > ts2) {
            return TimeSpan.MinValue;
        }
    } else if (! sign1 && ! sign2) {
        if (TimeSpan.MaxValue - ts1 < ts2) {
            return TimeSpan.MaxValue;
        }
    }
    return ts1 + ts2;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45216415_45216564_1_12
45216415_45216730_1_14
Title: how many birthdays of that person has been on the same day of the week 
----------------------------------------

public static int HowManyBirthDaysInSameDayOfWeek (DateTime dateOfBirth) {
    int counter = 0;
    for (DateTime d = dateOfBirth.AddYears (1); d.Date <= DateTime.Today; d = d.AddYears (1)) {
        if (d.DayOfWeek == dateOfBirth.DayOfWeek) {
            counter ++;
        }
    }
    return counter;
}
----------------------------------------

public static int HowManyBirthDaysInSameDayOfWeek (DateTime dateOfBirth) {
    int iteration = 1;
    int counter = 0;
    for (DateTime d = dateOfBirth.AddYears (1); d.Date <= DateTime.Today; d = dateOfBirth.AddYears (++ iteration)) {
        if (d.DayOfWeek == dateOfBirth.DayOfWeek) {
            counter ++;
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4530880_4531131_1_35
4530880_4556662_2_36
Title: "problem with binarysearch(calculate the firstlastmid with the new values)" 
----------------------------------------

public int binarysearch (int searchnum) {
    string [] source = textBox1.Text.Split (',');
    int [] nums = new int [source.Length];
    for (int i = 0; i < source.Length; i ++) {
        nums [i] = Convert.ToInt32 (source [i]);
    }
    int first = 0;
    int last = nums.Length - 1;
    while (1 <= nums.Length) {
        int mid = (int) Math.Floor ((first + last) / 2.0);
        if (first > last) {
            break;
        }
        if (searchnum < nums [mid]) {
            last = mid - 1;
        }
        if (searchnum > nums [mid]) {
            first = mid + 1;
        }
        if (searchnum == nums [mid]) {
            return nums [mid];
        }
    }
    return - 1;
}
----------------------------------------

public int binarysearch (string strsearchnum) {
    string [] source = textBox1.Text.Split (',');
    int [] data = new int [source.Length];
    for (int i = 0; i < source.Length; i ++) {
        data [i] = Convert.ToInt32 (source [i]);
    }
    int low = 0;
    int high = data.length - 1;
    int middle = (low + high + 1) / 2;
    int location = - 1;
    do
        {
            if (searchElement == data [middle])
                location = middle;
            else if (searchElement < data [middle])
                high = middle - 1;
            else
                low = middle + 1;

            middle = (low + high + 1) / 2;
        } while ((low <= high) && (location == - 1));
    return location;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45336551_45336602_1_38
45336551_45336604_1_88
Title: C# Method not all code paths return a value 
----------------------------------------

private static decimal Normalize (decimal value, AngleUnits units) {
    decimal normalizedValue;
    switch (units) {
        case AngleUnits.Degrees :
            if (value >= 0 && value <= 360) {
                normalizedValue = value;
                return normalizedValue;
            } else if (value < 0) {
                value = value + 360;
                normalizedValue = value;
                return normalizedValue;
            } else if (value > 360) {
                value = value - 360;
                normalizedValue = value;
                return normalizedValue;
            }
            break;
        default :
            throw new Exception ("no Angleunits match was found");
    }
    return value;
}
----------------------------------------

private static decimal Normalize (decimal value, AngleUnits units) {
    decimal normalizedValue;
    switch (units) {
        case AngleUnits.Degrees :
            if (value >= 0 && value <= 360) {
                normalizedValue = value;
                return normalizedValue;
            } else if (value < 0) {
                value = value + 360;
                normalizedValue = value;
                return normalizedValue;
            } else if (value > 360) {
                value = value - 360;
                normalizedValue = value;
                return normalizedValue;
            }
            break;
        case AngleUnits.Gradians :
            if (value >= 0 && value <= 400) {
                normalizedValue = value;
                return normalizedValue;
            } else if (value < 0) {
                value = value + 400;
                normalizedValue = value;
                return normalizedValue;
            } else if (value > 400) {
                value = value - 400;
                normalizedValue = value;
                return normalizedValue;
            }
            break;
        case AngleUnits.Radians :
            if (value >= 0 && value <= twoPi) {
                normalizedValue = value;
                return normalizedValue;
            } else if (value < 0) {
                value = value + twoPi;
                normalizedValue = value;
                return normalizedValue;
            } else if (value > twoPi) {
                value = value - twoPi;
                normalizedValue = value;
                return normalizedValue;
            }
            break;
        case AngleUnits.Turns :
            if (value >= 0 && value <= 1) {
                normalizedValue = value;
                return normalizedValue;
            } else if (value < 0) {
                value = value + 1;
                normalizedValue = value;
                return normalizedValue;
            } else if (value > 1) {
                value = value - 1;
                normalizedValue = value;
                return normalizedValue;
            }
            break;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4537983_4538055_7_19
4537983_4538076_13_25
Title: "How can i make a thread ""report back"" to main thread?" 
----------------------------------------

static void Main (string [] args) {
    Thread th = new Thread (new ThreadStart (CheckCPULoad));
    th.Start ();
    while (true) {
        Thread.Sleep (1000);
        Console.WriteLine ("load: {0}%", cpuload);
    }
    th.Abort ();
}
----------------------------------------

private static void Main (string [] args) {
    var timer = new Timer (3000);
    timer.Elapsed += CheckCPULoad;
    timer.Start ();
    while (true) {
        autoEvent.WaitOne ();
        autoEvent.Reset ();
        Console.WriteLine (cpuload);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4537983_4538055_7_19
4537983_4538130_5_16
Title: "How can i make a thread ""report back"" to main thread?" 
----------------------------------------

static void Main (string [] args) {
    Thread th = new Thread (new ThreadStart (CheckCPULoad));
    th.Start ();
    while (true) {
        Thread.Sleep (1000);
        Console.WriteLine ("load: {0}%", cpuload);
    }
    th.Abort ();
}
----------------------------------------

static void Main (string [] args) {
    Thread th = new Thread (new ThreadStart (CheckCPULoad));
    th.Start ();
    while (true) {
        Thread.Sleep (1000);
        Console.WriteLine ("load: {0}%", cpuload);
    }
    th.Abort ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4537983_4538076_13_25
4537983_4538130_5_16
Title: "How can i make a thread ""report back"" to main thread?" 
----------------------------------------

private static void Main (string [] args) {
    var timer = new Timer (3000);
    timer.Elapsed += CheckCPULoad;
    timer.Start ();
    while (true) {
        autoEvent.WaitOne ();
        autoEvent.Reset ();
        Console.WriteLine (cpuload);
    }
}
----------------------------------------

static void Main (string [] args) {
    Thread th = new Thread (new ThreadStart (CheckCPULoad));
    th.Start ();
    while (true) {
        Thread.Sleep (1000);
        Console.WriteLine ("load: {0}%", cpuload);
    }
    th.Abort ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45416064_45416294_1_15
45416064_45417054_1_31
Title: FileUpload - if file name exist concat a number between parentheses at the end of name 
----------------------------------------

public static string GetUniqueName (string fileName) {
    string dir = @"C:\Users\support\Desktop\Zohar\SO\Upload\Target";
    var targetPath = Path.Combine (dir, fileName);
    string fileExtension = Path.GetExtension (targetPath);
    string fileNameWE = Path.GetFileNameWithoutExtension (targetPath);
    int i = 1;
    while (File.Exists (targetPath)) {
        fileName = string.Format ("{0}({1}){2}", fileNameWE, i, fileExtension);
        targetPath = Path.Combine (dir, fileName);
        i ++;
    }
    return targetPath;
}
----------------------------------------

public static string GetUniqueName (string fileName) {
    var dir = Globals.Directories.GetCustomCategoryThumbnailDir ();
    var fileExtension = Path.GetExtension (fileName);
    var fileNameWE = Path.GetFileNameWithoutExtension (fileName);
    var files = Directory.GetFiles (dir, "*" + fileExtension).Select (Path.GetFileName).Where (w = > w.StartsWith (fileNameWE)).ToArray ();
    if (! files.Any ())
        return fileName;

    var pattern = fileNameWE.Select (s = > "[" + s + "]").Aggregate ("", (ac, i) = > ac + i);
    var regex = new Regex (pattern + @"[(](?<counter>\d)[)]");
    var previous = files.Select (file = > regex.Match (file)).Where (match = > match.Success).OrderByDescending (match = > int.Parse (match.Groups ["counter"].Value)).FirstOrDefault ();
    var correctIndex = previous != null ? int.Parse (previous.Groups ["counter"].Value) + 1 : 1;
    return fileNameWE + "(" + correctIndex + ")" + fileExtension;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45441293_45442296_31_55
45441293_45442296_5_23
Title: C# Mutex always stuck on WaitOne 
----------------------------------------

static void Main (string [] args) {
    Mutex req_mutex = null;
    bool waitingForReqMutexCreation = true;
    while (waitingForReqMutexCreation) {
        try {
            req_mutex = Mutex.OpenExisting ("req_mutex");
            waitingForReqMutexCreation = false;
        }
        catch (WaitHandleCannotBeOpenedException) {
            Console.WriteLine ("req_mutex does not exist.");
            Thread.Sleep (1000);
        }
    }
    Console.WriteLine ("req_mutex found");
    req_mutex.WaitOne ();
    Console.WriteLine ("after req_mutex.WaitOne()");
    req_mutex.ReleaseMutex ();
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Mutex req_mutex = new Mutex (true, "req_mutex");
    String t = string.Empty;
    while (! t.Contains ("q")) {
        Console.WriteLine ("input: ");
        t = Console.ReadLine ();
        Console.WriteLine ("waiting for req_mutex");
        req_mutex.WaitOne ();
        Console.WriteLine ("releasing req_mutex");
        req_mutex.ReleaseMutex ();
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45492260_45493284_1_22
45492260_45493520_1_21
Title: Arithmetic operation like Add for a Generic List<T> 
----------------------------------------

static T AddAll < T > (List < T > list) {
    if (list.Count == 0) {
        return default (T);
    }
    var listParam = Expression.Parameter (typeof (List < T >));
    var propInfo = typeof (List < T >).GetProperty ("Item");
    var indexes = list.Select ((x, i) = > Expression.MakeIndex (listParam, propInfo, new [] {Expression.Constant (i)}));
    Expression sum = indexes.First ();
    foreach (var item in indexes.Skip (1)) {
        sum = Expression.Add (sum, item);
    }
    var lambda = Expression.Lambda < Func < List < T >, T > > (sum, listParam).Compile ();
    return lambda (list);
}
----------------------------------------

static T AddAll < T > (List < T > list) {
    if (list.Count == 0)
        return default (T);

    if (list.Count == 1)
        return list [0];

    var indexerProperty = typeof (List < T >).GetProperty ("Item");
    var p = Expression.Parameter (typeof (List < T >));
    var exp = Expression.Add (Expression.MakeIndex (p, indexerProperty, new [] {Expression.Constant (0)}), Expression.MakeIndex (p, indexerProperty, new [] {Expression.Constant (1)}));
    for (var i = 2; i < list.Count; i ++) {
        exp = Expression.Add (exp, Expression.MakeIndex (p, indexerProperty, new [] {Expression.Constant (i)}));
    }
    var lambda = Expression.Lambda < Func < List < T >, T > > (exp, p).Compile ();
    return lambda (list);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45515093_45515154_1_24
45515093_45515414_10_26
Title: How to write/read data to a file in Visual Studio 2017 
----------------------------------------

public static void Main () {
    string path = @"c:\temp\MyTest.txt";
    if (! File.Exists (path)) {
        using (StreamWriter sw = File.CreateText (path))
        {
            sw.WriteLine ("Hello");
            sw.WriteLine ("And");
            sw.WriteLine ("Welcome");
        }}
    using (StreamReader sr = File.OpenText (path))
    {
        string s = "";
        while ((s = sr.ReadLine ()) != null) {
            Console.WriteLine (s);
        }
    }}
----------------------------------------

static void Main (string [] args) {
    var item = new MyClass ();
    item.Property1 = "value1";
    item.Property2 = "value2";
    FileStream s = new FileStream ("myfile.bin", FileMode.Create);
    BinaryFormatter f = new BinaryFormatter ();
    f.Serialize (s, item);
    s.Close ();
    FileStream s2 = new FileStream ("myfile.bin", FileMode.OpenOrCreate, FileAccess.Read);
    MyClass item2 = (MyClass) f.Deserialize (s2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4552008_4630302_1_29
4552008_4655782_285_314
Title: .Net Opposite of GraphicsPath.Widen() 
----------------------------------------

public static GraphicsPath Shrink (this GraphicsPath path, float width) {
    using (var p = new GraphicsPath ())
    {
        p.AddPath (path, false);
        p.CloseAllFigures ();
        p.Widen (new Pen (Color.Black, width * 2));
        var position = 0;
        var result = new GraphicsPath ();
        while (position < p.PointCount) {
            position += CountNextFigure (p.PathData, position);
            var figureCount = CountNextFigure (p.PathData, position);
            var points = new PointF [figureCount];
            var types = new byte [figureCount];
            Array.Copy (p.PathPoints, position, points, 0, figureCount);
            Array.Copy (p.PathTypes, position, types, 0, figureCount);
            position += figureCount;
            result.AddPath (new GraphicsPath (points, types), false);
        }
        path.Reset ();
        path.AddPath (result, false);
        return path;
    }}
----------------------------------------

public static GraphicsPath Shrink (this GraphicsPath originalPath, float width) {
    originalPath.CloseAllFigures ();
    originalPath.Flatten ();
    var parts = originalPath.SplitFigures ();
    var shrunkPaths = new List < GraphicsPath > ();
    foreach (var part in parts) {
        using (var widePath = new GraphicsPath (part.PathPoints, part.PathTypes))
        {
            widePath.Widen (new Pen (Color.Black, width * 2));
            var innerEdge = widePath.SplitFigures () [1];
            var fixedPath = CleanPath (innerEdge, part, width);
            if (fixedPath.PointCount > 0)
                shrunkPaths.Add (fixedPath);

        }}
    originalPath.Reset ();
    foreach (var p in shrunkPaths) {
        originalPath.AddPath (p, false);
    }
    return originalPath;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4552008_4655782_141_152
4552008_4655782_201_234
Title: .Net Opposite of GraphicsPath.Widen() 
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;

    if (a == other.a)
        return null;

    if (isVertical)
        return other.Intersect (xConstForVertical);

    if (other.isVertical)
        return Intersect (other.xConstForVertical);

    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

public PointF [] Intersect (CircleEquation circle) {
    var cx = circle.Center.X;
    var cy = circle.Center.Y;
    var r = circle.Radius;
    if (isVertical) {
        var distance = Math.Abs (cx - xConstForVertical);
        if (distance > r)
            return new PointF [0];

        if (distance == r)
            return new [] {new PointF (xConstForVertical, cy)};

        var dx = cx - xConstForVertical;
        var qe = new QuadraticEquation (1, - 2 * cy, r * r - dx * dx);
        return qe.Solve ();
    }
    var t = b - cy;
    var q = new QuadraticEquation (1 + a * a, 2 * a * t - 2 * cx, cx * cx + t * t - r * r);
    var solutions = q.Solve ();
    for (var i = 0; i < solutions.Length; i ++)
        solutions [i] = Intersect (solutions [i].X).Value;

    return solutions;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4552008_4655782_141_152
4552008_4655782_20_31
Title: .Net Opposite of GraphicsPath.Widen() 
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;

    if (a == other.a)
        return null;

    if (isVertical)
        return other.Intersect (xConstForVertical);

    if (other.isVertical)
        return Intersect (other.xConstForVertical);

    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;

    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4552008_4655782_201_234
4552008_4655782_20_31
Title: .Net Opposite of GraphicsPath.Widen() 
----------------------------------------

public PointF [] Intersect (CircleEquation circle) {
    var cx = circle.Center.X;
    var cy = circle.Center.Y;
    var r = circle.Radius;
    if (isVertical) {
        var distance = Math.Abs (cx - xConstForVertical);
        if (distance > r)
            return new PointF [0];

        if (distance == r)
            return new [] {new PointF (xConstForVertical, cy)};

        var dx = cx - xConstForVertical;
        var qe = new QuadraticEquation (1, - 2 * cy, r * r - dx * dx);
        return qe.Solve ();
    }
    var t = b - cy;
    var q = new QuadraticEquation (1 + a * a, 2 * a * t - 2 * cx, cx * cx + t * t - r * r);
    var solutions = q.Solve ();
    for (var i = 0; i < solutions.Length; i ++)
        solutions [i] = Intersect (solutions [i].X).Value;

    return solutions;
}
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;

    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
455766_26352268_1_16
455766_455784_34_48
Title: How do you correctly update a databound datagridview from a background thread 
----------------------------------------

protected override void OnListChanged (ListChangedEventArgs e) {
    if (ctx == null) {
        BaseListChanged (e);
    } else if (e.ListChangedType == ListChangedType.ItemChanged) {
        ctx.Post (delegate {
            BaseListChanged (e);
        }, null);
    } else {
        ctx.Send (delegate {
            BaseListChanged (e);
        }, null);
    }
}
----------------------------------------

protected override void OnListChanged (ListChangedEventArgs e) {
    if (ctx == null) {
        BaseListChanged (e);
    } else {
        ctx.Send (delegate {
            BaseListChanged (e);
        }, null);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
455766_26352268_1_16
455766_733524_26_37
Title: How do you correctly update a databound datagridview from a background thread 
----------------------------------------

protected override void OnListChanged (ListChangedEventArgs e) {
    if (ctx == null) {
        BaseListChanged (e);
    } else if (e.ListChangedType == ListChangedType.ItemChanged) {
        ctx.Post (delegate {
            BaseListChanged (e);
        }, null);
    } else {
        ctx.Send (delegate {
            BaseListChanged (e);
        }, null);
    }
}
----------------------------------------

protected override void OnListChanged (ListChangedEventArgs e) {
    if (ctx == null) {
        BaseListChanged (e);
    } else {
        ctx.Send (delegate {
            BaseListChanged (e);
        }, null);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
455766_455784_15_29
455766_733524_9_19
Title: How do you correctly update a databound datagridview from a background thread 
----------------------------------------

protected override void OnAddingNew (AddingNewEventArgs e) {
    if (ctx == null) {
        BaseAddingNew (e);
    } else {
        ctx.Send (delegate {
            BaseAddingNew (e);
        }, null);
    }
}
----------------------------------------

protected override void OnAddingNew (AddingNewEventArgs e) {
    if (ctx == null) {
        BaseAddingNew (e);
    } else {
        ctx.Send (delegate {
            BaseAddingNew (e);
        }, null);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
455766_455784_34_48
455766_733524_26_37
Title: How do you correctly update a databound datagridview from a background thread 
----------------------------------------

protected override void OnListChanged (ListChangedEventArgs e) {
    if (ctx == null) {
        BaseListChanged (e);
    } else {
        ctx.Send (delegate {
            BaseListChanged (e);
        }, null);
    }
}
----------------------------------------

protected override void OnListChanged (ListChangedEventArgs e) {
    if (ctx == null) {
        BaseListChanged (e);
    } else {
        ctx.Send (delegate {
            BaseListChanged (e);
        }, null);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45675802_45676049_1_19
45675802_45676113_1_14
Title: How to correctly use BackgroundWorker to update ListView? [c# .NET 3.5] 
----------------------------------------

private void backgroundWorker1_DoWork (object sender, DoWorkEventArgs e) {
    foreach (var data in database) {
        if (orginalListView.InvokeRequired) {
            orginalListView.Invoke (new MethodInvoker (delegate {
                listViewItem = data.value;
                orginalListView.Items.Add (listViewItem);
            }));
        } else {
            listViewItem = data.value;
            orginalListView.Items.Add (listViewItem);
        }
    }
}
----------------------------------------

private void backgroundWorker1_DoWork (object sender, DoWorkEventArgs e) {
    foreach (var data in database) {
        listViewItem = data.value;
        String name = "orginalListView";
        lock (((ListView) this.Controls [name]))
        {
            Invoke (new MethodInvoker (delegate {
                ((ListView) this.Controls [name]).Items.Add (listViewItem);
            }));
        }}
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45715073_45715908_16_38
45715073_45840200_1_39
Title: "Xamarin Android httpwebrequest Cannot access a disposed object" 
----------------------------------------

public static WebResponse PostData (string body, string url) {
    WebResponse webResponse = null;
    try {
        var uri = new Uri (string.Format ("http://google.it" + url, string.Empty));
        var webRequest = (HttpWebRequest) WebRequest.Create (uri);
        webRequest.Headers.Add ("Cookie", "test");
        webRequest.Headers.Add ("_RequestVerificationToken", "test");
        webRequest.Method = "POST";
        webRequest.ContentType = "application/xml";
        byte [] bytes = Encoding.UTF8.GetBytes (body);
        webRequest.ContentLength = bytes.Length;
        Stream requestStream = webRequest.GetRequestStream ();
        requestStream.Write (bytes, 0, bytes.Length);
        webResponse = webRequest.GetResponse ();
    }
    catch (Exception exception) {
        Console.WriteLine (exception);
    }
    return webResponse;
}
----------------------------------------

public string PostData (string body, string url) {
    string responseText = null;
    try {
        var uri = new Uri (string.Format (_host + url, string.Empty));
        var webRequest = WebRequest.Create (uri) as HttpWebRequest;
        webRequest.Headers.Add ("Cookie", GlobalConfig.SessionId);
        webRequest.Headers.Add ("_RequestVerificationToken", GlobalConfig.Token);
        webRequest.Method = "POST";
        webRequest.ContentType = "application/xml";
        using (Stream requestStream = webRequest.GetRequestStream ())
        {
            using (StreamWriter writer = new StreamWriter (requestStream))
            {
                writer.Write (body);
            }} var webResponse = webRequest.GetResponse () as HttpWebResponse;
        using (Stream responseStream = webResponse.GetResponseStream ())
        {
            using (StreamReader reader = new StreamReader (responseStream))
            {
                responseText = reader.ReadToEnd ();
            }}}
    catch (Exception exception) {
        Console.WriteLine (exception);
    }
    return responseText;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45717024_45717679_1_13
45717024_45717955_1_16
Title: Right way to test connection strings 
----------------------------------------

public static Tuple < bool, Exception > TestConnection (this IDbConnection connection) {
    try {
        connection.Open ();
        connection.Close ();
        return new Tuple < bool, Exception > (true, null);
    }
    catch (Exception e) {
        return new Tuple < bool, Exception > (false, e);
    }
}
----------------------------------------

public bool TestConnection (IDbConnection con) {
    using (con)
    {
        try {
            con.Open ();
            con.Close ();
            return true;
        }
        catch {
            return false;
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45729647_45730728_1_22
45729647_45730782_11_35
Title: How to add new and keep previous items in a generic List after each button click event? 
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    float weight;
    int quantity;
    string customer, piece, material;
    customer = btnEditCustomer1.Text;
    piece = btnPiece.Text;
    material = txtMaterial.Text;
    quantity = Convert.ToInt32 (txtQuantity.Text);
    weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        Liste kayit = new Liste ();
        kayit.Customer = customer;
        kayit.Piece = piece;
        kayit.Material = material;
        kayit.Quantity = quantity;
        kayit.Weight = weight;
        list.Add (kayit);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
457453_43572859_36_47
457453_457501_1_11
Title: Remove element of a regular array 
----------------------------------------

public static void RemoveAt < TElement > (ref TElement [] Source, int Index) {
    var Result = new TElement [Source.Length - 1];
    if (Index > 0)
        Array.Copy (Source, 0, Result, 0, Index);

    if (Index < Source.Length - 1)
        Array.Copy (Source, Index + 1, Result, Index, Source.Length - Index - 1);

    Source = Result;
}
----------------------------------------

public static T [] RemoveAt < T > (this T [] source, int index) {
    T [] dest = new T [source.Length - 1];
    if (index > 0)
        Array.Copy (source, 0, dest, 0, index);

    if (index < source.Length - 1)
        Array.Copy (source, index + 1, dest, index, source.Length - index - 1);

    return dest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45753609_45753680_1_11
45753609_45760633_1_20
Title: c# datagridview checkboxes matrix 
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    if (dataGridView1.Rows [e.RowIndex].Cells [e.CellIndex].Value == false) {
        for (int i = 0; i <= 2; i ++) {
            if (i != e.cellIndex)
                dataGridView1.Rows [e.RowIndex].Cells [i].Value = false;

        }
    }
}
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    for (int i = 0; i <= 2; i ++) {
        dataGridView1.Rows [e.RowIndex].Cells [i].Value = false;
    }
    dataGridView1.Rows [e.RowIndex].Cells [e.ColumnIndex].Value = true;
    if (Convert.ToBoolean (dataGridView1.Rows [e.RowIndex].Cells [e.ColumnIndex].Value) == true) {
        dataGridView1.Rows [e.RowIndex].Cells [e.ColumnIndex].Value = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4577882_4577922_1_25
4577882_4577955_1_13
Title: How to merge 2 sorted listed into one shuffled list while keeping internal order in c# 
----------------------------------------

static IEnumerable < T > MergeShuffle < T > (IEnumerable < T > lista, IEnumerable < T > listb) {
    int total = lista.Count () + listb.Count ();
    var random = new Random ();
    var indexes = Enumerable.Range (0, total - 1).OrderBy (_ = > random.NextDouble ()).Take (lista.Count ()).OrderBy (x = > x).ToList ();
    var first = lista.GetEnumerator ();
    var second = listb.GetEnumerator ();
    for (int i = 0; i < total; i ++)
        if (indexes.Contains (i)) {
            first.MoveNext ();
            yield return first.Current;
        } else {
            second.MoveNext ();
            yield return second.Current;
        }

}
----------------------------------------

static IEnumerable < T > Shuffle < T > (IEnumerable < T > listB, IEnumerable < T > listA) {
    var rng = new Random ();
    var lists = new [] {new Queue < T > (listA), new Queue < T > (listB)};
    while (lists.Any (l = > l.Any ())) {
        int i = rng.Next (2);
        var selected = lists [i];
        if (! lists [i].Any ())
            selected = lists [1 - i];

        yield return selected.Dequeue ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4580397_20558693_5_71
4580397_6237866_4_60
Title: JSON formatter in C#? 
----------------------------------------

public static string FormatJson (string str) {
    str = (str ?? "").Replace ("{}", @"\{\}").Replace ("[]", @"\[\]");
    var inserts = new List < int [] > ();
    bool quoted = false, escape = false;
    int depth = 0;
    for (int i = 0, N = str.Length; i < N; i ++) {
        var chr = str [i];
        if (! escape && ! quoted)
            switch (chr) {
                case '{' : case '[' :
                    inserts.Add (new [] {i, + 1, 0, INDENT_SIZE * ++ depth});
                    break;
                case ',' :
                    inserts.Add (new [] {i, + 1, 0, INDENT_SIZE * depth});
                    break;
                case '}' : case ']' :
                    inserts.Add (new [] {i, - 1, INDENT_SIZE * -- depth, 0});
                    break;
                case ':' :
                    inserts.Add (new [] {i, 0, 1, 1});
                    break;
            }

        quoted = (chr == '"') ? ! quoted : quoted;
        escape = (chr == '\\') ? ! escape : false;
    }
    if (inserts.Count > 0) {
        var sb = new System.Text.StringBuilder (str.Length * 2);
        int lastIndex = 0;
        foreach (var insert in inserts) {
            int index = insert [0], before = insert [2], after = insert [3];
            bool nlBefore = (insert [1] == - 1), nlAfter = (insert [1] == + 1);
            sb.Append (str.Substring (lastIndex, index - lastIndex));
            if (nlBefore)
                sb.AppendLine ();

            if (before > 0)
                sb.Append (new String (' ', before));

            sb.Append (str [index]);
            if (nlAfter)
                sb.AppendLine ();

            if (after > 0)
                sb.Append (new String (' ', after));

            lastIndex = index + 1;
        }
        str = sb.ToString ();
    }
    return str.Replace (@"\{\}", "{}").Replace (@"\[\]", "[]");
}
----------------------------------------

public static string FormatJson (string str) {
    var indent = 0;
    var quoted = false;
    var sb = new StringBuilder ();
    for (var i = 0; i < str.Length; i ++) {
        var ch = str [i];
        switch (ch) {
            case '{' : case '[' :
                sb.Append (ch);
                if (! quoted) {
                    sb.AppendLine ();
                    Enumerable.Range (0, ++ indent).ForEach (item = > sb.Append (INDENT_STRING));
                }
                break;
            case '}' : case ']' :
                if (! quoted) {
                    sb.AppendLine ();
                    Enumerable.Range (0, -- indent).ForEach (item = > sb.Append (INDENT_STRING));
                }
                sb.Append (ch);
                break;
            case '"' :
                sb.Append (ch);
                bool escaped = false;
                var index = i;
                while (index > 0 && str [-- index] == '\\')
                    escaped = ! escaped;

                if (! escaped)
                    quoted = ! quoted;

                break;
            case ',' :
                sb.Append (ch);
                if (! quoted) {
                    sb.AppendLine ();
                    Enumerable.Range (0, indent).ForEach (item = > sb.Append (INDENT_STRING));
                }
                break;
            case ':' :
                sb.Append (ch);
                if (! quoted)
                    sb.Append (" ");

                break;
            default :
                sb.Append (ch);
                break;
        }
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45825075_45825109_10_21
45825075_45825120_3_23
Title: How to control few methods in task scheduler in .net 
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);

}
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45836866_45837015_1_10
45836866_45837065_1_11
Title: Cleanly writing numerous conditions against an optional input 
----------------------------------------

private bool IsInputDateMatch (InputDate inputDate, DateTime date) {
    if (inputDate.Day != 0 && date.Day != inputDate.Day)
        return false;

    if (inputDate.Month != 0 && date.Month != inputDate.Month)
        return false;

    return inputDate.Year == 0 || date.Year == inputDate.Year;
}
----------------------------------------

private bool IsInputDateMatch (InputDate inputDate, DateTime date) {
    if (inputDate.Day != 0 && date.Day != inputDate.Day)
        return false;

    if (inputDate.Month != 0 && date.Month != inputDate.Month)
        return false;

    if (inputDate.Year != 0 && date.Year != inputDate.Year)
        return false;

    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45882930_45883849_20_35
45882930_45894392_11_31
Title: Error while decrypting file via AES in c# 
----------------------------------------

static void encryptAES (SymmetricAlgorithm algo, string filePath, byte [] key, byte [] IV) {
    using (FileStream fin = new FileStream (filePath, FileMode.Open, FileAccess.Read))
    {
        using (FileStream fout = new FileStream (filePath + ".encrypted", FileMode.OpenOrCreate, FileAccess.Write))
        {
            using (ICryptoTransform crypt = algo.CreateEncryptor (key, IV))
            {
                using (CryptoStream crStream = new CryptoStream (fout, crypt, CryptoStreamMode.Write))
                {
                    fin.CopyTo (crStream);
                }}}}}
----------------------------------------

static void encryptAES (byte [] filesBytes, string filePath, AesCryptoServiceProvider aes) {
    using (FileStream fStream = new FileStream (filePath, FileMode.OpenOrCreate, FileAccess.ReadWrite))
    {
        using (ICryptoTransform crypt = aes.CreateEncryptor (aes.Key, aes.IV))
        {
            using (CryptoStream csStream = new CryptoStream (fStream, crypt, CryptoStreamMode.Write))
            {
                csStream.Write (filesBytes, 0, filesBytes.Length);
            } try {
                File.Delete (filePath + ".encrypted");
                File.Move (filePath, filePath + ".encrypted");
            }
            catch (UnauthorizedAccessException) {
            }
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45882930_45883849_36_52
45882930_45894392_32_59
Title: Error while decrypting file via AES in c# 
----------------------------------------

static void decryptAES (SymmetricAlgorithm algo, string filePath, byte [] key, byte [] IV) {
    using (FileStream fStream = new FileStream (filePath, FileMode.Open, FileAccess.Read))
    {
        using (ICryptoTransform crypt = algo.CreateDecryptor (key, IV))
        {
            using (CryptoStream crStream = new CryptoStream (fStream, crypt, CryptoStreamMode.Read))
            {
                using (StreamReader reader = new StreamReader (crStream))
                {
                    string data = reader.ReadToEnd ();
                    File.WriteAllText (filePath.Replace (".encrypted", ".restored"), data);
                }}}}}
----------------------------------------

static void decryptAES (string filePath, byte [] key, byte [] IV) {
    using (AesCryptoServiceProvider AES = new AesCryptoServiceProvider ())
    {
        AES.Padding = PaddingMode.PKCS7;
        AES.Key = key;
        AES.BlockSize = 128;
        AES.KeySize = 128;
        AES.IV = IV;
        using (FileStream fStream = new FileStream (filePath, FileMode.Open, FileAccess.ReadWrite))
        {
            using (ICryptoTransform crypt = AES.CreateDecryptor (key, IV))
            {
                using (CryptoStream crStream = new CryptoStream (fStream, crypt, CryptoStreamMode.Read))
                {
                    using (StreamReader reader = new StreamReader (crStream))
                    {
                        string data = reader.ReadToEnd ();
                        File.WriteAllText (filePath.Replace (".encrypted", ""), data);
                    }}}}}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45981280_45981356_1_13
45981280_46034635_1_26
Title: Overwriting an array entry when it has a duplicate key 
----------------------------------------

public void Put (string key, object value) {
    for (var i = 0; i < getArray.Length; ++ i) {
        if (getArray [i] == null || getArray [i].key == key) {
            getArray [i] = new Paar (key, value);
            break;
        }
        if (i == getArray.Length - 1)
            throw new Exception ("All slots full");

    }
}
----------------------------------------

public void Put (string key, object value) {
    for (int i = 0; i < getArray.Length; i ++) {
        if (getArray [i] != null && getArray [i].key == key) {
            getArray [i] = new Paar (key, value);
            return;
        }
    }
    for (int i = 0; i < getArray.Length; i ++) {
        if (getArray [i] == null) {
            getArray [i] = new Paar (key, value);
            break;
        } else {
            if (i >= getArray.Length) {
                throw new Exception ("All slots full");
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46036330_46036481_1_11
46036330_46036546_1_10
Title: How can I pass a string from View to Controller 
----------------------------------------

public ActionResult Message (String someVariable) {
    chartstype chartname = new chartstype ();
    List < chartstype > listchart = new List < chartstype > ();
    chartname.charttype = "Column";
    listchart.Add (chartname);
    TempData ["name"] = listchart;
    TempData.Keep ();
    return View ();
}
----------------------------------------

public ActionResult Message (String chartName) {
    chartstype chartname = new chartstype ();
    List < chartstype > listchart = new List < chartstype > ();
    chartname.charttype = chartName;
    listchart.Add (chartname);
    TempData ["name"] = listchart;
    TempData.Keep ();
    return View ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4604461_25702602_1_28
4604461_4605006_3_18
Title: c# DateTime to Add/Subtract Working Days 
----------------------------------------

public static DateTime AddWorkDays (this DateTime date, int workingDays, params Holidays [] bankHolidays) {
    int direction = workingDays < 0 ? - 1 : 1;
    DateTime newDate = date;
    if (workingDays == 0) {
        newDate = date;
    } else {
        while (workingDays != - direction) {
            if (newDate.DayOfWeek != DayOfWeek.Saturday && newDate.DayOfWeek != DayOfWeek.Sunday && Array.IndexOf (bankHolidays, newDate) < 0) {
                workingDays -= direction;
            }
            if (workingDays != - direction) {
                newDate = newDate.AddDays (direction);
            }
        }
    }
    return newDate;
}
----------------------------------------

public static DateTime AddWorkDays (this DateTime date, int workingDays) {
    int direction = workingDays < 0 ? - 1 : 1;
    DateTime newDate = date;
    while (workingDays != 0) {
        newDate = newDate.AddDays (direction);
        if (newDate.DayOfWeek != DayOfWeek.Saturday && newDate.DayOfWeek != DayOfWeek.Sunday && ! newDate.IsHoliday ()) {
            workingDays -= direction;
        }
    }
    return newDate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4605235_42816372_11_34
4605235_4605416_1_79
Title: 'Advanced' Console Application 
----------------------------------------

static void Main (string [] args) {
    var prompt = "><![CDATA[ ";
    var startupMsg = "BizLogic Interpreter";
    InteractivePrompt.Run (((strCmd, listCmd) = > {
        string result;
        switch (strCmd.ToLower ()) {
            case "help" :
                result = Help (strCmd);
                break;
            case "othermethod" :
                result = OtherMethod (strCmd);
                break;
            default :
                result = "I'm sorry, I don't recognize that command.";
                break;
        }
        return result + Environment.NewLine;
    }), prompt, startupMsg);
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Welcome to test console app, type help to get some help!");
    while (true) {
        string input = Console.ReadLine ();
        int commandEndIndex = input.IndexOf (' ');
        string command = string.Empty;
        string commandParameters = string.Empty;
        if (commandEndIndex > - 1) {
            command = input.Substring (0, commandEndIndex);
            commandParameters = input.Substring (commandEndIndex + 1, input.Length - commandEndIndex - 1);
        } else {
            command = input;
        }
        command = command.ToUpper ();
        switch (command) {
            case "EXIT" :
                {
                    return;
                } case "HELP" :
                {
                    Console.WriteLine ("- enter EXIT to exit this application");
                    Console.WriteLine ("- enter CLS to clear the screen");
                    Console.WriteLine ("- enter FORECOLOR value to change text fore color (sample: FORECOLOR Red) ");
                    Console.WriteLine ("- enter BACKCOLOR value to change text back color (sample: FORECOLOR Green) ");
                    break;
                } case "CLS" :
                {
                    Console.Clear ();
                    break;
                } case "FORECOLOR" :
                {
                    try {
                        Console.ForegroundColor = (ConsoleColor) Enum.Parse (typeof (ConsoleColor), commandParameters);
                    }
                    catch {
                        Console.WriteLine ("!!! Parameter not valid");
                    }
                    break;
                } case "BACKCOLOR" :
                {
                    try {
                        Console.BackgroundColor = (ConsoleColor) Enum.Parse (typeof (ConsoleColor), commandParameters);
                    }
                    catch {
                        Console.WriteLine ("!!! Parameter not valid");
                    }
                    break;
                } default :
                {
                    Console.WriteLine ("!!! Bad command");
                    break;
                }}
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46066723_46066819_1_13
46066723_46067768_1_20
Title: how to export all checkledistbox items to Xml document in windows form application c# 
----------------------------------------

private void button2_Click (object sender, EventArgs e) {
    string str = "";
    for (int i = 0; i < checkedListBox1.Items.Count; i ++) {
        if (checkedListBox1.GetItemChecked (i)) {
            str += (string) checkedListBox1.Items [i];
        }
    }
    MessageBox.Show (str);
}
----------------------------------------

private void button2_Click (object sender, EventArgs e) {
    XmlTextWriter xwriter = new XmlTextWriter ("GetDetails.xml", Encoding.Unicode);
    xwriter.WriteStartDocument ();
    xwriter.WriteStartElement ("XMLFILE");
    xwriter.WriteStartElement ("file");
    xwriter.WriteString (textBox1.Text);
    xwriter.WriteEndElement ();
    foreach (var item in checkedListBox1.CheckedItems) {
        xwriter.WriteStartElement ("SelectedItems");
        xwriter.WriteString (item.ToString ());
        xwriter.WriteEndElement ();
    }
    xwriter.WriteEndElement ();
    xwriter.WriteEndDocument ();
    xwriter.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4613071_29668364_30_113
4613071_48434408_107_117
Title: Messagebox.Show and DialogResult equivalent in MonoTouch 
----------------------------------------

public static Task < MessageBoxResult > ShowAsync (string messageBoxText, string caption, MessageBoxButton buttonType) {
    MessageBoxResult res = MessageBoxResult.Cancel;
    bool IsDisplayed = false;
    int buttonClicked = - 1;
    MessageBoxButton button = buttonType;
    UIAlertView alert = null;
    string cancelButton = "Cancel";
    string [] otherButtons = null;
    switch (button) {
        case MessageBoxButton.OK :
            cancelButton = "";
            otherButtons = new string [1];
            otherButtons [0] = "OK";
            break;
        case MessageBoxButton.OKCancel :
            otherButtons = new string [1];
            otherButtons [0] = "OK";
            break;
        case MessageBoxButton.YesNo :
            cancelButton = "";
            otherButtons = new string [2];
            otherButtons [0] = "Yes";
            otherButtons [1] = "No";
            break;
        case MessageBoxButton.YesNoCancel :
            otherButtons = new string [2];
            otherButtons [0] = "Yes";
            otherButtons [1] = "No";
            break;
    }
    var tsc = new TaskCompletionSource < MessageBoxResult > ();
    if (cancelButton.Length > 0)
        alert = new UIAlertView (caption, messageBoxText, null, cancelButton, otherButtons);
    else
        alert = new UIAlertView (caption, messageBoxText, null, null, otherButtons);

    alert.BackgroundColor = UIColor.FromWhiteAlpha (0f, 0.8f);
    alert.Canceled += (sender, e) = > {
        tsc.TrySetResult (MessageBoxResult.Cancel);
    };
    alert.Clicked += (sender, e) = > {
        buttonClicked = e.ButtonIndex;
        switch (button) {
            case MessageBoxButton.OK :
                res = MessageBoxResult.OK;
                break;
            case MessageBoxButton.OKCancel :
                if (buttonClicked == 1)
                    res = MessageBoxResult.OK;

                break;
            case MessageBoxButton.YesNo :
                if (buttonClicked == 0)
                    res = MessageBoxResult.Yes;
                else
                    res = MessageBoxResult.No;

                break;
            case MessageBoxButton.YesNoCancel :
                if (buttonClicked == 1)
                    res = MessageBoxResult.Yes;
                else if (buttonClicked == 2)
                    res = MessageBoxResult.No;

                break;
        }
        tsc.TrySetResult (res);
    };
    alert.Show ();
    return tsc.Task;
}
----------------------------------------

public Task < MessageBoxResult > ShowAsync (string sMessageBoxText, string sCaption, MessageBoxButton eButtonType) {
    messageBoxText = sMessageBoxText;
    caption = sCaption;
    button = eButtonType;
    IsAsync = true;
    tsc = new TaskCompletionSource < MessageBoxResult > ();
    ShowAlertBox ();
    return tsc.Task;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4613071_48434408_95_105
4613071_9883587_29_127
Title: Messagebox.Show and DialogResult equivalent in MonoTouch 
----------------------------------------

public MessageBoxResult Show (string sMessageBoxText, string sCaption, MessageBoxButton eButtonType) {
    messageBoxText = sMessageBoxText;
    caption = sCaption;
    button = eButtonType;
    IsAsync = false;
    ShowAlertBox ();
    WaitInLoopWhileDisplayed ();
    return GetResult ();
}
----------------------------------------

public static MessageBoxResult Show (string messageBoxText, string caption, MessageBoxButton buttonType) {
    MessageBoxResult res = MessageBoxResult.Cancel;
    bool IsDisplayed = false;
    int buttonClicked = - 1;
    MessageBoxButton button = buttonType;
    UIAlertView alert = null;
    string cancelButton = "Cancel";
    string [] otherButtons = null;
    switch (button) {
        case MessageBoxButton.OK :
            cancelButton = "";
            otherButtons = new string [1];
            otherButtons [0] = "OK";
            break;
        case MessageBoxButton.OKCancel :
            otherButtons = new string [1];
            otherButtons [0] = "OK";
            break;
        case MessageBoxButton.YesNo :
            cancelButton = "";
            otherButtons = new string [2];
            otherButtons [0] = "Yes";
            otherButtons [1] = "No";
            break;
        case MessageBoxButton.YesNoCancel :
            otherButtons = new string [2];
            otherButtons [0] = "Yes";
            otherButtons [1] = "No";
            break;
    }
    if (cancelButton.Length > 0)
        alert = new UIAlertView (caption, messageBoxText, null, cancelButton, otherButtons);
    else
        alert = new UIAlertView (caption, messageBoxText, null, null, otherButtons);

    alert.BackgroundColor = UIColor.FromWhiteAlpha (0f, 0.8f);
    alert.Canceled += (sender, e) = > {
        buttonClicked = 0;
        IsDisplayed = false;
    };
    alert.Clicked += (sender, e) = > {
        buttonClicked = e.ButtonIndex;
        IsDisplayed = false;
    };
    alert.Dismissed += (sender, e) = > {
        if (IsDisplayed) {
            buttonClicked = e.ButtonIndex;
            IsDisplayed = false;
        }
    };
    alert.Show ();
    IsDisplayed = true;
    while (IsDisplayed) {
        NSRunLoop.Current.RunUntil (NSDate.FromTimeIntervalSinceNow (0.2));
    }
    switch (button) {
        case MessageBoxButton.OK :
            res = MessageBoxResult.OK;
            break;
        case MessageBoxButton.OKCancel :
            if (buttonClicked == 1)
                res = MessageBoxResult.OK;

            break;
        case MessageBoxButton.YesNo :
            if (buttonClicked == 0)
                res = MessageBoxResult.Yes;
            else
                res = MessageBoxResult.No;

            break;
        case MessageBoxButton.YesNoCancel :
            if (buttonClicked == 1)
                res = MessageBoxResult.Yes;
            else if (buttonClicked == 2)
                res = MessageBoxResult.No;

            break;
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4616610_4616717_14_20
4616610_4616717_7_12
Title: c# compare the data in two object models 
----------------------------------------

public override bool Equals (object obj) {
    if (ReferenceEquals (null, obj))
        return false;

    if (ReferenceEquals (this, obj))
        return true;

    if (obj.GetType () != typeof (Book))
        return false;

    return Equals ((Book) obj);
}
----------------------------------------

public bool Equals (Book other) {
    if (ReferenceEquals (null, other))
        return false;

    if (ReferenceEquals (this, other))
        return true;

    return Equals (other.Title, Title) && Equals (other.Author, Author) && Equals (other.Chapters, Chapters);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4622567_4622654_22_35
4622567_4622654_37_50
Title: isolated storage question 
----------------------------------------

private static void SerializeToIsolatedStorage < T > (T obj, string filename) {
    if ((obj == null) || string.IsNullOrEmpty (filename)) {
        return;
    }
    using (var store = IsolatedStorageFile.GetUserStoreForAssembly ())
    using (var stream = store.CreateFile (filename))
    using (var writer = XmlWriter.Create (stream))
    {
        new XmlSerializer (obj.GetType ()).Serialize (writer, obj);
    }}
----------------------------------------

private static T DeserializeFromIsolatedStorage < T > (string filename) {
    if (string.IsNullOrEmpty (filename)) {
        return default (T);
    }
    using (var store = IsolatedStorageFile.GetUserStoreForAssembly ())
    using (var stream = store.OpenFile (filename, FileMode.Open))
    using (var reader = XmlReader.Create (stream))
    {
        return (T) new XmlSerializer (typeof (T)).Deserialize (reader);
    }}
----------------------------------------

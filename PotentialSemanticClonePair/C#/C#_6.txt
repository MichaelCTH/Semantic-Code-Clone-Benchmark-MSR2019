$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15084623_15084687_1_14
15084623_15084708_1_12
Title: simplify OleDbDataReader code 
----------------------------------------

private void loadMilk (string TableName, string itemValue) {
    string SQLString = String.Format ("select * from {0}", TableName);
    cn.Open ();
    OleDbDataReader reader = null;
    OleDbCommand cmd = new OleDbCommand (SQLString, cn);
    reader = cmd.ExecuteReader ();
    while (reader.Read ()) {
        Milk.Add (reader [ItemValue].ToString ());
    }
    cn.Close ();
}
----------------------------------------

private void loadMilk (string tableName) {
    cn.Open ();
    OleDbDataReader reader = null;
    OleDbCommand cmd = new OleDbCommand (string.Format ("select* from {0}", tableName), cn);
    reader = cmd.ExecuteReader ();
    while (reader.Read ()) {
        Milk.Add (reader ["Product"].ToString ());
    }
    cn.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15110193_15110655_1_17
15110193_15112187_1_23
Title: how to change text in datagridview text on condition . 
----------------------------------------

private void masterDataGridView_CellFormatting (object sender, DataGridViewCellFormattingEventArgs e) {
    try {
        if (e.ColumnIndex >= 17 && e.ColumnIndex <= 24) {
            if (e.Value == "M")
                e.Value = "Married";
            else
                e.Value = "Not Married";

        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

private void masterDataGridView_CellFormatting (object sender, DataGridViewCellFormattingEventArgs e) {
    if (masterDataGridView.Columns [e.ColumnIndex].Name.Equals ("Gender")) {
        string _val = e.Value as string;
        if (_val == null)
            return;

        switch (_val) {
            case "M" :
                e.Value = "Male";
                break;
            case "F" :
                e.Value = "Female";
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15112844_15113012_1_15
15112844_15132248_1_17
Title: DataGridView Validation - remove error indicator 
----------------------------------------

void centreDataGridView_CellValidating (object sender, DataGridViewCellValidatingEventArgs e) {
    if (centreDataGridView.Rows [e.RowIndex].IsNewRow) {
        return;
    }
    if (centreDataGridView.Columns [e.ColumnIndex].Name == "code") {
        Regex codeRegex = new Regex ("^[0-9]{5}[0-9A-Z]$");
        if (! codeRegex.IsMatch (e.FormattedValue.ToString ())) {
            centreDataGridView.Rows [e.RowIndex].ErrorText = "error text here";
        }
    }
}
----------------------------------------

void centreDataGridView_CellValidating (object sender, DataGridViewCellValidatingEventArgs e) {
    centreDataGridView.Rows [e.RowIndex].ErrorText = string.Empty;
    if (centreDataGridView.Columns [e.ColumnIndex].Name == "code") {
        if (! (centreDataGridView.Rows [e.RowIndex].IsNewRow) || (e.FormattedValue.ToString () != string.Empty)) {
            Regex codeRegex = new Regex ("^[0-9]{5}[0-9A-Z]$");
            if (! codeRegex.IsMatch (e.FormattedValue.ToString ())) {
                centreDataGridView.Rows [e.RowIndex].ErrorText = "blah blah blah";
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15124040_15124180_1_22
15124040_15124267_1_28
Title: Unable to connect to any of the specified MySQL hosts 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    using (System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection (connString))
    {
        if (radioButton1.Checked) {
            timerEnabled = 1;
        }
        connection.Open ();
        MySqlCommand command = connection.CreateCommand ();
        command.CommandText = "update Admin_Settings set Difficulty='" + comboBox3.Text + "'," + "NoOfQuestions='" + comboBox4.Text + "'," + "NoOfChoices='" + comboBox5.Text + "'," + "Subject='" + comboBox8.Text + "'," + "Timer='" + comboBox2.Text + "," + "TimerEnabled=" + timerEnabled + "," + "TimerType='" + comboBox1.Text + "'";
        command.ExecuteNonQuery ();
        MessageBox.Show ("Settings updated");
    }}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    using (SqlConnection connection = new SqlConnection (connString))
    {
        if (radioButton1.Checked) {
            timerEnabled = 1;
        }
        string queryString = "update Admin_Settings set Difficulty='" + comboBox3.Text + "'," + "NoOfQuestions='" + comboBox4.Text + "'," + "NoOfChoices='" + comboBox5.Text + "'," + "Subject='" + comboBox8.Text + "'," + "Timer='" + comboBox2.Text + "," + "TimerEnabled=" + timerEnabled + "," + "TimerType='" + comboBox1.Text + "'";
        using (SqlCommand command = new SqlCommand (queryString, connection))
        {
            command.Connection.Open ();
            command.ExecuteNonQuery ();
            command.Connection.Close ();
            MessageBox.Show ("Settings updated");
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15132741_15132775_1_19
15132741_15132895_1_15
Title: Data set- not all code paths return a value 
----------------------------------------

public DataSet GetUsersDataSet () {
    SqlConnection con = new SqlConnection (connectionString);
    SqlDataAdapter da = new SqlDataAdapter ("SELCT * FROM login", con);
    DataSet ds = new DataSet ();
    try {
        con.Open ();
        da.Fill (ds, "login");
    }
    catch {
        new ApplicationException ("Data Error:");
    }
    finally {
        con.Close ();
    }
    return ds;
}
----------------------------------------

public DataSet GetUsersDataSet () {
    DataSet ds = new DataSet ();
    try {
    }
    catch {
    }
    finally {
    }
    return ds;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15132741_15132785_1_22
15132741_15132895_1_15
Title: Data set- not all code paths return a value 
----------------------------------------

public DataSet GetUsersDataSet () {
    SqlConnection con = new SqlConnection (connectionString);
    SqlDataAdapter da = new SqlDataAdapter ("SELCT * FROM login", con);
    DataSet ds = new DataSet ();
    try {
        con.Open ();
        da.Fill (ds, "login");
    }
    catch {
        new ApplicationException ("Data Error:");
    }
    finally {
        con.Close ();
    }
    return ds;
}
----------------------------------------

public DataSet GetUsersDataSet () {
    DataSet ds = new DataSet ();
    try {
    }
    catch {
    }
    finally {
    }
    return ds;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15132741_15132881_1_23
15132741_15132895_1_15
Title: Data set- not all code paths return a value 
----------------------------------------

public DataSet GetUsersDataSet () {
    SqlConnection con = new SqlConnection (connectionString);
    SqlDataAdapter da = new SqlDataAdapter ("SELCT * FROM login", con);
    DataSet ds = new DataSet ();
    try {
        con.Open ();
        da.Fill (ds, "login");
    }
    catch {
        new ApplicationException ("Data Error:");
    }
    finally {
        con.Close ();
    }
    return ds;
}
----------------------------------------

public DataSet GetUsersDataSet () {
    DataSet ds = new DataSet ();
    try {
    }
    catch {
    }
    finally {
    }
    return ds;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15132741_15132895_1_15
15132741_15132985_1_19
Title: Data set- not all code paths return a value 
----------------------------------------

public DataSet GetUsersDataSet () {
    DataSet ds = new DataSet ();
    try {
    }
    catch {
    }
    finally {
    }
    return ds;
}
----------------------------------------

public DataSet GetUsersDataSet () {
    SqlConnection con = new SqlConnection (connectionString);
    SqlDataAdapter da = new SqlDataAdapter ("SELCT * FROM login", con);
    DataSet ds = new DataSet ();
    try {
        con.Open ();
        da.Fill (ds, "login");
        return ds;
    }
    catch {
        throw new ApplicationException ("Data Error:");
    }
    finally {
        con.Close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15140575_15140661_1_18
15140575_15140960_5_21
Title: To solve upside-down rendering? 
----------------------------------------

public static void Main (string [] args) {
    int i = 0;
    int j = 0;
    for (i = 0; i < 4; i ++) {
        for (j = 0; j < 4; j ++) {
            if (j < 3 - i)
                Console.Write (" ");
            else
                Console.Write ("█");

        }
        Console.Write ('\n');
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    char [] blocks = new char [Dimension];
    for (int j = 0; j < Dimension; j ++)
        blocks [j] = ' ';

    for (int i = 0; i < Dimension; i ++) {
        blocks [Dimension - i - 1] = '█';
        for (int j = 0; j < Dimension; j ++)
            Console.Write (blocks [j]);

        Console.WriteLine ();
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15150147_15150493_1_30
15150147_15150493_32_44
Title: All permutations of a list 
----------------------------------------

public static IEnumerable < IEnumerable < T > > Permute < T > (this IEnumerable < T > sequence) {
    if (sequence == null) {
        yield break;
    }
    var list = sequence.ToList ();
    if (! list.Any ()) {
        yield return Enumerable.Empty < T > ();
    } else {
        var startingElementIndex = 0;
        foreach (var startingElement in list) {
            var remainingItems = list.AllExcept (startingElementIndex);
            foreach (var permutationOfRemainder in remainingItems.Permute ()) {
                yield return startingElement.Concat (permutationOfRemainder);
            }
            startingElementIndex ++;
        }
    }
}
----------------------------------------

private static IEnumerable < T > Concat < T > (this T firstElement, IEnumerable < T > secondSequence) {
    yield return firstElement;
    if (secondSequence == null) {
        yield break;
    }
    foreach (var item in secondSequence) {
        yield return item;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15150147_15150493_1_30
15150147_15150493_46_59
Title: All permutations of a list 
----------------------------------------

public static IEnumerable < IEnumerable < T > > Permute < T > (this IEnumerable < T > sequence) {
    if (sequence == null) {
        yield break;
    }
    var list = sequence.ToList ();
    if (! list.Any ()) {
        yield return Enumerable.Empty < T > ();
    } else {
        var startingElementIndex = 0;
        foreach (var startingElement in list) {
            var remainingItems = list.AllExcept (startingElementIndex);
            foreach (var permutationOfRemainder in remainingItems.Permute ()) {
                yield return startingElement.Concat (permutationOfRemainder);
            }
            startingElementIndex ++;
        }
    }
}
----------------------------------------

private static IEnumerable < T > AllExcept < T > (this IEnumerable < T > sequence, int indexToSkip) {
    if (sequence == null) {
        yield break;
    }
    var index = 0;
    foreach (var item in sequence.Where (item = > index ++ != indexToSkip)) {
        yield return item;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15150147_15150493_32_44
15150147_15150493_46_59
Title: All permutations of a list 
----------------------------------------

private static IEnumerable < T > Concat < T > (this T firstElement, IEnumerable < T > secondSequence) {
    yield return firstElement;
    if (secondSequence == null) {
        yield break;
    }
    foreach (var item in secondSequence) {
        yield return item;
    }
}
----------------------------------------

private static IEnumerable < T > AllExcept < T > (this IEnumerable < T > sequence, int indexToSkip) {
    if (sequence == null) {
        yield break;
    }
    var index = 0;
    foreach (var item in sequence.Where (item = > index ++ != indexToSkip)) {
        yield return item;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15182091_15182246_1_14
15182091_15184373_1_16
Title: "Only Edit some fields and ""SaveChanges"" fill the missing fields with default values" 
----------------------------------------

[HttpPost] public ActionResult Edit (MyModel myModel) {
    if (ModelState.IsValid) {
        var existEntry = _db.YourEntity.firstOrDefault (o = > A == o.A);
        if (existEntry != null) {
            existEntry.A = myModel.A;
            existEntry.B = myModel.B;
            _db.SaveChanges ();
        }
    }
    return View (myModel);
}
----------------------------------------

[HttpPost] public ActionResult Edit (int id, TModel model, string returnUrl) {
    if (! ModelState.IsValid)
        return View ();

    var entity = db.Entity.Find (id);
    if (entity == null)
        return HttpNotFound ();

    UpdateModel (entity);
    db.SaveChanges ();
    return Redirect (returnUrl);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15202769_15218639_17_32
15202769_15218639_1_15
Title: How to use SetValue of an Indexed Property in Reflection? 
----------------------------------------

public static TCollectionOut ConvertCollectionMoreDynamic < TCollectionIn, TCollectionOut > (TCollectionIn input) where TCollectionIn : IEnumerable {
    dynamic res = Activator.CreateInstance (typeof (TCollectionOut));
    var oType = typeof (TCollectionOut).GetMethod ("Add").GetParameters ().Last ().ParameterType;
    foreach (dynamic item in input) {
        dynamic o = Activator.CreateInstance (oType);
        ConvertItem (item, o);
        res.Add (o);
    }
    return res;
}
----------------------------------------

public static TCollectionOut ConvertCollection < TCollectionIn, TCollectionOut, TIn, TOut > (TCollectionIn input) where TCollectionIn : IEnumerable < TIn > where TCollectionOut : ICollection < TOut >, new () where TOut : new () {
    var res = new TCollectionOut ();
    foreach (dynamic item in input) {
        dynamic o = new TOut ();
        ConvertItem (item, o);
        res.Add (o);
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15209932_15210094_6_13
15209932_15212885_1_47
Title: Switch to a different IObservable if the first is empty 
----------------------------------------

public static IObservable < T > DefaultIfEmpty < T > (this IObservable < T > first, IObservable < T > second) {
    var signal = new AsyncSubject < Unit > ();
    var source1 = first.Do (item = > {
        signal.OnNext (Unit.Default);
        signal.OnCompleted ();
    });
    var source2 = second.TakeUntil (signal);
    return source1.Concat (source2);
}
----------------------------------------

public static IObservable < T > FirstWithValues < T > (this IEnumerable < IObservable < T > > sources) {
    return Observable.Create < T > (obs = > {
        SerialDisposable disp = new SerialDisposable ();
        bool hadValues = false;
        var sourceWalker = sources.GetEnumerator ();
        sourceWalker.MoveNext ();
        IObserver < T > checker = null;
        checker = Observer.Create < T > (v = > {
            Console.WriteLine ("Got value on source:" + v.ToString ());
            hadValues = true;
            obs.OnNext (v);
        }, ex = > {
            Console.WriteLine ("Error on source, passing to observer");
            obs.OnError (ex);
        }, () = > {
            if (hadValues) {
                Console.WriteLine ("Source completed, had values, so ending");
                obs.OnCompleted ();
            } else {
                Console.WriteLine ("Source completed, no values, so moving to next source");
                sourceWalker.MoveNext ();
                disp.Disposable = sourceWalker.Current.Subscribe (checker);
            }
        });
        disp.Disposable = sourceWalker.Current.Subscribe (checker);
        return disp.Disposable;
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15209932_15210094_6_13
15209932_51795229_1_11
Title: Switch to a different IObservable if the first is empty 
----------------------------------------

public static IObservable < T > DefaultIfEmpty < T > (this IObservable < T > first, IObservable < T > second) {
    var signal = new AsyncSubject < Unit > ();
    var source1 = first.Do (item = > {
        signal.OnNext (Unit.Default);
        signal.OnCompleted ();
    });
    var source2 = second.TakeUntil (signal);
    return source1.Concat (source2);
}
----------------------------------------

public static IObservable < T > SwitchIfEmpty < T > (this IObservable < T > @this, IObservable < T > switchTo) {
    if (@this == null)
        throw new ArgumentNullException (nameof (@this));

    if (switchTo == null)
        throw new ArgumentNullException (nameof (switchTo));

    return Observable.Create < T > (obs = > {
        var source = @this.Replay (1);
        var switched = source.Any ().SelectMany (any = > any ? Observable.Empty < T > () : switchTo);
        return new CompositeDisposable (source.Concat (switched).Subscribe (obs), source.Connect ());
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15209932_15212885_1_47
15209932_51795229_1_11
Title: Switch to a different IObservable if the first is empty 
----------------------------------------

public static IObservable < T > FirstWithValues < T > (this IEnumerable < IObservable < T > > sources) {
    return Observable.Create < T > (obs = > {
        SerialDisposable disp = new SerialDisposable ();
        bool hadValues = false;
        var sourceWalker = sources.GetEnumerator ();
        sourceWalker.MoveNext ();
        IObserver < T > checker = null;
        checker = Observer.Create < T > (v = > {
            Console.WriteLine ("Got value on source:" + v.ToString ());
            hadValues = true;
            obs.OnNext (v);
        }, ex = > {
            Console.WriteLine ("Error on source, passing to observer");
            obs.OnError (ex);
        }, () = > {
            if (hadValues) {
                Console.WriteLine ("Source completed, had values, so ending");
                obs.OnCompleted ();
            } else {
                Console.WriteLine ("Source completed, no values, so moving to next source");
                sourceWalker.MoveNext ();
                disp.Disposable = sourceWalker.Current.Subscribe (checker);
            }
        });
        disp.Disposable = sourceWalker.Current.Subscribe (checker);
        return disp.Disposable;
    });
}
----------------------------------------

public static IObservable < T > SwitchIfEmpty < T > (this IObservable < T > @this, IObservable < T > switchTo) {
    if (@this == null)
        throw new ArgumentNullException (nameof (@this));

    if (switchTo == null)
        throw new ArgumentNullException (nameof (switchTo));

    return Observable.Create < T > (obs = > {
        var source = @this.Replay (1);
        var switched = source.Any ().SelectMany (any = > any ? Observable.Empty < T > () : switchTo);
        return new CompositeDisposable (source.Concat (switched).Subscribe (obs), source.Connect ());
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1521157_1521236_1_20
1521157_1521286_1_15
Title: Drawing vertically stacked text in WinForms 
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    float x = 10.0F;
    float y = 10.0F;
    string drawString = "123";
    using (SolidBrush brush = new SolidBrush (Color.Black))
    using (Font drawFont = new Font ("Arial", 16))
    {
        foreach (char c in drawString.ToCharArray ()) {
            PointF p = new PointF (x, y);
            e.Graphics.DrawString (c.ToString (), drawFont, brush, p);
            y += drawFont.Height;
        }
    } base.OnPaint (e);
}
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    float x = 10.0F;
    float y = 10.0F;
    Font drawFont = new Font ("Arial", 16);
    SolidBrush drawBrush = new SolidBrush (Color.Black);
    StringFormat sf = new StringFormat ();
    sf.Alignment = StringAlignment.Center;
    foreach (char c in Text.ToCharArray ()) {
        PointF p = new PointF (x, y);
        e.Graphics.DrawString (c.ToString (), drawFont, drawBrush, p, sf);
        y += drawFont.Height;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15222289_15222405_1_27
15222289_15222603_1_16
Title: Generic function for parsing objects 
----------------------------------------

private static T ParseNode < T > (XmlDocument doc, string node, object defaultValue) {
    object ret = defaultValue;
    try {
        XmlNode xmlNode = doc.SelectSingleNode (node);
        if (xmlNode == null)
            return default (T);

        string text = xmlNode.InnerText;
        if (defaultValue is int)
            ret = int.Parse (text);

        if (defaultValue is bool)
            ret = bool.Parse (text);

        if (defaultValue is string)
            ret = text;

        if (defaultValue is DateTime)
            ret = DateTime.Parse (text);

        return (T) ret;
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
    }
    return (T) ret;
}
----------------------------------------

private T ParseNode < T > (XmlDocument doc, string node, T defaultValue) {
    try {
        XmlNode xmlNode = doc.SelectSingleNode (node);
        if (xmlNode == null)
            return defaultValue;

        string text = xmlNode.InnerText;
        return SafeConvert (text, defaultValue);
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
    }
    return defaultValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
152774_152949_7_16
152774_153014_10_19
Title: Is there a better way to trim a DateTime to a specific precision? 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine (DateTime.Now);
    Console.WriteLine (TrimDate (DateTime.Now, TimeSpan.TicksPerDay));
    Console.WriteLine (TrimDate (DateTime.Now, TimeSpan.TicksPerHour));
    Console.WriteLine (TrimDate (DateTime.Now, TimeSpan.TicksPerMillisecond));
    Console.WriteLine (TrimDate (DateTime.Now, TimeSpan.TicksPerMinute));
    Console.WriteLine (TrimDate (DateTime.Now, TimeSpan.TicksPerSecond));
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine (DateTime.Now);
    Console.WriteLine (DateTime.Now.Trim (TimeSpan.TicksPerDay));
    Console.WriteLine (DateTime.Now.Trim (TimeSpan.TicksPerHour));
    Console.WriteLine (DateTime.Now.Trim (TimeSpan.TicksPerMillisecond));
    Console.WriteLine (DateTime.Now.Trim (TimeSpan.TicksPerMinute));
    Console.WriteLine (DateTime.Now.Trim (TimeSpan.TicksPerSecond));
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15281616_15281792_1_12
15281616_15281806_12_24
Title: "Take slice from 2D array (int[  ]) using LINQ in C#" 
----------------------------------------

public T [,] Slice < T > (T [,] a, int x1, int y1, int x2, int y2) {
    var result = new T [x2 - x1, y2 - y1];
    for (var i = x1; i < x2; i ++) {
        for (var j = y1; j < y2; j ++) {
            result [i - x1, j - y1] = a [i, j];
        }
    }
    return result;
}
----------------------------------------

public static T [,] Slice < T > (this T [,] source, int fromIdxRank0, int toIdxRank0, int fromIdxRank1, int toIdxRank1) {
    T [,] ret = new T [toIdxRank0 - fromIdxRank0 + 1, toIdxRank1 - fromIdxRank1 + 1];
    for (int srcIdxRank0 = fromIdxRank0, dstIdxRank0 = 0; srcIdxRank0 <= toIdxRank0; srcIdxRank0 ++, dstIdxRank0 ++) {
        for (int srcIdxRank1 = fromIdxRank1, dstIdxRank1 = 0; srcIdxRank1 <= toIdxRank1; srcIdxRank1 ++, dstIdxRank1 ++) {
            ret [dstIdxRank0, dstIdxRank1] = source [srcIdxRank0, srcIdxRank1];
        }
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15293653_15294410_1_40
15293653_15296894_1_24
Title: Coverting List of Dictionary to DataTable 
----------------------------------------

private static DataTable DictionariesToDataTable < T > (IEnumerable < IDictionary < string, T > > source) {
    if (source == null) {
        return null;
    }
    var result = new DataTable ();
    using (var e = source.GetEnumerator ())
    {
        if (! e.MoveNext ()) {
            return result;
        }
        if (e.Current.Keys.Length == 0) {
            throw new InvalidOperationException ();
        }
        var length = e.Current.Keys.Length;
        result.Columns.AddRange (e.Current.Keys.Select (k = > new DataColumn (k, typeof (T))).ToArray ());
        do
            {
                if (e.Current.Values.Length != length) {
                    throw new InvalidOperationException ();
                }
                result.Rows.Add (e.Current.Values);
            } while (e.MoveNext ());
        return result;
    }}
----------------------------------------

private DataTable GetDataTableFromDictionaries < T > (List < Dictionary < string, T > > list) {
    DataTable dataTable = new DataTable ();
    if (list == null || ! list.Any ())
        return dataTable;

    foreach (var column in list.First ().Select (c = > new DataColumn (c.Key, typeof (T)))) {
        dataTable.Columns.Add (column);
    }
    foreach (var row in list.Select (r = > {
        var dataRow = dataTable.NewRow ();
        r.ToList ().ForEach (c = > dataRow.SetField (c.Key, c.Value));
        return dataRow;
    })) {
        dataTable.Rows.Add (row);
    }
    return dataTable;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15294310_25767054_1_26
15294310_42131259_1_45
Title: Splitting text into lines with maximum length 
----------------------------------------

public static string SplitToLines (string text, char [] splitOnCharacters, int maxStringLength) {
    var sb = new StringBuilder ();
    var index = 0;
    while (text.Length > index) {
        if (index != 0)
            sb.AppendLine ();

        var splitAt = index + maxStringLength <= text.Length ? text.Substring (index, maxStringLength).LastIndexOfAny (splitOnCharacters) : text.Length - index;
        splitAt = (splitAt == - 1) ? maxStringLength : splitAt;
        sb.Append (text.Substring (index, splitAt).Trim ());
        index += splitAt;
    }
    return sb.ToString ();
}
----------------------------------------

public static string SplitToLines (string text, char [] splitanyOf, int maxStringLength) {
    var sb = new System.Text.StringBuilder ();
    var index = 0;
    var loop = 0;
    while (text.Length > index) {
        if (loop != 0) {
            sb.AppendLine ();
        }
        var splitAt = 0;
        if (index + maxStringLength <= text.Length) {
            splitAt = text.Substring (index, maxStringLength).LastIndexOfAny (splitanyOf);
        } else {
            splitAt = text.Length - index;
        }
        if (splitAt == - 1 || splitAt == 0) {
            splitAt = text.IndexOfAny (splitanyOf, maxStringLength);
        }
        sb.Append (text.Substring (index, splitAt).Trim ());
        if (text.Length > splitAt) {
            text = text.Substring (splitAt + 1).Trim ();
        } else {
            text = string.Empty;
        }
        loop = loop + 1;
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_114_127
15317894_15319006_130_140
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

public static int [] indexSort < T > (T [] a, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    int N = a.Length;
    int [] index = new int [N];
    for (int i = 0; i < N; i ++) {
        index [i] = i;
    }
    int [] aux = new int [N];
    sort (a, index, aux, 0, N - 1, comparer);
    return index;
}
----------------------------------------

private static void sort < T > (T [] a, int [] index, int [] aux, int lo, int hi, IComparer < T > comparer) {
    if (hi <= lo) {
        return;
    }
    int mid = lo + (hi - lo) / 2;
    sort (a, index, aux, lo, mid, comparer);
    sort (a, index, aux, mid + 1, hi, comparer);
    merge (a, index, aux, lo, mid, hi, comparer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_114_127
15317894_15319006_36_46
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

public static int [] indexSort < T > (T [] a, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    int N = a.Length;
    int [] index = new int [N];
    for (int i = 0; i < N; i ++) {
        index [i] = i;
    }
    int [] aux = new int [N];
    sort (a, index, aux, 0, N - 1, comparer);
    return index;
}
----------------------------------------

private static void sort < T > (T [] a, T [] aux, int lo, int hi, IComparer < T > comparer) {
    if (hi <= lo) {
        return;
    }
    int mid = lo + (hi - lo) / 2;
    sort (a, aux, lo, mid, comparer);
    sort (a, aux, mid + 1, hi, comparer);
    merge (a, aux, lo, mid, hi, comparer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_114_127
15317894_15319006_3_34
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

public static int [] indexSort < T > (T [] a, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    int N = a.Length;
    int [] index = new int [N];
    for (int i = 0; i < N; i ++) {
        index [i] = i;
    }
    int [] aux = new int [N];
    sort (a, index, aux, 0, N - 1, comparer);
    return index;
}
----------------------------------------

public static void merge < T > (T [] a, T [] aux, int lo, int mid, int hi, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    for (int k = lo; k <= hi; k ++) {
        aux [k] = a [k];
    }
    int i = lo, j = mid + 1;
    for (int k = lo; k <= hi; k ++) {
        if (i > mid) {
            a [k] = aux [j ++];
        } else if (j > hi) {
            a [k] = aux [i ++];
        } else if (less (aux [j], aux [i], comparer)) {
            a [k] = aux [j ++];
        } else {
            a [k] = aux [i ++];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_114_127
15317894_15319006_80_110
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

public static int [] indexSort < T > (T [] a, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    int N = a.Length;
    int [] index = new int [N];
    for (int i = 0; i < N; i ++) {
        index [i] = i;
    }
    int [] aux = new int [N];
    sort (a, index, aux, 0, N - 1, comparer);
    return index;
}
----------------------------------------

private static void merge < T > (T [] a, int [] index, int [] aux, int lo, int mid, int hi, IComparer < T > comparer) {
    for (int k = lo; k <= hi; k ++) {
        aux [k] = index [k];
    }
    int i = lo, j = mid + 1;
    for (int k = lo; k <= hi; k ++) {
        if (i > mid) {
            index [k] = aux [j ++];
        } else if (j > hi) {
            index [k] = aux [i ++];
        } else if (less (a [aux [j]], a [aux [i]], comparer)) {
            index [k] = aux [j ++];
        } else {
            index [k] = aux [i ++];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_130_140
15317894_15319006_36_46
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

private static void sort < T > (T [] a, int [] index, int [] aux, int lo, int hi, IComparer < T > comparer) {
    if (hi <= lo) {
        return;
    }
    int mid = lo + (hi - lo) / 2;
    sort (a, index, aux, lo, mid, comparer);
    sort (a, index, aux, mid + 1, hi, comparer);
    merge (a, index, aux, lo, mid, hi, comparer);
}
----------------------------------------

private static void sort < T > (T [] a, T [] aux, int lo, int hi, IComparer < T > comparer) {
    if (hi <= lo) {
        return;
    }
    int mid = lo + (hi - lo) / 2;
    sort (a, aux, lo, mid, comparer);
    sort (a, aux, mid + 1, hi, comparer);
    merge (a, aux, lo, mid, hi, comparer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_130_140
15317894_15319006_3_34
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

private static void sort < T > (T [] a, int [] index, int [] aux, int lo, int hi, IComparer < T > comparer) {
    if (hi <= lo) {
        return;
    }
    int mid = lo + (hi - lo) / 2;
    sort (a, index, aux, lo, mid, comparer);
    sort (a, index, aux, mid + 1, hi, comparer);
    merge (a, index, aux, lo, mid, hi, comparer);
}
----------------------------------------

public static void merge < T > (T [] a, T [] aux, int lo, int mid, int hi, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    for (int k = lo; k <= hi; k ++) {
        aux [k] = a [k];
    }
    int i = lo, j = mid + 1;
    for (int k = lo; k <= hi; k ++) {
        if (i > mid) {
            a [k] = aux [j ++];
        } else if (j > hi) {
            a [k] = aux [i ++];
        } else if (less (aux [j], aux [i], comparer)) {
            a [k] = aux [j ++];
        } else {
            a [k] = aux [i ++];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_130_140
15317894_15319006_80_110
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

private static void sort < T > (T [] a, int [] index, int [] aux, int lo, int hi, IComparer < T > comparer) {
    if (hi <= lo) {
        return;
    }
    int mid = lo + (hi - lo) / 2;
    sort (a, index, aux, lo, mid, comparer);
    sort (a, index, aux, mid + 1, hi, comparer);
    merge (a, index, aux, lo, mid, hi, comparer);
}
----------------------------------------

private static void merge < T > (T [] a, int [] index, int [] aux, int lo, int mid, int hi, IComparer < T > comparer) {
    for (int k = lo; k <= hi; k ++) {
        aux [k] = index [k];
    }
    int i = lo, j = mid + 1;
    for (int k = lo; k <= hi; k ++) {
        if (i > mid) {
            index [k] = aux [j ++];
        } else if (j > hi) {
            index [k] = aux [i ++];
        } else if (less (a [aux [j]], a [aux [i]], comparer)) {
            index [k] = aux [j ++];
        } else {
            index [k] = aux [i ++];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_36_46
15317894_15319006_3_34
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

private static void sort < T > (T [] a, T [] aux, int lo, int hi, IComparer < T > comparer) {
    if (hi <= lo) {
        return;
    }
    int mid = lo + (hi - lo) / 2;
    sort (a, aux, lo, mid, comparer);
    sort (a, aux, mid + 1, hi, comparer);
    merge (a, aux, lo, mid, hi, comparer);
}
----------------------------------------

public static void merge < T > (T [] a, T [] aux, int lo, int mid, int hi, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    for (int k = lo; k <= hi; k ++) {
        aux [k] = a [k];
    }
    int i = lo, j = mid + 1;
    for (int k = lo; k <= hi; k ++) {
        if (i > mid) {
            a [k] = aux [j ++];
        } else if (j > hi) {
            a [k] = aux [i ++];
        } else if (less (aux [j], aux [i], comparer)) {
            a [k] = aux [j ++];
        } else {
            a [k] = aux [i ++];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15317894_15319006_36_46
15317894_15319006_80_110
Title: Why is using IComparable slower than strings in comparisons? 
----------------------------------------

private static void sort < T > (T [] a, T [] aux, int lo, int hi, IComparer < T > comparer) {
    if (hi <= lo) {
        return;
    }
    int mid = lo + (hi - lo) / 2;
    sort (a, aux, lo, mid, comparer);
    sort (a, aux, mid + 1, hi, comparer);
    merge (a, aux, lo, mid, hi, comparer);
}
----------------------------------------

private static void merge < T > (T [] a, int [] index, int [] aux, int lo, int mid, int hi, IComparer < T > comparer) {
    for (int k = lo; k <= hi; k ++) {
        aux [k] = index [k];
    }
    int i = lo, j = mid + 1;
    for (int k = lo; k <= hi; k ++) {
        if (i > mid) {
            index [k] = aux [j ++];
        } else if (j > hi) {
            index [k] = aux [i ++];
        } else if (less (a [aux [j]], a [aux [i]], comparer)) {
            index [k] = aux [j ++];
        } else {
            index [k] = aux [i ++];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1532046_1532100_1_11
1532046_1532157_1_15
Title: Problem with Random and Threads in .NET 
----------------------------------------

int RandomLevel () {
    int height = 1;
    lock (rnd)
    {
        while (rnd.NextDouble >= 0.5 && height < MaxHeight)
            height ++;

    } return height;
}
----------------------------------------

int RandomLevel () {
    int height = 1;
    double newRand;
    lock (rnd)
    {
        newRand = rnd.NextDouble ();
    } while (newRand >= 0.5 && height < MaxHeight) {
        height ++;
        lock (rnd)
        {
            newRand = rnd.NextDouble ();
        }}
    return height;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1533115_1533356_1_23
1533115_37443811_1_10
Title: Get GenericType-Name in good format using Reflection on C# 
----------------------------------------

static string PrettyPrintGenericTypeName (Type typeRef) {
    var rootType = typeRef.IsGenericType ? typeRef.GetGenericTypeDefinition () : typeRef;
    var cleanedName = rootType.IsPrimitive ? rootType.Name : rootType.ToString ();
    if (! typeRef.IsGenericType)
        return cleanedName;
    else
        return cleanedName.Substring (0, cleanedName.LastIndexOf ('`')) + typeRef.GetGenericArguments ().Aggregate ("<", (r, i) = > r + (r != "<" ? ", " : null) + PrettyPrintGenericTypeName (i)) + "><![CDATA[";

}
----------------------------------------

private string PrettyPrintGenericTypeName (Type p) {
    if (p.IsGenericType) {
        var simpleName = p.Name.Substring (0, p.Name.IndexOf ('`'));
        var genericTypeParams = p.GenericTypeArguments.Select (PrettyPrintGenericTypeName).ToList ();
        return string.Format ("{0}<{1}>", simpleName, string.Join (", ", genericTypeParams));
    } else {
        return p.Name;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
153438_155522_1_15
153438_155597_1_17
Title: Retrieving the original error number from a COM method called via reflection 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    try {
        var p = new Class1 ();
        p.Test3 ();
    }
    catch (COMException ex) {
        int errorNumber = (ex.ErrorCode - (- 2147221504));
        MessageBox.Show (errorNumber.ToString () + ": " + ex.Message);
    }
    catch (Exception ex) {
        MessageBox.Show (ex.Message);
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    try {
        var f_oType = Type.GetTypeFromProgID ("Project1.Class1");
        var f_oInstance = Activator.CreateInstance (f_oType);
        f_oType.InvokeMember ("Test3", BindingFlags.InvokeMethod, null, f_oInstance, new object [] {});
    }
    catch (TargetInvocationException ex) {
        int errorNumber = ((COMException) ex.InnerException).ErrorCode - (- 2147221504);
        MessageBox.Show (errorNumber.ToString () + ": " + ex.InnerException.Message);
    }
    catch (Exception ex) {
        MessageBox.Show (ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15349802_15364309_1_15
15349802_15390184_22_41
Title: Applying policy on subscribers to an IObserver - what to return for Subscribe() when subscriber is unwanted? 
----------------------------------------

public IDisposable Subscribe (IObserver < T > observer) {
    lock (_subscriberSync)
    {
        var accepted = OnSubscribing (observer);
        if (! accepted) {
            observer.OnError (new SubscriptionRejectedException ("reason"));
            return Disposable.Empty;
        }
    }}
----------------------------------------

public IDisposable Subscribe (IObserver < T > observer) {
    if (observer == null) {
        throw new ArgumentNullException ("observer");
    }
    lock (_subscriberSync)
    {
        var accepted = OnSubscribing (observer);
        if (! accepted) {
            return Disposable.Create (() = > DohSubscriptionFailed ());
        }
        return _source.Subscribe (observer);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1537043_34633464_16_50
1537043_41222965_1_24
Title: Caching IEnumerable 
----------------------------------------

public IEnumerator < T > GetEnumerator () {
    int index = 0;
    for (; index < _cache.Count; index ++) {
        yield return _cache [index];
    }
    for (; _enumerator != null && _enumerator.MoveNext (); index ++) {
        var current = _enumerator.Current;
        _cache.Add (current);
        yield return current;
    }
    if (_enumerator != null) {
        _enumerator.Dispose ();
        _enumerator = null;
    }
    for (; index < _cache.Count; index ++) {
        yield return _cache [index];
    }
}
----------------------------------------

public IEnumerator < T > GetEnumerator () {
    int index = 0;
    while (true) {
        if (index < _cache.Count) {
            yield return _cache [index];
            index = index + 1;
        } else {
            if (_enumerator.MoveNext ()) {
                _cache.Add (_enumerator.Current);
            } else {
                yield break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15372481_15372950_11_52
15372481_15373392_11_53
Title: Sorting Collections of Objects within another collection of Objects 
----------------------------------------

static void Main (string [] args) {
    var students = new [] {new Student () {StudentID = 0, Name = "Mark", fees = new List < Fee > () {new Fee () {FeeID = 1, FeeName = "Books", FeeDueDate = new DateTime (2014, 06, 25)}, new Fee () {FeeID = 2, FeeName = "Tuition", FeeDueDate = new DateTime (2013, 03, 21)}, new Fee () {FeeID = 3, FeeName = "Sports Equipment", FeeDueDate = new DateTime (2013, 03, 18)}, new Fee () {FeeID = 4, FeeName = "School Dorm", FeeDueDate = new DateTime (2013, 07, 26)}}}, new Student () {StudentID = 1, Name = "Tom", fees = new List < Fee > () {new Fee () {FeeID = 2, FeeName = "Books", FeeDueDate = new DateTime (2014, 06, 20)}, new Fee () {FeeID = 4, FeeName = "School Dorm", FeeDueDate = new DateTime (2013, 03, 26)}}}};
    var sorted = from student in students
        orderby student.StudentID
        select new {stud = student.StudentID, fees = from fee in student.fees
            orderby fee.FeeDueDate ascending
            select fee};
    foreach (var item in sorted) {
        Console.WriteLine ("stud[{0}] => ", item.stud);
        foreach (var f in item.fees) {
            Console.WriteLine (f.ToString ());
        }
        Console.WriteLine ();
    }
}
----------------------------------------

static void Main (string [] args) {
    var students = new [] {new Student () {StudentID = 0, Name = "Mark", fees = new List < Fee > () {new Fee () {FeeID = 1, FeeName = "Books", FeeDueDate = new DateTime (2014, 06, 25), FeeAmount = 1.30}, new Fee () {FeeID = 2, FeeName = "Tuition", FeeDueDate = new DateTime (2013, 03, 21), FeeAmount =.30}, new Fee () {FeeID = 3, FeeName = "Sports Equipment", FeeDueDate = new DateTime (2013, 03, 18), FeeAmount =.80}, new Fee () {FeeID = 4, FeeName = "School Dorm", FeeDueDate = new DateTime (2013, 07, 26), FeeAmount = 0}}}, new Student () {StudentID = 1, Name = "Tom", fees = new List < Fee > () {new Fee () {FeeID = 2, FeeName = "Books", FeeDueDate = new DateTime (2014, 06, 20), FeeAmount = 1.50}, new Fee () {FeeID = 4, FeeName = "School Dorm", FeeDueDate = new DateTime (2013, 03, 26), FeeAmount = 4.00}}}};
    var sorted = (from student in students
        select new {stud = student.StudentID, name = student.Name, feesum = student.fees.Sum (x = > x.FeeAmount), fees = from fee in student.fees
            orderby fee.FeeDueDate ascending
            select fee}).OrderByDescending (s = > s.feesum);
    foreach (var item in sorted) {
        Console.WriteLine ("stud[{0}] => {1}, Fees: {2}", item.stud, item.name, item.feesum);
        foreach (var f in item.fees) {
            Console.WriteLine (f.ToString ());
        }
        Console.WriteLine ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
153877_24854015_5_17
153877_43414138_10_41
Title: What is the difference between ManualResetEvent and AutoResetEvent in .NET? 
----------------------------------------

public void RunAll () {
    new Thread (Worker1).Start ();
    new Thread (Worker2).Start ();
    new Thread (Worker3).Start ();
    manualReset.Set ();
    Thread.Sleep (1000);
    manualReset.Reset ();
    Console.WriteLine ("Press to release all threads.");
    Console.ReadLine ();
    manualReset.Set ();
    Console.WriteLine ("Main thread reached to end.");
}
----------------------------------------

public void RunAll () {
    new Thread (Worker1).Start ();
    new Thread (Worker2).Start ();
    new Thread (Worker3).Start ();
    Console.WriteLine ("All Threads Scheduled to RUN!. ThreadId: {0}", Thread.CurrentThread.ManagedThreadId);
    Console.WriteLine ("Main Thread is waiting for 15 seconds, observe 3 thread behaviour. All threads run once and stopped. Why? Because they call WaitOne() internally. They will wait until signals arrive, down below.");
    Thread.Sleep (15000);
    Console.WriteLine ("1- Main will call ManualResetEvent.Set() in 5 seconds, watch out!");
    Thread.Sleep (5000);
    _manualReset.Set ();
    Thread.Sleep (2000);
    Console.WriteLine ("2- Main will call ManualResetEvent.Set() in 5 seconds, watch out!");
    Thread.Sleep (5000);
    _manualReset.Set ();
    Thread.Sleep (2000);
    Console.WriteLine ("3- Main will call ManualResetEvent.Set() in 5 seconds, watch out!");
    Thread.Sleep (5000);
    _manualReset.Set ();
    Thread.Sleep (2000);
    Console.WriteLine ("4- Main will call ManualResetEvent.Reset() in 5 seconds, watch out!");
    Thread.Sleep (5000);
    _manualReset.Reset ();
    Thread.Sleep (2000);
    Console.WriteLine ("It ran one more time. Why? Even Reset Sets the state of the event to nonsignaled (false), causing threads to block, this will initial the state, and threads will run again until they WaitOne().");
    Thread.Sleep (10000);
    Console.WriteLine ();
    Console.WriteLine ("This will go so on. Everytime you call Set(), ManualResetEvent will let ALL threads to run. So if you want synchronization between them, consider using AutoReset event, or simply user TPL (Task Parallel Library).");
    Thread.Sleep (5000);
    Console.WriteLine ("Main thread reached to end! ThreadId: {0}", Thread.CurrentThread.ManagedThreadId);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15394631_15394749_3_15
15394631_15394774_1_13
Title: How can I compare a string to char[] with no memory allocations? 
----------------------------------------

public static int Compare (this String str, char [] chars) {
    if (str == null && chars == null)
        return 0;

    if (str == null)
        return - 1;

    if (chars == null)
        return 1;

    int max = Math.Min (str.Length, chars.Length);
    for (int i = 0; i < max; i ++)
        if (str [i] < chars [i])
            return - 1;
        else if (str [i] > chars [i])
            return 1;

    return str.Length.CompareTo (chars.Length);
}
----------------------------------------

public static int Compare (this String str, char [] chars) {
    for (int i = 0; i < str.Length; i ++)
        if (i == chars.Length)
            return 1;
        else if (str [i] < chars [i])
            return - 1;
        else if (str [i] > chars [i])
            return 1;

    if (chars.Length > str.Length)
        return - 1;

    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1539989_1540309_138_166
1539989_1540309_722_740
Title: C# implementation of deep/recursive object comparison in .net 3.5 
----------------------------------------

private bool Matches (object expectedValue, object actualValue) {
    bool matches = true;
    if (! MatchesNull (expectedValue, actualValue, ref matches)) {
        return matches;
    }
    Constraint eq = new DatesEqualConstraint (expectedValue).Within (tolerance ?? _regionalTolerance);
    if (eq.Matches (actualValue)) {
        return true;
    }
    if (MatchesVisited (expectedValue, actualValue, ref matches)) {
        if (MatchesDictionary (expectedValue, actualValue, ref matches) && MatchesList (expectedValue, actualValue, ref matches) && MatchesType (expectedValue, actualValue, ref matches) && MatchesPredicate (expectedValue, actualValue, ref matches)) {
            MatchesFields (expectedValue, actualValue, eq, ref matches);
        }
    }
    return matches;
}
----------------------------------------

public override bool Matches (object actualValue) {
    if (tolerance != null && tolerance is TimeSpan) {
        if (_expected is DateTime && actualValue is DateTime) {
            var expectedDate = (DateTime) _expected;
            var actualDate = (DateTime) actualValue;
            var toleranceSpan = (TimeSpan) tolerance;
            if ((actualDate - expectedDate).Duration () <= toleranceSpan) {
                return true;
            }
        }
        tolerance = null;
    }
    return base.Matches (actualValue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15404634_15424111_3_30
15404634_46507353_33_51
Title: How to get a list of all fields with a specified attribute? 
----------------------------------------

static void Main (string [] args) {
    MyClass myClass = new MyClass ();
    var type = myClass.GetType ();
    foreach (var property in type.GetProperties ()) {
        var propattr = property.GetCustomAttributes (false);
        object attr = (from row in propattr
            where row.GetType () == typeof (MyAttribute)
            select row).FirstOrDefault ();
        if (attr == null || ! (attr is MyAttribute))
            continue;

        var myAttribute = attr as MyAttribute;
        Console.WriteLine (myAttribute.Val);
        Console.WriteLine (property.Name);
    }
}
----------------------------------------

public static void Main (string [] args) {
    State s = new State ("Bob", "221 B Baker Street", 5.4f);
    System.Type stateType = typeof (State);
    System.Reflection.FieldInfo [] publicFieldList = stateType.GetFields ();
    System.Console.WriteLine ("----all public fields----");
    ShowFields (publicFieldList);
    System.Console.WriteLine ("----all non public or instance fields----");
    System.Reflection.FieldInfo [] nonPublicFieldList;
    nonPublicFieldList = stateType.GetFields (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
    ShowFields (nonPublicFieldList);
    var customAttributeFieldList = from t in stateType.GetFields ()
        where t.GetCustomAttributes (false).Any (a = > a is TestAttribute)
        select t;
    System.Console.WriteLine ("----only public fields marked with a particular custom attribute----");
    ShowFields (customAttributeFieldList);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15412325_15412698_1_24
15412325_15412841_1_22
Title: Get a List of Dates In a Date Range 
----------------------------------------

List < DateTime > GetDateRange (List < LockedDate > source, DateTime start, DateTime end) {
    List < DateTime > result = new List < DateTime > ();
    foreach (LockedDate lockedDate in source) {
        if (! lockedDate.IsYearly && (lockedDate.Date >= start && lockedDate.Date <= end)) {
            result.Add (lockedDate.Date);
        } else if (lockedDate.IsYearly && (lockedDate.Date >= start && lockedDate.Date <= end)) {
            DateTime date = new DateTime (start.Year, lockedDate.Date.Month, lockedDate.Date.Day);
            do
                {
                    result.Add (date);
                    date = date.AddYears (1);
                } while (date <= end);
        }
    }
    return result;
}
----------------------------------------

List < DateTime > GetDateRange (List < LockedDate > source, DateTime start, DateTime end) {
    List < DateTime > dt = new List < DateTime > ();
    foreach (LockedDate d in source) {
        if (! d.IsYearly) {
            if (start <= d.Date && d.Date <= end)
                dt.Add (d.Date);

        } else {
            for (DateTime i = new DateTime (start.Year, d.Date.Month, d.Date.Day); i <= new DateTime (end.Year, d.Date.Month, d.Date.Day); i = i.AddYears (1)) {
                dt.Add (i);
            }
        }
    }
    return dt;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15415980_15416541_1_26
15415980_15416541_28_61
Title: Board game pawn movement algorithm 
----------------------------------------

public IList < Field > GetPossibleMoves (int worp) {
    var valid = new HashSet < Field > ();
    foreach (var f in GetPossibleMoves (current.LinkNorth, worp)) {
        valid.Add (f);
    }
    foreach (var f in GetPossibleMoves (current.LinkEast, worp)) {
        valid.Add (f);
    }
    foreach (var f in GetPossibleMoves (current.LinkSouth, worp)) {
        valid.Add (f);
    }
    foreach (var f in GetPossibleMoves (current.LinkWest, worp)) {
        valid.Add (f);
    }
    return valid.ToList ();
}
----------------------------------------

private static IEnumerable < Field > GetPossibleMoves (Field current, int worp) {
    if (current == null) {
        yield break;
    }
    yield return current;
    if (worp == 0 || current.BarricadePawn) {
        yield break;
    }
    foreach (var f in GetPossibleMoves (current.LinkNorth, nextWorp)) {
        yield return f;
    }
    foreach (var f in GetPossibleMoves (current.LinkEast, nextWorp)) {
        yield return f;
    }
    foreach (var f in GetPossibleMoves (current.LinkSouth, nextWorp)) {
        yield return f;
    }
    foreach (var f in GetPossibleMoves (current.LinkWest, nextWorp)) {
        yield return f;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15415987_15416074_1_10
15415987_15416078_1_10
Title: calling the sum of certain values only from a parameter array 
----------------------------------------

static int SumVals (params int [] vals) {
    int sum = 0;
    foreach (int val in vals) {
        if (val >= 10)
            continue;

        sum += val;
    }
    return sum;
}
----------------------------------------

static int SumVals (params int [] vals) {
    int sum = 0;
    foreach (int val in vals) {
        if (val < 10)
            sum += val;

    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1541777_1541789_3_30
1541777_1541801_1_18
Title: Can you remove an item from a List<> whilst iterating through it in C# 
----------------------------------------

public static int RemoveAll < T > (this List < T > list, Predicate < T > match) {
    if (list == null)
        throw new NullReferenceException ();

    if (match == null)
        throw new ArgumentNullException ("match");

    int i = 0;
    int j = 0;
    for (i = 0; i < list.Count; i ++) {
        if (! match (list [i])) {
            if (i != j)
                list [j] = list [i];

            j ++;
        }
    }
    int removed = i - j;
    if (removed > 0)
        list.RemoveRange (list.Count - removed, removed);

    return removed;
}
----------------------------------------

public void RemoveIf < T > (ICollection < T > collection, Predicate < T > match) {
    List < T > removed = new List < T > ();
    foreach (T item in collection) {
        if (match (item)) {
            removed.Add (item);
        }
    }
    foreach (T item in removed) {
        collection.Remove (item);
    }
    removed.Clear ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
154256_154383_161_182
154256_154383_41_53
Title: Is there a way to iterate through all enum values? 
----------------------------------------

public static string GetStringValue (Enum value) {
    string output = null;
    Type type = value.GetType ();
    if (_stringValues.ContainsKey (value))
        output = (_stringValues [value] as StringValueAttribute).Value;
    else {
        FieldInfo fi = type.GetField (value.ToString ());
        StringValueAttribute [] attrs = fi.GetCustomAttributes (typeof (StringValueAttribute), false) as StringValueAttribute [];
        if (attrs.Length > 0) {
            _stringValues.Add (value, attrs [0]);
            output = attrs [0].Value;
        }
    }
    return output;
}
----------------------------------------

public string GetStringValue (string valueName) {
    Enum enumType;
    string stringValue = null;
    try {
        enumType = (Enum) Enum.Parse (_enumType, valueName);
        stringValue = GetStringValue (enumType);
    }
    catch (Exception) {
    }
    return stringValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1542911_1560264_58_73
1542911_16087168_13_24
Title: Obscure VBMath random numbers generator behavior 
----------------------------------------

public static float Rnd (float Number) {
    int rndSeed = m_rndSeed;
    if (Number != 0.0) {
        if (Number < 0.0) {
            long num3 = BitConverter.ToInt32 (BitConverter.GetBytes (Number), 0);
            num3 &= (long) 0xffffffffL;
            rndSeed = (int) ((num3 + (num3 > > 0x18)) & 0xffffffL);
        }
        rndSeed = (int) (((rndSeed * 0x43fd43fdL) + 0xc39ec3L) & 0xffffffL);
    }
    m_rndSeed = rndSeed;
    return (((float) rndSeed) / 1.677722E+07f);
}
----------------------------------------

public static float Rnd (float number) {
    int rndSeed = m_rndSeed;
    if (number != 0.0) {
        if (number < 0.0) {
            long num3 = Float.floatToRawIntBits (number) & 0xffffffffL;
            rndSeed = (int) ((num3 + (num3 > > 0x18)) & 0xffffffL);
        }
        rndSeed = (int) (((rndSeed * a) + c) & 0xffffffL);
    }
    m_rndSeed = rndSeed;
    return (((float) rndSeed) / m);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15432804_15432963_1_20
15432804_15433542_1_25
Title: Replace two bytes in a generic list 
----------------------------------------

public static void RemoveEscapeSequences (List < byte > message) {
    var replaceBytes = new Dictionary < byte, byte > () {{0x00, 0xF8}, {0x01, 0xFB}, {0x02, 0xFD}, {0x03, 0xFE}};
    for (int index = 0; index < message.Count - 1; ++ index) {
        if (message [index] == 0xF8) {
            if (replaceBytes.ContainsKey (message [index + 1])) {
                message [index] = replaceBytes [message [index + 1]];
                message.RemoveAt (index + 1);
            }
        }
    }
}
----------------------------------------

public static List < byte > RemoveEscapeSequences (List < byte > message) {
    List < byte > result = new List < byte > (message.Count);
    bool escape = false;
    foreach (byte value in message) {
        if (escape) {
            escape = false;
            result.Add (EscapeBytes [value]);
        } else if (value == 0xF8) {
            escape = true;
        } else {
            result.Add (value);
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15482681_15482906_1_22
15482681_15483387_1_14
Title: Print pattern using for loops 
----------------------------------------

static void Main (string [] args) {
    int lines = 5;
    for (int i = 0; i < lines; i ++) {
        bool flag = false;
        for (int j = 0; j < lines; j ++) {
            if (j == i) {
                Console.WriteLine ("**");
                flag = true;
            } else {
                if (! flag)
                    Console.Write (" ");

            }
        }
    }
}
----------------------------------------

void Main () {
    const int rowCount = 10;
    Console.Write ("**");
    for (var rowNumber = 0; rowNumber < rowCount - 1; rowNumber ++) {
        Console.Write ("\n ");
        for (var spaceCount = 0; spaceCount < rowNumber; spaceCount ++) {
            Console.Write (" ");
        }
        Console.Write ("**");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15486_39031496_20_32
15486_39031496_34_46
Title: Sorting an IList in C# 
----------------------------------------

public static void Sort < T > (this IList < T > list, Comparison < T > comparison) {
    if (list is List < T >) {
        ((List < T >) list).Sort (comparison);
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort (comparison);
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------

public static void Sort < T > (this IList < T > list, IComparer < T > comparer) {
    if (list is List < T >) {
        ((List < T >) list).Sort (comparer);
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort (comparer);
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15486_39031496_20_32
15486_39031496_48_65
Title: Sorting an IList in C# 
----------------------------------------

public static void Sort < T > (this IList < T > list, Comparison < T > comparison) {
    if (list is List < T >) {
        ((List < T >) list).Sort (comparison);
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort (comparison);
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------

public static void Sort < T > (this IList < T > list, int index, int count, IComparer < T > comparer) {
    if (list is List < T >) {
        ((List < T >) list).Sort (index, count, comparer);
    } else {
        List < T > range = new List < T > (count);
        for (int i = 0; i < count; i ++) {
            range.Add (list [index + i]);
        }
        range.Sort (comparer);
        Copy (range, 0, list, index, count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15486_39031496_20_32
15486_39031496_6_18
Title: Sorting an IList in C# 
----------------------------------------

public static void Sort < T > (this IList < T > list, Comparison < T > comparison) {
    if (list is List < T >) {
        ((List < T >) list).Sort (comparison);
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort (comparison);
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------

public static void Sort < T > (this IList < T > list) {
    if (list is List < T >) {
        ((List < T >) list).Sort ();
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort ();
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15486_39031496_34_46
15486_39031496_48_65
Title: Sorting an IList in C# 
----------------------------------------

public static void Sort < T > (this IList < T > list, IComparer < T > comparer) {
    if (list is List < T >) {
        ((List < T >) list).Sort (comparer);
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort (comparer);
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------

public static void Sort < T > (this IList < T > list, int index, int count, IComparer < T > comparer) {
    if (list is List < T >) {
        ((List < T >) list).Sort (index, count, comparer);
    } else {
        List < T > range = new List < T > (count);
        for (int i = 0; i < count; i ++) {
            range.Add (list [index + i]);
        }
        range.Sort (comparer);
        Copy (range, 0, list, index, count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15486_39031496_34_46
15486_39031496_6_18
Title: Sorting an IList in C# 
----------------------------------------

public static void Sort < T > (this IList < T > list, IComparer < T > comparer) {
    if (list is List < T >) {
        ((List < T >) list).Sort (comparer);
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort (comparer);
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------

public static void Sort < T > (this IList < T > list) {
    if (list is List < T >) {
        ((List < T >) list).Sort ();
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort ();
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15486_39031496_48_65
15486_39031496_6_18
Title: Sorting an IList in C# 
----------------------------------------

public static void Sort < T > (this IList < T > list, int index, int count, IComparer < T > comparer) {
    if (list is List < T >) {
        ((List < T >) list).Sort (index, count, comparer);
    } else {
        List < T > range = new List < T > (count);
        for (int i = 0; i < count; i ++) {
            range.Add (list [index + i]);
        }
        range.Sort (comparer);
        Copy (range, 0, list, index, count);
    }
}
----------------------------------------

public static void Sort < T > (this IList < T > list) {
    if (list is List < T >) {
        ((List < T >) list).Sort ();
    } else {
        List < T > copy = new List < T > (list);
        copy.Sort ();
        Copy (copy, 0, list, 0, list.Count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15503160_15508686_27_44
15503160_15508883_12_30
Title: FindById always returns null 
----------------------------------------

public static void UpdateIdValues () {
    Mono.Android.Plugins.Resource.Drawable.ic_stat_dismiss = AndroidApplication1.Resource.Drawable.ic_stat_dismiss;
    Mono.Android.Plugins.Resource.Drawable.ic_stat_ic_stat_snooze = AndroidApplication1.Resource.Drawable.ic_stat_ic_stat_snooze;
    Mono.Android.Plugins.Resource.Drawable.ic_stat_notification = AndroidApplication1.Resource.Drawable.ic_stat_notification;
    Mono.Android.Plugins.Resource.Drawable.ic_stat_snooze = AndroidApplication1.Resource.Drawable.ic_stat_snooze;
    Mono.Android.Plugins.Resource.Drawable.monoandroidsplash = AndroidApplication1.Resource.Drawable.monoandroidsplash;
    Mono.Android.Plugins.Resource.Id.dismiss_button = AndroidApplication1.Resource.Id.dismiss_button;
    Mono.Android.Plugins.Resource.Id.reminder_content = AndroidApplication1.Resource.Id.reminder_content;
    Mono.Android.Plugins.Resource.Id.reminder_title = AndroidApplication1.Resource.Id.reminder_title;
    Mono.Android.Plugins.Resource.Id.snooze_button = AndroidApplication1.Resource.Id.snooze_button;
    Mono.Android.Plugins.Resource.Layout.monoandroidsplash = AndroidApplication1.Resource.Layout.monoandroidsplash;
    Mono.Android.Plugins.Resource.Layout.post_reminder = AndroidApplication1.Resource.Layout.post_reminder;
    Mono.Android.Plugins.Resource.String.Hello = AndroidApplication1.Resource.String.Hello;
    Mono.Android.Plugins.Resource.String.dismiss = AndroidApplication1.Resource.String.dismiss;
    Mono.Android.Plugins.Resource.String.snooze = AndroidApplication1.Resource.String.snooze;
    Mono.Android.Plugins.Resource.Style.Mono_Android_Theme_Splash = AndroidApplication1.Resource.Style.Mono_Android_Theme_Splash;
}
----------------------------------------

public static void UpdateIdValues () {
    if (_idInitialized)
        return;

    var eass = Assembly.GetExecutingAssembly ();
    Func < Assembly, Type > f = ass = > ass.GetCustomAttributes (typeof (ResourceDesignerAttribute), true).Select (ca = > ca as ResourceDesignerAttribute).Where (ca = > ca != null && ca.IsApplication).Select (ca = > ass.GetType (ca.FullName)).Where (ty = > ty != null).FirstOrDefault ();
    var t = f (eass);
    if (t == null)
        t = AppDomain.CurrentDomain.GetAssemblies ().Select (ass = > f (ass)).Where (ty = > ty != null).FirstOrDefault ();

    if (t != null)
        t.GetMethod ("UpdateIdValues").Invoke (null, new object [0]);

    _idInitialized = true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15507066_15507291_1_16
15507066_15508197_1_23
Title: Convert Json object output to Jquery array format 
----------------------------------------

[OperationContract] [WebGet (ResponseFormat = WebMessageFormat.Json)] public Comments [] GetComments () {
    Comments oComment1 = new Comments ();
    oComment1.Title = "AMaking hay when the sun shines";
    oComment1.Author = "Plan_A";
    oComment1.CommentText = "AI like hay almost as much as I like sun. Just joking";
    Comments oComment2 = new Comments ();
    oComment2.Title = "Making hay when the sun shines";
    oComment2.Author = "Plan_B";
    oComment2.CommentText = "I like hay almost as much as I like sun. Just joking";
    return new Comments [] {oComment1, oComment2};
}
----------------------------------------

[OperationContract] [WebGet (ResponseFormat = WebMessageFormat.Json)] public CommentList GetComments () {
    Comments oComment1 = new Comments ();
    oComment1.Title = "Your Title";
    oComment1.Author = "Your Date";
    Comments oComment2 = new Comments ();
    oComment2.Title = "Your Title";
    oComment2.Author = "Your Date";
    Comments oComment2 = new Comments ();
    oComment3.Title = "Your Title";
    oComment3.Author = "Your Date";
    CommentList oCommentList = new CommentList ();
    oCommentList.Comment.Add (oComment1);
    oCommentList.Comment.Add (oComment2);
    oCommentList.Comment.Add (oComment3);
    return oCommentList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15521387_15521548_1_19
15521387_15522326_1_12
Title: "How to distinguish between user input but allow the application itself to change text" 
----------------------------------------

private void txtEdit_TextChanged (object sender, TextChangedEventArgs e) {
    TextBox tb = sender as TextBox;
    if (! IsSelectedItemText) {
        if (tb.Text.Contains ("[") || tb.Text.Contains ("]")) {
            MessageBox.Show ("Cannot enter '[' or ']' characters!", "", MessageBoxButton.OK, MessageBoxImage.Information);
            tb.Text = "";
        }
    } else {
    }
    IsSelectedItemText = false;
}
----------------------------------------

private void txtEdit_TextChanged (object sender, TextChangedEventArgs e) {
    string a = (sender as TextBox).Text.substing (0, 1).subsctring;
    a = a.Remove (0, 1);
    a = a.Remove (a.Length - 1, 1);
    if (a.Contains ('[') || a.Contains (']')) {
        MessageBox.Show ("Cannot enter '[' or ']' characters!", "", MessageBoxButton.OK, MessageBoxImage.Information);
    }
    (sender as TextBox).Text = "[" + a.Replace ("[", "").Replace ("]", "") + "]";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15558670_15558714_1_17
15558670_15558782_1_18
Title: Writing to file using values from an object in C# 
----------------------------------------

public void doStuff () {
    AverageValues AVS = new AverageValues ();
    AVS.Bull = "Woof";
    string path = "C:\\users\\kjenks11\\Averages.txt";
    using (var NewFile = File.Create (path))
    {
        using (var writeIt = new StreamWriter (NewFile))
        {
            List < AverageValues > AV = new List < AverageValues > {AVS};
            foreach (var value in AV) {
                writeIt.Write (value.Bull);
            }
        }}}
----------------------------------------

public void doStuff () {
    AverageValues AVS = new AverageValues ();
    AVS.Bull = "Woof";
    string path = "C:\\users\\kjenks11\\Averages.txt";
    FileStream NewFile = File.Create (path);
    List < AverageValues > AV = new List < AverageValues > ();
    AV.Add (AVS);
    using (StreamWriter writeIt = new StreamWriter (NewFile))
    {
        foreach (var value in AV) {
            writeIt.Write (value.Bull);
        }
    } NewFile.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15565135_15565301_1_21
15565135_15565869_1_44
Title: c# search functionality query/code 
----------------------------------------

private void btnRefresh_Click_1 (object sender, EventArgs e) {
    var sb = new StringBuilder ("select Party_Code,TradeNo,Scrip_Code,Inst_Type,Expirydate,Strike_price,Option_type,TerminalId,Branch_Id,Buy_Sell,Trade_Qty,Market_Rate,Sauda_Date,OrderNo from tradeFile");
    if (! string.IsNullOrEmpty (txtSearchPartyCode.Text))
        sb.AppendFormat (" where Party_Code='{0}'", txtSearchPartyCode.Text);

    if (! string.IsNullOrEmpty (txtSearchBranchId.Text))
        sb.AppendFormat (" where Branch_Id='{0}'", txtSearchBrandId.Text);

    sb.Append (";");
    try {
        da = new SqlDataAdapter (sb.ToString (), con);
        DataSet ds = new DataSet ();
        da.Fill (ds);
        gvTradeFile.DataSource = ds.Tables [0];
    }
    catch (Exception ex) {
        MessageBox.Show (ex.Message);
    }
}
----------------------------------------

private void btnRefresh_Click_1 (object sender, EventArgs e) {
    string WHERE_STATEMENT = null;
    string SEARCH = null;
    string SQL = null;
    int i = 1;
    switch (i) {
        case 1 :
            WHERE_STATEMENT = "Party_Code";
            SEARCH = "";
        case 2 :
            WHERE_STATEMENT = "Branch_Id";
            SEARCH = "";
        case 3 :
            WHERE_STATEMENT = "Scrip_Code";
            SEARCH = "";
        case 4 :
            WHERE_STATEMENT = "TerminalId";
            SEARCH = "";
        case 5 :
            WHERE_STATEMENT = "BUY_SELL";
            SEARCH = "";
        case 6 :
            WHERE_STATEMENT = "";
            SEARCH = "";
    }
    try {
        SQL = "select Party_Code,TradeNo,Scrip_Code,Inst_Type,Expirydate,Strike_price,Option_type,TerminalId,Branch_Id,Buy_Sell,Trade_Qty,Market_Rate,Sauda_Date,OrderNo from tradeFile where " + WHERE_STATEMENT + " like '%" + SEARCH + "%'";
        da = new SqlDataAdapter (SQL, con);
        DataSet ds = new DataSet ();
        da.Fill (ds);
        gvTradeFile.DataSource = ds.Tables [0];
    }
    catch (Exception) {
        MessageBox.Show (ex.Message);
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15574461_15574535_161_176
15574461_15574535_90_110
Title: How to use Copy method in base class when creating new instance 
----------------------------------------

public override bool Equals (object obj) {
    if (object.ReferenceEquals (this, obj)) {
        return true;
    }
    if (! base.Equals (obj)) {
        return false;
    }
    AbstractDerived other = (AbstractDerived) obj;
    return (this.IntValue == other.IntValue);
}
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    if (object.ReferenceEquals (this, obj)) {
        return true;
    }
    if (this.GetType () != obj.GetType ()) {
        return false;
    }
    AbstractBase other = (AbstractBase) obj;
    return (this.IntValue == other.IntValue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15574461_15574535_246_261
15574461_15574535_90_110
Title: How to use Copy method in base class when creating new instance 
----------------------------------------

public override bool Equals (object obj) {
    if (object.ReferenceEquals (this, obj)) {
        return true;
    }
    if (! base.Equals (obj)) {
        return false;
    }
    Derived1 other = (Derived1) obj;
    return (this.StringValue == other.StringValue);
}
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    if (object.ReferenceEquals (this, obj)) {
        return true;
    }
    if (this.GetType () != obj.GetType ()) {
        return false;
    }
    AbstractBase other = (AbstractBase) obj;
    return (this.IntValue == other.IntValue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15574461_15574535_330_345
15574461_15574535_90_110
Title: How to use Copy method in base class when creating new instance 
----------------------------------------

public override bool Equals (object obj) {
    if (object.ReferenceEquals (this, obj)) {
        return true;
    }
    if (! base.Equals (obj)) {
        return false;
    }
    Derived2 other = (Derived2) obj;
    return (this.DoubleValue == other.DoubleValue);
}
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    if (object.ReferenceEquals (this, obj)) {
        return true;
    }
    if (this.GetType () != obj.GetType ()) {
        return false;
    }
    AbstractBase other = (AbstractBase) obj;
    return (this.IntValue == other.IntValue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15634162_28951465_1_13
15634162_39475268_5_20
Title: Reverse word of full sentence 
----------------------------------------

static void Main (string [] args) {
    string sentence = "My name is Archit Patel";
    StringBuilder sb = new StringBuilder ();
    string [] split = sentence.Split (' ');
    for (int i = split.Length - 1; i > - 1; i --) {
        sb.Append (split [i]);
        sb.Append (" ");
    }
    Console.WriteLine (sb);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    string text = Console.ReadLine ();
    string [] words = text.Split (' ');
    int k = words.Length - 1;
    for (int i = k; i >= 0; i --) {
        Console.Write (words [i] + " ");
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15634162_28951465_1_13
15634162_39904906_11_20
Title: Reverse word of full sentence 
----------------------------------------

static void Main (string [] args) {
    string sentence = "My name is Archit Patel";
    StringBuilder sb = new StringBuilder ();
    string [] split = sentence.Split (' ');
    for (int i = split.Length - 1; i > - 1; i --) {
        sb.Append (split [i]);
        sb.Append (" ");
    }
    Console.WriteLine (sb);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    StringBuilder sb = new StringBuilder ("abcd efg hijk");
    Reverse (sb, 0, sb.Length - 1);
    Console.WriteLine (sb);
    ReverseWords (sb);
    Console.WriteLine (sb);
    ReverseWordOrder (sb);
    Console.WriteLine (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15634162_39475268_5_20
15634162_39904906_11_20
Title: Reverse word of full sentence 
----------------------------------------

static void Main (string [] args) {
    string text = Console.ReadLine ();
    string [] words = text.Split (' ');
    int k = words.Length - 1;
    for (int i = k; i >= 0; i --) {
        Console.Write (words [i] + " ");
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    StringBuilder sb = new StringBuilder ("abcd efg hijk");
    Reverse (sb, 0, sb.Length - 1);
    Console.WriteLine (sb);
    ReverseWords (sb);
    Console.WriteLine (sb);
    ReverseWordOrder (sb);
    Console.WriteLine (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15637965_37408761_14_29
15637965_37408761_1_12
Title: The object cannot be deleted because it was not found in the ObjectStateManager in entity framework 5 
----------------------------------------

private object [] GetKeys < T > (T entity, DbContext context) where T : class {
    ObjectContext objectContext = ((IObjectContextAdapter) context).ObjectContext;
    ObjectSet < T > set = objectContext.CreateObjectSet < T > ();
    var keyNames = set.EntitySet.ElementType.KeyMembers.Select (k = > k.Name).ToArray ();
    Type type = typeof (T);
    object [] keys = new object [keyNames.Length];
    for (int i = 0; i < keyNames.Length; i ++) {
        keys [i] = type.GetProperty (keyNames [i]).GetValue (entity, null);
    }
    return keys;
}
----------------------------------------

public T Delete < T > (T obj) where T : class {
    T existing = context.Set < T > ().Find (GetKeys (obj, context));
    if (existing != null) {
        context.Set < T > ().Remove (existing);
        context.SaveChanges ();
        return existing;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1564097_1564120_22_32
1564097_1564120_5_15
Title: Working a textbox in a form from another class in C# 
----------------------------------------

public void SetTextBoxText (string text) {
    if (InvokeRequired) {
        BeginInvoke ((MethodInvoker) (() = > {
            SetText (text);
        }));
        return;
    }
    myTextBox.Text += text;
}
----------------------------------------

public void SetTextBoxText (string text) {
    if (InvokeRequired) {
        Invoke ((MethodInvoker) delegate {
            SetText (text);
        });
        return;
    }
    myTextBoxt.Text += text;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15663182_15665530_14_34
15663182_15665530_42_65
Title: Most efficient way to flatten a nested Dictionary? 
----------------------------------------

private static void Flatten (IEnumerable < KeyValuePair < string, object > > input, Dictionary < string, string > output) {
    foreach (KeyValuePair < string, object > item in input) {
        string key = item.Key;
        object value = item.Value;
        if (value is string) {
            output.Add (key, (string) value);
        } else if (value is Dictionary < string, object >) {
            Flatten (key, (IEnumerable < KeyValuePair < string, object > >) value, output);
        } else {
            throw new InvalidOperationException ();
        }
    }
    return;
}
----------------------------------------

private static void Flatten (string root, IEnumerable < KeyValuePair < string, object > > input, Dictionary < string, string > output) {
    foreach (KeyValuePair < string, object > item in input) {
        string segment = item.Key;
        string key = root + "." + segment;
        object value = item.Value;
        if (value is string) {
            string s = (string) value;
            output.Add (key, s);
        } else if (value is Dictionary < string, object >) {
            Dictionary < string, object > d = (Dictionary < string, object >) value;
            Flatten (key, d, output);
        } else {
            throw new InvalidOperationException ();
        }
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15676783_15677140_1_12
15676783_15826541_1_13
Title: "use object in c#.net like vb.net" 
----------------------------------------

public static void BUTTON_CAL (object sender, KeyEventArgs e) {
    if (sender is Form) {
        var frm = sender as Form;
        if (e.KeyCode == Keys.A && e.Modifiers == Keys.Control) {
            if (frm.AddButton.Enabled)
                frm.AddButton.PerformClick ();

            e.SuppressKeyPress = true;
        }
    }
}
----------------------------------------

public static void BUTTON_CAL (object sender, System.Windows.Forms.KeyEventArgs e) {
    var frm = sender as Form;
    if (e.KeyCode == Keys.A && e.Modifiers == Keys.Control) {
        if (frm.Controls ["AddButton"].Enabled == true) {
            ((Button) frm.Controls ["AddButton"]).PerformClick ();
        }
        e.SuppressKeyPress = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15680072_16076909_104_124
15680072_16076909_65_78
Title: Cloning a partial image from a different thread is very slow 
----------------------------------------

public Bitmap CloneImage (Rectangle section) {
    Bitmap bmp = new Bitmap (section.Width, section.Height);
    this.thisLock.EnterReadLock ();
    try {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.DrawImage (iImg, 0, 0, section, GraphicsUnit.Pixel);
        }}
    finally {
        this.thisLock.ExitReadLock ();
    }
    return bmp;
}
----------------------------------------

public Bitmap CloneImage () {
    Bitmap clone;
    this.thisLock.EnterReadLock ();
    try {
        clone = new Bitmap (iImg);
    }
    finally {
        this.thisLock.ExitReadLock ();
    }
    return clone;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15680072_16076909_104_124
15680072_16076909_80_97
Title: Cloning a partial image from a different thread is very slow 
----------------------------------------

public Bitmap CloneImage (Rectangle section) {
    Bitmap bmp = new Bitmap (section.Width, section.Height);
    this.thisLock.EnterReadLock ();
    try {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.DrawImage (iImg, 0, 0, section, GraphicsUnit.Pixel);
        }}
    finally {
        this.thisLock.ExitReadLock ();
    }
    return bmp;
}
----------------------------------------

internal Bitmap CloneImage (Rectangle rectangle, System.Drawing.Imaging.PixelFormat pixelFormat) {
    Bitmap clone;
    this.thisLock.EnterReadLock ();
    try {
        Stopwatch w = new Stopwatch ();
        w.Restart ();
        Debug.WriteLine ("clone " + w.ElapsedMilliseconds);
        clone = iImg.Clone (rectangle, pixelFormat);
        Debug.WriteLine ("new BMP " + w.ElapsedMilliseconds);
    }
    finally {
        this.thisLock.ExitReadLock ();
    }
    return clone;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15680072_16076909_65_78
15680072_16076909_80_97
Title: Cloning a partial image from a different thread is very slow 
----------------------------------------

public Bitmap CloneImage () {
    Bitmap clone;
    this.thisLock.EnterReadLock ();
    try {
        clone = new Bitmap (iImg);
    }
    finally {
        this.thisLock.ExitReadLock ();
    }
    return clone;
}
----------------------------------------

internal Bitmap CloneImage (Rectangle rectangle, System.Drawing.Imaging.PixelFormat pixelFormat) {
    Bitmap clone;
    this.thisLock.EnterReadLock ();
    try {
        Stopwatch w = new Stopwatch ();
        w.Restart ();
        Debug.WriteLine ("clone " + w.ElapsedMilliseconds);
        clone = iImg.Clone (rectangle, pixelFormat);
        Debug.WriteLine ("new BMP " + w.ElapsedMilliseconds);
    }
    finally {
        this.thisLock.ExitReadLock ();
    }
    return clone;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15719711_15719918_15_27
15719711_15719918_1_13
Title: C# recursively go through items in a List of T where T has a List of T 
----------------------------------------

static IEnumerable < T > NonRecursiveEnumerator < T > (T root) {
    Stack < T > Stack = new Stack < T > ();
    Stack.Push (root);
    do
        {
            root = Stack.Pop ();
            if (root is T)
                yield return (T) root;

            if (root is IEnumerable)
                foreach (var item in ((IEnumerable < T >) root).Reverse ())
                    Stack.Push (item);

        } while (Stack.Count > 0);
    yield break;
}
----------------------------------------

static IEnumerable < T > RecursiveEnumerator < T > (IEnumerable root) {
    if (root is T)
        yield return (T) root;

    foreach (var item in root) {
        if (item is IEnumerable) {
            foreach (var result in RecursiveEnumerator < T > ((IEnumerable) item)) {
                yield return result;
            }
        } else {
            if (item is T)
                yield return (T) item;

        }
    }
    yield break;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15724606_15724688_1_16
15724606_15724716_35_47
Title: Animating a short sequence 
----------------------------------------

public void Update (GameTime gametime) {
    if (currentFrame >= 0) {
        timer += gametime.ElapsedGameTime.Milliseconds;
        if (timer >= msBetweenFrames) {
            timer = 0;
            currentFrame ++;
            if (currentFramr >= numberOfFrames - 1)
                currentFrame = - 1;

            rect.X = CurrentFrame * width;
            rect.Y = 0;
        }
    }
}
----------------------------------------

public void Update () {
    if (isRunning) {
        ++ currentFrame;
        if (currentFrame == frameCount) {
            currentFrame = 0;
        }
        currentRectangle.X = frameSize.Width * currentFrame;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15733713_15733795_22_39
15733713_17377672_43_55
Title: Caliburn.micro with unity 
----------------------------------------

protected override object GetInstance (string key, Type service) {
    var serviceType = service;
    if (serviceType == null) {
        var typeName = Assembly.GetExecutingAssembly ().DefinedTypes.Where (x = > x.Name == key).Select (x = > x.FullName).FirstOrDefault ();
        if (typeName == null)
            throw new InvalidOperationException ("No matching type found");

        serviceType = Type.GetType (typeName);
    }
    return container.GetInstance (serviceType);
}
----------------------------------------

protected override object GetInstance (Type type, string name) {
    var result = default (object);
    if (name != null) {
        result = Container.Resolve (type, name);
    } else {
        result = Container.Resolve (type);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15745007_15745054_1_19
15745007_15745121_1_23
Title: LINQ Returning a set of results 
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;

        user.UserID = result.ID;
    }}
----------------------------------------

private static void GetUserData (string userName, UserSession userSession) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {UserActive = ur.active, UserROB = ur.ROB, UserID = ur.ID}).FirstOrDefault ();
    } if (result != null) {
        userSession.UserActive = result.UserActive;
        userSession.UserROB = result.UserROB;
        userSession.UserID = result.UserID;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15762458_15762576_1_23
15762458_15762615_1_21
Title: return multiple list c# 
----------------------------------------

[WebMethod] [ScriptMethod] public static List < GlobalClasses.ValueDateSummary > GetValueDateSummary () {
    Wrapper wrapper = new Wrapper ();
    List < GlobalClasses.ValueDateSummary > drList = new List < GlobalClasses.ValueDateSummary > ();
    foreach (DataRow row in dtValueDateSummary.Rows) {
        objSummary = new GlobalClasses.ValueDateSummary ();
        objSummary.fld1 = row ["1"].ToString ();
        objSummary.fld2 = row ["2"].ToString ();
        objSummary.fld3 = row ["3"].ToString ();
        objSummary.fld5 = row ["4"].ToString ();
        drList.Add (objSummary);
    }
    wrapper.list1 = drList;
    return new JavaScriptSerializer ().Serialize (wrapper);
}
----------------------------------------

public static List < List < GlobalClasses.ValueDateSummary > > GetValueDateSummary () {
    var allLists = new List < List < GlobalClasses.ValueDateSummary > > ();
    foreach (DataRow row in dtValueDateSummary.Rows) {
        objSummary = new GlobalClasses.ValueDateSummary ();
        objSummary.fld1 = row ["1"].ToString ();
        objSummary.fld2 = row ["2"].ToString ();
        objSummary.fld3 = row ["3"].ToString ();
        objSummary.fld5 = row ["4"].ToString ();
        drList.Add (objSummary);
    }
    allLists.Add (drList);
    return allLists;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15765739_32158840_20_39
15765739_32158840_40_54
Title: formatter deserialize gives: End of Stream encountered before parsing was completed 
----------------------------------------

public static T DeserializeFromBinaryFile < T > (string fileName) {
    T instance = default (T);
    FileStream fs = new FileStream (fileName, FileMode.Open);
    try {
        BinaryFormatter formatter = new BinaryFormatter ();
        instance = (T) formatter.Deserialize (fs);
    }
    catch (System.Exception ex) {
        Console.WriteLine (ex.Message);
    }
    finally {
        fs.Close ();
    }
    return instance;
}
----------------------------------------

public static void SerializeBinaryFile < T > (string fileName, T t) {
    try {
        using (FileStream fs = File.Open (fileName, FileMode.Create))
        {
            BinaryFormatter bf = new BinaryFormatter ();
            bf.Serialize (fs, t);
        }}
    catch (System.Exception ex) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15771359_15771445_1_24
15771359_15772153_1_40
Title: Array with a catch 
----------------------------------------

static void Main (string [] args) {
    double [] numbers = new double [10];
    for (int count = 0; count < 10; count += 1) {
        double num;
        Console.WriteLine ("Enter a number");
        while (! double.TryParse (Console.ReadLine (), out num)) {
            Console.WriteLine ("Not a valid number");
            Console.WriteLine ("Enter a number");
        }
        numbers [count] = num;
    }
    foreach (double item in numbers) {
        Console.WriteLine ("{0}", item);
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    double [] numbers = new double [10];
    int counter = 0;
    do
        {
            Console.WriteLine ("Enter valid number or press X to exit");
            var t = Console.ReadLine ();
            try {
                double temp = double.Parse (t);
                numbers [counter] = temp;
                counter ++;
            }
            catch (Exception) {
                if (t.Contains ("X")) {
                    break;
                }
            }
        } while (counter < 10);
    foreach (var number in numbers) {
        Console.Write ("\nEntered number: " + number);
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15786612_15786745_10_36
15786612_15788107_36_61
Title: Read text file at specific line 
----------------------------------------

static void Main (string [] args) {
    TextReader tr = new StreamReader ("\\test.txt");
    int NumberOfLines = 15;
    string [] ListLines = new string [NumberOfLines];
    for (int i = 1; i < NumberOfLines; i ++) {
        ListLines [i] = tr.ReadLine ();
    }
    Console.WriteLine (ListLines [5]);
    Console.WriteLine (ListLines [1]);
    Console.ReadLine ();
    tr.Close ();
}
----------------------------------------

private static void Main (string [] args) {
    Directory.CreateDirectory ("C:\\TEST");
    string testfile = "C:\\TEST\\TESTFILE.TXT";
    File.WriteAllText (testfile, "0\n1\n2\n3\n4\n5\n6\n7\n8\n9");
    var rng = new Random ();
    int trials = 100000;
    var counts = new int [10];
    for (int i = 0; i < trials; ++ i) {
        string line = RandomlyChooseLinesFromFile (testfile, 1, rng) [0];
        int index = int.Parse (line);
        ++ counts [index];
    }
    Console.WriteLine ("% times each line was chosen:\n");
    for (int i = 0; i < 10; ++ i) {
        Console.WriteLine ("{0} = {1}%", i, 100 * counts [i] / (double) trials);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15832646_15833341_1_10
15832646_15833421_1_10
Title: "Inputting a number beyond a range set by an array index out of range error" 
----------------------------------------

private static void getDiscount (int [] items, int [] discount, int itemsbought, ref int discountItem) {
    for (int i = 0; i < items.Length; i ++) {
        if (itemsbought > items [i])
            discountItem = discount [i];
        else
            break;

    }
}
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15841702_15841782_8_26
15841702_15841955_1_23
Title: How To Split a Generic Array 
----------------------------------------

public static IEnumerable < IEnumerable < T > > Split < T > (this IEnumerable < T > source, T separator) {
    List < T > currentList = new List < T > ();
    var comparer = EqualityComparer < T >.Default;
    foreach (var item in source) {
        if (comparer.Equals (item, separator)) {
            yield return new ReadOnlyCollection < T > (currentList);
            currentList = new List < T > ();
        } else {
            currentList.Add (item);
        }
    }
    yield return new ReadOnlyCollection < T > (currentList);
}
----------------------------------------

public static IEnumerable < T [] > Split < T > (this IEnumerable < T > source, T separator) {
    List < T > bucket = new List < T > ();
    var comparer = Comparer < T >.Default;
    foreach (var item in source) {
        if (comparer.Compare (item, separator) != 0) {
            bucket.Add (item);
            continue;
        }
        if (bucket.Any ()) {
            yield return bucket.ToArray ();
            bucket = new List < T > ();
        }
    }
    if (bucket.Any ())
        yield return bucket.ToArray ();

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15870215_15870570_227_235
15870215_15870570_272_284
Title: How to open an Excel file and view in WPF? 
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;

    if (disposing && this.stream != null)
        this.stream.Dispose ();

    this.disposed = true;
}
----------------------------------------

private void Dispose (bool disposing) {
    if (disposing)
        GC.SuppressFinalize (this);

    if (this.path == null)
        return;

    try {
        File.Delete (this.path);
    }
    catch {
        Trace.TraceWarning ("Can't delete file " + this.path);
    }
    this.path = null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15879171_15881270_1_16
15879171_15903095_1_31
Title: previous data losted when click on add button in GirdView in Asp.Net 
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    if (! Page.IsPostBack) {
        txtSODate.Text = DateTime.Now.Date.ToString ("dd/MM/yyyy");
        dtProductDet = new DataTable ("dtProductDet");
        dtProductDet.Columns.Add ("PID", typeof (int));
        dtProductDet.Columns.Add ("PName", typeof (string));
        dtProductDet.Columns.Add ("Quan", typeof (decimal));
        dtProductDet.Rows.Add (0, "", 0);
        GridView1.DataSource = dtProductDet;
        GridView1.DataBind ();
    }
}
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    if (! Page.IsPostBack) {
        txtSODate.Text = DateTime.Now.Date.ToString ("dd/MM/yyyy");
        dtProductDet = new DataTable ("dtProductDet");
        dtProductDet.Columns.Add ("PID", typeof (int));
        dtProductDet.Columns.Add ("PName", typeof (string));
        dtProductDet.Columns.Add ("Quan", typeof (decimal));
        dtProductDet.Rows.Add (0, "", 0);
        SetGridViewSource ();
    } else {
        DataTable dtPD = dtProductDet;
        DropDownList ddlProd = null;
        if (GridView1.Rows.Count > 0) {
            for (int i = 0; i < GridView1.Rows.Count; i ++) {
                ddlProd = (DropDownList) GridView1.Rows [i].Cells [gvci_Prod].FindControl ("ddlProduct");
                dtPD.Rows [i] ["PID"] = Convert.ToInt32 (ddlProd.SelectedItem.Value);
                dtPD.Rows [i] ["PName"] = ddlProd.SelectedItem.Text;
                dtPD.Rows [i] ["QUAN"] = ((TextBox) GridView1.Rows [i].Cells [gvci_Quan].FindControl ("txtQuan")).Text;
            }
        }
        dtProductDet = dtPD;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15909578_15909916_18_31
15909578_15948700_1_14
Title: Easiest way to change the behavior of one method without changing the class? 
----------------------------------------

protected Expression VisitConstant (ConstantExpression c) {
    if (c.Value != null && ! IsNumeric (c.Value.GetType ())) {
        NamedValueExpression nv;
        TypeAndValue tv = new TypeAndValue (c.Type, c.Value);
        if (! this.map.TryGetValue (tv, out nv)) {
            string name = "p" + (iParam ++);
            nv = new NamedValueExpression (name, this.language.TypeSystem.GetColumnType (c.Type), c);
            this.map.Add (tv, nv);
        }
        return nv;
    }
    return c;
}
----------------------------------------

protected override Expression VisitConstant (ConstantExpression c) {
    if (c.Value != null && ! IsNumeric (c.Value.GetType ())) {
        NamedValueExpression nv;
        TypeAndValue tv = new TypeAndValue (c.Type, c.Value, iParam);
        string name = "p" + (iParam ++);
        nv = new NamedValueExpression (name, this.language.TypeSystem.GetColumnType (c.Type), c);
        this.map.Add (tv, nv);
        return nv;
    }
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15916743_15916889_1_15
15916743_15916929_1_17
Title: TextBox LostFocus infinite loop 
----------------------------------------

private void txtICode_LostFocus (object sender, RoutedEventArgs e) {
    if (! NewData)
        return;

    if (String.IsNullOrEmpty (txtICode.Text))
        return;

    Item temp = new Item ();
    Item [] list = temp.Query (new object [] {Item.DataEnum.Item_Code}, new string [] {txtICode.Text});
    if (list.Length > 0) {
        System.Windows.Forms.MessageBox.Show ("This item code is already being used.", "Invalid information");
    }
}
----------------------------------------

private void txtICode_LostFocus (object sender, RoutedEventArgs e) {
    string inputText = txtICode.Text;
    if (string.IsNullOrEmpty (inputText) || ! NewData) {
        return;
    }
    Item temp = new Item ();
    Item [] list = temp.Query (new object [] {Item.DataEnum.Item_Code}, new string [] {inputText});
    if (list != null && list.Length > 0) {
        MessageBox.Show ("This item code is already being used.", "Invalidinformation");
        txtICode.Focus ();
        return;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15981840_15982041_1_18
15981840_15982138_24_36
Title: How to draw and move shapes using mouse in C# 
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
        this.Invalidate ();
    }
    if (e.Button == MouseButtons.Right) {
        rec.Location = new Point ((e.X - MouseDownLocation.X) + rec.Left, (e.Y - MouseDownLocation.Y) + rec.Top);
        MouseDownLocation = e.Location;
        this.Invalidate ();
    }
}
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15986473_15987581_1_25
15986473_34473837_1_39
Title: How do I implement word wrap? 
----------------------------------------

public string WrapText (SpriteFont spriteFont, string text, float maxLineWidth) {
    string [] words = text.Split (' ');
    StringBuilder sb = new StringBuilder ();
    float lineWidth = 0f;
    float spaceWidth = spriteFont.MeasureString (" ").X;
    foreach (string word in words) {
        Vector2 size = spriteFont.MeasureString (word);
        if (lineWidth + size.X < maxLineWidth) {
            sb.Append (word + " ");
            lineWidth += size.X + spaceWidth;
        } else {
            sb.Append ("\n" + word + " ");
            lineWidth = size.X + spaceWidth;
        }
    }
    return sb.ToString ();
}
----------------------------------------

public static string WrapText (SpriteFont font, string text, float maxLineWidth) {
    string [] words = text.Split (' ');
    StringBuilder sb = new StringBuilder ();
    float lineWidth = 0f;
    float spaceWidth = font.MeasureString (" ").X;
    foreach (string word in words) {
        Vector2 size = font.MeasureString (word);
        if (lineWidth + size.X < maxLineWidth) {
            sb.Append (word + " ");
            lineWidth += size.X + spaceWidth;
        } else {
            if (size.X > maxLineWidth) {
                if (sb.ToString () == "") {
                    sb.Append (WrapText (font, word.Insert (word.Length / 2, " ") + " ", maxLineWidth));
                } else {
                    sb.Append ("\n" + WrapText (font, word.Insert (word.Length / 2, " ") + " ", maxLineWidth));
                }
            } else {
                sb.Append ("\n" + word + " ");
                lineWidth = size.X + spaceWidth;
            }
        }
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15986473_15987581_1_25
15986473_39349224_1_46
Title: How do I implement word wrap? 
----------------------------------------

public string WrapText (SpriteFont spriteFont, string text, float maxLineWidth) {
    string [] words = text.Split (' ');
    StringBuilder sb = new StringBuilder ();
    float lineWidth = 0f;
    float spaceWidth = spriteFont.MeasureString (" ").X;
    foreach (string word in words) {
        Vector2 size = spriteFont.MeasureString (word);
        if (lineWidth + size.X < maxLineWidth) {
            sb.Append (word + " ");
            lineWidth += size.X + spaceWidth;
        } else {
            sb.Append ("\n" + word + " ");
            lineWidth = size.X + spaceWidth;
        }
    }
    return sb.ToString ();
}
----------------------------------------

public static string WrapText (SpriteFont font, string text, float maxLineWidth) {
    string [] words = text.Split (' ');
    StringBuilder sb = new StringBuilder ();
    float lineWidth = 0f;
    float spaceWidth = font.MeasureString (" ").X;
    foreach (string word in words) {
        Vector2 size = font.MeasureString (word);
        if (word.Contains ("\r")) {
            lineWidth = 0f;
            sb.Append ("\r \r");
        }
        if (lineWidth + size.X < maxLineWidth) {
            sb.Append (word + " ");
            lineWidth += size.X + spaceWidth;
        } else {
            if (size.X > maxLineWidth) {
                if (sb.ToString () == " ") {
                    sb.Append (WrapText (font, word.Insert (word.Length / 2, " ") + " ", maxLineWidth));
                } else {
                    sb.Append ("\n" + WrapText (font, word.Insert (word.Length / 2, " ") + " ", maxLineWidth));
                }
            } else {
                sb.Append ("\n" + word + " ");
                lineWidth = size.X + spaceWidth;
            }
        }
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1599363_1600052_1_19
1599363_1602371_1_38
Title: How to explicitly pass a program flow into the finally block in C#? 
----------------------------------------

XElement OrderStatus (q_order_status Request) {
    try {
        if (DoSomething () != 0) {
            return null;
        } else {
            return new XElement ("SomeTag", "SomeResponse");
        }
    }
    catch (Exception e) {
        return new XElement (e.tag, e.response);
    }
}
----------------------------------------

XElement OrderStatus (q_order_status Request) {
    XElement Response;
    int result = 0;
    string Message = "";
    try {
        result = DoSomething1 ();
        if (result != 0) {
            throw new DoSomethingException ("DoSomething1 has failed!");
        }
        result = DoSomething2 ();
        if (result != 0) {
            throw new DoSomethingException ("DoSomething2 has failed!");
        }
        result = DoSomething3 ();
        if (result != 0) {
            throw new DoSomethingException ("DoSomething3 has failed!");
        }
        Message = "All tests has been passed.";
    }
    catch (DoSomethingException e) {
        Message = e.Message;
    }
    catch (Exception e) {
        Message = e.Message;
    }
    finally {
        Response = new XElement ("SomeTag", Message);
    }
    return Response;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15995817_15995960_1_27
15995817_15996065_1_42
Title: Format text different way if TextLength = 13 using keypress 
----------------------------------------

private void txtFonecom_KeyPress (object sender, KeyPressEventArgs e) {
    if (e.KeyChar == (char) Keys.Back) {
    } else {
        if (txtFonecom.TextLength == 2) {
            txtFonecom.Text = txtFonecom.Text + " ";
            txtFonecom.SelectionStart = 3;
            txtFonecom.SelectionLength = 0;
        }
        if (txtFonecom.TextLength == 7) {
            txtFonecom.Text = txtFonecom.Text + "-";
            txtFonecom.SelectionStart = 8;
            txtFonecom.SelectionLength = 0;
        }
        if (txtFonecom.TextLength == 12) {
            int caretPos = txtFonecom.SelectionStart;
            txtFonecom.Text = txtFonecom.Text.Replace ("-", string.Empty).Insert (8, "-");
            txtFonecom.SelectionStart = caretPos;
        }
    }
}
----------------------------------------

void txtFonecom_KeyPress (object sender, KeyPressEventArgs e) {
    if (e.KeyChar != (char) Keys.Back) {
        if (txtFonecom.TextLength == 2) {
            txtFonecom.Text = txtFonecom.Text + " ";
            txtFonecom.SelectionStart = 3;
        }
        if (txtFonecom.TextLength >= 7 && txtFonecom.TextLength < 12) {
            if (txtFonecom.Text.Substring (2, 1) == " ") {
            } else {
                txtFonecom.Text = txtFonecom.Text.Replace (" ", String.Empty);
                txtFonecom.Text = txtFonecom.Text.Insert (2, " ");
            }
            txtFonecom.Text = txtFonecom.Text.Replace ("-", String.Empty);
            txtFonecom.Text = txtFonecom.Text.Insert (7, "-");
            txtFonecom.SelectionStart = txtFonecom.Text.Length;
        }
        if (txtFonecom.TextLength >= 12) {
            if (txtFonecom.Text.Substring (2, 1) == " ") {
            } else {
                txtFonecom.Text = txtFonecom.Text.Replace (" ", String.Empty);
                txtFonecom.Text = txtFonecom.Text.Insert (2, " ");
            }
            txtFonecom.Text = txtFonecom.Text.Replace ("-", String.Empty);
            txtFonecom.Text = txtFonecom.Text.Insert (8, "-");
            txtFonecom.SelectionStart = txtFonecom.Text.Length;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16003295_16005827_1_17
16003295_32800162_10_19
Title: Unity C# camera zoom script 
----------------------------------------

void Update () {
    if (Input.GetMouseButtonDown (0)) {
        Ray ray = Camera.mainCamera.ScreenPointToRay (Input.mousePosition);
        RaycastHit hit;
        float zoomDist = 15.0f;
        if (Physics.Raycast (ray, out hit, Mathf.Infinity)) {
            Ray r = new Ray (hit.point, hit.normal);
            Camera.mainCamera.transform.position = r.GetPoint (zoomDist);
        }
    }
}
----------------------------------------

void Update () {
    if (Input.GetMouseButtonDown (0)) {
        zoomChange = + 1;
    } else if (Input.GetMouseButtonDown (1)) {
        zoomChange = - 1;
    }
    if (zoomChange != 0) {
        zoomLevelSelected = Mathf.Clamp (zoomLevelSelected + zoomChange, 0, ZoomLevels.Length - 1);
        camera.fieldOfView = ZoomLevels [zoomLevelSelected];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16030665_16030764_1_15
16030665_16030861_1_16
Title: loading the main form given two forms in c sharp 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string username1 = "Richard";
    string password1 = "Peugeot";
    if (this.textBox1.Text == username1 && this.textBox2.Text == password1) {
        MessageBox.Show ("Welcome Richard!", "Welcome");
        Form1 frm = new Form1 ();
        frm.Show ();
        this.Hide ();
    } else
        MessageBox.Show ("Incorrect username or password", "Bad credentials");

}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string username1 = "Richard";
    string password1 = "Peugeot";
    if (this.textBox1.Text == username1 && this.textBox2.Text == password1) {
        MessageBox.Show ("Welcome Richard!", "Welcome");
        DialogResult = System.Windows.Forms.DialogResult.OK;
    } else {
        MessageBox.Show ("Incorrect username or password", "Bad credentials");
        DialogResult = System.Windows.Forms.DialogResult.No;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16064698_16064699_1_27
16064698_16065660_1_37
Title: Find unbounded file paths in string 
----------------------------------------

static void FindFilenamesInMessage (string message) {
    var matches = Regex.Matches (message, @"\w:\\", RegexOptions.Compiled);
    int length = message.Length;
    foreach (var index in matches.Cast < Match > ().Select (m = > m.Index).Reverse ()) {
        length = length - index;
        while (length > 0) {
            var subString = message.Substring (index, length);
            if (File.Exists (subString)) {
                length = index;
                break;
            }
            length --;
        }
    }
}
----------------------------------------

static void FindFilenamesInMessage (string message) {
    var matches = Regex.Matches (message, @"\w:\\", RegexOptions.Compiled);
    foreach (var idx in matches.Cast < Match > ().Select (m = > m.idx).Reverse ()) {
        int length = 3;
        var potentialPath = message.Substring (idx, length);
        var lastGoodPath = potentialPath;
        while (Directory.Exists (potentialPath)) {
            lastGoodPath = potentialPath;
            while (idx + length < message.Length && message [idx + length] != '\\')
                length ++;

            length ++;
            if (idx + length >= message.Length)
                length = (message.Length - idx) - 1;

            potentialPath = message.Substring (idx, length);
        }
        potentialPath = message.Substring (idx);
        foreach (var file in Directory.EnumerateFiles (lastGoodPath).OrderByDescending (s = > s.Length)) {
            if (! potentialPath.StartsWith (file))
                continue;

            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16080196_16080371_1_36
16080196_16080428_1_30
Title: Convert Linq to regular function 
----------------------------------------

public NetworkAdapter [] GetAll () {
    List < NetworkAdapter > list = new List < NetworkAdapter > ();
    foreach (NetworkInterface adapter in NetworkInterface.GetAllNetworkInterfaces ())
        foreach (UnicastIPAddressInformation uniCast in adapter.GetIPProperties ().UnicastAddresses) {
            if (! System.Net.IPAddress.IsLoopback (uniCast.Address) && uniCast.Address.AddressFamily != AddressFamily.InterNetworkV6) {
                StringBuilder gatewayIPAddresses = new StringBuilder ();
                string gatewayIPAddressesDisplay = string.Empty;
                foreach (var address in adapter.GetIPProperties ().GatewayAddresses) {
                    gatewayIPAddresses.Append (address.Address);
                    gatewayIPAddresses.Append (" ");
                }
                if (gatewayIPAddresses.Length > 0) {
                    gatewayIPAddressesDisplay = gatewayIPAddresses.ToString ().TrimEnd (' ');
                }
                list.Add (new NetworkAdapter () {Name = adapter.Name, ID = adapter.Id, Description = adapter.Description, IPAddress = uniCast.Address.ToString (), NetworkInterfaceType = adapter.NetworkInterfaceType.ToString (), Speed = adapter.Speed.ToString ("#,##0"), MacAddress = getMacAddress (adapter.GetPhysicalAddress ().ToString ()), gatewayIpAddress = gatewayIPAddressesDisplay});
            }
        }

    return list.ToArray ();
}
----------------------------------------

public NetworkAdapter [] GetAll () {
    var networkAdapters = new List < NetworkAdapter > ();
    foreach (NetworkInterface adapter in NetworkInterface.GetAllNetworkInterfaces ()) {
        foreach (UnicastIPAddressInformation uniCast in adapter.GetIPProperties ().UnicastAddresses) {
            if (! System.Net.IPAddress.IsLoopback (uniCast.Address) && uniCast.Address.AddressFamily != AddressFamily.InterNetworkV6) {
                GatewayIPAddressInformation lastGatewayAddress = adapter.GetIPProperties ().GatewayAddresses.LastOrDefault ();
                networkAdapters.Add (new NetworkAdapter () {Name = adapter.Name, ID = adapter.Id, Description = adapter.Description, IPAddress = uniCast.Address.ToString (), NetworkInterfaceType = adapter.NetworkInterfaceType.ToString (), Speed = adapter.Speed.ToString ("#,##0"), MacAddress = getMacAddress (adapter.GetPhysicalAddress ().ToString ()), gatewayIpAddress = string.Join (" ", adapter.GetIPProperties ().GatewayAddresses.Select (a = > a.Address))});
            }
        }
    }
    return networkAdapters.ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1608543_14187275_131_211
1608543_24401521_111_160
Title: WebBrowser control caching issue 
----------------------------------------

public static void ClearCache () {
    const int CACHEGROUP_SEARCH_ALL = 0x0;
    const int CACHEGROUP_FLAG_FLUSHURL_ONDELETE = 0x2;
    const int ERROR_FILE_NOT_FOUND = 0x2;
    const int ERROR_NO_MORE_ITEMS = 259;
    long groupId = 0;
    int cacheEntryInfoBufferSizeInitial = 0;
    int cacheEntryInfoBufferSize = 0;
    IntPtr cacheEntryInfoBuffer = IntPtr.Zero;
    INTERNET_CACHE_ENTRY_INFOA internetCacheEntry;
    IntPtr enumHandle = IntPtr.Zero;
    bool returnValue = false;
    enumHandle = FindFirstUrlCacheGroup (0, CACHEGROUP_SEARCH_ALL, IntPtr.Zero, 0, ref groupId, IntPtr.Zero);
    if (enumHandle != IntPtr.Zero && ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error ())
        return;

    while (true) {
        if (ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error () || ERROR_FILE_NOT_FOUND == Marshal.GetLastWin32Error ()) {
            break;
        }
        returnValue = DeleteUrlCacheGroup (groupId, CACHEGROUP_FLAG_FLUSHURL_ONDELETE, IntPtr.Zero);
        if (! returnValue && ERROR_FILE_NOT_FOUND == Marshal.GetLastWin32Error ()) {
            returnValue = FindNextUrlCacheGroup (enumHandle, ref groupId, IntPtr.Zero);
        }
        if (! returnValue && (ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error () || ERROR_FILE_NOT_FOUND == Marshal.GetLastWin32Error ()))
            break;

    }
    enumHandle = FindFirstUrlCacheEntry (null, IntPtr.Zero, ref cacheEntryInfoBufferSizeInitial);
    if (enumHandle != IntPtr.Zero && ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error ())
        return;

    cacheEntryInfoBufferSize = cacheEntryInfoBufferSizeInitial;
    cacheEntryInfoBuffer = Marshal.AllocHGlobal (cacheEntryInfoBufferSize);
    enumHandle = FindFirstUrlCacheEntry (null, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
    while (true) {
        internetCacheEntry = (INTERNET_CACHE_ENTRY_INFOA) Marshal.PtrToStructure (cacheEntryInfoBuffer, typeof (INTERNET_CACHE_ENTRY_INFOA));
        if (ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error ()) {
            break;
        }
        cacheEntryInfoBufferSizeInitial = cacheEntryInfoBufferSize;
        returnValue = DeleteUrlCacheEntry (internetCacheEntry.lpszSourceUrlName);
        if (! returnValue) {
            returnValue = FindNextUrlCacheEntry (enumHandle, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
        }
        if (! returnValue && ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error ()) {
            break;
        }
        if (! returnValue && cacheEntryInfoBufferSizeInitial > cacheEntryInfoBufferSize) {
            cacheEntryInfoBufferSize = cacheEntryInfoBufferSizeInitial;
            cacheEntryInfoBuffer = Marshal.ReAllocHGlobal (cacheEntryInfoBuffer, (IntPtr) cacheEntryInfoBufferSize);
            returnValue = FindNextUrlCacheEntry (enumHandle, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
        }
    }
    Marshal.FreeHGlobal (cacheEntryInfoBuffer);
}
----------------------------------------

public static void ClearCache () {
    const int CACHEGROUP_SEARCH_ALL = 0x0;
    const int CACHEGROUP_FLAG_FLUSHURL_ONDELETE = 0x2;
    const int ERROR_INSUFFICIENT_BUFFER = 0x7A;
    long groupId = 0;
    IntPtr enumHandle = FindFirstUrlCacheGroup (0, CACHEGROUP_SEARCH_ALL, IntPtr.Zero, 0, ref groupId, IntPtr.Zero);
    if (enumHandle != IntPtr.Zero) {
        bool more;
        do
            {
                DeleteUrlCacheGroup (groupId, CACHEGROUP_FLAG_FLUSHURL_ONDELETE, IntPtr.Zero);
                more = FindNextUrlCacheGroup (enumHandle, ref groupId, IntPtr.Zero);
            } while (more);
    }
    int cacheEntryInfoBufferSizeInitial = 0;
    FindFirstUrlCacheEntry (null, IntPtr.Zero, ref cacheEntryInfoBufferSizeInitial);
    if (Marshal.GetLastWin32Error () == ERROR_INSUFFICIENT_BUFFER) {
        int cacheEntryInfoBufferSize = cacheEntryInfoBufferSizeInitial;
        IntPtr cacheEntryInfoBuffer = Marshal.AllocHGlobal (cacheEntryInfoBufferSize);
        enumHandle = FindFirstUrlCacheEntry (null, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
        if (enumHandle != IntPtr.Zero) {
            bool more;
            do
                {
                    INTERNET_CACHE_ENTRY_INFOA internetCacheEntry = (INTERNET_CACHE_ENTRY_INFOA) Marshal.PtrToStructure (cacheEntryInfoBuffer, typeof (INTERNET_CACHE_ENTRY_INFOA));
                    cacheEntryInfoBufferSizeInitial = cacheEntryInfoBufferSize;
                    DeleteUrlCacheEntry (internetCacheEntry.lpszSourceUrlName);
                    more = FindNextUrlCacheEntry (enumHandle, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
                    if (! more && Marshal.GetLastWin32Error () == ERROR_INSUFFICIENT_BUFFER) {
                        cacheEntryInfoBufferSize = cacheEntryInfoBufferSizeInitial;
                        cacheEntryInfoBuffer = Marshal.ReAllocHGlobal (cacheEntryInfoBuffer, (IntPtr) cacheEntryInfoBufferSize);
                        more = FindNextUrlCacheEntry (enumHandle, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
                    }
                } while (more);
        }
        Marshal.FreeHGlobal (cacheEntryInfoBuffer);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1608543_2366456_135_215
1608543_24401521_111_160
Title: WebBrowser control caching issue 
----------------------------------------

public static void ClearCache () {
    const int CACHEGROUP_SEARCH_ALL = 0x0;
    const int CACHEGROUP_FLAG_FLUSHURL_ONDELETE = 0x2;
    const int ERROR_FILE_NOT_FOUND = 0x2;
    const int ERROR_NO_MORE_ITEMS = 259;
    long groupId = 0;
    int cacheEntryInfoBufferSizeInitial = 0;
    int cacheEntryInfoBufferSize = 0;
    IntPtr cacheEntryInfoBuffer = IntPtr.Zero;
    INTERNET_CACHE_ENTRY_INFOA internetCacheEntry;
    IntPtr enumHandle = IntPtr.Zero;
    bool returnValue = false;
    enumHandle = FindFirstUrlCacheGroup (0, CACHEGROUP_SEARCH_ALL, IntPtr.Zero, 0, ref groupId, IntPtr.Zero);
    if (enumHandle != IntPtr.Zero && ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error ())
        return;

    while (true) {
        if (ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error () || ERROR_FILE_NOT_FOUND == Marshal.GetLastWin32Error ()) {
            break;
        }
        returnValue = DeleteUrlCacheGroup (groupId, CACHEGROUP_FLAG_FLUSHURL_ONDELETE, IntPtr.Zero);
        if (! returnValue && ERROR_FILE_NOT_FOUND == Marshal.GetLastWin32Error ()) {
            returnValue = FindNextUrlCacheGroup (enumHandle, ref groupId, IntPtr.Zero);
        }
        if (! returnValue && (ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error () || ERROR_FILE_NOT_FOUND == Marshal.GetLastWin32Error ()))
            break;

    }
    enumHandle = FindFirstUrlCacheEntry (null, IntPtr.Zero, ref cacheEntryInfoBufferSizeInitial);
    if (enumHandle != IntPtr.Zero && ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error ())
        return;

    cacheEntryInfoBufferSize = cacheEntryInfoBufferSizeInitial;
    cacheEntryInfoBuffer = Marshal.AllocHGlobal (cacheEntryInfoBufferSize);
    enumHandle = FindFirstUrlCacheEntry (null, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
    while (true) {
        internetCacheEntry = (INTERNET_CACHE_ENTRY_INFOA) Marshal.PtrToStructure (cacheEntryInfoBuffer, typeof (INTERNET_CACHE_ENTRY_INFOA));
        if (ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error ()) {
            break;
        }
        cacheEntryInfoBufferSizeInitial = cacheEntryInfoBufferSize;
        returnValue = DeleteUrlCacheEntry (internetCacheEntry.lpszSourceUrlName);
        if (! returnValue) {
            returnValue = FindNextUrlCacheEntry (enumHandle, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
        }
        if (! returnValue && ERROR_NO_MORE_ITEMS == Marshal.GetLastWin32Error ()) {
            break;
        }
        if (! returnValue && cacheEntryInfoBufferSizeInitial > cacheEntryInfoBufferSize) {
            cacheEntryInfoBufferSize = cacheEntryInfoBufferSizeInitial;
            cacheEntryInfoBuffer = Marshal.ReAllocHGlobal (cacheEntryInfoBuffer, (IntPtr) cacheEntryInfoBufferSize);
            returnValue = FindNextUrlCacheEntry (enumHandle, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
        }
    }
    Marshal.FreeHGlobal (cacheEntryInfoBuffer);
}
----------------------------------------

public static void ClearCache () {
    const int CACHEGROUP_SEARCH_ALL = 0x0;
    const int CACHEGROUP_FLAG_FLUSHURL_ONDELETE = 0x2;
    const int ERROR_INSUFFICIENT_BUFFER = 0x7A;
    long groupId = 0;
    IntPtr enumHandle = FindFirstUrlCacheGroup (0, CACHEGROUP_SEARCH_ALL, IntPtr.Zero, 0, ref groupId, IntPtr.Zero);
    if (enumHandle != IntPtr.Zero) {
        bool more;
        do
            {
                DeleteUrlCacheGroup (groupId, CACHEGROUP_FLAG_FLUSHURL_ONDELETE, IntPtr.Zero);
                more = FindNextUrlCacheGroup (enumHandle, ref groupId, IntPtr.Zero);
            } while (more);
    }
    int cacheEntryInfoBufferSizeInitial = 0;
    FindFirstUrlCacheEntry (null, IntPtr.Zero, ref cacheEntryInfoBufferSizeInitial);
    if (Marshal.GetLastWin32Error () == ERROR_INSUFFICIENT_BUFFER) {
        int cacheEntryInfoBufferSize = cacheEntryInfoBufferSizeInitial;
        IntPtr cacheEntryInfoBuffer = Marshal.AllocHGlobal (cacheEntryInfoBufferSize);
        enumHandle = FindFirstUrlCacheEntry (null, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
        if (enumHandle != IntPtr.Zero) {
            bool more;
            do
                {
                    INTERNET_CACHE_ENTRY_INFOA internetCacheEntry = (INTERNET_CACHE_ENTRY_INFOA) Marshal.PtrToStructure (cacheEntryInfoBuffer, typeof (INTERNET_CACHE_ENTRY_INFOA));
                    cacheEntryInfoBufferSizeInitial = cacheEntryInfoBufferSize;
                    DeleteUrlCacheEntry (internetCacheEntry.lpszSourceUrlName);
                    more = FindNextUrlCacheEntry (enumHandle, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
                    if (! more && Marshal.GetLastWin32Error () == ERROR_INSUFFICIENT_BUFFER) {
                        cacheEntryInfoBufferSize = cacheEntryInfoBufferSizeInitial;
                        cacheEntryInfoBuffer = Marshal.ReAllocHGlobal (cacheEntryInfoBuffer, (IntPtr) cacheEntryInfoBufferSize);
                        more = FindNextUrlCacheEntry (enumHandle, cacheEntryInfoBuffer, ref cacheEntryInfoBufferSizeInitial);
                    }
                } while (more);
        }
        Marshal.FreeHGlobal (cacheEntryInfoBuffer);
    }
}
----------------------------------------

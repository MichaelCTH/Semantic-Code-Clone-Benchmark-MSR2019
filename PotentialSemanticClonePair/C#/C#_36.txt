$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6853845_6855265_11_23
6853845_6855265_25_37
Title: About the performance of c# delegate creation 
----------------------------------------

public void Subscribe < TMessage > (Action < TMessage > handler) {
    if (subscribers.ContainsKey (typeof (TMessage))) {
        var handlers = subscribers [typeof (TMessage)];
        handlers.Add (handler);
    } else {
        var handlers = new List < Object > {handler};
        subscribers [typeof (TMessage)] = handlers;
    }
}
----------------------------------------

public void Unsubscribe < TMessage > (Action < TMessage > handler) {
    if (subscribers.ContainsKey (typeof (TMessage))) {
        var handlers = subscribers [typeof (TMessage)];
        handlers.Remove (handler);
        if (handlers.Count == 0) {
            subscribers.Remove (typeof (TMessage));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6859528_14298805_103_122
6859528_14298805_142_161
Title: is it possible to change the default layout forms from the toolbox in Visual studio? 
----------------------------------------

protected override void PaintHook () {
    G.Clear (ButtonColor);
    G.SmoothingMode = SmoothingMode.AntiAlias;
    switch (State) {
        case MouseState.None :
            G.DrawEllipse (Cross, new Rectangle (Width - 20, 4, 15, 15));
            break;
        case MouseState.Over :
            G.DrawEllipse (Cross, new Rectangle (Width - 20, 4, 15, 15));
            G.FillEllipse (new SolidBrush (Color.White), new Rectangle (Width - 17, 7, 9, 9));
            break;
        case MouseState.Down :
            G.DrawEllipse (Cross, new Rectangle (Width - 20, 4, 15, 15));
            G.FillEllipse (new SolidBrush (Color.White), new Rectangle (Width - 16, 8, 7, 7));
            Environment.Exit (0);
            break;
    }
}
----------------------------------------

protected override void PaintHook () {
    G.Clear (ButtonColor);
    G.SmoothingMode = SmoothingMode.AntiAlias;
    switch (State) {
        case MouseState.None :
            G.DrawLine (Min, new Point (Width - 44, 12), new Point (20, 12));
            break;
        case MouseState.Over :
            G.DrawLine (Min, new Point (Width - 44, 6), new Point (20, 6));
            G.DrawLine (Min, new Point (Width - 44, 12), new Point (20, 12));
            G.DrawLine (Min, new Point (Width - 44, 18), new Point (20, 18));
            break;
        case MouseState.Down :
            G.DrawLine (Min, new Point (Width - 44, 12), new Point (20, 12));
            this.FindForm ().WindowState = FormWindowState.Minimized;
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6859528_14298805_103_122
6859528_14298805_57_85
Title: is it possible to change the default layout forms from the toolbox in Visual studio? 
----------------------------------------

protected override void PaintHook () {
    G.Clear (ButtonColor);
    G.SmoothingMode = SmoothingMode.AntiAlias;
    switch (State) {
        case MouseState.None :
            G.DrawEllipse (Cross, new Rectangle (Width - 20, 4, 15, 15));
            break;
        case MouseState.Over :
            G.DrawEllipse (Cross, new Rectangle (Width - 20, 4, 15, 15));
            G.FillEllipse (new SolidBrush (Color.White), new Rectangle (Width - 17, 7, 9, 9));
            break;
        case MouseState.Down :
            G.DrawEllipse (Cross, new Rectangle (Width - 20, 4, 15, 15));
            G.FillEllipse (new SolidBrush (Color.White), new Rectangle (Width - 16, 8, 7, 7));
            Environment.Exit (0);
            break;
    }
}
----------------------------------------

protected override void PaintHook () {
    G.Clear (Border);
    G.FillRectangle (new SolidBrush (BackColor), new Rectangle (0, 36, Width, Height - 36));
    G.FillRectangle (new SolidBrush (Color.White), new Rectangle (0, Height - 20, Width, Height));
    G.DrawString (FindForm ().Text, Font, TextBrush, new Point (35, 9));
    G.DrawIcon (FindForm ().Icon, new Rectangle (10, 10, 16, 16));
    G.DrawString (_UnderInfo, Font, new SolidBrush (Color.DimGray), new Point (5, Height - 19));
    WindowStateClose WSC = new WindowStateClose ();
    WSC.Location = new Point (Width - 21, 0);
    WSC.Size = new Size (20, 20);
    Controls.Add (WSC);
    WindowStateMin WSMa = new WindowStateMin ();
    WSMa.Location = new Point (Width - 59, 0);
    WSMa.Size = new Size (34, 23);
    Controls.Add (WSMa);
    Size SetSize = new Size (Width, Height);
    MinimumSize = SetSize;
    MaximumSize = SetSize;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6859528_14298805_142_161
6859528_14298805_57_85
Title: is it possible to change the default layout forms from the toolbox in Visual studio? 
----------------------------------------

protected override void PaintHook () {
    G.Clear (ButtonColor);
    G.SmoothingMode = SmoothingMode.AntiAlias;
    switch (State) {
        case MouseState.None :
            G.DrawLine (Min, new Point (Width - 44, 12), new Point (20, 12));
            break;
        case MouseState.Over :
            G.DrawLine (Min, new Point (Width - 44, 6), new Point (20, 6));
            G.DrawLine (Min, new Point (Width - 44, 12), new Point (20, 12));
            G.DrawLine (Min, new Point (Width - 44, 18), new Point (20, 18));
            break;
        case MouseState.Down :
            G.DrawLine (Min, new Point (Width - 44, 12), new Point (20, 12));
            this.FindForm ().WindowState = FormWindowState.Minimized;
            break;
    }
}
----------------------------------------

protected override void PaintHook () {
    G.Clear (Border);
    G.FillRectangle (new SolidBrush (BackColor), new Rectangle (0, 36, Width, Height - 36));
    G.FillRectangle (new SolidBrush (Color.White), new Rectangle (0, Height - 20, Width, Height));
    G.DrawString (FindForm ().Text, Font, TextBrush, new Point (35, 9));
    G.DrawIcon (FindForm ().Icon, new Rectangle (10, 10, 16, 16));
    G.DrawString (_UnderInfo, Font, new SolidBrush (Color.DimGray), new Point (5, Height - 19));
    WindowStateClose WSC = new WindowStateClose ();
    WSC.Location = new Point (Width - 21, 0);
    WSC.Size = new Size (20, 20);
    Controls.Add (WSC);
    WindowStateMin WSMa = new WindowStateMin ();
    WSMa.Location = new Point (Width - 59, 0);
    WSMa.Size = new Size (34, 23);
    Controls.Add (WSMa);
    Size SetSize = new Size (Width, Height);
    MinimumSize = SetSize;
    MaximumSize = SetSize;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6870998_6871151_1_17
6870998_6871252_1_16
Title: How To Return Null From The Method Where We Return Data Table C# Web Application 
----------------------------------------

public DataTable CostOfKilowat () {
    try {
        DataTable CostDT = new DataTable ();
        int Dollar = Convert.ToInt32 (txtCommission.Text);
        CostDT = GetProducts ();
        DataTable Costtable = GetCostRate (CostDT, Dollar, "DATE,MTU,POWER,COST,VOLTAGE,PERUNITCOST", "DATE", "Group by ");
        return Costtable;
    }
    catch (Exception ex) {
        String script = "<script>alert('" + ex.Message + "')</script>";
        Page.RegisterStartupScript ("script", script);
        return null;
    }
}
----------------------------------------

public DataTable CostOfKilowat () {
    DataTable Costtable = null;
    try {
        int Dollar = Convert.ToInt32 (txtCommission.Text);
        DataTable CostDT = GetProducts ();
        Costtable = GetCostRate (CostDT, Dollar, "DATE,MTU,POWER,COST,VOLTAGE,PERUNITCOST", "DATE", "Group by ");
    }
    catch {
        String script = "<script>alert('Enter Valid Cost')</script>";
        Page.RegisterStartupScript ("script", script);
    }
    return Costtable;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6913610_16672350_114_156
6913610_7117546_9_38
Title: Does Dapper support SQL 2008 Table-Valued Parameters 2? 
----------------------------------------

public void AddParameters (IDbCommand command) {
    var sqlCommand = (SqlCommand) command;
    sqlCommand.CommandType = CommandType.StoredProcedure;
    List < Microsoft.SqlServer.Server.SqlDataRecord > tableType_list = new List < Microsoft.SqlServer.Server.SqlDataRecord > ();
    var first = MyList.FirstOrDefault ();
    if (null != first) {
        var lstDefinition = new List < Microsoft.SqlServer.Server.SqlMetaData > ();
        int i = 0;
        foreach (var prop in first.GetType ().GetProperties ()) {
            lstDefinition.Add (new Microsoft.SqlServer.Server.SqlMetaData (prop.Name, GetSqlDBType (prop.PropertyType)));
            ordinals.Add (prop.Name, i ++);
        }
        foreach (var l in MyList) {
            Microsoft.SqlServer.Server.SqlDataRecord rec = new Microsoft.SqlServer.Server.SqlDataRecord (lstDefinition.ToArray ());
            foreach (var prop in first.GetType ().GetProperties ()) {
                SetRecordValue (ref rec, prop.Name, prop.GetValue (l), prop.GetType ());
            }
            tableType_list.Add (rec);
        }
    }
    var p = sqlCommand.Parameters.Add ("@" + ParameterName.TrimStart ('@'), SqlDbType.Structured);
    p.Direction = ParameterDirection.Input;
    p.TypeName = TableTypeName;
    if (null != first)
        p.Value = tableType_list;
    else
        p.Value = DBNull.Value;

}
----------------------------------------

public void AddParameters (IDbCommand command) {
    var sqlCommand = (SqlCommand) command;
    sqlCommand.CommandType = CommandType.StoredProcedure;
    List < Microsoft.SqlServer.Server.SqlDataRecord > number_list = new List < Microsoft.SqlServer.Server.SqlDataRecord > ();
    Microsoft.SqlServer.Server.SqlMetaData [] tvp_definition = {new Microsoft.SqlServer.Server.SqlMetaData ("n", SqlDbType.Int), new Microsoft.SqlServer.Server.SqlMetaData ("n2", SqlDbType.Int)};
    foreach (int n in tuples) {
        Microsoft.SqlServer.Server.SqlDataRecord rec = new Microsoft.SqlServer.Server.SqlDataRecord (tvp_definition);
        rec.SetInt32 (0, n.Item1);
        rec.SetInt32 (1, n.Item2);
        number_list.Add (rec);
    }
    var p = sqlCommand.Parameters.Add ("ints", SqlDbType.Structured);
    p.Direction = ParameterDirection.Input;
    p.TypeName = "int_tuple_list_type";
    p.Value = number_list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6914646_6989426_1_33
6914646_7273941_1_55
Title: Different Methods of Performing FloodFill 
----------------------------------------

private void RevisedQueueFloodFill (Point node, Color targetColor, Color replaceColor) {
    if (pixels [node.X, node.Y].CellColor != targetColor)
        return;

    Queue < Point > Q = new Queue < Point > ();
    Q.Enqueue (node);
    while (Q.Count != 0) {
        Point n = Q.Dequeue ();
        if (pixels [n.X, n.Y].CellColor == targetColor) {
            int y = n.Y;
            int w = n.X;
            int e = n.X;
            while (w > 0 && pixels [w - 1, y].CellColor == targetColor)
                w --;

            while (e < CANVAS_SIZE - 1 && pixels [e + 1, y].CellColor == targetColor)
                e ++;

            for (int x = w; x <= e; x ++) {
                pixels [x, y].CellColor = replaceColor;
                if (y > 0 && pixels [x, y - 1].CellColor == targetColor) {
                    Q.Enqueue (new Point (x, y - 1));
                }
                if (y < CANVAS_SIZE - 1 && pixels [x, y + 1].CellColor == targetColor) {
                    Q.Enqueue (new Point (x, y + 1));
                }
            }
        }
    }
}
----------------------------------------

private void RevisedQueueFloodFill (Point node, Color replaceColor) {
    Color targetColor = pixels [node.X, node.Y].CellColor;
    if (targetColor == replaceColor)
        return;

    Queue < Point > q = new Queue < Point > ();
    q.Enqueue (node);
    Point n, t, u;
    while (q.Count > 0) {
        n = q.Dequeue ();
        if (pixels [n.X, n.Y].CellColor == targetColor) {
            t = n;
            while ((t.X > 0) && (pixels [t.X, t.Y].CellColor == targetColor)) {
                pixels [t.X, t.Y].CellColor = replaceColor;
                t.X --;
            }
            int XMin = t.X + 1;
            t = n;
            t.X ++;
            while ((t.X < CANVAS_SIZE - 1) && (pixels [t.X, t.Y].CellColor == targetColor)) {
                pixels [t.X, t.Y].CellColor = replaceColor;
                t.X ++;
            }
            int XMax = t.X - 1;
            t = n;
            t.Y ++;
            u = n;
            u.Y --;
            for (int i = XMin; i <= XMax; i ++) {
                t.X = i;
                u.X = i;
                if ((t.Y < CANVAS_SIZE - 1) && (pixels [t.X, t.Y].CellColor == targetColor))
                    q.Enqueue (t);

                if ((u.Y >= 0) && (pixels [u.X, u.Y].CellColor == targetColor))
                    q.Enqueue (u);

            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6914993_6915438_30_40
6914993_6915438_42_51
Title: Writing multiple CSV files programatically 
----------------------------------------

public static void WriteCsvFile (DataTable table, int maxCount, string fileName) {
    if (table.Rows.Count <= maxCount)
        WriteCsvFile (table, maxCount, fileName, 0);
    else
        for (int i = 0; i < (table.Rows.Count / maxCount + 1); ++ i) {
            var partFileName = Path.Combine (Path.GetDirectoryName (fileName), string.Format ("{0}-part{1}{2}", Path.GetFileNameWithoutExtension (fileName), i + 1, Path.GetExtension (fileName)));
            WriteCsvFile (table, maxCount, partFileName, i * maxCount);
        }

}
----------------------------------------

public static void WriteCsvFile (DataTable table, int maxCount, string fileName, int startIndex) {
    using (var fs = File.Create (fileName))
    using (var w = new StreamWriter (fs, Encoding.ASCII))
    {
        for (int i = startIndex; i < Math.Min (table.Rows.Count, startIndex + maxCount); i ++)
            w.WriteLine (String.Join (",", ToStringArray (table.Rows [i])));

        w.Flush ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6915049_6915203_1_51
6915049_6915348_3_40
Title: Most efficient way to return file list over multiple folders 
----------------------------------------

public List < FileInfo > ProcessDir (string sourceDir, String userName) {
    List < FileInfo > fileInfoList = new List < FileInfo > ();
    try {
        string userNameFirstLetter = userName.First ().ToString ();
        DirectoryInfo di = new DirectoryInfo (sourceDir);
        foreach (FileInfo fi in di.GetFiles ()) {
            if (fi.Extension == ".xls" || fi.Extension == ".xlsx" || fi.Extension == ".pdf") {
                if (fi.Name.Contains (userName)) {
                    if (fi.Name.Contains ("X")) {
                        if (fi.Name.First ().ToString ().Equals (userNameFirstLetter)) {
                            if (fi.Name.Split (Convert.ToChar ("X")) [0].Equals (userName)) {
                                fileInfoList.Add (fi);
                            }
                        }
                    }
                }
            }
        }
        string [] subdirEntries = Directory.GetDirectories (sourceDir);
        foreach (string subdir in subdirEntries) {
            if ((File.GetAttributes (subdir) & FileAttributes.ReparsePoint) != FileAttributes.ReparsePoint) {
                fileInfoList.AddRange (ProcessDir (subdir, userName));
            }
        }
    }
    catch (DirectoryNotFoundException exp) {
        throw new DirectoryNotFoundException ("Directory not found " + exp.Message);
    }
    catch (IOException exp) {
        throw new IOException ("The Process cannot access the file because it is in use by another process " + exp.Message);
    }
    return fileInfoList;
}
----------------------------------------

private static void ProcessDir (string sourceDir, String userName, List < FileInfo > fileInfoList) {
    try {
        string userNameFirstLetter = userName.First ().ToString ();
        DirectoryInfo di = new DirectoryInfo (sourceDir);
        foreach (FileInfo fi in di.GetFiles ()) {
            if ((fi.Extension == ".xls" || fi.Extension == ".xlsx" || fi.Extension == ".pdf") && fi.Name.Contains (userName) && fi.Name.Contains ("X") && fi.Name.First ().ToString ().Equals (userNameFirstLetter) && fi.Name.Split (Convert.ToChar ("X")) [0].Equals (userName)) {
                fileInfoList.Add (fi);
            }
        }
        string [] subdirEntries = Directory.GetDirectories (sourceDir);
        foreach (string subdir in subdirEntries) {
            if ((File.GetAttributes (subdir) & FileAttributes.ReparsePoint) != FileAttributes.ReparsePoint) {
                ProcessDir (subdir, userName, fileInfoList);
            }
        }
    }
    catch (DirectoryNotFoundException exp) {
        throw new DirectoryNotFoundException ("Directory not found " + exp.Message);
    }
    catch (IOException exp) {
        throw new IOException ("The Process cannot access the file because it is in use by another process " + exp.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6934424_6934523_1_14
6934424_6934633_1_12
Title: Reference to IEnumerable of XElements 
----------------------------------------

public IEnumerable < XElement > GetRevisedVariationOverTime (IEnumerable < XElement > items) {
    foreach (XElement item in items) {
        if (sampleSize < RequiredSampleSize) {
            item.Attribute ("Status").Value = DiagStatus.WARNING.ToString ();
            yield return getItemReplacement (item);
            setErrorOnItem (item);
        }
    }
}
----------------------------------------

public IEnumerable < XElement > GetRevisedVariationOverTime (IEnumerable < XElement > items) {
    foreach (var item in items) {
        if (sampleSize < RequiredSampleSize) {
            yield return GetItemReplacement (item);
        } else {
            yield return item;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
693710_693741_1_14
693710_693767_1_15
Title: How to assign byte[] as a pointer in C# 
----------------------------------------

public static unsafe byte GenerateCheckByte (byte [] packet, int length, UInt32 seed) {
    if (packet == null)
        throw new ArgumentNullException ("packet");

    UInt32 checksum = 0xFFFFFFFF;
    length &= 0x7FFF;
    UInt32 moddedseed = seed << 8;
    for (int i = 0; i < length; i ++)
        checksum = (checksum > > 8) ^ Table.table [moddedseed + ((packet [i] ^ checksum) & 0xFF)];

    byte result = (byte) (((checksum > > 24) & 0xFF) + ((checksum > > 8) & 0xFF) + ((checksum > > 16) & 0xFF) + (checksum & 0xFF));
    return result;
}
----------------------------------------

byte GenerateCheckByte (byte [] packet, ulong seed) {
    if (packet == null)
        return 0;

    int length = packet.Length & 0x7FFF;
    ulong checksum = 0xFFFFFFFF;
    ulong moddedseed = seed << 8;
    for (int i = 0; i < length; i ++) {
        checksum = (checksum > > 8) ^ table [moddedseed + ((packet [i] ^ checksum) & 0xFF)];
    }
    return (byte) (((checksum > > 24) & 0xFF) + ((checksum > > 16) & 0xFF) + ((checksum > > 8) & 0xFF) + (checksum & 0xFF));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6945625_6949037_41_56
6945625_6949037_66_84
Title: C# adding DataAnnotations to entities from the EntityFramework 
----------------------------------------

public static void ValidateProperty < TEntity, TProperty > (TEntity entity, Expression < Func < TEntity, TProperty > > selector) where TEntity : class {
    if (selector.Body.NodeType != ExpressionType.MemberAccess) {
        throw new InvalidOperationException ("Only member access selector is allowed in property validation");
    }
    AssociateMetadataType (entity);
    TProperty value = selector.Compile ().Invoke (entity);
    string memberName = ((selector.Body as MemberExpression).Member as PropertyInfo).Name;
    var context = new ValidationContext (entity, null, null);
    context.MemberName = memberName;
    Validator.ValidateProperty (value, context);
}
----------------------------------------

public static void ValidateProperty < TEntity > (TEntity entity, string memberName) where TEntity : class {
    Type entityType = entity.GetType ();
    PropertyInfo property = entityType.GetProperty (memberName);
    if (property == null) {
        throw new InvalidOperationException (String.Format (CultureInfo.InvariantCulture, "Entity does not contain property with the name {0}", memberName));
    }
    AssociateMetadataType (entity);
    var value = property.GetValue (entity, null);
    var context = new ValidationContext (entity, null, null);
    context.MemberName = memberName;
    Validator.ValidateProperty (value, context);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
6994852_47282884_10_37
6994852_47282884_38_52
Title: C# - How to get Class Name and Line Number when an Exception is called 
----------------------------------------

public static void d (Exception e) {
    try {
        MethodBase site = e.TargetSite;
        string methodName = site == null ? "" : site.Name;
        methodName = ExtractBracketed (methodName);
        StackTrace stkTrace = new System.Diagnostics.StackTrace (e, true);
        for (int i = 0; i < 3; i ++) {
            var frame = stkTrace.GetFrame (i);
            int lineNum = frame.GetFileLineNumber ();
            int colNum = frame.GetFileColumnNumber ();
            string className = ExtractBracketed (frame.GetMethod ().ReflectedType.FullName);
            Trace.WriteLine (ThreadAndDateInfo + "Exception: " + className + "." + methodName + ", Ln " + lineNum + " Col " + colNum + ": " + e.Message);
            if (lineNum + colNum > 0)
                break;

        }
    }
    catch (Exception ee) {
        Console.WriteLine ("Tracing exception in d(Exception e)" + ee.Message);
    }
}
----------------------------------------

public static void d (string str) {
    try {
        StackFrame frame = new StackFrame (1);
        var method = frame.GetMethod ();
        string name = ExtractBracketed (method.Name);
        Trace.WriteLine (ThreadAndDateInfo + method.DeclaringType + "." + name + ": " + str);
    }
    catch (Exception e) {
        Console.WriteLine ("Tracing exception in d(string str)" + e.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7025590_7025827_1_15
7025590_7035875_1_12
Title: Clear all radio buttons in a page 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    _radioContainer.Controls.OfType < RadioButton > ().ToList ().ForEach (p = > _radioContainer.Controls.Remove (p));
    _radioContainer.Controls.OfType < RadioButton > ().ToList ().ForEach (p = > p.Checked = false);
    foreach (RadioButton radio in _radioContainer.Controls.OfType < RadioButton > ().ToList ()) {
        if (radio.Checked == true) {
            radio.Checked = false;
            break;
        }
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    var cntls = GetAll (this, typeof (RadioButton));
    foreach (Control cntrl in cntls) {
        RadioButton _rb = (RadioButton) cntrl;
        if (_rb.Checked) {
            _rb.Checked = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7036953_7037002_4_20
7036953_7075583_1_43
Title: Allowed Menustrip only one child at moment 
----------------------------------------

private void ordresToolStripMenuItem_Click (object sender, EventArgs e) {
    if (_openedWindow != null && _openedWindow.Open) {
    } else {
        Lordre newMDIChild = new Lordre (ClientId);
        _openedWindow = newMDIChild;
        newMDIChild.MdiParent = this;
        newMDIChild.Show ();
    }
}
----------------------------------------

private void ordresToolStripMenuItem_Click (object sender, EventArgs e) {
    bool found = false;
    Form [] charr = this.MdiChildren;
    if (charr.Length == 0) {
        Lordre myPatients = new Lordre ();
        myPatients.MdiParent = this;
        myPatients.StartPosition = FormStartPosition.Manual;
        myPatients.Location = new Point (0, 0);
        myPatients.Show ();
    } else {
        foreach (Form chform in charr) {
            if (chform.Tag.ToString () == "Ordre") {
                chform.Activate ();
                found = true;
                break;
            } else
                found = false;

        }
        if (found == false) {
            Lordre myPatients = new Lordre ();
            myPatients.MdiParent = this;
            myPatients.StartPosition = FormStartPosition.Manual;
            myPatients.Location = new Point (0, 0);
            myPatients.Show ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7041105_7720810_1_26
7041105_7720810_28_53
Title: 401 Error when trying to get Request Token 
----------------------------------------

private static string UrlEncode (IEnumerable < KeyValuePair < string, object > > parameters) {
    StringBuilder parameterString = new StringBuilder ();
    var paramsSorted = from p in parameters
        orderby p.Key, p.Value
        select p;
    foreach (var item in paramsSorted) {
        if (parameterString.Length > 0) {
            parameterString.Append ("&");
        }
        if (item.Value.GetType () == typeof (string))
            parameterString.Append (string.Format (CultureInfo.InvariantCulture, "{0}={1}", UrlEncode (item.Key), UrlEncode (item.Value as string)));

    }
    return UrlEncode (parameterString.ToString ());
}
----------------------------------------

public static string UrlEncode (string value) {
    if (string.IsNullOrEmpty (value)) {
        return string.Empty;
    }
    value = Uri.EscapeDataString (value);
    value = Regex.Replace (value, "(%[0-9a-f][0-9a-f])", c = > c.Value.ToUpper ());
    value = value.Replace ("(", "%28").Replace (")", "%29").Replace ("$", "%24").Replace ("!", "%21").Replace ("*", "%2A").Replace ("'", "%27");
    value = value.Replace ("%7E", "~");
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7052318_7855018_1_27
7052318_7855018_42_62
Title: How can I write a LINQ to SQL query to update tags? 
----------------------------------------

public static void UpdateReferences < FK, FKV > (this EntitySet < FK > refs, Expression < Func < FK, FKV > > fkexpr, IEnumerable < FKV > values) where FK : class where FKV : class {
    Func < FK, FKV > fkvalue = fkexpr.Compile ();
    var fkmaker = MakeMaker (fkexpr);
    var fkdelete = MakeDeleter (fkexpr);
    var fks = refs.Select (fkvalue).ToList ();
    var added = values.Except (fks);
    var removed = fks.Except (values);
    foreach (var add in added) {
        refs.Add (fkmaker (add));
    }
    foreach (var r in removed) {
        var res = refs.Single (x = > fkvalue (x) == r);
        refs.Remove (res);
        fkdelete (res);
    }
}
----------------------------------------

static Action < FK > MakeDeleter < FK, FKV > (Expression < Func < FK, FKV > > fkexpr) {
    var me = fkexpr.Body as MemberExpression;
    var pi = me.Member as PropertyInfo;
    var assoc = Attribute.GetCustomAttribute (pi, typeof (AssociationAttribute)) as AssociationAttribute;
    if (assoc == null || ! assoc.DeleteOnNull) {
        throw new ArgumentException ("DeleteOnNull must be set to true");
    }
    var par = Expression.Parameter (typeof (FK), "fk");
    var maker = Expression.Lambda (Expression.Call (par, pi.GetSetMethod (), Expression.Convert (Expression.Constant (null), typeof (FKV))), par);
    var cmaker = maker.Compile () as Action < FK >;
    return cmaker;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7057259_7057410_6_23
7057259_7057841_6_25
Title: How do I point a variable at an Enum? 
----------------------------------------

static void Main (string [] args) {
    var testValue = "Fluffy";
    Cats ? tempCat;
    Dogs ? tempDog;
    if (TryParse (testValue, false, out tempCat))
        Console.WriteLine ("'{0}' was parsed to a cat", testValue);

    testValue = "Ugly";
    if (TryParse (testValue, false, out tempDog))
        Console.WriteLine ("'{0}' was parsed to a dog", testValue);

    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    string name = "Fluffy";
    Type currentEnum = typeof (Cats);
    if (currentEnum.Equals (typeof (Cats))) {
        Cats cat = (Cats) Enum.Parse (typeof (Cats), name);
        Console.WriteLine ("old " + cat);
        Console.WriteLine ("new " + (cat + 1));
    } else if (currentEnum.Equals (typeof (Dogs))) {
        Dogs dog = (Dogs) Enum.Parse (typeof (Cats), name);
        Console.WriteLine ("old " + dog);
        Console.WriteLine ("new " + (dog + 1));
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7062882_7062956_17_32
7062882_7063088_1_14
Title: Searching a tree using LINQ 
----------------------------------------

public static IEnumerable < T > AsBreadthFirstEnumerable < T > (this T head, Func < T, IEnumerable < T > > childrenFunc) {
    yield return head;
    var last = head;
    foreach (var node in AsBreadthFirstEnumerable (head, childrenFunc)) {
        foreach (var child in childrenFunc (node)) {
            yield return child;
            last = child;
        }
        if (last.Equals (node))
            yield break;

    }
}
----------------------------------------

public static IEnumerable < T > FlattenHierarchy < T > (this T node, Func < T, IEnumerable < T > > getChildEnumerator) {
    yield return node;
    if (getChildEnumerator (node) != null) {
        foreach (var child in getChildEnumerator (node)) {
            foreach (var childOrDescendant in child.FlattenHierarchy (getChildEnumerator)) {
                yield return childOrDescendant;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7062882_7062956_17_32
7062882_7063277_1_19
Title: Searching a tree using LINQ 
----------------------------------------

public static IEnumerable < T > AsBreadthFirstEnumerable < T > (this T head, Func < T, IEnumerable < T > > childrenFunc) {
    yield return head;
    var last = head;
    foreach (var node in AsBreadthFirstEnumerable (head, childrenFunc)) {
        foreach (var child in childrenFunc (node)) {
            yield return child;
            last = child;
        }
        if (last.Equals (node))
            yield break;

    }
}
----------------------------------------

public static IEnumerable < TResult > SelectHierarchy < TResult > (this IEnumerable < TResult > source, Func < TResult, IEnumerable < TResult > > collectionSelector, Func < TResult, bool > predicate) {
    if (source == null) {
        yield break;
    }
    foreach (var item in source) {
        if (predicate (item)) {
            yield return item;
        }
        var childResults = SelectHierarchy (collectionSelector (item), collectionSelector, predicate);
        foreach (var childItem in childResults) {
            yield return childItem;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7062882_7063088_1_14
7062882_7063277_1_19
Title: Searching a tree using LINQ 
----------------------------------------

public static IEnumerable < T > FlattenHierarchy < T > (this T node, Func < T, IEnumerable < T > > getChildEnumerator) {
    yield return node;
    if (getChildEnumerator (node) != null) {
        foreach (var child in getChildEnumerator (node)) {
            foreach (var childOrDescendant in child.FlattenHierarchy (getChildEnumerator)) {
                yield return childOrDescendant;
            }
        }
    }
}
----------------------------------------

public static IEnumerable < TResult > SelectHierarchy < TResult > (this IEnumerable < TResult > source, Func < TResult, IEnumerable < TResult > > collectionSelector, Func < TResult, bool > predicate) {
    if (source == null) {
        yield break;
    }
    foreach (var item in source) {
        if (predicate (item)) {
            yield return item;
        }
        var childResults = SelectHierarchy (collectionSelector (item), collectionSelector, predicate);
        foreach (var childItem in childResults) {
            yield return childItem;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7071324_7071369_1_21
7071324_7071374_1_27
Title: How to convert recursive procedure with side effects on ref param to recursive function returning a list? 
----------------------------------------

public static List < XDocument > GetResources (string startURL) {
    var result = new List < XDocument > ();
    var doc = XDocument.Parse (GetXml (startURL));
    var xs = new XmlSerializer (typeof (resourceList));
    var rdr = doc.CreateReader ();
    if (xs.CanDeserialize (rdr)) {
        var rl = (resourceList) xs.Deserialize (doc.CreateReader ());
        foreach (var item in rl.resourceURL) {
            result.AddRange (GetResources (startURL + item.location));
        }
    } else {
        result.Add (doc);
    }
    return result;
}
----------------------------------------

public static List < XDocument > GetResources (string startURL) {
    List < XDocument > ret = new List < XDocument > ();
    Queue < string > urls = new Queue < string > ();
    urls.Enqueue (startUrl);
    while (urls.Count > 0) {
        string url = urls.Dequeue ();
        var doc = XDocument.Parse (GetXml (url));
        var xs = new XmlSerializer (typeof (resourceList));
        var rdr = doc.CreateReader ();
        if (xs.CanDeserialize (rdr)) {
            var rl = (resourceList) xs.Deserialize (doc.CreateReader ());
            foreach (var item in rl.resourceURL) {
                queue.Enqueue (url + item.location);
            }
        } else {
            ret.Add (doc);
        }
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7073666_7073867_24_46
7073666_7073867_59_81
Title: Outgoing Email issues with different ports 
----------------------------------------

public static SmtpClient GetSMTPClient (bool isSetAtWebConfig) {
    try {
        SmtpClient client;
        if (isSetAtWebConfig) {
            client = new SmtpClient ();
        } else {
            client = GetSMTPClient ("smtp.gmail.com", 587, true, SmtpDeliveryMethod.Network, false, "someone@gmail.com", "somepass");
        }
        return client;
    }
    catch (Exception exception) {
        Elmah.ErrorSignal.FromCurrentContext ().Raise (exception);
        throw;
    }
}
----------------------------------------

public static SmtpClient GetSMTPClient (string host, int port, bool enableSSL, SmtpDeliveryMethod delieveryMethod, bool useDefaultCredentials, string fromAddress, string fromPassword) {
    try {
        return new SmtpClient {Host = host, Port = port, EnableSsl = enableSSL, DeliveryMethod = delieveryMethod, UseDefaultCredentials = useDefaultCredentials, Credentials = new NetworkCredential (fromAddress, fromPassword)};
    }
    catch (Exception exception) {
        Elmah.ErrorSignal.FromCurrentContext ().Raise (exception);
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
708205_708306_1_10
708205_708406_64_97
Title: C# Object Type Comparison 
----------------------------------------

private bool AreSame (Type a, Type b) {
    if (a == b)
        return true;

    if (a == null || b == null)
        return false;

    if (a.IsSubclassOf (b) || b.IsSubclassOf (a))
        return true;

    return a.BaseType == b.BaseType;
}
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7087683_7389503_45_64
7087683_7389503_66_112
Title: Custom WeakReference implementation 
----------------------------------------

public bool TryGetTarget (out T target) {
    var ptr = _handle;
    if (ptr != IntPtr.Zero) {
        try {
            var handle = GCHandle.FromIntPtr (ptr);
            if (handle.IsAllocated) {
                target = (T) handle.Target;
                return ! object.ReferenceEquals (target, null);
            }
        }
        catch {
        }
    }
    target = null;
    return false;
}
----------------------------------------

public bool TryGetTarget (out T target, Func < T > recreator) {
    IntPtr ptr = _handle;
    try {
        var handle = GCHandle.FromIntPtr (ptr);
        if (handle.IsAllocated) {
            target = (T) handle.Target;
            if (! object.ReferenceEquals (target, null))
                return false;

        }
    }
    catch {
    }
    T createdValue = null;
    target = null;
    while ((ptr = _handle) == IntPtr.Zero || object.ReferenceEquals (target, null)) {
        createdValue = createdValue ?? recreator ();
        var newPointer = GCHandle.Alloc (createdValue, _handleType).AddrOfPinnedObject ();
        if (Interlocked.CompareExchange (ref _handle, newPointer, ptr) == ptr) {
            target = createdValue;
            return true;
        } else if ((ptr = _handle) != IntPtr.Zero) {
            try {
                var handle = GCHandle.FromIntPtr (ptr);
                if (handle.IsAllocated) {
                    target = (T) handle.Target;
                    if (! object.ReferenceEquals (target, null))
                        return false;

                }
            }
            catch {
            }
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
710670_710752_1_33
710670_8947287_1_22
Title: C# Permutation of an array of arraylists? 
----------------------------------------

static void Main (string [] args) {
    string [] [] myList = new string [3] [];
    myList [0] = new string [] {"1", "5", "3", "9"};
    myList [1] = new string [] {"2", "3"};
    myList [2] = new string [] {"93"};
    List < List < string > > permutations = new List < List < string > > ();
    foreach (string init in myList [0]) {
        List < string > temp = new List < string > ();
        temp.Add (init);
        permutations.Add (temp);
    }
    for (int i = 1; i < myList.Length; ++ i) {
        permutations = RecursiveAppend (permutations, myList [i]);
    }
    foreach (List < string > list in permutations) {
        foreach (string item in list) {
            Console.Write (item + ":");
        }
        Console.WriteLine ();
    }
}
----------------------------------------

static void Main (string [] args) {
    List < string [] > myList = new List < string [] > ();
    myList.Add (new string [0]);
    myList.Add (new string [0]);
    myList.Add (new string [0]);
    myList [0] = new string [] {"1", "2", "3"};
    myList [1] = new string [] {"4", "5"};
    myList [2] = new string [] {"7", "8", "9"};
    object [] [] xProds = GetProducts (myList.ToArray ());
    foreach (object [] os in xProds) {
        foreach (object o in os) {
            Console.Write (o.ToString () + " ");
        }
        Console.WriteLine ();
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
710670_710752_1_33
710670_9191941_17_29
Title: C# Permutation of an array of arraylists? 
----------------------------------------

static void Main (string [] args) {
    string [] [] myList = new string [3] [];
    myList [0] = new string [] {"1", "5", "3", "9"};
    myList [1] = new string [] {"2", "3"};
    myList [2] = new string [] {"93"};
    List < List < string > > permutations = new List < List < string > > ();
    foreach (string init in myList [0]) {
        List < string > temp = new List < string > ();
        temp.Add (init);
        permutations.Add (temp);
    }
    for (int i = 1; i < myList.Length; ++ i) {
        permutations = RecursiveAppend (permutations, myList [i]);
    }
    foreach (List < string > list in permutations) {
        foreach (string item in list) {
            Console.Write (item + ":");
        }
        Console.WriteLine ();
    }
}
----------------------------------------

static void Main (string [] args) {
    List < Array > a = new List < Array > ();
    a.Add (new string [0]);
    a.Add (new string [0]);
    a.Add (new string [0]);
    a [0] = new string [] {"T", "Z"};
    a [1] = new string [] {"N", "Z"};
    a [2] = new string [] {"3", "2", "Z"};
    foo ("", a, 0);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
710670_8947287_1_22
710670_9191941_17_29
Title: C# Permutation of an array of arraylists? 
----------------------------------------

static void Main (string [] args) {
    List < string [] > myList = new List < string [] > ();
    myList.Add (new string [0]);
    myList.Add (new string [0]);
    myList.Add (new string [0]);
    myList [0] = new string [] {"1", "2", "3"};
    myList [1] = new string [] {"4", "5"};
    myList [2] = new string [] {"7", "8", "9"};
    object [] [] xProds = GetProducts (myList.ToArray ());
    foreach (object [] os in xProds) {
        foreach (object o in os) {
            Console.Write (o.ToString () + " ");
        }
        Console.WriteLine ();
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    List < Array > a = new List < Array > ();
    a.Add (new string [0]);
    a.Add (new string [0]);
    a.Add (new string [0]);
    a [0] = new string [] {"T", "Z"};
    a [1] = new string [] {"N", "Z"};
    a [2] = new string [] {"3", "2", "Z"};
    foo ("", a, 0);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7110464_33611195_3_23
7110464_7110658_1_10
Title: Is it possible to create a generic Int-to-Enum Converter? 
----------------------------------------

public object Convert (object value, Type targetType, object parameter, CultureInfo culture) {
    if (value == null)
        return null;

    if (targetType.IsEnum) {
        return Enum.ToObject (targetType, value);
    }
    if (value.GetType ().IsEnum) {
        return System.Convert.ChangeType (value, Enum.GetUnderlyingType (value.GetType ()));
    }
    return null;
}
----------------------------------------

public object Convert (object value, Type targetType, object parameter, CultureInfo culture) {
    if (parameter == null || value == null)
        return false;

    if (parameter.GetType ().IsEnum && value is int) {
        return (int) parameter == (int) value;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
713341_16655432_1_32
713341_713355_1_18
Title: Comparing arrays in C# 
----------------------------------------

public static bool SequenceEqual < TSource > (this IEnumerable < TSource > first, IEnumerable < TSource > second, IEqualityComparer < TSource > comparer) {
    if (comparer == null) {
        comparer = EqualityComparer < TSource >.Default;
    }
    if (first == null) {
        throw Error.ArgumentNull ("first");
    }
    if (second == null) {
        throw Error.ArgumentNull ("second");
    }
    using (IEnumerator < TSource > enumerator = first.GetEnumerator ())
    using (IEnumerator < TSource > enumerator2 = second.GetEnumerator ())
    {
        while (enumerator.MoveNext ()) {
            if (! enumerator2.MoveNext () || ! comparer.Equals (enumerator.Current, enumerator2.Current)) {
                return false;
            }
        }
        if (enumerator2.MoveNext ()) {
            return false;
        }
    } return true;
}
----------------------------------------

static bool ArraysEqual < T > (T [] a1, T [] a2) {
    if (ReferenceEquals (a1, a2))
        return true;

    if (a1 == null || a2 == null)
        return false;

    if (a1.Length != a2.Length)
        return false;

    EqualityComparer < T > comparer = EqualityComparer < T >.Default;
    for (int i = 0; i < a1.Length; i ++) {
        if (! comparer.Equals (a1 [i], a2 [i]))
            return false;

    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7137121_7137129_64_94
7137121_7137130_7_25
Title: High resolution timer 
----------------------------------------

static void Main () {
    HiResTimer timer = new HiResTimer ();
    Int64 counterAtStart = timer.Value;
    for (int count = 0; count < 10000; count ++) {
        count ++;
        count --;
    }
    Int64 counterAtEnd = timer.Value;
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart;
    Int64 timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
    MessageBox.Show ("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
}
----------------------------------------

public static void Main (String [] args) {
    Timer timer = new Timer ();
    timer.Interval = 1;
    timer.Enabled = true;
    Stopwatch sw = Stopwatch.StartNew ();
    long start = 0;
    long end = sw.ElapsedMilliseconds;
    timer.Elapsed += (o, e) = > {
        start = end;
        end = sw.ElapsedMilliseconds;
        Console.WriteLine ("{0} milliseconds passed", end - start);
    };
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7147198_7147474_1_38
7147198_7147679_1_27
Title: IEnumerable - Return items in range either side of element 
----------------------------------------

public static IEnumerable < T > FirstAndNeighbours < T > (this IEnumerable < T > source, Func < T, bool > predicate, int numOfNeighboursEitherSide) {
    using (var enumerator = source.GetEnumerator ())
    {
        var precedingNeighbours = new Queue < T > (numOfNeighboursEitherSide);
        while (enumerator.MoveNext ()) {
            var current = enumerator.Current;
            if (predicate (current)) {
                foreach (var precedingNeighbour in precedingNeighbours)
                    yield return precedingNeighbour;

                yield return current;
                for (int i = 0; i < numOfNeighboursEitherSide; ++ i) {
                    if (! enumerator.MoveNext ())
                        yield break;

                    yield return enumerator.Current;
                }
                yield break;
            }
            if (precedingNeighbours.Count >= numOfNeighboursEitherSide)
                precedingNeighbours.Dequeue ();

            precedingNeighbours.Enqueue (current);
        }
    }}
----------------------------------------

public static IEnumerable < T > MySelectRange < T > (this IEnumerable < T > source, Func < T, bool > selector, int rangeSize) {
    var firstN = new T [rangeSize];
    int pos = 0;
    bool found = false;
    foreach (T item in source) {
        if (found)
            if (pos ++ <= rangeSize)
                yield return item;
            else
                break;

        if (selector (item)) {
            found = true;
            for (int i = Math.Max (0, pos - rangeSize); i < pos; i ++)
                yield return firstN [i % rangeSize];

            yield return item;
            pos = 0;
        } else if (rangeSize > 0)
            firstN [pos ++ % rangeSize] = item;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7159342_14536155_6_21
7159342_40486556_1_14
Title: Given an array of integers. Find the LARGEST subarray with the MAXIMUM sum 
----------------------------------------

static void Main () {
    int digits;
    List < int > array = new List < int > ();
    Console.WriteLine ("Please enter array of integer values. To exit, enter eny key different than 0..9");
    while (int.TryParse (Console.ReadLine (), out digits)) {
        array.Add (digits);
    }
    maxSubSum (array);
}
----------------------------------------

static void Main (string [] args) {
    string str = Console.ReadLine ();
    int [] arr = Array.ConvertAll (str.Split (' '), int.Parse);
    int curSum = 0, maxSum = 0;
    curSum = maxSum = arr [0];
    for (int i = 1; i < arr.Length; i ++) {
        curSum = Math.Max (curSum + arr [i], arr [i]);
        maxSum = Math.Max (curSum, maxSum);
    }
    Console.WriteLine ("{0}", maxSum);
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7159342_14536155_6_21
7159342_7165197_21_32
Title: Given an array of integers. Find the LARGEST subarray with the MAXIMUM sum 
----------------------------------------

static void Main () {
    int digits;
    List < int > array = new List < int > ();
    Console.WriteLine ("Please enter array of integer values. To exit, enter eny key different than 0..9");
    while (int.TryParse (Console.ReadLine (), out digits)) {
        array.Add (digits);
    }
    maxSubSum (array);
}
----------------------------------------

static void Main (string [] args) {
    int [] array = {- 2, 1, - 3, 4, - 1, 2, 1, - 5, 4};
    int [] largestSubArray;
    largestSubArray = Max_Array (array);
    Console.WriteLine ();
    Console.WriteLine ("Subarray is :");
    foreach (int numb in largestSubArray)
        Console.WriteLine (numb);

    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7159342_40486556_1_14
7159342_7165197_21_32
Title: Given an array of integers. Find the LARGEST subarray with the MAXIMUM sum 
----------------------------------------

static void Main (string [] args) {
    string str = Console.ReadLine ();
    int [] arr = Array.ConvertAll (str.Split (' '), int.Parse);
    int curSum = 0, maxSum = 0;
    curSum = maxSum = arr [0];
    for (int i = 1; i < arr.Length; i ++) {
        curSum = Math.Max (curSum + arr [i], arr [i]);
        maxSum = Math.Max (curSum, maxSum);
    }
    Console.WriteLine ("{0}", maxSum);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    int [] array = {- 2, 1, - 3, 4, - 1, 2, 1, - 5, 4};
    int [] largestSubArray;
    largestSubArray = Max_Array (array);
    Console.WriteLine ();
    Console.WriteLine ("Subarray is :");
    foreach (int numb in largestSubArray)
        Console.WriteLine (numb);

    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7162262_7162686_28_61
7162262_7162686_63_111
Title: How best to create and execute a method in a .NET (C#) class dynamically through configuration 
----------------------------------------

private static string GenerateSignature < TDelegate > () {
    var t = typeof (TDelegate);
    if (! typeof (Delegate).IsAssignableFrom (t))
        throw new Exception ("TDelegate must be delegate type.");

    var invoke = t.GetMethod ("Invoke");
    var sig = new StringBuilder ();
    if (invoke.ReturnType == typeof (void))
        sig.Append ("void");
    else
        sig.Append (invoke.ReturnType.FullName);

    sig.Append (" ");
    sig.Append ("Invoke(");
    var param = invoke.GetParameters ();
    for (var i = 0; i < param.Length; i ++) {
        if (i != 0)
            sig.Append (", ");

        sig.Append (param [i].ParameterType.FullName);
        sig.Append (" ");
        sig.Append (param [i].Name);
    }
    sig.Append (")");
    return sig.ToString ();
}
----------------------------------------

private static TDelegate Generate < TDelegate > (string code) {
    var codeBuilder = new StringBuilder (50);
    codeBuilder.AppendLine ("using System;");
    codeBuilder.Append ("namespace Dynamic { class DynamicClass { public static ");
    codeBuilder.Append (GenerateSignature < TDelegate > ());
    codeBuilder.AppendLine ("{");
    codeBuilder.AppendLine (code);
    codeBuilder.AppendLine ("} } }");
    var compilerVersion = new Version (1, 0, 0, 0);
    var parameters = new CompilerParameters ();
    parameters.GenerateInMemory = true;
    parameters.GenerateExecutable = false;
    parameters.ReferencedAssemblies.Clear ();
    foreach (var referenceAssembly in AppDomain.CurrentDomain.GetAssemblies ()) {
        parameters.ReferencedAssemblies.Add (referenceAssembly.Location);
        var an = new AssemblyName (referenceAssembly.FullName);
        if (an.Name == "mscorlib" && compilerVersion < an.Version) {
            compilerVersion = an.Version;
        }
    }
    var cp = new CSharpCodeProvider (new Dictionary < string, string > () {{"CompilerVersion", string.Format ("v{0}.{1}", compilerVersion.Major, compilerVersion.Minor)}});
    var results = cp.CompileAssemblyFromSource (parameters, codeBuilder.ToString ());
    if (results.Errors.HasErrors)
        throw new Exception ("Method failed to compile.");

    var assembly = results.CompiledAssembly;
    if (assembly == null)
        throw new Exception ("Method failed to compile.");

    var t = assembly.GetType ("Dynamic.DynamicClass");
    if (t == null)
        throw new Exception ("Method failed to compile.");

    var m = t.GetMethod ("Invoke");
    if (m == null)
        throw new Exception ("Method failed to compile.");

    return (TDelegate) (object) Delegate.CreateDelegate (typeof (TDelegate), m);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7168058_7168328_1_22
7168058_7168563_1_14
Title: How to check if a C# Stream is resizable? 
----------------------------------------

public static bool IsResizable (this Stream stream) {
    bool result;
    long oldLength = stream.Length;
    try {
        stream.SetLength (oldLength + 1);
        result = true;
    }
    catch (NotSupportedException) {
        result = false;
    }
    if (result) {
        stream.SetLength (oldLength);
    }
    return result;
}
----------------------------------------

public static bool IsResizable (this MemoryStream stream) {
    if (stream == null)
        throw new ArgumentNullException ("stream");

    bool resizable;
    try {
        stream.GetBuffer ();
        resizable = true;
    }
    catch (UnauthorizedAccessException) {
        resizable = false;
    }
    return resizable;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7174077_7174214_1_23
7174077_7174386_1_51
Title: Export a C# DataSet to a text file 
----------------------------------------

public static void Write (DataTable dt, string filePath) {
    int i = 0;
    StreamWriter sw = null;
    sw = new StreamWriter (filePath, false);
    for (i = 0; i < dt.Columns.Count - 1; i ++) {
        sw.Write (dt.Columns [i].ColumnName + " ");
    }
    sw.Write (dt.Columns [i].ColumnName);
    sw.WriteLine ();
    foreach (DataRow row in dt.Rows) {
        object [] array = row.ItemArray;
        for (i = 0; i < array.Length - 1; i ++) {
            sw.Write (array [i] + " ");
        }
        sw.Write (array [i].ToString ());
        sw.WriteLine ();
    }
    sw.Close ();
}
----------------------------------------

static void Write (DataTable dt, string outputFilePath) {
    int [] maxLengths = new int [dt.Columns.Count];
    for (int i = 0; i < dt.Columns.Count; i ++) {
        maxLengths [i] = dt.Columns [i].ColumnName.Length;
        foreach (DataRow row in dt.Rows) {
            if (! row.IsNull (i)) {
                int length = row [i].ToString ().Length;
                if (length > maxLengths [i]) {
                    maxLengths [i] = length;
                }
            }
        }
    }
    using (StreamWriter sw = new StreamWriter (outputFilePath, false))
    {
        for (int i = 0; i < dt.Columns.Count; i ++) {
            sw.Write (dt.Columns [i].ColumnName.PadRight (maxLengths [i] + 2));
        }
        sw.WriteLine ();
        foreach (DataRow row in dt.Rows) {
            for (int i = 0; i < dt.Columns.Count; i ++) {
                if (! row.IsNull (i)) {
                    sw.Write (row [i].ToString ().PadRight (maxLengths [i] + 2));
                } else {
                    sw.Write (new string (' ', maxLengths [i] + 2));
                }
            }
            sw.WriteLine ();
        }
        sw.Close ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7186851_7187073_5_25
7186851_7187495_6_16
Title: Is this an abuse of 'dynamic'? 
----------------------------------------

static void Main () {
    byte [] bytes = {32, 32, 32, 10};
    string text = "hello\n";
    char [] characterArray = System.Text.Encoding.ASCII.GetString (bytes).ToCharArray ();
    for (int i = 0; i < characterArray.Length; ++ i) {
        if (IsUnixNewline (characterArray, i)) {
            Console.WriteLine ("Found Unix newline in 'bytes'.");
            break;
        }
    }
    characterArray = text.ToCharArray ();
    for (int i = 0; i < characterArray.Length; ++ i) {
        if (IsUnixNewline (characterArray, i)) {
            Console.WriteLine ("Found Unix newline in 'text'.");
            break;
        }
    }
}
----------------------------------------

static void Main () {
    byte [] bytes = {32, 32, 32, 10};
    string text = "hello\n";
    if (HasUnixNewline (Encoding.ASCII.GetChars (bytes))) {
        Console.WriteLine ("Found Unix newline in 'bytes'.");
    }
    if (HasUnixNewline (text)) {
        Console.WriteLine ("Found Unix newline in 'text'.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7187576_40631838_4_18
7187576_7187711_9_32
Title: Validation of Guid 
----------------------------------------

public override bool IsValid (object value) {
    if (value == null)
        return false;

    var valueType = value.GetType ();
    var emptyField = valueType.GetField ("Empty");
    if (emptyField == null)
        return true;

    var emptyValue = emptyField.GetValue (null);
    return ! value.Equals (emptyValue);
}
----------------------------------------

protected override ValidationResult IsValid (object value, ValidationContext validationContext) {
    var input = Convert.ToString (value, CultureInfo.CurrentCulture);
    if (string.IsNullOrWhiteSpace (input)) {
        return null;
    }
    var guids = new GuidRepository ().AllGuids ();
    Guid guid;
    if (! Guid.TryParse (input, out guid)) {
        return new ValidationResult (FormatErrorMessage (validationContext.DisplayName));
    }
    return guids.Any (g = > g == guid) ? new ValidationResult (FormatErrorMessage (validationContext.DisplayName)) : null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7214901_7214938_3_18
7214901_7215406_1_12
Title: C# : Show dialog on UI thread from another thread 
----------------------------------------

public string AskSaveFile () {
    if (this.InvokeRequired) {
        Invoke (new MethodInvoker (delegate () {
            AskSaveFile ();
        }));
    } else {
        var sfd = new SaveFileDialog ();
        sfd.Filter = "Fichiers txt (*.txt)|*.txt|Tous les fichiers (*.*)|*.*";
        sfd.FilterIndex = 1;
        sfd.RestoreDirectory = true;
        if (sfd.ShowDialog () == DialogResult.OK)
            return sfd.FileName;

    }
    return null;
}
----------------------------------------

public string AskSaveFile () {
    if (this.InvokeRequired) {
        return (string) Invoke (new Func < string > (() = > AskSaveFile ()));
    } else {
        var sfd = new SaveFileDialog ();
        sfd.Filter = "Fichiers txt (*.txt)|*.txt|Tous les fichiers (*.*)|*.*";
        sfd.FilterIndex = 1;
        sfd.RestoreDirectory = true;
        return sfd.ShowDialog () == DialogResult.OK ? sfd.FileName : null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7249134_7249152_6_17
7249134_7249156_1_13
Title: C# get fields with reflection 
----------------------------------------

public object getValue (String propertyName) {
    var member = this.GetType ().GetMember (propertyName).Single ();
    if (member is PropertyInfo) {
        return ((PropertyInfo) member).GetValue (this, null);
    } else if (member is FieldInfo) {
        return ((FieldInfo) member).GetValue (this);
    } else
        throw new ArgumentOutOfRangeException ();

}
----------------------------------------

public object getValue (String memberName) {
    var member = this.GetType ().GetMember (memberName).Single ();
    if (member.MemberType == MemberTypes.Property) {
        return ((PropertyInfo) member).GetValue (this, null);
    }
    if (member.MemberType == MemberTypes.Field) {
        return ((FieldInfo) member).GetValue (this);
    } else {
        throw new Exception ("Bad member type.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7256185_7256897_1_15
7256185_7268425_1_17
Title: changing the focus to next cell using xeed datagrid in c# 
----------------------------------------

private void _dataGrid_KeyUp (object sender, System.Windows.Input.KeyEventArgs e) {
    if (e.Key == Key.Enter) {
        _dataGrid.EndEdit ();
        int nextIndex = _dataGrid.SelectedIndex + 1;
        if (nextIndex < _dataGrid.items.Count) {
            _dataGrid.SelectedIndex = nextIndex;
            _dataGrid.CurrentItem = _dataGrid.Items [nextIndex];
        }
        _dataGrid.BeginEdit ();
    }
}
----------------------------------------

private void _dataGrid_KeyUp (object sender, System.Windows.Input.KeyEventArgs e) {
    if (e.Key == Key.Enter) {
        int rowCount = _dataGrid.Items.Count;
        int currentRow = _dataGrid.SelectedIndex;
        if (rowCount - 1 > currentRow)
            currentRow ++;
        else
            currentRow = 0;

        _dataGrid.CurrentItem = _dataGrid.Items [currentRow];
        _dataGrid.BringItemIntoView (_dataGrid.Items [currentRow]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7267229_7267612_26_49
7267229_7267612_53_73
Title: How to call async method twice simultaneously? 
----------------------------------------

public static void AddHandler < EVENTHANDLER > (ref EVENTHANDLER handler, EVENTHANDLER value) where EVENTHANDLER : class {
    Delegate dvalue = value as Delegate;
    if (dvalue == null) {
        if (value == null)
            throw new ArgumentNullException ("value");

        throw new ArgumentException ("Specified value is not a delegate", "value");
    }
    EVENTHANDLER temp;
    EVENTHANDLER current = handler;
    for (int spinner = 0;;) {
        temp = current;
        EVENTHANDLER combined = Delegate.Combine (temp as Delegate, dvalue) as EVENTHANDLER;
        current = Interlocked.CompareExchange (ref handler, combined, temp);
        if (current == temp)
            break;

        SpinOnce (ref spinner);
    }
    while (current != temp)
        ;
}
----------------------------------------

public static bool RemoveHandler < EVENTHANDLER > (ref EVENTHANDLER handler, EVENTHANDLER value) where EVENTHANDLER : class {
    Delegate dvalue = value as Delegate;
    if (dvalue != null) {
        EVENTHANDLER temp;
        EVENTHANDLER current = handler;
        for (int spinner = 0;;) {
            temp = current;
            EVENTHANDLER combined = Delegate.Remove (temp as Delegate, dvalue) as EVENTHANDLER;
            current = Interlocked.CompareExchange (ref handler, combined, temp);
            if (current == temp)
                break;

            SpinOnce (ref spinner);
        }
        return true;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7275135_7275366_14_39
7275135_7275479_1_10
Title: How do I hide a column in an asp:Table? 
----------------------------------------

public static void HideColumn (this Table table, string id) {
    int index = 0;
    bool columnFound = false;
    if (table.Rows.Count > 1) {
        TableHeaderRow headerRow = table.Rows [0] as TableHeaderRow;
        if (headerRow != null) {
            foreach (TableHeaderCell cell in headerRow.Cells) {
                if (cell.ID.ToLower () == id.ToLower ()) {
                    columnFound = true;
                    break;
                }
                index ++;
            }
        }
    }
    if (columnFound)
        HideColumn (table, index);

}
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");

    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
727707_727951_1_10
727707_728051_7_16
Title: Finding all combinations of well-formed brackets 
----------------------------------------

public void Brackets (int pairs) {
    if (pairs > 1)
        Brackets (pairs - 1);

    char [] output = new char [2 * pairs];
    output [0] = '(';
    output [1] = ')';
    foo (output, 1, pairs - 1, pairs, pairs);
    Console.writeLine ();
}
----------------------------------------

private void Brackets (string output, int open, int close, int pairs) {
    if ((open == pairs) && (close == pairs)) {
        Console.WriteLine (output);
    } else {
        if (open < pairs)
            Brackets (output + "(", open + 1, close, pairs);

        if (close < open)
            Brackets (output + ")", open, close + 1, pairs);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7284266_7284290_1_10
7284266_7284297_1_10
Title: LINQ Error: Method not recognized 
----------------------------------------

public IEnumerable < string > GetAllCitiesOfCountry (int id) {
    var ad = from a in entities.Addresses
        where a.CountryID == id
        select a.City;
    var fa = from b in entities.FacilityAddresses
        where b.CountryID == id
        select b.City;
    return ad.Union (fa).Distinct ();
}
----------------------------------------

public IEnumerable < string > GetAllCitiesOfCountry (int id) {
    var ad = from a in entities.Addresses
        where a.CountryID == id
        select a.City;
    var fa = from b in entities.FacilityAddresses
        where b.CountryID == id
        select b.City;
    return ad.Union (fa);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7294157_7294225_1_18
7294157_7294239_1_18
Title: How can I group a sequence by two values and keep the order of the sequence? 
----------------------------------------

public static IEnumerable < IEnumerable < Point > > GetGroupedPoints (this IEnumerable < Point > points) {
    Point ? prevPoint = null;
    List < Point > currentGroup = new List < Point > ();
    foreach (var point in points) {
        if (prevPoint.HasValue && point != prevPoint) {
            yield return currentGroup;
            currentGroup = new List < Point > ();
        }
        currentGroup.Add (point);
        prevPoint = point;
    }
    if (currentGroup.Count > 0)
        yield return currentGroup;

}
----------------------------------------

List < List < Point > > GetGroupedPoints (List < Point > points) {
    var lists = new List < List < Point > > ();
    Point cur = null;
    List < Point > curList;
    foreach (var p in points) {
        if (! p.Equals (cur)) {
            curList = new List < Point > ();
            lists.Add (curList);
        }
        curList.Add (p);
    }
    return lists;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_111_122
730791_797452_157_213
Title: How to get value list from generic dictionary 
----------------------------------------

public bool ContainsKey < T > (Int32 pID) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType))
        return false;

    if (! m_pool [myType].ContainsKey (pID))
        return false;

    return m_pool [myType].ContainsKey (pID);
}
----------------------------------------

public T GetItemByPropertyValue < T > (String strPropMetaName, String strPropValue) {
    Type myType = typeof (T);
    for (int i = 0; i < this.TotalCount; i ++) {
        if (! m_pool.ContainsKey (myType)) {
            return default (T);
        } else {
            if (this.ContainsKey < T > (i)) {
                T item = this.GetItem < T > (i);
                MemberInfo [] members = myType.GetMembers ();
                for (int j = 0; j < members.Length; j ++) {
                    logger.Info ("members[j].Name is " + members [j].Name);
                    if (members [j].Name.ToString ().Equals (strPropMetaName)) {
                        FieldInfo [] fi;
                        fi = myType.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        foreach (FieldInfo f in fi) {
                            if (f.GetValue (item).ToString ().Equals (strPropValue))
                                return (T) m_pool [typeof (T)] [i];
                            else
                                continue;

                        }
                    } else
                        continue;

                }
            } else
                continue;

        }
    }
    return default (T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_111_122
730791_797452_44_67
Title: How to get value list from generic dictionary 
----------------------------------------

public bool ContainsKey < T > (Int32 pID) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType))
        return false;

    if (! m_pool [myType].ContainsKey (pID))
        return false;

    return m_pool [myType].ContainsKey (pID);
}
----------------------------------------

public void AddItem < T > (Int32 pID, T value) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType)) {
        m_pool.Add (myType, new Dictionary < int, object > ());
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    if (! m_pool [myType].ContainsKey (pID)) {
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    m_pool [myType] [pID] = value;
    totalCount ++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_111_122
730791_797452_70_94
Title: How to get value list from generic dictionary 
----------------------------------------

public bool ContainsKey < T > (Int32 pID) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType))
        return false;

    if (! m_pool [myType].ContainsKey (pID))
        return false;

    return m_pool [myType].ContainsKey (pID);
}
----------------------------------------

public void AddItem < T > (T value) {
    Int32 pID = totalCount;
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType)) {
        m_pool.Add (myType, new Dictionary < int, object > ());
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    if (! m_pool [myType].ContainsKey (pID)) {
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    m_pool [myType] [pID] = value;
    totalCount ++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_111_122
730791_797452_97_109
Title: How to get value list from generic dictionary 
----------------------------------------

public bool ContainsKey < T > (Int32 pID) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType))
        return false;

    if (! m_pool [myType].ContainsKey (pID))
        return false;

    return m_pool [myType].ContainsKey (pID);
}
----------------------------------------

public bool RemoveItem < T > (Int32 pID) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType))
        return false;

    if (! m_pool [myType].ContainsKey (pID))
        return false;

    totalCount --;
    return m_pool [myType].Remove (pID);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_157_213
730791_797452_44_67
Title: How to get value list from generic dictionary 
----------------------------------------

public T GetItemByPropertyValue < T > (String strPropMetaName, String strPropValue) {
    Type myType = typeof (T);
    for (int i = 0; i < this.TotalCount; i ++) {
        if (! m_pool.ContainsKey (myType)) {
            return default (T);
        } else {
            if (this.ContainsKey < T > (i)) {
                T item = this.GetItem < T > (i);
                MemberInfo [] members = myType.GetMembers ();
                for (int j = 0; j < members.Length; j ++) {
                    logger.Info ("members[j].Name is " + members [j].Name);
                    if (members [j].Name.ToString ().Equals (strPropMetaName)) {
                        FieldInfo [] fi;
                        fi = myType.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        foreach (FieldInfo f in fi) {
                            if (f.GetValue (item).ToString ().Equals (strPropValue))
                                return (T) m_pool [typeof (T)] [i];
                            else
                                continue;

                        }
                    } else
                        continue;

                }
            } else
                continue;

        }
    }
    return default (T);
}
----------------------------------------

public void AddItem < T > (Int32 pID, T value) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType)) {
        m_pool.Add (myType, new Dictionary < int, object > ());
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    if (! m_pool [myType].ContainsKey (pID)) {
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    m_pool [myType] [pID] = value;
    totalCount ++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_157_213
730791_797452_70_94
Title: How to get value list from generic dictionary 
----------------------------------------

public T GetItemByPropertyValue < T > (String strPropMetaName, String strPropValue) {
    Type myType = typeof (T);
    for (int i = 0; i < this.TotalCount; i ++) {
        if (! m_pool.ContainsKey (myType)) {
            return default (T);
        } else {
            if (this.ContainsKey < T > (i)) {
                T item = this.GetItem < T > (i);
                MemberInfo [] members = myType.GetMembers ();
                for (int j = 0; j < members.Length; j ++) {
                    logger.Info ("members[j].Name is " + members [j].Name);
                    if (members [j].Name.ToString ().Equals (strPropMetaName)) {
                        FieldInfo [] fi;
                        fi = myType.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        foreach (FieldInfo f in fi) {
                            if (f.GetValue (item).ToString ().Equals (strPropValue))
                                return (T) m_pool [typeof (T)] [i];
                            else
                                continue;

                        }
                    } else
                        continue;

                }
            } else
                continue;

        }
    }
    return default (T);
}
----------------------------------------

public void AddItem < T > (T value) {
    Int32 pID = totalCount;
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType)) {
        m_pool.Add (myType, new Dictionary < int, object > ());
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    if (! m_pool [myType].ContainsKey (pID)) {
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    m_pool [myType] [pID] = value;
    totalCount ++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_157_213
730791_797452_97_109
Title: How to get value list from generic dictionary 
----------------------------------------

public T GetItemByPropertyValue < T > (String strPropMetaName, String strPropValue) {
    Type myType = typeof (T);
    for (int i = 0; i < this.TotalCount; i ++) {
        if (! m_pool.ContainsKey (myType)) {
            return default (T);
        } else {
            if (this.ContainsKey < T > (i)) {
                T item = this.GetItem < T > (i);
                MemberInfo [] members = myType.GetMembers ();
                for (int j = 0; j < members.Length; j ++) {
                    logger.Info ("members[j].Name is " + members [j].Name);
                    if (members [j].Name.ToString ().Equals (strPropMetaName)) {
                        FieldInfo [] fi;
                        fi = myType.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        foreach (FieldInfo f in fi) {
                            if (f.GetValue (item).ToString ().Equals (strPropValue))
                                return (T) m_pool [typeof (T)] [i];
                            else
                                continue;

                        }
                    } else
                        continue;

                }
            } else
                continue;

        }
    }
    return default (T);
}
----------------------------------------

public bool RemoveItem < T > (Int32 pID) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType))
        return false;

    if (! m_pool [myType].ContainsKey (pID))
        return false;

    totalCount --;
    return m_pool [myType].Remove (pID);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_44_67
730791_797452_97_109
Title: How to get value list from generic dictionary 
----------------------------------------

public void AddItem < T > (Int32 pID, T value) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType)) {
        m_pool.Add (myType, new Dictionary < int, object > ());
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    if (! m_pool [myType].ContainsKey (pID)) {
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    m_pool [myType] [pID] = value;
    totalCount ++;
}
----------------------------------------

public bool RemoveItem < T > (Int32 pID) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType))
        return false;

    if (! m_pool [myType].ContainsKey (pID))
        return false;

    totalCount --;
    return m_pool [myType].Remove (pID);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
730791_797452_70_94
730791_797452_97_109
Title: How to get value list from generic dictionary 
----------------------------------------

public void AddItem < T > (T value) {
    Int32 pID = totalCount;
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType)) {
        m_pool.Add (myType, new Dictionary < int, object > ());
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    if (! m_pool [myType].ContainsKey (pID)) {
        m_pool [myType].Add (pID, value);
        totalCount ++;
        return;
    }
    m_pool [myType] [pID] = value;
    totalCount ++;
}
----------------------------------------

public bool RemoveItem < T > (Int32 pID) {
    Type myType = typeof (T);
    if (! m_pool.ContainsKey (myType))
        return false;

    if (! m_pool [myType].ContainsKey (pID))
        return false;

    totalCount --;
    return m_pool [myType].Remove (pID);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7315563_7356493_16_25
7315563_7356493_4_14
Title: How to check if is descendant within tree structure? 
----------------------------------------

public static IEnumerable < T > GetDescendents < T > (this IHaveFamily < T > instance) where T : IHaveFamily < T > {
    var result = instance.Children;
    if (! result.Any ())
        return result;

    foreach (var child in instance.Children) {
        result = result.Concat (child.Children);
    }
    return result;
}
----------------------------------------

public static bool IsAncestorOf < T > (this IHaveFamily < T > instance1, IHaveFamily < T > instance2) where T : IHaveFamily < T > {
    if (instance1.IsLeaf ())
        return false;

    foreach (var child in instance1.Children) {
        if (child.Equals (instance2))
            return true;

        return instance1.IsAncestorOf (child);
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7319952_7320085_1_26
7319952_7321004_1_20
Title: How to get ListBox ItemsPanel in code behind 
----------------------------------------

public static T FindChild < T > (this FrameworkElement obj, string name) {
    DependencyObject dep = obj as DependencyObject;
    T ret = default (T);
    if (dep != null) {
        int childcount = VisualTreeHelper.GetChildrenCount (dep);
        for (int i = 0; i < childcount; i ++) {
            DependencyObject childDep = VisualTreeHelper.GetChild (dep, i);
            FrameworkElement child = childDep as FrameworkElement;
            if (child.GetType () == typeof (T) && child.Name == name) {
                ret = (T) Convert.ChangeType (child, typeof (T));
                break;
            }
            ret = child.FindChild < T > (name);
            if (ret != null)
                break;

        }
    }
    return ret;
}
----------------------------------------

public static IEnumerable < T > FindVisualChildren < T > (this DependencyObject depObj) where T : DependencyObject {
    if (depObj != null) {
        for (int i = 0; i < VisualTreeHelper.GetChildrenCount (depObj); i ++) {
            DependencyObject child = VisualTreeHelper.GetChild (depObj, i);
            var typedChild = child as T;
            if (typedChild != null) {
                yield return typedChild;
            }
            foreach (T childOfChild in FindVisualChildren < T > (child)) {
                yield return childOfChild;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7319952_7320085_1_26
7319952_7321019_7_26
Title: How to get ListBox ItemsPanel in code behind 
----------------------------------------

public static T FindChild < T > (this FrameworkElement obj, string name) {
    DependencyObject dep = obj as DependencyObject;
    T ret = default (T);
    if (dep != null) {
        int childcount = VisualTreeHelper.GetChildrenCount (dep);
        for (int i = 0; i < childcount; i ++) {
            DependencyObject childDep = VisualTreeHelper.GetChild (dep, i);
            FrameworkElement child = childDep as FrameworkElement;
            if (child.GetType () == typeof (T) && child.Name == name) {
                ret = (T) Convert.ChangeType (child, typeof (T));
                break;
            }
            ret = child.FindChild < T > (name);
            if (ret != null)
                break;

        }
    }
    return ret;
}
----------------------------------------

private static T GetVisualChild < T > (DependencyObject parent) where T : Visual {
    T child = default (T);
    int numVisuals = VisualTreeHelper.GetChildrenCount (parent);
    for (int i = 0; i < numVisuals; i ++) {
        Visual v = (Visual) VisualTreeHelper.GetChild (parent, i);
        child = v as T;
        if (child == null) {
            child = GetVisualChild < T > (v);
        }
        if (child != null) {
            break;
        }
    }
    return child;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7319952_7321004_1_20
7319952_7321019_7_26
Title: How to get ListBox ItemsPanel in code behind 
----------------------------------------

public static IEnumerable < T > FindVisualChildren < T > (this DependencyObject depObj) where T : DependencyObject {
    if (depObj != null) {
        for (int i = 0; i < VisualTreeHelper.GetChildrenCount (depObj); i ++) {
            DependencyObject child = VisualTreeHelper.GetChild (depObj, i);
            var typedChild = child as T;
            if (typedChild != null) {
                yield return typedChild;
            }
            foreach (T childOfChild in FindVisualChildren < T > (child)) {
                yield return childOfChild;
            }
        }
    }
}
----------------------------------------

private static T GetVisualChild < T > (DependencyObject parent) where T : Visual {
    T child = default (T);
    int numVisuals = VisualTreeHelper.GetChildrenCount (parent);
    for (int i = 0; i < numVisuals; i ++) {
        Visual v = (Visual) VisualTreeHelper.GetChild (parent, i);
        child = v as T;
        if (child == null) {
            child = GetVisualChild < T > (v);
        }
        if (child != null) {
            break;
        }
    }
    return child;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7324177_33495028_1_11
7324177_7324339_1_38
Title: Finding a subsequence in longer sequence 
----------------------------------------

public static bool ContainsSequence < T > (this List < T > parent, List < T > target) {
    for (int fromElement = parent.IndexOf (target.First ()); (fromElement != - 1) && (fromElement <= parent.Count - target.Count); fromElement = parent.FindIndex (fromElement + 1, p = > p.Equals (target.First ()))) {
        var comparedSequence = parent.Skip (fromElement).Take (target.Count);
        if (comparedSequence.SequenceEqual (target))
            return true;

    }
    return false;
}
----------------------------------------

public static bool ContainsSubequence < T > (this IEnumerable < T > parent, IEnumerable < T > target) {
    bool foundOneMatch = false;
    var enumeratedTarget = target.ToList ();
    int enumPos = 0;
    using (IEnumerator < T > parentEnum = parent.GetEnumerator ())
    {
        while (parentEnum.MoveNext ()) {
            if (enumeratedTarget [enumPos].Equals (parentEnum.Current)) {
                foundOneMatch = true;
                if (enumPos == enumeratedTarget.Count - 1) {
                    return true;
                }
                enumPos ++;
            } else if (foundOneMatch) {
                foundOneMatch = false;
                enumPos = 0;
                if (enumeratedTarget [enumPos].Equals (parentEnum.Current)) {
                    foundOneMatch = true;
                    enumPos ++;
                }
            }
        }
        return false;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7324177_33495028_1_11
7324177_7334462_1_16
Title: Finding a subsequence in longer sequence 
----------------------------------------

public static bool ContainsSequence < T > (this List < T > parent, List < T > target) {
    for (int fromElement = parent.IndexOf (target.First ()); (fromElement != - 1) && (fromElement <= parent.Count - target.Count); fromElement = parent.FindIndex (fromElement + 1, p = > p.Equals (target.First ()))) {
        var comparedSequence = parent.Skip (fromElement).Take (target.Count);
        if (comparedSequence.SequenceEqual (target))
            return true;

    }
    return false;
}
----------------------------------------

public static bool ContainsSubsequence < T > (this IEnumerable < T > parent, IEnumerable < T > target) {
    var pattern = target.ToArray ();
    var source = new LinkedList < T > ();
    foreach (var element in parent) {
        source.AddLast (element);
        if (source.Count == pattern.Length) {
            if (source.SequenceEqual (pattern))
                return true;

            source.RemoveFirst ();
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7324177_7324339_1_38
7324177_7334462_1_16
Title: Finding a subsequence in longer sequence 
----------------------------------------

public static bool ContainsSubequence < T > (this IEnumerable < T > parent, IEnumerable < T > target) {
    bool foundOneMatch = false;
    var enumeratedTarget = target.ToList ();
    int enumPos = 0;
    using (IEnumerator < T > parentEnum = parent.GetEnumerator ())
    {
        while (parentEnum.MoveNext ()) {
            if (enumeratedTarget [enumPos].Equals (parentEnum.Current)) {
                foundOneMatch = true;
                if (enumPos == enumeratedTarget.Count - 1) {
                    return true;
                }
                enumPos ++;
            } else if (foundOneMatch) {
                foundOneMatch = false;
                enumPos = 0;
                if (enumeratedTarget [enumPos].Equals (parentEnum.Current)) {
                    foundOneMatch = true;
                    enumPos ++;
                }
            }
        }
        return false;
    }}
----------------------------------------

public static bool ContainsSubsequence < T > (this IEnumerable < T > parent, IEnumerable < T > target) {
    var pattern = target.ToArray ();
    var source = new LinkedList < T > ();
    foreach (var element in parent) {
        source.AddLast (element);
        if (source.Count == pattern.Length) {
            if (source.SequenceEqual (pattern))
                return true;

            source.RemoveFirst ();
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7325124_7327283_25_35
7325124_7327283_36_52
Title: How check intersection of DateTime periods 
----------------------------------------

public static bool EricOverlap < T > (Range < T > left, Range < T > right) where T : IComparable < T > {
    if (right.Start.CompareTo (left.End) > 0)
        return false;

    if (left.Start.CompareTo (right.End) > 0)
        return false;

    return true;
}
----------------------------------------

public static bool Overlap < T > (Range < T > left, Range < T > right) where T : IComparable < T > {
    if (left.Start.CompareTo (right.Start) == 0) {
        return true;
    } else if (left.Start.CompareTo (right.Start) > 0) {
        return left.Start.CompareTo (right.End) <= 0;
    } else {
        return right.Start.CompareTo (left.End) <= 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7346384_7347389_32_41
7346384_7347842_1_25
Title: How to create multiple nodes in a linked list then iterate through the nodes 
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;

    if (tailNode != null)
        tailNode.next = newNode;

    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

public void add (object entry) {
    if (headNode == null) {
        Node newNode = new Node (entry);
        headNode = newNode;
        ++ Node_count;
    } else {
        if (Node_count == 1) {
            Node newNode = new Node (entry);
            headNode.next = newNode;
            tailNode = newNode;
        } else {
            Node newNode = new Node (entry);
            tailNode.next = newNode;
            tailNode = newNode;
        }
        ++ Node_count;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
734930_41178509_91_117
734930_738176_1_26
Title: How to crop an image using C#? 
----------------------------------------

static byte [] Crop (string Img, int Width, int Height, int X, int Y) {
    try {
        using (SD.Image OriginalImage = SD.Image.FromFile (Img))
        {
            using (SD.Bitmap bmp = new SD.Bitmap (Width, Height))
            {
                bmp.SetResolution (OriginalImage.HorizontalResolution, OriginalImage.VerticalResolution);
                using (SD.Graphics Graphic = SD.Graphics.FromImage (bmp))
                {
                    Graphic.SmoothingMode = SmoothingMode.AntiAlias;
                    Graphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    Graphic.PixelOffsetMode = PixelOffsetMode.HighQuality;
                    Graphic.DrawImage (OriginalImage, new SD.Rectangle (0, 0, Width, Height), X, Y, Width, Height, SD.GraphicsUnit.Pixel);
                    MemoryStream ms = new MemoryStream ();
                    bmp.Save (ms, OriginalImage.RawFormat);
                    return ms.GetBuffer ();
                }}}}
    catch (Exception Ex) {
        throw (Ex);
    }
}
----------------------------------------

public Image Crop (string img, int width, int height, int x, int y) {
    try {
        Image image = Image.FromFile (img);
        Bitmap bmp = new Bitmap (width, height, PixelFormat.Format24bppRgb);
        bmp.SetResolution (80, 60);
        Graphics gfx = Graphics.FromImage (bmp);
        gfx.SmoothingMode = SmoothingMode.AntiAlias;
        gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;
        gfx.PixelOffsetMode = PixelOffsetMode.HighQuality;
        gfx.DrawImage (image, new Rectangle (0, 0, width, height), x, y, width, height, GraphicsUnit.Pixel);
        image.Dispose ();
        bmp.Dispose ();
        gfx.Dispose ();
        return bmp;
    }
    catch (Exception ex) {
        MessageBox.Show (ex.Message);
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7351289_17705883_1_18
7351289_28020413_1_21
Title: How do I perform explicit operation casting from reflection? 
----------------------------------------

private static object DynamicCast (object source, Type destType) {
    Type srcType = source.GetType ();
    if (srcType == destType)
        return source;

    var paramTypes = new Type [] {srcType};
    MethodInfo cast = destType.GetMethod ("op_Implicit", paramTypes);
    if (cast == null) {
        cast = destType.GetMethod ("op_Explicit", paramTypes);
    }
    if (cast != null)
        return cast.Invoke (null, new object [] {source});

    if (destType.IsEnum)
        return Enum.ToObject (destType, source);

    throw new InvalidCastException ();
}
----------------------------------------

private static bool DynamicCast (object source, Type destType, out object result) {
    Type srcType = source.GetType ();
    if (srcType == destType) {
        result = source;
        return true;
    }
    result = null;
    BindingFlags bf = BindingFlags.Static | BindingFlags.Public;
    MethodInfo castOperator = destType.GetMethods (bf).Union (srcType.GetMethods (bf)).Where (mi = > mi.Name == "op_Explicit" || mi.Name == "op_Implicit").Where (mi = > {
        var pars = mi.GetParameters ();
        return pars.Length == 1 && pars [0].ParameterType == srcType;
    }).Where (mi = > mi.ReturnType == destType).FirstOrDefault ();
    if (castOperator != null)
        result = castOperator.Invoke (null, new object [] {source});
    else
        return false;

    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7354384_7354613_1_17
7354384_7354779_10_27
Title: How to determine if a class is constructed (instance constructor has finished)? 
----------------------------------------

protected void OnSomeEvent (object sender, EventArgs e) {
    var trace = new StackTrace ();
    var frames = trace.GetFrames ();
    for (int idx = 0; idx < frames.Length; idx ++) {
        MethodBase method;
        method = frames [idx].GetMethod ();
        if (method.ReflectedType == typeof (Derived) && method.IsConstructor) {
            return;
        }
    }
}
----------------------------------------

protected void OnSomeEvent (object sender, EventArgs e) {
    switch (initCount) {
        case 0 :
            initCount += 1;
            Console.WriteLine ("NO");
            return;
        case 1 :
            initCount += 1;
            this.SomeEvent += new EventHandler (OnSomeEvent);
            Console.WriteLine ("NO");
            return;
    }
    Console.Write ("YES");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7355194_7366219_15_26
7355194_7366219_40_80
Title: Building a MicroRuleEngine using LinqExpressions 
----------------------------------------

public Func < T, bool > CompileRules < T > (IList < Rule > rules) {
    var paramUser = Expression.Parameter (typeof (T));
    List < Expression > expressions = new List < Expression > ();
    foreach (var r in rules) {
        expressions.Add (BuildExpr < T > (r, paramUser));
    }
    var expr = AndExpressions (expressions);
    return Expression.Lambda < Func < T, bool > > (expr, paramUser).Compile ();
}
----------------------------------------

Expression BuildExpr < T > (Rule r, ParameterExpression param) {
    Expression propExpression;
    Type propType;
    ExpressionType tBinary;
    if (r.MemberName.Contains ('.')) {
        String [] childProperties = r.MemberName.Split ('.');
        var property = typeof (T).GetProperty (childProperties [0]);
        var paramExp = Expression.Parameter (typeof (T), "SomeObject");
        propExpression = Expression.PropertyOrField (param, childProperties [0]);
        for (int i = 1; i < childProperties.Length; i ++) {
            property = property.PropertyType.GetProperty (childProperties [i]);
            propExpression = Expression.PropertyOrField (propExpression, childProperties [i]);
        }
        propType = propExpression.Type;
    } else {
        propExpression = Expression.PropertyOrField (param, r.MemberName);
        propType = propExpression.Type;
    }
    if (ExpressionType.TryParse (r.Operator, out tBinary)) {
        var right = Expression.Constant (Convert.ChangeType (r.TargetValue, propType));
        return Expression.MakeBinary (tBinary, propExpression, right);
    } else {
        var method = propType.GetMethod (r.Operator);
        var tParam = method.GetParameters () [0].ParameterType;
        var right = Expression.Constant (Convert.ChangeType (r.TargetValue, tParam));
        return Expression.Call (propExpression, method, right);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7387819_7388452_5_20
7387819_7388456_1_17
Title: How to get the concrete implementation of an interface by the generic type? 
----------------------------------------

public static IDocumentService < TDto > GetDocumentService < TDto > () {
    var rth = typeof (TDto).TypeHandle;
    Func < object > concreteFactory;
    lock (_dtoMappings)
    {
        if (_dtoMappings.TryGetValue (typeof (TDto).TypeHandle, out concreteFactory))
            return (IDocumentService < TDto >) concreteFactory ();

        FillMappings ();
        if (! _dtoMappings.TryGetValue (typeof (TDto).TypeHandle, out concreteFactory))
            throw new Exception ("No concrete implementation found.");

        return (IDocumentService < TDto >) concreteFactory ();
    }}
----------------------------------------

public static IDocumentService < TDto > GetDocumentService < TDto > () {
    Type tDto = typeof (IDocumentService < TDto >);
    Type tConcrete = null;
    foreach (Type t in Assembly.GetExecutingAssembly ().GetTypes ()) {
        if (tDto.IsAssignableFrom (t) && ! t.IsAbstract && ! t.IsInterface) {
            tConcrete = t;
            break;
        }
    }
    object o = Activator.CreateInstance (tConcrete);
    return (IDocumentService < TDto >) o;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7387819_7388452_5_20
7387819_7389235_1_14
Title: How to get the concrete implementation of an interface by the generic type? 
----------------------------------------

public static IDocumentService < TDto > GetDocumentService < TDto > () {
    var rth = typeof (TDto).TypeHandle;
    Func < object > concreteFactory;
    lock (_dtoMappings)
    {
        if (_dtoMappings.TryGetValue (typeof (TDto).TypeHandle, out concreteFactory))
            return (IDocumentService < TDto >) concreteFactory ();

        FillMappings ();
        if (! _dtoMappings.TryGetValue (typeof (TDto).TypeHandle, out concreteFactory))
            throw new Exception ("No concrete implementation found.");

        return (IDocumentService < TDto >) concreteFactory ();
    }}
----------------------------------------

public IDocumentService < TDto > GetDocumentService < TDto > () {
    var genericParameter = typeof (TDto);
    return (from type in Assembly.GetExecutingAssembly ().GetTypes ()
        where type.GetConstructor (Type.EmptyTypes) != null
        let interfaces = type.GetInterfaces ()
        from intf in interfaces
        where intf.IsGenericType
        let genarg = intf.GetGenericArguments () [0]
        where genarg == genericParameter
        select (IDocumentService < TDto >) Activator.CreateInstance (type)).FirstOrDefault ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7387819_7388456_1_17
7387819_7389235_1_14
Title: How to get the concrete implementation of an interface by the generic type? 
----------------------------------------

public static IDocumentService < TDto > GetDocumentService < TDto > () {
    Type tDto = typeof (IDocumentService < TDto >);
    Type tConcrete = null;
    foreach (Type t in Assembly.GetExecutingAssembly ().GetTypes ()) {
        if (tDto.IsAssignableFrom (t) && ! t.IsAbstract && ! t.IsInterface) {
            tConcrete = t;
            break;
        }
    }
    object o = Activator.CreateInstance (tConcrete);
    return (IDocumentService < TDto >) o;
}
----------------------------------------

public IDocumentService < TDto > GetDocumentService < TDto > () {
    var genericParameter = typeof (TDto);
    return (from type in Assembly.GetExecutingAssembly ().GetTypes ()
        where type.GetConstructor (Type.EmptyTypes) != null
        let interfaces = type.GetInterfaces ()
        from intf in interfaces
        where intf.IsGenericType
        let genarg = intf.GetGenericArguments () [0]
        where genarg == genericParameter
        select (IDocumentService < TDto >) Activator.CreateInstance (type)).FirstOrDefault ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
740555_740616_1_31
740555_844160_1_18
Title: LockBits Performance Critical Code 
----------------------------------------

private static unsafe void CopyBitmapToDest (BitmapData sourcebtmpdata, BitmapData destbtmpdata, Point point) {
    const int pixelSize = 3;
    var totalRow = Math.Min (destbtmpdata.Height - point.Y, sourcebtmpdata.Height);
    var rowSize = Math.Min ((destbtmpdata.Width - point.X) * pixelSize, sourcebtmpdata.Width * pixelSize);
    byte * srcPtr = (byte *) sourcebtmpdata.Scan0;
    byte * destPtr = (byte *) destbtmpdata.Scan0 + point.Y * destbtmpdata.Stride;
    for (int i = 0; i < totalRow; i ++) {
        for (int j = 0; j < rowSize; j ++)
            destPtr [point.X + j] = srcPtr [j];

        destPtr += destbtmpdata.Stride;
        srcPtr += sourcebtmpdata.Stride;
    }
}
----------------------------------------

private static void CopyBitmapToDest (BitmapData sourcebtmpdata, BitmapData destbtmpdata, Point point) {
    byte [] src = new byte [sourcebtmpdata.Height * sourcebtmpdata.Width * 3];
    int maximum = src.Length;
    byte [] dest = new byte [maximum];
    Marshal.Copy (sourcebtmpdata.Scan0, src, 0, src.Length);
    int pointX = point.X * 3;
    int copyLength = destbtmpdata.Width * 3 - pointX;
    int k = pointX + point.Y * sourcebtmpdata.Stride;
    int rowWidth = sourcebtmpdata.Stride;
    while (k < maximum) {
        Array.Copy (src, k, dest, k, copyLength);
        k += rowWidth;
    }
    Marshal.Copy (dest, 0, destbtmpdata.Scan0, dest.Length);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7412054_7426664_1_15
7412054_7452381_14_36
Title: Problem with Reactive Extension Observers 
----------------------------------------

public static IObservable < T > MyCombiner < T > (IObservable < T > P, IObservable < T > Q, T defaultValue, Func < T, T, T > fun) {
    var c = P.Select (p = > new {Type = 'P', Value = p}).Merge (Q.Select (p = > new {Type = 'Q', Value = p}));
    return c.Zip (c.Skip (1), (a, b) = > {
        if (a.Type == 'P' && b.Type == 'P')
            return new {Ok = true, Value = defaultValue};

        if (a.Type == 'P' && b.Type == 'Q')
            return new {Ok = true, Value = fun (a.Value, b.Value)};
        else
            return new {Ok = false, Value = default (T)};

    }).Where (b = > b.Ok).Select (b = > b.Value);
}
----------------------------------------

public static IObservable < TResult > Before < TLeft, TRight, TResult > (this IObservable < TLeft > first, IObservable < TRight > second, Func < TLeft, TRight, TResult > resultSelector) {
    var result = new Subject < TResult > ();
    bool firstCame = false;
    TLeft lastLeft = default (TLeft);
    first.Subscribe (item = > {
        firstCame = true;
        lastLeft = item;
    });
    second.Subscribe (item = > {
        if (firstCame)
            result.OnNext (resultSelector (lastLeft, item));

        firstCame = false;
    });
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7412054_7426664_1_15
7412054_7452381_50_70
Title: Problem with Reactive Extension Observers 
----------------------------------------

public static IObservable < T > MyCombiner < T > (IObservable < T > P, IObservable < T > Q, T defaultValue, Func < T, T, T > fun) {
    var c = P.Select (p = > new {Type = 'P', Value = p}).Merge (Q.Select (p = > new {Type = 'Q', Value = p}));
    return c.Zip (c.Skip (1), (a, b) = > {
        if (a.Type == 'P' && b.Type == 'P')
            return new {Ok = true, Value = defaultValue};

        if (a.Type == 'P' && b.Type == 'Q')
            return new {Ok = true, Value = fun (a.Value, b.Value)};
        else
            return new {Ok = false, Value = default (T)};

    }).Where (b = > b.Ok).Select (b = > b.Value);
}
----------------------------------------

public static IObservable < TResult > Without < TLeft, TResult > (this IObservable < TLeft > first, Func < TLeft, TLeft, TResult > resultSelector, params IObservable < object > [] second) {
    var result = new Subject < TResult > ();
    bool firstCame = false;
    TLeft lastLeft = default (TLeft);
    first.Subscribe (item = > {
        if (firstCame)
            result.OnNext (resultSelector (lastLeft, item));

        firstCame = true;
        lastLeft = item;
    });
    foreach (var observable in second)
        observable.Subscribe (item = > firstCame = false);

    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7412054_7452381_14_36
7412054_7452381_50_70
Title: Problem with Reactive Extension Observers 
----------------------------------------

public static IObservable < TResult > Before < TLeft, TRight, TResult > (this IObservable < TLeft > first, IObservable < TRight > second, Func < TLeft, TRight, TResult > resultSelector) {
    var result = new Subject < TResult > ();
    bool firstCame = false;
    TLeft lastLeft = default (TLeft);
    first.Subscribe (item = > {
        firstCame = true;
        lastLeft = item;
    });
    second.Subscribe (item = > {
        if (firstCame)
            result.OnNext (resultSelector (lastLeft, item));

        firstCame = false;
    });
    return result;
}
----------------------------------------

public static IObservable < TResult > Without < TLeft, TResult > (this IObservable < TLeft > first, Func < TLeft, TLeft, TResult > resultSelector, params IObservable < object > [] second) {
    var result = new Subject < TResult > ();
    bool firstCame = false;
    TLeft lastLeft = default (TLeft);
    first.Subscribe (item = > {
        if (firstCame)
            result.OnNext (resultSelector (lastLeft, item));

        firstCame = true;
        lastLeft = item;
    });
    foreach (var observable in second)
        observable.Subscribe (item = > firstCame = false);

    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7414281_7414373_1_13
7414281_7415891_1_22
Title: c# bitarray index of positive bits 
----------------------------------------

public int [] GetIndexesForPositives () {
    var idIndexes = new LinkedList < int > ();
    for (var i = 0; i < Length; i ++) {
        if (Get (i)) {
            idIndexes.Add (i);
        }
    }
    return idIndexes.ToArray ();
}
----------------------------------------

public static int [] GetIndexesForPositives () {
    var idIndexes = new List < int > ();
    System.Reflection.FieldInfo field = data.GetType ().GetField ("m_array", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
    int [] values = field.GetValue (data) as int [];
    for (var i = 0; i < values.Length; i ++) {
        int _i = values [i];
        if (_i != 0) {
            for (var j = 0; j < 32; j ++) {
                if ((_i & (1 << j)) != 0) {
                    idIndexes.Add (i * 32 + j);
                }
            }
        }
    }
    return idIndexes.ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7414303_7414375_10_28
7414303_7414396_48_63
Title: Unit test a static method that calls a static method using moq 
----------------------------------------

public static string GetThumbnailUrl (List < Image > images, Uri baseUri, string defaultImageFullUrl) {
    if (images == null || images.FirstOrDefault () == null) {
        return defaultImageFullUrl;
    }
    Image latestImage = (from image in images
        orderby image.CreatedDate descending
        select image).First ();
    Uri fullUrl;
    return Uri.TryCreate (baseUri, latestImage.FileName, out fullUrl) ? fullUrl.AbsoluteUri : defaultImageFullUrl;
}
----------------------------------------

public static string GetThumbnailUrl (List < Image > images) {
    if (images == null || images.FirstOrDefault () == null) {
        return ImageRetrievalConfiguration.MiniDefaultImageFullUrl;
    }
    Image latestImage = (from image in images
        orderby image.CreatedDate descending
        select image).First ();
    Uri fullUrl;
    IImageRetrievalConfiguration imageRetrievalConfig = (IImageRetrievalConfiguration) SpringApplicationContext.ApplicationContext ["ImageRetrievalConfiguration"];
    return Uri.TryCreate (new Uri (imageRetrievalConfig.GetConfig ().ImageRepositoryName), latestImage.FileName, out fullUrl) ? fullUrl.AbsoluteUri : ImageRetrievalConfiguration.MiniDefaultImageFullUrl;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
74148_21079586_24_36
74148_28408141_37_60
Title: How to convert numbers between hexadecimal and decimal in C#? 
----------------------------------------

static decimal HexToDec (string hex) {
    decimal result = 0;
    hex = hex.ToLower ();
    for (int i = 0; i < hex.Length; i ++) {
        char valAt = hex [hex.Length - 1 - i];
        result += hexdecval [valAt] * (int) Math.Pow (16, i);
    }
    return result;
}
----------------------------------------

public static int HexToDec (string x) {
    int result = 0;
    int count = x.Length - 1;
    for (int i = 0; i < x.Length; i ++) {
        int temp = 0;
        switch (x [i]) {
            case 'A' :
                temp = 10;
                break;
            case 'B' :
                temp = 11;
                break;
            case 'C' :
                temp = 12;
                break;
            case 'D' :
                temp = 13;
                break;
            case 'E' :
                temp = 14;
                break;
            case 'F' :
                temp = 15;
                break;
            default :
                temp = - 48 + (int) x [i];
                break;
        }
        result += temp * (int) (Math.Pow (16, count));
        count --;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7415864_7646106_16_34
7415864_7646106_36_55
Title: Storing objects in IsolatedStorageSettings 
----------------------------------------

private T RetrieveSettingFromFile < T > (string dir, string file) where T : class {
    IsolatedStorageFile isolatedFileStore = IsolatedStorageFile.GetUserStoreForApplication ();
    if (isolatedFileStore.DirectoryExists (dir)) {
        try {
            using (var stream = new IsolatedStorageFileStream (System.IO.Path.Combine (dir, file), FileMode.Open, isolatedFileStore))
            {
                return (T) SerializationHelper.DeserializeData < T > (stream);
            }}
        catch (Exception ex) {
            System.Diagnostics.Debug.WriteLine ("Could not retrieve file " + dir + "\\" + file + ". With Exception: " + ex.Message);
        }
    }
    return null;
}
----------------------------------------

private void SaveSettingToFile < T > (string dir, string file, T data) {
    IsolatedStorageFile isolatedFileStore = IsolatedStorageFile.GetUserStoreForApplication ();
    if (! isolatedFileStore.DirectoryExists (dir))
        isolatedFileStore.CreateDirectory (dir);

    try {
        string fn = System.IO.Path.Combine (dir, file);
        if (isolatedFileStore.FileExists (fn))
            isolatedFileStore.DeleteFile (fn);

        using (var stream = new IsolatedStorageFileStream (fn, FileMode.CreateNew, FileAccess.ReadWrite, isolatedFileStore))
        {
            SerializationHelper.SerializeData < T > (data, stream);
        }}
    catch (Exception ex) {
        System.Diagnostics.Debug.WriteLine ("Could not save file " + dir + "\\" + file + ". With Exception: " + ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7427529_7428580_14_37
7427529_7430254_1_26
Title: Bind multiple value to DropDownList using LINQ? 
----------------------------------------

public void binddrop () {
    var userdetailsCollection = new List < object > ();
    for (var i = 0; i < 3; i ++) {
        var userdetails = new {Name = "User" + i, ID = i.ToString ()};
        userdetailsCollection.Add (userdetails);
    }
    drpvendor.DataSource = userdetailsCollection;
    drpvendor.DataTextField = "Name";
    drpvendor.DataValueField = "ID";
    drpvendor.DataBind ();
    drpvendor.Items.Insert (0, new ListItem ("-Select Vendor-", "0"));
}
----------------------------------------

public void binddrop (StringCollection colle) {
    var userdetails = (from elem in colle.Cast < string > ()
        from mail in elem.Split ('|')
        join users in objdata on mail equals users.Email
        where users.UserType != null
        select new {Name = users.FirstName, ID = users.UserId});
    drpvendor.DataSource = userdetails;
    drpvendor.DataTextField = "Name";
    drpvendor.DataValueField = "ID";
    drpvendor.DataBind ();
    drpvendor.Items.Insert (0, new ListItem ("-Select Vendor-", "0"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7430133_7430230_1_17
7430133_7430236_1_13
Title: Intersperse a List<> 
----------------------------------------

public static IEnumerable < T > Interleave < T > (params IEnumerable < T > [] arrays) {
    var enumerators = arrays.Select (array = > array.GetEnumerator ()).ToArray ();
    var finished = true;
    do
        {
            finished = true;
            foreach (var enumerator in enumerators) {
                if (enumerator.MoveNext ()) {
                    yield return enumerator.Current;
                    finished = false;
                }
            }
        } while (finished == false);
}
----------------------------------------

public static IEnumerable < T > Join < T > (this IEnumerable < T > src, Func < T > separatorFactory) {
    var srcArr = src.ToArray ();
    for (int i = 0; i < srcArr.Length; i ++) {
        yield return srcArr [i];
        if (i < srcArr.Length - 1) {
            yield return separatorFactory ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7430133_7430230_1_17
7430133_7430264_3_13
Title: Intersperse a List<> 
----------------------------------------

public static IEnumerable < T > Interleave < T > (params IEnumerable < T > [] arrays) {
    var enumerators = arrays.Select (array = > array.GetEnumerator ()).ToArray ();
    var finished = true;
    do
        {
            finished = true;
            foreach (var enumerator in enumerators) {
                if (enumerator.MoveNext ()) {
                    yield return enumerator.Current;
                    finished = false;
                }
            }
        } while (finished == false);
}
----------------------------------------

public static IEnumerable < T > Intersperse < T > (this IEnumerable < T > items, T separator) {
    bool first = true;
    foreach (T item in items) {
        if (first) {
            first = false;
        } else {
            yield return separator;
        }
        yield return item;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7430133_7430236_1_13
7430133_7430264_3_13
Title: Intersperse a List<> 
----------------------------------------

public static IEnumerable < T > Join < T > (this IEnumerable < T > src, Func < T > separatorFactory) {
    var srcArr = src.ToArray ();
    for (int i = 0; i < srcArr.Length; i ++) {
        yield return srcArr [i];
        if (i < srcArr.Length - 1) {
            yield return separatorFactory ();
        }
    }
}
----------------------------------------

public static IEnumerable < T > Intersperse < T > (this IEnumerable < T > items, T separator) {
    bool first = true;
    foreach (T item in items) {
        if (first) {
            first = false;
        } else {
            yield return separator;
        }
        yield return item;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
748387_49138148_3_20
748387_748437_1_14
Title: How to remove a stack item which is not on the top of the stack in C# 
----------------------------------------

public static void Remove < T > (this Stack < T > myStack, ICollection < T > elementsToRemove) {
    var reversedStack = new Stack < T > ();
    while (myStack.Count > 0) {
        var topItem = myStack.Pop ();
        if (! elementsToRemove.Contains (topItem)) {
            reversedStack.Push (topItem);
        }
    }
    while (reversedStack.Count > 0) {
        myStack.Push (reversedStack.Pop ());
    }
}
----------------------------------------

public static T Remove < T > (this Stack < T > stack, T element) {
    T obj = stack.Pop ();
    if (obj.Equals (element)) {
        return obj;
    } else {
        T toReturn = stack.Remove (element);
        stack.Push (obj);
        return toReturn;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7485037_7543935_16_50
7485037_7543935_52_68
Title: XDocument Text Node New Line 
----------------------------------------

public override void Write (char value) {
    if (value == '&') {
        if (_bufferState == 0) {
            _bufferState ++;
            return;
        } else {
            _bufferState = 0;
        }
    } else if (value == ';') {
        if (_bufferState > 1) {
            _bufferState ++;
            return;
        } else {
            Write ('&');
            Write (AmpToken);
            _bufferState = 0;
        }
    } else if (value == '\n') {
        base.Write ("&#10;");
        return;
    }
    base.Write (value);
}
----------------------------------------

public override void Write (string value) {
    if (_bufferState > 0) {
        if (value == AmpToken) {
            _bufferState ++;
            return;
        } else {
            Write ('&');
            _bufferState = 0;
        }
    }
    base.Write (value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7485037_7543935_16_50
7485037_7543935_70_90
Title: XDocument Text Node New Line 
----------------------------------------

public override void Write (char value) {
    if (value == '&') {
        if (_bufferState == 0) {
            _bufferState ++;
            return;
        } else {
            _bufferState = 0;
        }
    } else if (value == ';') {
        if (_bufferState > 1) {
            _bufferState ++;
            return;
        } else {
            Write ('&');
            Write (AmpToken);
            _bufferState = 0;
        }
    } else if (value == '\n') {
        base.Write ("&#10;");
        return;
    }
    base.Write (value);
}
----------------------------------------

public override void Write (char [] buffer, int index, int count) {
    if (_bufferState > 2) {
        _bufferState = 0;
        base.Write ('&');
        string replace;
        if ((buffer != null) && ((replace = GetReplaceLength (buffer, index, count)) != null)) {
            base.Write (replace);
            base.Write (buffer, index + replace.Length, count - replace.Length);
            return;
        } else {
            base.Write (AmpToken);
            base.Write (';');
        }
    }
    base.Write (buffer, index, count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7485037_7543935_52_68
7485037_7543935_70_90
Title: XDocument Text Node New Line 
----------------------------------------

public override void Write (string value) {
    if (_bufferState > 0) {
        if (value == AmpToken) {
            _bufferState ++;
            return;
        } else {
            Write ('&');
            _bufferState = 0;
        }
    }
    base.Write (value);
}
----------------------------------------

public override void Write (char [] buffer, int index, int count) {
    if (_bufferState > 2) {
        _bufferState = 0;
        base.Write ('&');
        string replace;
        if ((buffer != null) && ((replace = GetReplaceLength (buffer, index, count)) != null)) {
            base.Write (replace);
            base.Write (buffer, index + replace.Length, count - replace.Length);
            return;
        } else {
            base.Write (AmpToken);
            base.Write (';');
        }
    }
    base.Write (buffer, index, count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
751056_751149_1_29
751056_751520_1_36
Title: System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a receive 
----------------------------------------

public static string WebPageRead (string url) {
    if (String.IsNullOrEmpty (url)) {
        return null;
    }
    HttpWebRequest request = HttpWebRequest.Create (url) as HttpWebRequest;
    if (request == null) {
        return null;
    }
    request.Method = "GET";
    request.KeepAlive = false;
    request.ProtocolVersion = HttpVersion.Version10;
    using (WebResponse response = request.GetResponse ())
    {
        using (Stream stream = response.GetResponseStream ())
        {
            using (StreamReader reader = new StreamReader (stream, Encoding.UTF8))
            {
                return reader.ReadToEnd ();
            }}}}
----------------------------------------

public static string WebPageRead (string url) {
    string content = String.Empty;
    if (! String.IsNullOrEmpty (url)) {
        HttpWebRequest request = HttpWebRequest.Create (url) as HttpWebRequest;
        if (request != null) {
            request.Method = "GET";
            request.KeepAlive = false;
            request.ProtocolVersion = HttpVersion.Version10;
            try {
                using (WebResponse response = request.GetResponse ())
                {
                    using (Stream stream = response.GetResponseStream ())
                    {
                        using (StreamReader reader = new StreamReader (stream, Encoding.UTF8))
                        {
                            content = reader.ReadToEnd ();
                        }}}}
            catch (Exception exc) {
                throw exc;
            }
        }
    }
    return content;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7533132_7533641_20_48
7533132_7535266_1_34
Title: "Hoping to increase the speed of my WebService with Asynchronous calls but not sure how" 
----------------------------------------

public List < AvailabilityList > _asyncGetResortsForDate (String month, int year) {
    List < RegionList > regions = this.getRegionLists ();
    List < AvailabilityList > availability = new List < AvailabilityList > ();
    List < WaitHandle > handles = new List < WaitHandle > ();
    List < AvailabilityList > _asyncResults = new List < AvailabilityList > ();
    regions.ForEach (parent = > {
        Func < List < AvailabilityList > > allChildren = () = > _getAllChildren (parent, month, year);
        IAsyncResult res = allChildren.BeginInvoke (new AsyncCallback (x = > {
            List < AvailabilityList > result = (x.AsyncState as Func < List < AvailabilityList > >).EndInvoke (x);
            _asyncResults.AddRange (result);
        }), allChildren);
        handles.Add (res.AsyncWaitHandle);
    });
    WaitHandle.WaitAll (handles.ToArray ());
    return _asyncResults;
}
----------------------------------------

public List < AvailabilityList > _asyncGetResortsForDate (String month, int year) {
    List < RegionList > regions = this.getRegionLists ();
    List < AvailabilityList > availability = new List < AvailabilityList > ();
    List < Task > tasks = new List < Task > ();
    List < AvailabilityList > _asyncResults = new List < AvailabilityList > ();
    regions.ForEach (parent = > {
        parent.Regions.ForEach (child = > {
            if (! String.Equals (child.ID, "?")) {
                int countryID = Int32.Parse (parent.CountryID);
                var childId = child.ID;
                Task t = Task.Factory.StartNew ((s) = > {
                    var rslt = getExchangeAvailability (countryId, month, year, childId);
                    lock (_asyncResults)
                    {
                        _asyncResults.Add (rslt);
                    }});
                tasks.Add (t);
            }
        });
    });
    Task.WaitAll (tasks);
    return _asyncResults;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
753316_753329_1_10
753316_753332_1_12
Title: Extension method for Enumerable.Intersperse? 
----------------------------------------

public static IEnumerable < T > Intersperse < T > (this IEnumerable < T > source, T element) {
    bool first = true;
    foreach (T value in source) {
        if (! first)
            yield return element;

        yield return value;
        first = false;
    }
}
----------------------------------------

public static IEnumerable < T > Intersperse < T > (this IEnumerable < T > source, T element) {
    using (var enumerator = source.GetEnumerator ())
    {
        if (enumerator.MoveNext ()) {
            yield return enumerator.Current;
            while (enumerator.MoveNext ()) {
                yield return element;
                yield return enumerator.Current;
            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7542517_29554589_1_13
7542517_42356833_15_48
Title: Call a stored procedure with parameter in c# 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    using (SqlConnection con = new SqlConnection (dc.Con))
    {
        using (SqlCommand cmd = new SqlCommand ("sp_Add_contact", con))
        {
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue ("@FirstName", SqlDbType.VarChar).Value = txtFirstName.Text;
            cmd.Parameters.AddWithValue ("@LastName", SqlDbType.VarChar).Value = txtLastName.Text;
            con.Open ();
            cmd.ExecuteNonQuery ();
        }}}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string connetionString = null;
    SqlConnection connection;
    SqlDataAdapter adapter;
    SqlCommand command = new SqlCommand ();
    SqlParameter param;
    DataSet ds = new DataSet ();
    int i = 0;
    connetionString = "Data Source=servername;Initial Catalog=PUBS;User ID=sa;Password=yourpassword";
    connection = new SqlConnection (connetionString);
    connection.Open ();
    command.Connection = connection;
    command.CommandType = CommandType.StoredProcedure;
    command.CommandText = "SPCOUNTRY";
    param = new SqlParameter ("@COUNTRY", "Germany");
    param.Direction = ParameterDirection.Input;
    param.DbType = DbType.String;
    command.Parameters.Add (param);
    adapter = new SqlDataAdapter (command);
    adapter.Fill (ds);
    for (i = 0; i <= ds.Tables [0].Rows.Count - 1; i ++) {
        MessageBox.Show (ds.Tables [0].Rows [i] [0].ToString ());
    }
    connection.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7542517_42356833_15_48
7542517_7542564_1_13
Title: Call a stored procedure with parameter in c# 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string connetionString = null;
    SqlConnection connection;
    SqlDataAdapter adapter;
    SqlCommand command = new SqlCommand ();
    SqlParameter param;
    DataSet ds = new DataSet ();
    int i = 0;
    connetionString = "Data Source=servername;Initial Catalog=PUBS;User ID=sa;Password=yourpassword";
    connection = new SqlConnection (connetionString);
    connection.Open ();
    command.Connection = connection;
    command.CommandType = CommandType.StoredProcedure;
    command.CommandText = "SPCOUNTRY";
    param = new SqlParameter ("@COUNTRY", "Germany");
    param.Direction = ParameterDirection.Input;
    param.DbType = DbType.String;
    command.Parameters.Add (param);
    adapter = new SqlDataAdapter (command);
    adapter.Fill (ds);
    for (i = 0; i <= ds.Tables [0].Rows.Count - 1; i ++) {
        MessageBox.Show (ds.Tables [0].Rows [i] [0].ToString ());
    }
    connection.Close ();
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    using (SqlConnection con = new SqlConnection (dc.Con))
    {
        using (SqlCommand cmd = new SqlCommand ("sp_Add_contact", con))
        {
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add ("@FirstName", SqlDbType.VarChar).Value = txtFirstName.Text;
            cmd.Parameters.Add ("@LastName", SqlDbType.VarChar).Value = txtLastName.Text;
            con.Open ();
            cmd.ExecuteNonQuery ();
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7563118_7564367_17_25
7563118_7564367_1_15
Title: Saving an image of a UIElement rendered larger than it appears on screen 
----------------------------------------

static T Clone < T > (T source) where T : UIElement {
    if (source == null)
        return null;

    string xaml = XamlWriter.Save (source);
    var reader = new StringReader (xaml);
    var xmlReader = XmlTextReader.Create (reader, new XmlReaderSettings ());
    return (T) XamlReader.Load (xmlReader);
}
----------------------------------------

RenderTargetBitmap DrawToImage < T > (T source, double scale) where T : FrameworkElement {
    var clone = Clone (source);
    clone.Width = clone.Height = Double.NaN;
    clone.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
    clone.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
    clone.Margin = new Thickness ();
    var size = new Size (source.ActualWidth * scale, source.ActualHeight * scale);
    clone.Measure (size);
    clone.Arrange (new Rect (size));
    var renderBitmap = new RenderTargetBitmap ((int) clone.ActualWidth, (int) clone.ActualHeight, 96, 96, PixelFormats.Pbgra32);
    renderBitmap.Render (clone);
    return renderBitmap;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
756939_756973_1_16
756939_757011_1_17
Title: lambda expression to verify list is correctly ordered 
----------------------------------------

public static bool IsOrdered < T > (this IEnumerable < T > enumerable) {
    var comparer = Comparer < T >.Default;
    using (var e = enumerable.GetEnumerator ())
    {
        if (! e.MoveNext ()) {
            return true;
        }
        var previous = e.Current;
        while (e.MoveNext ()) {
            if (comparer.Compare (previous, e.Current) > 0) {
                return false;
            }
            previous = e.Current;
        }
        return true;
    }}
----------------------------------------

public static bool IsOrdered < T > (this IEnumerable < T > source) {
    var comparer = Comparer < T >.Default;
    T previous = default (T);
    bool first = true;
    foreach (T element in source) {
        if (! first && comparer.Compare (previous, element) > 0) {
            return false;
        }
        first = false;
        previous = element;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7589142_24654552_3_21
7589142_25643836_11_26
Title: Why does the WPF listbox change selection on mouse button down rather than button up? 
----------------------------------------

protected override void OnMouseUp (MouseButtonEventArgs e) {
    if (e.ChangedButton == MouseButton.Left) {
        DependencyObject obj = this.ContainerFromElement ((Visual) e.OriginalSource);
        if (obj != null) {
            FrameworkElement element = obj as FrameworkElement;
            if (element != null) {
                ListBoxItem item = element as ListBoxItem;
                if (item != null && this.Items.Contains (item)) {
                    this.SelectedItem = item;
                }
            }
        }
    }
}
----------------------------------------

protected override void OnMouseUp (MouseButtonEventArgs e) {
    if (e.ChangedButton != MouseButton.Left)
        return;

    var obj = ContainerFromElement ((Visual) e.OriginalSource);
    if (obj == null)
        return;

    var element = obj as FrameworkElement;
    if (element == null)
        return;

    var item = element as ListBoxItem;
    if (item == null)
        return;

    item.IsSelected = true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
7597773_7604825_1_89
7597773_7619042_1_25
Title: Does reactive extensions support rolling buffers? 
----------------------------------------

public static IObservable < IEnumerable < T > > BufferWithInactivity < T > (this IObservable < T > source, TimeSpan inactivity, int maximumBufferSize) {
    return Observable.Create < IEnumerable < T > > (o = > {
        var gate = new object ();
        var buffer = new List < T > ();
        var mutable = new SerialDisposable ();
        var subscription = (IDisposable) null;
        var scheduler = Scheduler.ThreadPool;
        Action dump = () = > {
            var bts = buffer.ToArray ();
            buffer = new List < T > ();
            if (o != null) {
                o.OnNext (bts);
            }
        };
        Action dispose = () = > {
            if (subscription != null) {
                subscription.Dispose ();
            }
            mutable.Dispose ();
        };
        Action < Action < IObserver < IEnumerable < T > > > > onErrorOrCompleted = onAction = > {
            lock (gate)
            {
                dispose ();
                dump ();
                if (o != null) {
                    onAction (o);
                }
            }};
        Action < Exception > onError = ex = > onErrorOrCompleted (x = > x.OnError (ex));
        Action onCompleted = () = > onErrorOrCompleted (x = > x.OnCompleted ());
        Action < T > onNext = t = > {
            lock (gate)
            {
                buffer.Add (t);
                if (buffer.Count == maximumBufferSize) {
                    dump ();
                    mutable.Disposable = Disposable.Empty;
                } else {
                    mutable.Disposable = scheduler.Schedule (inactivity, () = > {
                        lock (gate)
                        {
                            dump ();
                        }});
                }
            }};
        subscription = source.ObserveOn (scheduler).Subscribe (onNext, onError, onCompleted);
        return () = > {
            lock (gate)
            {
                o = null;
                dispose ();
            }};
    });
}
----------------------------------------

public static IObservable < IList < T > > SlidingBuffer < T > (this IObservable < T > obs, TimeSpan span, int max) {
    return Observable.CreateWithDisposable < IList < T > > (cl = > {
        var acc = new List < T > ();
        return obs.Buffer (span).Subscribe (next = > {
            if (next.Count == 0) {
                cl.OnNext (acc);
                acc.Clear ();
            } else {
                acc.AddRange (next);
                if (acc.Count >= max) {
                    cl.OnNext (acc);
                    acc.Clear ();
                }
            }
        }, err = > cl.OnError (err), () = > {
            cl.OnNext (acc);
            cl.OnCompleted ();
        });
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
760088_760475_119_132
760088_760475_133_144
Title: Execute a string in C# 4.0 
----------------------------------------

private static void Compile () {
    if (_assembly == null) {
        StringBuilder src = new StringBuilder (CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            src.AppendFormat (ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);

        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            src.AppendFormat (MethodTemplate, kvp.Key, kvp.Value);

        src.Append (CodeEnd);
        Trace.TraceError ("SOURCE\r\n{0}", src);
        _assembly = Compile (src.ToString ());
    }
}
----------------------------------------

private static Assembly Compile (string sourceCode) {
    CompilerParameters cp = new CompilerParameters ();
    cp.ReferencedAssemblies.AddRange (_references.ToArray ());
    cp.ReferencedAssemblies.Add (Assembly.GetExecutingAssembly ().ManifestModule.FullyQualifiedName);
    cp.CompilerOptions = "/target:library /optimize";
    cp.GenerateExecutable = false;
    cp.GenerateInMemory = true;
    CompilerResults cr = (new CSharpCodeProvider ()).CompileAssemblyFromSource (cp, sourceCode);
    if (cr.Errors.Count > 0)
        throw new CompilerException (cr.Errors);

    return cr.CompiledAssembly;
}
----------------------------------------

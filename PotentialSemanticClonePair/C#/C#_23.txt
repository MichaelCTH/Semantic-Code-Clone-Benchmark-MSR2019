$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3453274_28372263_3_63
3453274_38141486_1_16
Title: Using Linq to get the last N elements of a collection? 
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;

    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;

        for (int i = first; i < last; i ++)
            yield return inputList [i];

    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;

        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > source, int count) {
    if (source == null) {
        throw new ArgumentNullException ("source");
    }
    Queue < T > lastElements = new Queue < T > ();
    foreach (T element in source) {
        lastElements.Enqueue (element);
        if (lastElements.Count > count) {
            lastElements.Dequeue ();
        }
    }
    return lastElements;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3453274_28372263_73_103
3453274_3453310_3_21
Title: Using Linq to get the last N elements of a collection? 
----------------------------------------

private static IEnumerable < T > SkipLastIter < T > (this IEnumerable < T > input, int count) {
    var inputList = input as IList < T >;
    if (inputList != null) {
        int first = 0;
        int last = inputList.Count - count;
        if (last < 0)
            last = 0;

        for (int i = first; i < last; i ++)
            yield return inputList [i];

    } else {
        Queue < T > elements = new Queue < T > ();
        foreach (T item in input) {
            elements.Enqueue (item);
            if (elements.Count > count)
                yield return elements.Dequeue ();

        }
    }
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > collection, int n) {
    if (collection == null)
        throw new ArgumentNullException ("collection");

    if (n < 0)
        throw new ArgumentOutOfRangeException ("n", "n must be 0 or greater");

    LinkedList < T > temp = new LinkedList < T > ();
    foreach (var value in collection) {
        temp.AddLast (value);
        if (temp.Count > n)
            temp.RemoveFirst ();

    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3453274_28372263_73_103
3453274_3453340_3_30
Title: Using Linq to get the last N elements of a collection? 
----------------------------------------

private static IEnumerable < T > SkipLastIter < T > (this IEnumerable < T > input, int count) {
    var inputList = input as IList < T >;
    if (inputList != null) {
        int first = 0;
        int last = inputList.Count - count;
        if (last < 0)
            last = 0;

        for (int i = first; i < last; i ++)
            yield return inputList [i];

    } else {
        Queue < T > elements = new Queue < T > ();
        foreach (T item in input) {
            elements.Enqueue (item);
            if (elements.Count > count)
                yield return elements.Dequeue ();

        }
    }
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > source, int takeCount) {
    if (source == null) {
        throw new ArgumentNullException ("source");
    }
    if (takeCount < 0) {
        throw new ArgumentOutOfRangeException ("takeCount", "must not be negative");
    }
    if (takeCount == 0) {
        yield break;
    }
    T [] result = new T [takeCount];
    int i = 0;
    int sourceCount = 0;
    foreach (T element in source) {
        result [i] = element;
        i = (i + 1) % takeCount;
        sourceCount ++;
    }
    if (sourceCount < takeCount) {
        takeCount = sourceCount;
        i = 0;
    }
    for (int j = 0; j < takeCount; ++ j) {
        yield return result [(i + j) % takeCount];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3453274_28372263_73_103
3453274_38141486_1_16
Title: Using Linq to get the last N elements of a collection? 
----------------------------------------

private static IEnumerable < T > SkipLastIter < T > (this IEnumerable < T > input, int count) {
    var inputList = input as IList < T >;
    if (inputList != null) {
        int first = 0;
        int last = inputList.Count - count;
        if (last < 0)
            last = 0;

        for (int i = first; i < last; i ++)
            yield return inputList [i];

    } else {
        Queue < T > elements = new Queue < T > ();
        foreach (T item in input) {
            elements.Enqueue (item);
            if (elements.Count > count)
                yield return elements.Dequeue ();

        }
    }
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > source, int count) {
    if (source == null) {
        throw new ArgumentNullException ("source");
    }
    Queue < T > lastElements = new Queue < T > ();
    foreach (T element in source) {
        lastElements.Enqueue (element);
        if (lastElements.Count > count) {
            lastElements.Dequeue ();
        }
    }
    return lastElements;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3453274_3453310_3_21
3453274_3453340_3_30
Title: Using Linq to get the last N elements of a collection? 
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > collection, int n) {
    if (collection == null)
        throw new ArgumentNullException ("collection");

    if (n < 0)
        throw new ArgumentOutOfRangeException ("n", "n must be 0 or greater");

    LinkedList < T > temp = new LinkedList < T > ();
    foreach (var value in collection) {
        temp.AddLast (value);
        if (temp.Count > n)
            temp.RemoveFirst ();

    }
    return temp;
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > source, int takeCount) {
    if (source == null) {
        throw new ArgumentNullException ("source");
    }
    if (takeCount < 0) {
        throw new ArgumentOutOfRangeException ("takeCount", "must not be negative");
    }
    if (takeCount == 0) {
        yield break;
    }
    T [] result = new T [takeCount];
    int i = 0;
    int sourceCount = 0;
    foreach (T element in source) {
        result [i] = element;
        i = (i + 1) % takeCount;
        sourceCount ++;
    }
    if (sourceCount < takeCount) {
        takeCount = sourceCount;
        i = 0;
    }
    for (int j = 0; j < takeCount; ++ j) {
        yield return result [(i + j) % takeCount];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3453274_3453310_3_21
3453274_38141486_1_16
Title: Using Linq to get the last N elements of a collection? 
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > collection, int n) {
    if (collection == null)
        throw new ArgumentNullException ("collection");

    if (n < 0)
        throw new ArgumentOutOfRangeException ("n", "n must be 0 or greater");

    LinkedList < T > temp = new LinkedList < T > ();
    foreach (var value in collection) {
        temp.AddLast (value);
        if (temp.Count > n)
            temp.RemoveFirst ();

    }
    return temp;
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > source, int count) {
    if (source == null) {
        throw new ArgumentNullException ("source");
    }
    Queue < T > lastElements = new Queue < T > ();
    foreach (T element in source) {
        lastElements.Enqueue (element);
        if (lastElements.Count > count) {
            lastElements.Dequeue ();
        }
    }
    return lastElements;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3453274_3453340_3_30
3453274_38141486_1_16
Title: Using Linq to get the last N elements of a collection? 
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > source, int takeCount) {
    if (source == null) {
        throw new ArgumentNullException ("source");
    }
    if (takeCount < 0) {
        throw new ArgumentOutOfRangeException ("takeCount", "must not be negative");
    }
    if (takeCount == 0) {
        yield break;
    }
    T [] result = new T [takeCount];
    int i = 0;
    int sourceCount = 0;
    foreach (T element in source) {
        result [i] = element;
        i = (i + 1) % takeCount;
        sourceCount ++;
    }
    if (sourceCount < takeCount) {
        takeCount = sourceCount;
        i = 0;
    }
    for (int j = 0; j < takeCount; ++ j) {
        yield return result [(i + j) % takeCount];
    }
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > source, int count) {
    if (source == null) {
        throw new ArgumentNullException ("source");
    }
    Queue < T > lastElements = new Queue < T > ();
    foreach (T element in source) {
        lastElements.Enqueue (element);
        if (lastElements.Count > count) {
            lastElements.Dequeue ();
        }
    }
    return lastElements;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34559289_34559673_1_15
34559289_34559714_1_18
Title: Iterating through a 2D array with foreach 
----------------------------------------

public static int [] RowSums (int [,] arr2D) {
    int numRows = arr2D.GetLength (0);
    int numColumns = arr2D.GetLength (1);
    int [] sums = new int [numRows];
    for (int row = 0; row < numRows; ++ row) {
        for (int col = 0; col < numColumns; ++ col) {
            sums [row] += arr2D [row, col];
        }
    }
    return sums;
}
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34559807_34559859_18_40
34559807_34559959_1_18
Title: Stopwatch and ReadKey don't work properly 
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

void Main () {
    var t1 = new Thread (_ = > {
        var sw = Stopwatch.StartNew ();
        DoSomething ();
        Console.WriteLine ("took {0}ms", sw.ElapsedMilliseconds);
    });
    var t2 = new Thread (_ = > {
        var sw = Stopwatch.StartNew ();
        DoSomethingElse ();
        Console.WriteLine ("took {0}ms", sw.ElapsedMilliseconds);
    });
    t1.Start ();
    t2.Start ();
    t1.Join ();
    t2.Join ();
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34575198_34575300_10_25
34575198_34575719_1_14
Title: MVC EF database repository pattern 
----------------------------------------

[HttpGet] public ActionResult Verify (string id) {
    using (this.Database)
    {
        if (Database.VerifyUser (id)) {
            return View ();
        } else {
            ViewBag.Error = "There was an error with the verification process";
            return View ();
        }
    }}
----------------------------------------

[HttpGet] public ActionResult Verify (string id) {
    using (var context = new DbContext ())
    {
        var userRepo = new UserRepository (context);
        var departmentRepo = new DepartmentRepository (context);
        if (userRepo.verifyUser (id)) {
            return View ();
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34627693_34627706_1_11
34627693_34627716_1_10
Title: Not all code paths return a value - C# 
----------------------------------------

public List < Employee > GetEmployees () {
    List < Employee > employees = new List < Employee > ();
    Employee emp = new Employee ();
    emp.FirstName = "johnson";
    emp.LastName = " fernandes";
    emp.Salary = 14000;
    employees.Add (emp);
    return employees;
}
----------------------------------------

public List < Employee > GetEmployees () {
    List < Employee > employees = new List < Employee > ();
    Employee emp = new Employee ();
    emp.FirstName = "johnson";
    emp.LastName = " fernandes";
    emp.Salary = 14000;
    employees.Add (emp);
    return employees;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34627693_34627706_1_11
34627693_34628329_1_11
Title: Not all code paths return a value - C# 
----------------------------------------

public List < Employee > GetEmployees () {
    List < Employee > employees = new List < Employee > ();
    Employee emp = new Employee ();
    emp.FirstName = "johnson";
    emp.LastName = " fernandes";
    emp.Salary = 14000;
    employees.Add (emp);
    return employees;
}
----------------------------------------

public List < Employee > GetEmployees () {
    List < Employee > employees = new List < Employee > ();
    Employee emp = new Employee ();
    emp.FirstName = "johnson";
    emp.LastName = " fernandes";
    emp.Salary = 14000;
    employees.Add (emp);
    return employees;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34627693_34627716_1_10
34627693_34628329_1_11
Title: Not all code paths return a value - C# 
----------------------------------------

public List < Employee > GetEmployees () {
    List < Employee > employees = new List < Employee > ();
    Employee emp = new Employee ();
    emp.FirstName = "johnson";
    emp.LastName = " fernandes";
    emp.Salary = 14000;
    employees.Add (emp);
    return employees;
}
----------------------------------------

public List < Employee > GetEmployees () {
    List < Employee > employees = new List < Employee > ();
    Employee emp = new Employee ();
    emp.FirstName = "johnson";
    emp.LastName = " fernandes";
    emp.Salary = 14000;
    employees.Add (emp);
    return employees;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34637185_34647560_3_15
34637185_34649672_3_19
Title: Binding base64 String Image into List view Stored in SQLite Database in windows phone 8.1 
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value == null) {
        return null;
    }
    string item = value.ToString ();
    BitmapImage objBitmapImage = new BitmapImage ();
    objBitmapImage = NewViewModel.Base64StringToBitmap (item);
    return objBitmapImage;
}
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34637465_34637592_1_16
34637465_34637770_1_16
Title: If-statement: Best way to handle layering with same condition 
----------------------------------------

public bool Process () {
    if (ErrorLog != null) {
        PublishErrorLog ();
        return false;
    }
    if (ErrorLog != null) {
        PublishErrorLog ();
        return false;
    }
    return true;
}
----------------------------------------

public bool Process () {
    if (HasValidConnection) {
    }
    if (ErrorLog == null) {
        return true;
    } else
        PublishErrorLog ();

    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34644446_34644562_14_23
34644446_34644998_14_22
Title: C# if statement not being excuted unity 
----------------------------------------

public void increaseDamage () {
    money = PlayerPrefs.GetFloat ("score");
    if (money >= 45) {
        damage = PlayerPrefs.GetInt ("damage");
        math = damage + 5;
        PlayerPrefs.SetInt ("damage", math);
        math2 = money - 45;
        PlayerPrefs.SetFloat ("score", math2);
    }
}
----------------------------------------

public void increaseDamage () {
    if (money >= 45) {
        damage = PlayerPrefs.GetInt ("damage");
        math = damage + 5;
        PlayerPrefs.SetInt ("damage", math);
        math2 = money - 45;
        PlayerPrefs.SetInt ("score", math2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34652323_34652768_1_47
34652323_34652913_1_34
Title: Each row iterate through n columns 
----------------------------------------

private List < AdditionalPropertyType > SQLAddPropsStructured (DataTable dataTable) {
    AdditionalPropertyType lastNewType;
    foreach (DataRow row in dataTable.Rows) {
        AdditionalPropertyType newType = new AdditionalPropertyType ();
        newType.Name = row [0].ToString ();
        newType.Value = row [1].ToString ();
        lastNewType = newType;
        int field = 2;
        while (! String.IsNullOrEmpty (row [field].ToString ())) {
            var newSubType = new AdditionalPropertyType ();
            Name = row [field].ToString ();
            List < AdditionalPropertyType > propertyData = new List < AdditionalPropertyType > ();
            propertyData.Add (lastNewType);
            newSubType.AdditionalProperties = propertyData;
            lastNewType = newSubType;
            field ++;
        }
        currentAdditionalProperties.Insert (0, lastNewType);
        return currentAdditionalProperties;
    }
}
----------------------------------------

public static List < AdditionalPropertyType > SQLAddPropsStructured (DataTable dataTable, List < AdditionalPropertyType > currentadditionalproperties) {
    foreach (DataRow row in dataTable.Rows) {
        var tlprev = new AdditionalPropertyType {Name = row [0].ToString (), Value = row [1].ToString ()};
        bool isTlUpdated = true;
        for (int i = 2; i <= 3; ++ i) {
            if (String.IsNullOrEmpty (row [i].ToString ()) && isTlUpdated) {
                currentadditionalproperties.Insert (0, tlprev);
                isTlUpdated = false;
                break;
            }
            var lnext = new AdditionalPropertyType {Name = row [i].ToString ()};
            var lnextlist = new List < AdditionalPropertyType > ();
            lnextlist.Add (tlprev);
            lnext.AdditionalProperties = lnextlist;
            tlprev = lnext;
            isTlUpdated = true;
        }
        if (isTlUpdated)
            currentadditionalproperties.Insert (0, tlprev);

    }
    return currentadditionalproperties;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34670158_34670301_6_16
34670158_34670342_6_16
Title: Reading JSON from file using JSON.NET - Cannot implicitly convert type 'Newtonsoft.Json.Linq.JToken' to 'string' 
----------------------------------------

public static SettingsStore ReadJsonFile (string filePath) {
    if (string.IsNullOrEmpty (filePath)) {
        throw new ArgumentNullException ("filePath");
    }
    if (! File.Exists (filePath)) {
        throw new FileNotFoundException (string.Format (@"JSON settings file not found at [{0}]", filePath));
    }
    return JsonConvert.DeserializeObject < SettingsStore > (File.ReadAllText (filePath));
}
----------------------------------------

public static SettingsStore ReadJsonFile (string filePath) {
    if (string.IsNullOrEmpty (filePath)) {
        throw new ArgumentNullException ("filePath");
    }
    if (! File.Exists (filePath)) {
        throw new FileNotFoundException (string.Format (@"JSON settings file not found at [{0}]", filePath));
    }
    return JsonConvert.DeserializeObject < SettingsStore > (File.ReadAllText (filePath));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34691507_34691615_1_7
34691507_34691615_9_17
Title: How to work with extra int parameter in LINQ Where() 
----------------------------------------

public static IEnumerable < TSource > Where < TSource > (this IEnumerable < TSource > source, Func < TSource, int, bool > predicate) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    if (predicate == null)
        throw Error.ArgumentNull ("predicate");

    return WhereIterator < TSource > (source, predicate);
}
----------------------------------------

static IEnumerable < TSource > WhereIterator < TSource > (IEnumerable < TSource > source, Func < TSource, int, bool > predicate) {
    int index = - 1;
    foreach (TSource element in source) {
        checked {
            index ++;
        }
        if (predicate (element, index))
            yield return element;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34706900_34709721_1_26
34706900_35532936_1_38
Title: Waiting for a parse.com async task to finish in Unity3D 
----------------------------------------

public void SaveScore () {
    ParseObject SendScore = new ParseObject ("Scores");
    SendScore ["Score"] = CheckAnswer.score;
    SendScore ["user"] = ParseObject.CreateWithoutData ("_User", ParseUser.CurrentUser.ObjectId);
    SendScore ["TestMode"] = MainMenu.testmode;
    SendScore ["TotalQuestions"] = QuestionCreation.TotalQuestions;
    SendScore ["CorrectQuestions"] = CheckAnswer.CorrectQuestions;
    Task SendingScores = SendScore.SaveAsync ().ContinueWith (t = > {
        if (t.IsFaulted || t.IsCanceled) {
            DoneSave = false;
            print (t.Exception);
        } else {
            DoneSave = true;
            print ("Setting object ID!");
            ScoreObjectId = SendScore.ObjectId;
            print (ScoreObjectId);
        }
    });
}
----------------------------------------

public IEnumerator SaveScore () {
    bool canContinue = false;
    ParseObject SendScore = new ParseObject ("Scores");
    SendScore ["Score"] = CheckAnswer.score;
    SendScore ["user"] = ParseObject.CreateWithoutData ("_User", ParseUser.CurrentUser.ObjectId);
    SendScore ["TestMode"] = MainMenu.testmode;
    SendScore ["TotalQuestions"] = QuestionCreation.TotalQuestions;
    SendScore ["CorrectQuestions"] = CheckAnswer.CorrectQuestions;
    SendScore.SaveAsync ().ContinueWith (t = > {
        ScoreObjectId = SendScore.ObjectId;
        canContinue = true;
    });
    while (! canContinue) {
        yield return null;
    }
    ParseObject SendCorrectTopics = new ParseObject ("CorrectAnswers");
    SendCorrectTopics ["Score"] = SendScore.ObjectId;
    for (int i = 0; i <= 9; i ++) {
        string Topic = "Topic" + (i + 1).ToString ();
        SendCorrectTopics [Topic] = CheckAnswer.CorrectTopics [i];
    }
    SendCorrectTopics.SaveAsync ();
    SceneManager.LoadScene (0);
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34715979_34717769_1_33
34715979_34746335_13_28
Title: SynchronizationContext and DispatcherUnhandledException 
----------------------------------------

private void button_Click (object sender, RoutedEventArgs e) {
    Exception threadException = null;
    try {
        _synchronizationContext.Send (x = > {
            try {
                DoSomethingOnUiThreadThatThrowsException ();
            }
            catch (Exception ex) {
                Debug.WriteLine ("Catched Exception in thread that threw it.");
                threadException = ex;
            }
        }, null);
    }
    catch (Exception) {
        Debug.WriteLine ("Catched Exception in thread that calles Send-Method.");
        throw;
    }
    if (threadException != null) {
        Debug.WriteLine ("Catched Exception in thread that calles Send-Method.");
        throw threadException;
    }
}
----------------------------------------

private void button_Click (object sender, RoutedEventArgs e) {
    try {
        _synchronizationContext.Send (x = > {
            DoSomethingOnUiThreadThatThrowsException ();
        }, null);
    }
    catch (Exception) {
        Debug.WriteLine ("Catched Exception in thread that calles Send-Method.");
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34718641_34720359_35_49
34718641_34720359_51_71
Title: How to create associative array in wrapping class 
----------------------------------------

public List < int > GetSum (string index, params int [] indexes) {
    List < List < int > > l = new List < List < int > > ();
    foreach (int i in indexes) {
        DataValue dv = this [i];
        try {
            l.Add (dv [index]);
        }
        catch {
        }
    }
    return GetSum (l);
}
----------------------------------------

private List < int > GetSum (List < List < int > > l) {
    if (l.Count > 0) {
        List < int > result = new List < int > ();
        for (int j = 0; j < l.Count; j ++) {
            for (int z = 0; z < l.FirstOrDefault ().Count; z ++) {
                if (j == 0) {
                    result.Add (l [j] [z]);
                } else {
                    result [z] += l [j] [z];
                }
            }
        }
        return result;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34728481_34728683_1_19
34728481_34728968_1_16
Title: C# generics + polymorphism workaround? 
----------------------------------------

private IEnumerator _HandleResult < T > (object closure, System.Action < string > onError) {
    yield return webRequest;
    if (true) {
        if (typeof (T) == typeof (Texture))
            ((System.Action < Texture >) closure) (webRequest.texture);
        else if (typeof (T) == typeof (string))
            ((System.Action < string >) closure) (webRequest.text);
        else if (typeof (T) == typeof (MovieTexture))
            ((System.Action < MovieTexture >) closure) (webRequest.movie);
        else if (typeof (T) == typeof (byte []))
            ((System.Action < byte [] >) closure) (webRequest.bytes);
        else
            throw new System.NotSupportedException ("Could not interpret response data as " + typeof (T).Name + ". Supported types include Texture, MovieTexture, byte[] and string.");

    }
}
----------------------------------------

private IEnumerator _HandleResult < T > (System.Action < T > closure, System.Action < string > onError) {
    yield return webRequest;
    if (SuccessWithoutErrors (onError)) {
        if (typeof (T) == typeof (Texture))
            closure ((T) (object) webRequest.texture);
        else if (typeof (T) == typeof (string))
            closure ((T) (object) webRequest.text);
        else if (typeof (T) == typeof (MovieTexture))
            closure ((T) (object) webRequest.movie);
        else if (typeof (T) == typeof (byte []))
            closure ((T) (object) webRequest.bytes);
        else
            throw new System.NotSupportedException ("Could not interpret response data as " + typeof (T).Name + ". Supported types include Texture, MovieTexture, byte[] and string.");

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34741694_34741753_1_18
34741694_34742040_1_23
Title: Get two results from another method in the the main application class using c# 
----------------------------------------

public string GetImage (string name, out string title) {
    string result1;
    using (WebClient client = new WebClient ())
    {
        var uri = "https://en.wikipedia.org/w/api.php?action=query&format=json&prop=pageimages&pithumbsize=400&titles=" + name;
        string requestUrl = string.Format (uri, name);
        var response = client.DownloadString (new Uri (uri));
        var responseJson = JsonConvert.DeserializeObject < ImgRootobject > (response);
        var firstKey = responseJson.query.pages.First ().Key;
        result1 = responseJson.query.pages [firstKey].thumbnail.source;
        title = responseJson.query.pages [firstKey].title;
        var hash = uri.GetHashCode ();
    } return result1;
}
----------------------------------------

public Dictionary < string, string > GetImage (string name) {
    string result1;
    string result2;
    using (WebClient client = new WebClient ())
    {
        var uri = "https://en.wikipedia.org/w/api.php?action=query&format=json&prop=pageimages&pithumbsize=400&titles=" + name;
        string requestUrl = string.Format (uri, name);
        var response = client.DownloadString (new Uri (uri));
        var responseJson = JsonConvert.DeserializeObject < ImgRootobject > (response);
        var firstKey = responseJson.query.pages.First ().Key;
        result1 = responseJson.query.pages [firstKey].thumbnail.source;
        result2 = responseJson.query.pages [firstKey].title;
        var hash = uri.GetHashCode ();
    } Dictionary < string, string > dictionary = new Dictionary < string, string > ();
    dictionary.Add ("Source", result1);
    dictionary.Add ("Title", result2);
    return dictionary;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34741694_34741784_1_19
34741694_34742040_1_23
Title: Get two results from another method in the the main application class using c# 
----------------------------------------

public ImageInfo GetImage (string name) {
    ImageInfo info = new ImageInfo ();
    using (WebClient client = new WebClient ())
    {
        var uri = "https://en.wikipedia.org/w/api.php?action=query&format=json&prop=pageimages&pithumbsize=400&titles=" + name;
        string requestUrl = string.Format (uri, name);
        var response = client.DownloadString (new Uri (uri));
        var responseJson = JsonConvert.DeserializeObject < ImgRootobject > (response);
        var firstKey = responseJson.query.pages.First ().Key;
        info.Image = responseJson.query.pages [firstKey].thumbnail.source;
        info.Title = responseJson.query.pages [firstKey].title;
        var hash = uri.GetHashCode ();
    } return info;
}
----------------------------------------

public Dictionary < string, string > GetImage (string name) {
    string result1;
    string result2;
    using (WebClient client = new WebClient ())
    {
        var uri = "https://en.wikipedia.org/w/api.php?action=query&format=json&prop=pageimages&pithumbsize=400&titles=" + name;
        string requestUrl = string.Format (uri, name);
        var response = client.DownloadString (new Uri (uri));
        var responseJson = JsonConvert.DeserializeObject < ImgRootobject > (response);
        var firstKey = responseJson.query.pages.First ().Key;
        result1 = responseJson.query.pages [firstKey].thumbnail.source;
        result2 = responseJson.query.pages [firstKey].title;
        var hash = uri.GetHashCode ();
    } Dictionary < string, string > dictionary = new Dictionary < string, string > ();
    dictionary.Add ("Source", result1);
    dictionary.Add ("Title", result2);
    return dictionary;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34756299_34756975_1_13
34756299_34757876_24_36
Title: How to make a own input dialog? 
----------------------------------------

private void addButton_Click (object sender, EventArgs e) {
    using (var add = new Add ())
    {
        if (add.ShowDialog (this) == DialogResult.OK) {
            firstName = add.getFirstName ();
            lastName = add.getLastName ();
            textArea.Text = "First Name: " + firstName + "\r\n";
            textArea.Text += "Last Name: " + lastName;
        }
    }}
----------------------------------------

private void addButton_Click (object sender, EventArgs e) {
    if (firstNameBox.Text != "" && lastNameBox.Text != "") {
        firstName = firstNameBox.Text;
        lastName = lastNameBox.Text;
        this.DialogResult = DialogResult.OK;
    } else {
        MessageBox.Show ("Please provide both first name and last name", "Sorry", MessageBoxButtons.OK);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34765724_34765974_1_13
34765724_34765976_1_13
Title: Foreach (class variable in currentScope) in C# 
----------------------------------------

void generateInstaces () {
    myClass element1 = new myClass ();
    myClass element2 = new myClass ();
    myClass element3 = new myClass ();
    var myCollection = new List < myClass > {element1, element2, element3};
    foreach (myClass e in myCollection) {
        e.doSomething ();
    }
}
----------------------------------------

void generateInstaces () {
    List < myClass > elements = new List < myClass > ();
    elements.Add (new myClass (1, "99a"));
    elements.Add (new myClass (17, "hta"));
    elements.Add (new myClass (9, "fff"));
    foreach (myClass e in elements) {
        e.doSomething ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34765724_34765974_1_13
34765724_34768026_1_28
Title: Foreach (class variable in currentScope) in C# 
----------------------------------------

void generateInstaces () {
    myClass element1 = new myClass ();
    myClass element2 = new myClass ();
    myClass element3 = new myClass ();
    var myCollection = new List < myClass > {element1, element2, element3};
    foreach (myClass e in myCollection) {
        e.doSomething ();
    }
}
----------------------------------------

void generateInstaces () {
    List < object > myClassList = new List < object > ();
    FirstClass element1 = new FirstClass ();
    SecondClass element2 = new SecondClass ();
    ThirdClass element3 = new ThirdClass ();
    myClassList.add (element1);
    myClassList.add (element2);
    myClassList.add (element3);
    foreach (object mc in myClassList) {
        if (mc.GetType () == "FirstClass") {
        } else if (mc.GetType () == "SecondClass") {
        } else if (mc.GetType () == "ThirdClass") {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34765724_34765976_1_13
34765724_34768026_1_28
Title: Foreach (class variable in currentScope) in C# 
----------------------------------------

void generateInstaces () {
    List < myClass > elements = new List < myClass > ();
    elements.Add (new myClass (1, "99a"));
    elements.Add (new myClass (17, "hta"));
    elements.Add (new myClass (9, "fff"));
    foreach (myClass e in elements) {
        e.doSomething ();
    }
}
----------------------------------------

void generateInstaces () {
    List < object > myClassList = new List < object > ();
    FirstClass element1 = new FirstClass ();
    SecondClass element2 = new SecondClass ();
    ThirdClass element3 = new ThirdClass ();
    myClassList.add (element1);
    myClassList.add (element2);
    myClassList.add (element3);
    foreach (object mc in myClassList) {
        if (mc.GetType () == "FirstClass") {
        } else if (mc.GetType () == "SecondClass") {
        } else if (mc.GetType () == "ThirdClass") {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34787751_34789053_3_28
34787751_34789878_10_83
Title: Linq to XML GroupBy then OrderBy 
----------------------------------------

static void Main (string [] args) {
    var root = XElement.Load ("1.xml");
    var compIDs = root.Elements ().GroupBy (r = > r.Element ("Name").Value).Select (group = > new {Group = group.Key, Items = group.First ().Elements ("IDs").Elements ("ID").Select (id = > new Regex ("<ID>(.*)</ID>").Match (id.ToString ()).Groups [1].ToString ()).OrderBy (value = > value).ToArray ()}).ToArray ();
    using (var sw = new StreamWriter ("results.txt"))
    {
        foreach (var group in compIDs) {
            sw.WriteLine ("Size: " + group.Group + "\r\nIDs:");
            foreach (var id in group.Items)
                sw.WriteLine (id);

        }
    }}
----------------------------------------

private static void Main (string [] args) {
    var xml = @"<RSA>
  <Size>
    <Name>0005-24</Name>
    <IDs>
      <ID>0005</ID>
      <ID>0009</ID>
    </IDs>
  </Size>
  <Size>
    <Name>0005-24</Name>
    <IDs>
      <ID>0003</ID>
      <ID>0004</ID>
      <ID>0005</ID>
      <ID>0006</ID>
      <ID>0007</ID>
      <ID>0008</ID>
      <ID>0010</ID>
      <ID>0009</ID>
    </IDs>
  </Size>
  <Size>
    <Name>0015-24</Name>
    <IDs>
      <ID>0003</ID>
      <ID>0004</ID>
      <ID>0005</ID>
      <ID>0006</ID>
      <ID>0007</ID>
      <ID>0008</ID>
      <ID>0010</ID>
      <ID>0009</ID>
      <ID>0034</ID>
      <ID>0078</ID>
    </IDs>
  </Size>
  <Size>
    <Name>003-12</Name>
    <IDs>
      <ID>0003</ID>
      <ID>0004</ID>
      <ID>0005</ID>
      <ID>0006</ID>
      <ID>0007</ID>
      <ID>0008</ID>
      <ID>0010</ID>
      <ID>0009</ID>
    </IDs>
  </Size>
</RSA>";
    var stream = new MemoryStream (Encoding.UTF8.GetBytes (xml));
    var reader = new XmlTextReader (stream);
    var root = XElement.Load (reader);
    var names = root.Elements ("Size").GroupBy (r = > r.Element ("Name").Value, (key, Ids) = > new {Name = key, Ids = Ids.SelectMany (x = > x.Element ("IDs").Elements ("ID").Select (e = > e.Value)).Distinct ()}).OrderBy (x = > x.Name);
    foreach (var name in names) {
        Console.Write ((string.Concat ("Name: ", name.Name, " - ")));
        foreach (var id in name.Ids.OrderBy (x = > int.Parse (x))) {
            Console.Write (string.Concat (id, ", "));
        }
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34812421_34812978_1_22
34812421_34813259_10_29
Title: Update SQL comand doesn't change the data 
----------------------------------------

public static bool ChangeEventStatus (Connector cn, EventData eventData) {
    int updatedRows = 0;
    using (OleDbConnection conn = new OleDbConnection (someConnectionString))
    ; {
        conn.Open ();
        using (OleDbCommand cmd = cn.CreateCommand ())
        {
            cmd.CommandText = "Update EventList Set IsProcessed = ? Where EventId = ?";
            cmd.Parameters.Add ("@IsProcessed", OleDbType.Boolean).Value = true;
            cmd.Parameters.Add ("@EventId", OleDbType.BigInt).Value = eventData.EventId;
            updatedRows = cmd.ExecuteNonQuery ();
        } return (updatedRows == 1);
    }}
----------------------------------------

private static bool ChangeEventStatus (EventData eventData) {
    int updatedRows = 0;
    using (var cn = new OleDbConnection ("Provider=sqloledb;Data Source=localhost;Initial Catalog=FastExperiments;User Id = sa; Password = pass; "))
    {
        using (OleDbCommand cmd = cn.CreateCommand ())
        {
            cn.Open ();
            cmd.CommandText = "Update EventList Set IsProcessed = ? Where EventId = ?";
            cmd.Parameters.Add ("IsProcessed", OleDbType.Boolean).Value = true;
            cmd.Parameters.Add ("EventId", OleDbType.BigInt).Value = eventData.EventId;
            updatedRows = cmd.ExecuteNonQuery ();
        }} return (updatedRows == 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34841883_34841922_13_25
34841883_34841940_1_14
Title: How to restructure this bit of code? 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float ? v = try_get_input ();
    if (v != null) {
        textBox2.AppendText (Math.Sin (v.Value).ToString ());
    } else {
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34841883_34841922_13_25
34841883_34841952_1_13
Title: How to restructure this bit of code? 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float ? v = try_get_input ();
    if (v != null) {
        textBox2.AppendText (Math.Sin (v.Value).ToString ());
    } else {
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34841883_34841940_1_14
34841883_34841952_1_13
Title: How to restructure this bit of code? 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34954810_34955398_1_18
34954810_34955897_13_24
Title: Use LINQ aggregator dynamically 
----------------------------------------

private double AggregateDynamic < T > (IEnumerable < T > list, string propertyName, string func) {
    var propertyInfo = typeof (T).GetProperty (propertyName);
    Func < T, double > propertyFunction = x = > Convert.ToDouble (propertyInfo.GetValue (x, null));
    switch (func) {
        case "Sum" :
            return list.Sum (propertyFunction);
        case "Average" :
            return list.Average (propertyFunction);
        case "Count" :
            return list.Count ();
        case "Max" :
            return list.Max (propertyFunction);
        default :
            throw new ArgumentException ("Unknown aggregate function");
    }
}
----------------------------------------

static Func < T, double > BuildFunc < T > (string propertyName, string func) {
    var source = Expression.Parameter (typeof (IEnumerable < T >), "source");
    var item = Expression.Parameter (typeof (T), "item");
    Expression value = Expression.PropertyOrField (item, propertyName);
    if (value.Type != typeof (double))
        value = Expression.Convert (value, typeof (double));

    var selector = Expression.Lambda < Func < T, double > > (value, item);
    var methodCall = Expression.Lambda < Func < IEnumerable < T >, double > > (Expression.Call (typeof (Enumerable), func, new Type [] {item.Type}, source, selector), source);
    return methodCall.Compile ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34956541_34984834_1_36
34956541_35514441_1_71
Title: How can send every 500 employeed id to Oracle to resolve ORA-07195 
----------------------------------------

public List < GraphModel > countRequestCreatedByTypeDefaulPage (string [] employeesIds) {
    OracleTransaction trans = conn.BeginTransaction (IsolationLevel.ReadCommitted);
    OracleCommand cmd = new OracleCommand ("insert into employee_list values (:EMPLOYEE)", conn);
    cmd.Transaction = trans;
    cmd.Parameters.Add (new OracleParameter ("EMPLOYEE", OracleDbType.Varchar2));
    cmd.Parameters [0].Value = employeesIds;
    cmd.ArrayBindCount = employeesIds.Length;
    cmd.ExecuteNonQuery ();
    String sql = "";
    cmd = new OracleCommand (sql, conn);
    cmd.Transaction = trans;
    DataTable dataTable = null;
    try {
        dataTable = Data_base_Access.executeSQL (cmd, ConfigurationManager.ConnectionStrings ["stage"].ToString ());
        return (GraphModel.convertToList (dataTable));
    }
    catch (Exception ex) {
        Log.writeError ("Request DAO", ex);
        throw new DataAccessException ("There was an error counting the open requests");
    }
    finally {
        trans.Rollback ();
    }
    return dataTable;
}
----------------------------------------

public List < GraphModel > countRequestCreatedByTypeDefaulPage (int year, int month, String employeeID) {
    int count = 0;
    int countEmployees = 0;
    Dictionary < string, int > dataChart = new Dictionary < string, int > ();
    DataView dv = _employeeOverrideBO.getRelatedEmployeesRequests (year, month, employeeID);
    StringBuilder listEmployees = new StringBuilder ();
    foreach (DataRowView rowView in dv) {
        if (countEmployees == 500) {
            List < GraphModel > listReturn = _requestDAO.countRequestCreatedByTypeDefaulPage (listEmployees.ToString ());
            foreach (GraphModel model in listReturn) {
                if (dataChart.ContainsKey (model.SERIES1)) {
                    dataChart [model.SERIES1] = dataChart [model.SERIES1] + model.VAL;
                } else {
                    dataChart [model.SERIES1] = model.VAL;
                }
            }
            listEmployees = new StringBuilder ();
            count = 0;
            countEmployees = 0;
        }
        DataRow row = rowView.Row;
        String employee = row ["EMPLOYEE_ID"].ToString ();
        if (count > 0)
            listEmployees.Append (",");

        listEmployees.Append ("'").Append (employee).Append ("'");
        count ++;
        countEmployees ++;
    }
    List < GraphModel > listReturnLast = _requestDAO.countRequestCreatedByTypeDefaulPage (listEmployees.ToString ());
    foreach (GraphModel model in listReturnLast) {
        if (dataChart.ContainsKey (model.SERIES1)) {
            dataChart [model.SERIES1] = dataChart [model.SERIES1] + model.VAL;
        } else {
            dataChart [model.SERIES1] = model.VAL;
        }
    }
    List < GraphModel > list = new List < GraphModel > ();
    foreach (KeyValuePair < string, int > entry in dataChart) {
        GraphModel model = new GraphModel ();
        model.SERIES1 = entry.Key;
        model.VAL = entry.Value;
        list.Add (model);
    }
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
349742_1590461_1_30
349742_349772_6_30
Title: How do you test your Request.QueryString[] variables? 
----------------------------------------

public static T GetValue < T > (this NameValueCollection collection, string key) {
    if (collection == null) {
        return default (T);
    }
    var value = collection [key];
    if (value == null) {
        return default (T);
    }
    var type = typeof (T);
    if (type.IsGenericType && type.GetGenericTypeDefinition () == typeof (Nullable < >)) {
        type = Nullable.GetUnderlyingType (type);
    }
    var converter = TypeDescriptor.GetConverter (type);
    if (! converter.CanConvertTo (value.GetType ())) {
        return default (T);
    }
    return (T) converter.ConvertTo (value, type);
}
----------------------------------------

private T GetValue < T > (string [] keys, T vDefault) {
    T x = vDefault;
    string v = null;
    for (int i = 0; i < keys.Length && String.IsNullOrEmpty (v); i ++) {
        v = this.source [keys [i]];
    }
    if (! String.IsNullOrEmpty (v)) {
        try {
            x = (typeof (T).IsSubclassOf (typeof (Enum))) ? (T) Enum.Parse (typeof (T), v) : (T) Convert.ChangeType (v, typeof (T));
        }
        catch (Exception e) {
        }
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
349742_1590461_1_30
349742_349818_1_23
Title: How do you test your Request.QueryString[] variables? 
----------------------------------------

public static T GetValue < T > (this NameValueCollection collection, string key) {
    if (collection == null) {
        return default (T);
    }
    var value = collection [key];
    if (value == null) {
        return default (T);
    }
    var type = typeof (T);
    if (type.IsGenericType && type.GetGenericTypeDefinition () == typeof (Nullable < >)) {
        type = Nullable.GetUnderlyingType (type);
    }
    var converter = TypeDescriptor.GetConverter (type);
    if (! converter.CanConvertTo (value.GetType ())) {
        return default (T);
    }
    return (T) converter.ConvertTo (value, type);
}
----------------------------------------

public static T GetValue < T > (this NameValueCollection collection, string key) {
    if (collection == null) {
        throw new ArgumentNullException ("collection");
    }
    var value = collection [key];
    if (value == null) {
        throw new ArgumentOutOfRangeException ("key");
    }
    var converter = TypeDescriptor.GetConverter (typeof (T));
    if (! converter.CanConvertFrom (typeof (string))) {
        throw new ArgumentException (String.Format ("Cannot convert '{0}' to {1}", value, typeof (T)));
    }
    return (T) converter.ConvertFrom (value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
349742_349772_6_30
349742_349818_1_23
Title: How do you test your Request.QueryString[] variables? 
----------------------------------------

private T GetValue < T > (string [] keys, T vDefault) {
    T x = vDefault;
    string v = null;
    for (int i = 0; i < keys.Length && String.IsNullOrEmpty (v); i ++) {
        v = this.source [keys [i]];
    }
    if (! String.IsNullOrEmpty (v)) {
        try {
            x = (typeof (T).IsSubclassOf (typeof (Enum))) ? (T) Enum.Parse (typeof (T), v) : (T) Convert.ChangeType (v, typeof (T));
        }
        catch (Exception e) {
        }
    }
    return x;
}
----------------------------------------

public static T GetValue < T > (this NameValueCollection collection, string key) {
    if (collection == null) {
        throw new ArgumentNullException ("collection");
    }
    var value = collection [key];
    if (value == null) {
        throw new ArgumentOutOfRangeException ("key");
    }
    var converter = TypeDescriptor.GetConverter (typeof (T));
    if (! converter.CanConvertFrom (typeof (string))) {
        throw new ArgumentException (String.Format ("Cannot convert '{0}' to {1}", value, typeof (T)));
    }
    return (T) converter.ConvertFrom (value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35013369_35013479_6_17
35013369_35013559_6_20
Title: Method can only be called again if 3 seconds is passed 
----------------------------------------

public void MyFunction () {
    lock (_Lock)
    {
        var now = DateTime.UtcNow;
        if ((now - _MyFunctionLastCallTime).TotalSeconds < 3)
            return;

        _MyFunctionLastCallTime = now;
    }}
----------------------------------------

public void MyFunction () {
    if (stopwatch.IsRunning && stopwatch.Elapsed < MinInterval) {
        return;
    }
    try {
    }
    finally {
        stopwatch.Restart ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35020444_35020775_1_24
35020444_35022478_15_30
Title: C# Zero-One Multiple OverflowException using ULong 
----------------------------------------

private static ulong Getmultiple (ulong n) {
    for (ulong i = 1;; i ++) {
        String binary = Convert.ToString ((long) i, 2);
        ulong no = 0;
        if (ulong.TryParse (binary, out no)) {
            if (no % n == 0) {
                return no;
            }
        } else {
            return 0;
        }
    }
}
----------------------------------------

private static BigInteger Getmultiple (BigInteger n) {
    for (BigInteger i = 1;; i ++) {
        String binary = Convert.ToString ((long) i, 2);
        BigInteger no = BigInteger.Parse (binary);
        if (no % n == 0) {
            return no;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3504660_15386883_1_32
3504660_25253255_1_43
Title: Decimal precision and scale in EF Code First 
----------------------------------------

protected override void OnModelCreating (System.Data.Entity.ModelConfiguration.ModelBuilder modelBuilder) {
    foreach (Type classType in from t in Assembly.GetAssembly (typeof (DecimalPrecisionAttribute)).GetTypes ()
        where t.IsClass && t.Namespace == "YOURMODELNAMESPACE"
        select t) {
        foreach (var propAttr in classType.GetProperties (BindingFlags.Public | BindingFlags.Instance).Where (p = > p.GetCustomAttribute < DecimalPrecisionAttribute > () != null).Select (p = > new {prop = p, attr = p.GetCustomAttribute < DecimalPrecisionAttribute > (true)})) {
            var entityConfig = modelBuilder.GetType ().GetMethod ("Entity").MakeGenericMethod (classType).Invoke (modelBuilder, null);
            ParameterExpression param = ParameterExpression.Parameter (classType, "c");
            Expression property = Expression.Property (param, propAttr.prop.Name);
            LambdaExpression lambdaExpression = Expression.Lambda (property, true, new ParameterExpression [] {param});
            DecimalPropertyConfiguration decimalConfig;
            if (propAttr.prop.PropertyType.IsGenericType && propAttr.prop.PropertyType.GetGenericTypeDefinition () == typeof (Nullable < >)) {
                MethodInfo methodInfo = entityConfig.GetType ().GetMethods ().Where (p = > p.Name == "Property").ToList () [7];
                decimalConfig = methodInfo.Invoke (entityConfig, new [] {lambdaExpression}) as DecimalPropertyConfiguration;
            } else {
                MethodInfo methodInfo = entityConfig.GetType ().GetMethods ().Where (p = > p.Name == "Property").ToList () [6];
                decimalConfig = methodInfo.Invoke (entityConfig, new [] {lambdaExpression}) as DecimalPropertyConfiguration;
            }
            decimalConfig.HasPrecision (propAttr.attr.Precision, propAttr.attr.Scale);
        }
    }
}
----------------------------------------

public static void OnModelCreating (DbModelBuilder modelBuilder) {
    foreach (Type classType in from t in Assembly.GetAssembly (typeof (DecimalPrecisionAttribute)).GetTypes ()
        where t.IsClass && t.Namespace == "FA.f1rstval.Data"
        select t) {
        foreach (var propAttr in classType.GetProperties (BindingFlags.Public | BindingFlags.Instance).Where (p = > p.GetCustomAttribute < DecimalPrecisionAttribute > () != null).Select (p = > new {prop = p, attr = p.GetCustomAttribute < DecimalPrecisionAttribute > (true)})) {
            ParameterExpression param = ParameterExpression.Parameter (classType, "c");
            Expression property = Expression.Property (param, propAttr.prop.Name);
            LambdaExpression lambdaExpression = Expression.Lambda (property, true, new ParameterExpression [] {param});
            DecimalPropertyConfiguration decimalConfig;
            int MethodNum;
            if (propAttr.prop.PropertyType.IsGenericType && propAttr.prop.PropertyType.GetGenericTypeDefinition () == typeof (Nullable < >)) {
                MethodNum = 7;
            } else {
                MethodNum = 6;
            }
            if (classType.GetCustomAttribute < ComplexTypeAttribute > () != null) {
                var complexConfig = modelBuilder.GetType ().GetMethod ("ComplexType").MakeGenericMethod (classType).Invoke (modelBuilder, null);
                MethodInfo methodInfo = complexConfig.GetType ().GetMethods ().Where (p = > p.Name == "Property").ToList () [MethodNum];
                decimalConfig = methodInfo.Invoke (complexConfig, new [] {lambdaExpression}) as DecimalPropertyConfiguration;
            } else {
                var entityConfig = modelBuilder.GetType ().GetMethod ("Entity").MakeGenericMethod (classType).Invoke (modelBuilder, null);
                MethodInfo methodInfo = entityConfig.GetType ().GetMethods ().Where (p = > p.Name == "Property").ToList () [MethodNum];
                decimalConfig = methodInfo.Invoke (entityConfig, new [] {lambdaExpression}) as DecimalPropertyConfiguration;
            }
            decimalConfig.HasPrecision (propAttr.attr.Precision, propAttr.attr.Scale);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35052859_35052921_1_18
35052859_35053015_1_17
Title: String was not recognized as a valid DateTime [Remove Time from DateTime] 
----------------------------------------

protected void btnUser_Click (object sender, EventArgs e) {
    {
        string Name = cmbName.Text;
        DateTime start = default (DateTime);
        SqlConnection myConn = new SqlConnection ("Data Source=localhost;" + "Initial Catalog=IBBTS_DB; Integrated Security =SSPI");
        SqlCommand retrieveStart_DateCmd = new SqlCommand ("SELECT startDate FROM testSet where TS_ID = 121 ;", myConn);
        SqlDataReader reader6 = retrieveStart_DateCmd.ExecuteReader ();
        while (reader6.Read ()) {
            start = (DateTime) reader6 [0];
        }
        reader6.Close ();
        string myFormattedString = start.ToString ("dd/MM/yyyy");
    }}
----------------------------------------

protected void btnUser_Click (object sender, EventArgs e) {
    string Name = cmbName.Text, start = string.empty;
    SqlConnection myConn = new SqlConnection ("Data Source=localhost;" + "Initial Catalog=IBBTS_DB; Integrated Security =SSPI");
    SqlCommand retrieveStart_DateCmd = new SqlCommand ("SELECT startDate FROM testSet where TS_ID = 121 ;", myConn);
    SqlDataReader reader6 = retrieveStart_DateCmd.ExecuteReader ();
    while (reader6.Read ()) {
        start = (reader6.GetValue (0).ToString ());
    }
    reader6.Close ();
    DateTime dateTime = DateTime.ParseExact (start, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3507355_3587720_121_153
3507355_3587720_57_90
Title: AnimateWindow API transparency problem with RichTextBox 
----------------------------------------

private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (Form2));
    this.richTextBox1 = new System.Windows.Forms.RichTextBox ();
    this.textBox1 = new System.Windows.Forms.TextBox ();
    this.SuspendLayout ();
    this.richTextBox1.Dock = System.Windows.Forms.DockStyle.Top;
    this.richTextBox1.Location = new System.Drawing.Point (0, 0);
    this.richTextBox1.Name = "richTextBox1";
    this.richTextBox1.Size = new System.Drawing.Size (240, 50);
    this.richTextBox1.TabIndex = 0;
    this.richTextBox1.Text = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.";
    this.textBox1.Dock = System.Windows.Forms.DockStyle.Bottom;
    this.textBox1.Location = new System.Drawing.Point (0, 57);
    this.textBox1.Multiline = true;
    this.textBox1.Name = "textBox1";
    this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
    this.textBox1.Size = new System.Drawing.Size (240, 50);
    this.textBox1.TabIndex = 1;
    this.textBox1.Text = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.";
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (240, 107);
    this.ControlBox = false;
    this.Controls.Add (this.textBox1);
    this.Controls.Add (this.richTextBox1);
    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
    this.Name = "Form2";
    this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
    this.Text = "Form2";
    this.ResumeLayout (false);
    this.PerformLayout ();
}
----------------------------------------

private void InitializeComponent () {
    this.button1 = new System.Windows.Forms.Button ();
    this.button2 = new System.Windows.Forms.Button ();
    this.SuspendLayout ();
    this.button1.Font = new System.Drawing.Font ("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte) (0)));
    this.button1.Location = new System.Drawing.Point (11, 12);
    this.button1.Name = "button1";
    this.button1.Size = new System.Drawing.Size (133, 114);
    this.button1.TabIndex = 0;
    this.button1.Text = "SHOW";
    this.button1.UseVisualStyleBackColor = true;
    this.button1.Click += new System.EventHandler (this.button1_Click);
    this.button2.Font = new System.Drawing.Font ("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte) (0)));
    this.button2.Location = new System.Drawing.Point (150, 12);
    this.button2.Name = "button2";
    this.button2.Size = new System.Drawing.Size (133, 114);
    this.button2.TabIndex = 1;
    this.button2.Text = "HIDE";
    this.button2.UseVisualStyleBackColor = true;
    this.button2.Click += new System.EventHandler (this.button2_Click);
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (294, 138);
    this.Controls.Add (this.button2);
    this.Controls.Add (this.button1);
    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = "Form1";
    this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
    this.Text = "Form1";
    this.ResumeLayout (false);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35089493_35090134_1_15
35089493_35090275_1_17
Title: How to get data from SQL database to store in to a combo box - C# 
----------------------------------------

private void GetOutlets () {
    BOStockTransfer obj_StockTransfer = new BOStockTransfer ();
    DataSet ds_OutletList = obj_StockTransfer.GetOutlets (connectionString);
    if (ds_OutletList.Tables [0].Rows.Count != 0) {
        cmdoutletID.DataSource = ds_OutletList.Tables [0];
        cmdoutletID.DisplayMember = "outletID";
        cmdoutletID.ValueMember = "outletID";
        cmdoutletID.Enabled = true;
    }
}
----------------------------------------

private void GetOutlets () {
    BOStockTransfer obj_StockTransfer = new BOStockTransfer ();
    DataSet ds_OutletList = obj_StockTransfer.GetOutlets (connectionString);
    cmdoutletID.DisplayMember = "outletId";
    cmdoutletID.ValueMember = "pkID";
    cmdoutletID.BeginUpdate ();
    try {
        cmdoutletID.Items.Clear ();
        foreach (var row in ds_OutletList.Tables [0].Rows)
            cmdoutletID.Items (new {outletid = row ["outletid"], pkID = row ["primaryKeyIDFieldName"]});

    }
    finally {
        cmdoutletID.EndUpdate ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35112535_37774262_49_62
35112535_37774262_69_155
Title: Scanning with C# and WIA 
----------------------------------------

public static List < Image > Scan () {
    WIA.ICommonDialog dialog = new WIA.CommonDialog ();
    WIA.Device device = dialog.ShowSelectDevice (WIA.WiaDeviceType.UnspecifiedDeviceType, true, false);
    if (device != null) {
        return Scan (device.DeviceID, 1);
    } else {
        throw new Exception ("You must select a device for scanning.");
    }
}
----------------------------------------

public static List < Image > Scan (string scannerId, int pages) {
    List < Image > images = new List < Image > ();
    bool hasMorePages = true;
    int numbrPages = pages;
    while (hasMorePages) {
        WIA.DeviceManager manager = new WIA.DeviceManager ();
        WIA.Device device = null;
        foreach (WIA.DeviceInfo info in manager.DeviceInfos) {
            if (info.DeviceID == scannerId) {
                device = info.Connect ();
                break;
            }
        }
        if (device == null) {
            string availableDevices = "";
            foreach (WIA.DeviceInfo info in manager.DeviceInfos) {
                availableDevices += info.DeviceID + "\n";
            }
            throw new Exception ("The device with provided ID could not be found. Available Devices:\n" + availableDevices);
        }
        SetWIAProperty (device.Properties, WIA_DEVICE_PROPERTY_PAGES_ID, 1);
        WIA.Item item = device.Items [1] as WIA.Item;
        AdjustScannerSettings (item, 150, 0, 0, 1250, 1700, 0, 0, 1);
        try {
            WIA.ICommonDialog wiaCommonDialog = new WIA.CommonDialog ();
            WIA.ImageFile image = (WIA.ImageFile) wiaCommonDialog.ShowTransfer (item, wiaFormatBMP, false);
            string fileName = Path.GetTempFileName ();
            File.Delete (fileName);
            image.SaveFile (fileName);
            image = null;
            images.Add (Image.FromFile (fileName));
        }
        catch (Exception exc) {
            throw exc;
        }
        finally {
            item = null;
            WIA.Property documentHandlingSelect = null;
            WIA.Property documentHandlingStatus = null;
            foreach (WIA.Property prop in device.Properties) {
                if (prop.PropertyID == WIA_PROPERTIES.WIA_DPS_DOCUMENT_HANDLING_SELECT)
                    documentHandlingSelect = prop;

                if (prop.PropertyID == WIA_PROPERTIES.WIA_DPS_DOCUMENT_HANDLING_STATUS)
                    documentHandlingStatus = prop;

            }
            hasMorePages = false;
            if (documentHandlingSelect != null) {
                if ((Convert.ToUInt32 (documentHandlingSelect.get_Value ()) & WIA_DPS_DOCUMENT_HANDLING_SELECT.FEEDER) != 0) {
                    hasMorePages = ((Convert.ToUInt32 (documentHandlingStatus.get_Value ()) & WIA_DPS_DOCUMENT_HANDLING_STATUS.FEED_READY) != 0);
                }
            }
        }
        numbrPages -= 1;
        if (numbrPages > 0)
            hasMorePages = true;
        else
            hasMorePages = false;

    }
    return images;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35132284_35138669_607_629
35132284_35138669_681_697
Title: Parsing MIME dates in mail headers (C# but not language related) 
----------------------------------------

public static bool TryParse (byte [] buffer, int startIndex, int length, out DateTimeOffset date) {
    if (buffer == null)
        throw new ArgumentNullException ("buffer");

    if (startIndex < 0 || startIndex > buffer.Length)
        throw new ArgumentOutOfRangeException ("startIndex");

    if (length < 0 || length > (buffer.Length - startIndex))
        throw new ArgumentOutOfRangeException ("length");

    var tokens = new List < DateToken > (TokenizeDate (buffer, startIndex, length));
    if (TryParseStandardDateFormat (tokens, buffer, out date))
        return true;

    if (TryParseUnknownDateFormat (tokens, buffer, out date))
        return true;

    date = new DateTimeOffset ();
    return false;
}
----------------------------------------

public static bool TryParse (byte [] buffer, out DateTimeOffset date) {
    if (buffer == null)
        throw new ArgumentNullException ("buffer");

    var tokens = new List < DateToken > (TokenizeDate (buffer, 0, buffer.Length));
    if (TryParseStandardDateFormat (tokens, buffer, out date))
        return true;

    if (TryParseUnknownDateFormat (tokens, buffer, out date))
        return true;

    date = new DateTimeOffset ();
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35132284_35138669_607_629
35132284_35138669_711_728
Title: Parsing MIME dates in mail headers (C# but not language related) 
----------------------------------------

public static bool TryParse (byte [] buffer, int startIndex, int length, out DateTimeOffset date) {
    if (buffer == null)
        throw new ArgumentNullException ("buffer");

    if (startIndex < 0 || startIndex > buffer.Length)
        throw new ArgumentOutOfRangeException ("startIndex");

    if (length < 0 || length > (buffer.Length - startIndex))
        throw new ArgumentOutOfRangeException ("length");

    var tokens = new List < DateToken > (TokenizeDate (buffer, startIndex, length));
    if (TryParseStandardDateFormat (tokens, buffer, out date))
        return true;

    if (TryParseUnknownDateFormat (tokens, buffer, out date))
        return true;

    date = new DateTimeOffset ();
    return false;
}
----------------------------------------

public static bool TryParse (string text, out DateTimeOffset date) {
    if (text == null)
        throw new ArgumentNullException ("text");

    var buffer = Encoding.UTF8.GetBytes (text);
    var tokens = new List < DateToken > (TokenizeDate (buffer, 0, buffer.Length));
    if (TryParseStandardDateFormat (tokens, buffer, out date))
        return true;

    if (TryParseUnknownDateFormat (tokens, buffer, out date))
        return true;

    date = new DateTimeOffset ();
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35132284_35138669_647_667
35132284_35138669_681_697
Title: Parsing MIME dates in mail headers (C# but not language related) 
----------------------------------------

public static bool TryParse (byte [] buffer, int startIndex, out DateTimeOffset date) {
    if (buffer == null)
        throw new ArgumentNullException ("buffer");

    if (startIndex < 0 || startIndex > buffer.Length)
        throw new ArgumentOutOfRangeException ("startIndex");

    int length = buffer.Length - startIndex;
    var tokens = new List < DateToken > (TokenizeDate (buffer, startIndex, length));
    if (TryParseStandardDateFormat (tokens, buffer, out date))
        return true;

    if (TryParseUnknownDateFormat (tokens, buffer, out date))
        return true;

    date = new DateTimeOffset ();
    return false;
}
----------------------------------------

public static bool TryParse (byte [] buffer, out DateTimeOffset date) {
    if (buffer == null)
        throw new ArgumentNullException ("buffer");

    var tokens = new List < DateToken > (TokenizeDate (buffer, 0, buffer.Length));
    if (TryParseStandardDateFormat (tokens, buffer, out date))
        return true;

    if (TryParseUnknownDateFormat (tokens, buffer, out date))
        return true;

    date = new DateTimeOffset ();
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35132284_35138669_647_667
35132284_35138669_711_728
Title: Parsing MIME dates in mail headers (C# but not language related) 
----------------------------------------

public static bool TryParse (byte [] buffer, int startIndex, out DateTimeOffset date) {
    if (buffer == null)
        throw new ArgumentNullException ("buffer");

    if (startIndex < 0 || startIndex > buffer.Length)
        throw new ArgumentOutOfRangeException ("startIndex");

    int length = buffer.Length - startIndex;
    var tokens = new List < DateToken > (TokenizeDate (buffer, startIndex, length));
    if (TryParseStandardDateFormat (tokens, buffer, out date))
        return true;

    if (TryParseUnknownDateFormat (tokens, buffer, out date))
        return true;

    date = new DateTimeOffset ();
    return false;
}
----------------------------------------

public static bool TryParse (string text, out DateTimeOffset date) {
    if (text == null)
        throw new ArgumentNullException ("text");

    var buffer = Encoding.UTF8.GetBytes (text);
    var tokens = new List < DateToken > (TokenizeDate (buffer, 0, buffer.Length));
    if (TryParseStandardDateFormat (tokens, buffer, out date))
        return true;

    if (TryParseUnknownDateFormat (tokens, buffer, out date))
        return true;

    date = new DateTimeOffset ();
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3514740_32198878_3_17
3514740_3514984_1_14
Title: How to split an array into a group of n elements each? 
----------------------------------------

private static IEnumerable < TList > Split < TList, T > (this TList value, int countOfEachPart) where TList : IEnumerable < T > {
    int cnt = value.Count () / countOfEachPart;
    List < IEnumerable < T > > result = new List < IEnumerable < T > > ();
    for (int i = 0; i <= cnt; i ++) {
        IEnumerable < T > newPart = value.Skip (i * countOfEachPart).Take (countOfEachPart).ToArray ();
        if (newPart.Any ())
            result.Add (newPart);
        else
            break;

    }
    return result.Cast < TList > ();
}
----------------------------------------

private static T [] [] SliceArray < T > (T [] source, int maxResultElements) {
    int numberOfArrays = source.Length / maxResultElements;
    if (maxResultElements * numberOfArrays < source.Length)
        numberOfArrays ++;

    T [] [] target = new T [numberOfArrays] [];
    for (int index = 0; index < numberOfArrays; index ++) {
        int elementsInThisArray = Math.Min (maxResultElements, source.Length - index * maxResultElements);
        target [index] = new T [elementsInThisArray];
        Array.Copy (source, index * maxResultElements, target [index], 0, elementsInThisArray);
    }
    return target;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35153872_35153975_1_14
35153872_35153999_12_24
Title: ASP.NET dynamically created textbox doesn't change value 
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    if (! isPostBack) {
        TextBox txtBox = new TextBox ();
        txtBox.ID = "newButton";
        form1.Controls.Add (txtBox);
        txtBox.Text = "initialVal";
    }
    if (IsPostBack && Session ["change"] == null) {
        txtBox.Text = "change";
        Session ["change"] = true;
    }
}
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    if (! IsPostBack) {
        txtBox.Text = "initialVal";
    }
    if (IsPostBack && Session ["change"] == null) {
        txtBox.Text = "change";
        Session ["change"] = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35191601_35191914_1_22
35191601_35193051_1_22
Title: Creating a Score Method for an Array 
----------------------------------------

public int score (char color) {
    int score = 0;
    bool firstMatch = true;
    for (int i = 0; i < gameBoard.Length - 1; i ++) {
        if (gameBoard [i] == color && gameBoard [i + 1] == color) {
            if (firstMatch == true) {
                score += 4;
                firstMatch = false;
            } else {
                score += 2;
            }
        } else {
            score += 0;
        }
    }
    return score;
}
----------------------------------------

public int score (char color) {
    int adj = 0;
    int score = 0;
    for (int i = 0; i < gameBoard.Length; i ++) {
        if (gameBoard [i] == color) {
            adj ++;
        } else {
            if (adj > 1) {
                score += adj * 2;
            }
            adj = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35195197_35195454_1_13
35195197_35195514_1_19
Title: Armstrong Number in C# 
----------------------------------------

static bool isArmstrong (int x) {
    int sum = 0;
    for (int i = x; i > 0; i = i / 10) {
        sum = sum + (int) Math.Pow (i % 10, 3.0);
    }
    if (x == sum)
        return true;
    else
        return false;

}
----------------------------------------

static bool isArmstrong (int x) {
    int sum = 0;
    int tempX = x;
    int temp = 0;
    int length = x.ToString ().Length;
    while (x != 0) {
        temp = x % 10;
        x = x / 10;
        sum += (int) Math.Pow (temp, length);
    }
    if (sum == tempX)
        return true;
    else
        return false;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3519539_46384078_26_37
3519539_46384078_43_63
Title: How to check if a String contains any of some strings 
----------------------------------------

static bool HasWantedCharacters (string source, string wantedCharacters) {
    foreach (char s in source) {
        foreach (char c in wantedCharacters) {
            if (c == s)
                return true;

        }
    }
    return false;
}
----------------------------------------

static bool HasWantedCharacters (string source, string wantedCharacters, out string capturedCharacters) {
    capturedCharacters = "";
    foreach (char s in source) {
        foreach (char c in wantedCharacters) {
            if (c == s) {
                if (! capturedCharacters.Contains (c.ToString ()))
                    capturedCharacters += c.ToString ();

            }
        }
    }
    if (capturedCharacters.Length > 0)
        return true;
    else
        return false;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35243995_35244027_4_21
35243995_35244263_7_20
Title: C# Why can't interfaces implement methods like this? What is a workaround to solve my issue? 
----------------------------------------

public bool unitCanBeTargeted () {
    bool targetable = false;
    if (this is Insect) {
        targetable = (this as Insect).isFasterThanLight ();
    } else if (this is FighterJet) {
        targetable = ! (this as FighterJet).Flying;
    } else if (this is Zombie) {
        targetable = ! (this as Zombie).Invisible;
    }
    return targetable;
}
----------------------------------------

public static bool unitCanBeTargeted (this ITargetableUnit unit) {
    bool targetable = false;
    Insect insect = unit as Insect;
    if (insect != null)
        return insect.isFasterThanLight ();

    FighterJet jet = unit as FighterJet;
    if (jet != null)
        return ! jet.Flying;

    Zombie zombie = unit as Zombie;
    if (zombie != null)
        return zombie.Invisible;

    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35250057_35250555_1_13
35250057_35250564_1_11
Title: "C# how do I close my app by pressing the ""Enter"" button?" 
----------------------------------------

static void Main (string [] args) {
    while (true) {
        Console.WriteLine ("test");
        ConsoleKeyInfo key = Console.ReadKey ();
        if (key.Key == ConsoleKey.Enter)
            break;
        else
            Console.WriteLine ("You gave something else");

        Console.WriteLine ("This is the end of the app");
        break;
    }
}
----------------------------------------

public static void Main () {
    DateTime dat = DateTime.Now;
    Console.WriteLine ("The time: {0:d} at {0:t}", dat);
    TimeZoneInfo tz = TimeZoneInfo.Local;
    Console.WriteLine ("The time zone: {0}\n", tz.IsDaylightSavingTime (dat) ? tz.DaylightName : tz.StandardName);
    Console.Write ("Press <Enter> to exit... ");
    while (Console.ReadKey ().Key != ConsoleKey.Enter) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35259799_35259890_1_25
35259799_35260297_1_12
Title: How do I check If brackets are of same 
----------------------------------------

public void CheckParentheses (string inputParentheses) {
    int parenLevel = 0;
    for (int i = 0; i < inputParentheses.Length; i ++) {
        if (inputParentheses [i] == '(')
            parenLevel ++;
        else if (inputParentheses [i] == ')')
            parenLevel --;

        if (parenLevel < 0) {
            Console.WriteLine ("false");
            return;
        }
    }
    if (parenLevel != 0)
        Console.WriteLine ("false");
    else
        Console.WriteLine ("true");

}
----------------------------------------

public static bool CheckParentheses (string inputParentheses) {
    if ((inputParentheses.Length % 2) != 0 || inputParentheses [0] == ')' || inputParentheses [inputParentheses.Length - 1] == '(')
        return false;

    for (int i = 0; i < inputParentheses.Length / 2; i ++) {
        if (inputParentheses [i] != '(' || inputParentheses [inputParentheses.Length - i - 1] != ')')
            return false;

    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35270204_35270423_1_42
35270204_35270687_1_38
Title: How to make number Count in loop in c#? 
----------------------------------------

static void Main (string [] args) {
    demo obj = new demo ();
    string uname, pass;
    Console.ForegroundColor = ConsoleColor.Green;
    label1 : Console.Clear ();
    Console.WriteLine ("Enter username");
    uname = Console.ReadLine ();
    Console.WriteLine ("Enter Password");
    bool SuccessfulPassword = false;
    int AttemptsLeft = 5;
    while (! SuccessfulPassword && AttemptsLeft > 0) {
        pass = Console.ReadLine ();
        obj.setName (uname);
        obj.setPass (pass);
        if (obj.getName () == "niit") {
            if (obj.getPass () == "1234") {
                Console.WriteLine ("welcome");
                SuccessfulPassword = true;
            }
        } else {
            AttemptsLeft --;
            Console.Clear ();
            Console.WriteLine ("Invalid");
            Console.WriteLine ("\n \n \n To try again enter y");
            int n = 5;
            string yes = Console.ReadLine ();
            if (yes == "y") {
                Console.Write (AttemptsLeft + " Tries left");
            }
        }
        Console.ReadKey ();
    }
}
----------------------------------------

static void Main (string [] args) {
    demo obj = new demo ();
    string uname, pass;
    Console.ForegroundColor = ConsoleColor.Green;
    int maxTries;
    int tries = maxTries = 5;
    do
        {
            if (tries != maxTries) {
                Console.Clear ();
                Console.WriteLine ("Invalid");
                Console.Write ("\n\t" + tries + " Tries left");
                Console.WriteLine ("\n\n\n\tTry again? (y/n)");
                string input;
                do
                    {
                        input = Console.ReadLine ();
                    } while (input != "y" && input != "n");
                if (input == "n") {
                    return;
                }
            }
            Console.Clear ();
            Console.WriteLine ("Enter username");
            uname = Console.ReadLine ();
            Console.WriteLine ("Enter Password");
            pass = Console.ReadLine ();
            obj.setName (uname);
            obj.setPass (pass);
            tries --;
        } while (obj.getName () != "niit" || obj.getPass () != "1234");
    Console.WriteLine ("Wellcome");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35280531_35280827_5_37
35280531_35280957_3_47
Title: C# Using user input to select what string array to randomly print the elements from 
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Random rnd = new Random ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string champion = Console.ReadLine ();
    Console.Write ("Press the 'enter' key for a random champion..     ");
    string question = Console.ReadLine ();
    if (champion == "ahri") {
        int randomNumber = rnd.Next (ahri.Length - 1);
        Console.WriteLine (ahri [randomNumber]);
    } else {
        int randomNumber = rnd.Next (leeSin.Length - 1);
        Console.WriteLine (leeSin [randomNumber]);
    }
}
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Random rnd = new Random ();
    Console.ForegroundColor = ConsoleColor.Gray;
    string [] champions;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string championName = Console.ReadLine ();
    if (championName.Equals ("ahri", StringComparison.CurrentCultureIgnoreCase)) {
        champions = ahri;
    } else if (championName.Equals ("leeSin", StringComparison.CurrentCultureIgnoreCase)) {
        champions = leeSin;
    } else {
        Console.WriteLine ("No champion selected, quitting...");
        return;
    }
    while (true) {
        Console.WriteLine ("Press the 'enter' key for a random champion..     ");
        if (Console.ReadKey (true).Key == ConsoleKey.Enter) {
            int randomNumber = rnd.Next (champions.Length);
            Console.WriteLine (champions [randomNumber]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35280531_35280827_5_37
35280531_35280977_1_36
Title: C# Using user input to select what string array to randomly print the elements from 
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Random rnd = new Random ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string champion = Console.ReadLine ();
    Console.Write ("Press the 'enter' key for a random champion..     ");
    string question = Console.ReadLine ();
    if (champion == "ahri") {
        int randomNumber = rnd.Next (ahri.Length - 1);
        Console.WriteLine (ahri [randomNumber]);
    } else {
        int randomNumber = rnd.Next (leeSin.Length - 1);
        Console.WriteLine (leeSin [randomNumber]);
    }
}
----------------------------------------

static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, string [] > skins = new Dictionary < string, string [] > ();
    skins.Add ("ahri", new string [] {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"});
    skins.Add ("leesin", new string [] {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"});
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        var tmpList = Enumerable.ToList (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Count)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Length)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35280531_35280957_3_47
35280531_35280977_1_36
Title: C# Using user input to select what string array to randomly print the elements from 
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Random rnd = new Random ();
    Console.ForegroundColor = ConsoleColor.Gray;
    string [] champions;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string championName = Console.ReadLine ();
    if (championName.Equals ("ahri", StringComparison.CurrentCultureIgnoreCase)) {
        champions = ahri;
    } else if (championName.Equals ("leeSin", StringComparison.CurrentCultureIgnoreCase)) {
        champions = leeSin;
    } else {
        Console.WriteLine ("No champion selected, quitting...");
        return;
    }
    while (true) {
        Console.WriteLine ("Press the 'enter' key for a random champion..     ");
        if (Console.ReadKey (true).Key == ConsoleKey.Enter) {
            int randomNumber = rnd.Next (champions.Length);
            Console.WriteLine (champions [randomNumber]);
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, string [] > skins = new Dictionary < string, string [] > ();
    skins.Add ("ahri", new string [] {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"});
    skins.Add ("leesin", new string [] {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"});
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        var tmpList = Enumerable.ToList (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Count)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Length)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3532162_3533335_13_23
3532162_3533335_1_12
Title: Create a .csv file in C# 
----------------------------------------

private void WriteLine < T > (StreamWriter sr, IEnumerable < T > line) {
    bool first = true;
    foreach (T item in line) {
        if (! first)
            sr.Write (',');

        first = false;
        WriteItem (sr, item);
    }
}
----------------------------------------

private void WriteItem < T > (StreamWriter sr, T item) {
    string itemString = item.ToString ();
    if (itemString.IndexOfAny (new char [] {'"', ',', '\n', '\r'}) != - 1) {
        sr.Write ('"');
        sr.Write (itemString.Replace ("\"", "\"\""));
        sr.Write ('"');
    } else
        sr.Write (itemString);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3532162_3533335_13_23
3532162_3533335_24_34
Title: Create a .csv file in C# 
----------------------------------------

private void WriteLine < T > (StreamWriter sr, IEnumerable < T > line) {
    bool first = true;
    foreach (T item in line) {
        if (! first)
            sr.Write (',');

        first = false;
        WriteItem (sr, item);
    }
}
----------------------------------------

private void WriteCSV < T > (StreamWriter sr, IEnumerable < IEnumerable < T > > allLines) {
    bool first = true;
    foreach (IEnumerable < T > line in allLines) {
        if (! first)
            sr.Write ('\n');

        first = false;
        WriteLine (sr, line);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3532162_3533335_1_12
3532162_3533335_24_34
Title: Create a .csv file in C# 
----------------------------------------

private void WriteItem < T > (StreamWriter sr, T item) {
    string itemString = item.ToString ();
    if (itemString.IndexOfAny (new char [] {'"', ',', '\n', '\r'}) != - 1) {
        sr.Write ('"');
        sr.Write (itemString.Replace ("\"", "\"\""));
        sr.Write ('"');
    } else
        sr.Write (itemString);

}
----------------------------------------

private void WriteCSV < T > (StreamWriter sr, IEnumerable < IEnumerable < T > > allLines) {
    bool first = true;
    foreach (IEnumerable < T > line in allLines) {
        if (! first)
            sr.Write ('\n');

        first = false;
        WriteLine (sr, line);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35327255_35327419_12_31
35327255_35327419_3_10
Title: "C# & LINQ Select two (consecutive) items at once" 
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }}
----------------------------------------

public static IEnumerable < TResult > SelectTwo < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    if (source == null)
        throw new ArgumentNullException (nameof (source));

    if (selector == null)
        throw new ArgumentNullException (nameof (selector));

    return SelectTwoImpl (source, selector);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35327255_35327419_12_31
35327255_35327625_3_23
Title: "C# & LINQ Select two (consecutive) items at once" 
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }}
----------------------------------------

public static IEnumerable < TResult > SelectTwo < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    bool first_item_got = false;
    TSource first_item = default (TSource);
    foreach (var item in source) {
        if (first_item_got) {
            yield return selector (first_item, item);
        } else {
            first_item = item;
        }
        first_item_got = ! first_item_got;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35327255_35327419_3_10
35327255_35327625_3_23
Title: "C# & LINQ Select two (consecutive) items at once" 
----------------------------------------

public static IEnumerable < TResult > SelectTwo < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    if (source == null)
        throw new ArgumentNullException (nameof (source));

    if (selector == null)
        throw new ArgumentNullException (nameof (selector));

    return SelectTwoImpl (source, selector);
}
----------------------------------------

public static IEnumerable < TResult > SelectTwo < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    bool first_item_got = false;
    TSource first_item = default (TSource);
    foreach (var item in source) {
        if (first_item_got) {
            yield return selector (first_item, item);
        } else {
            first_item = item;
        }
        first_item_got = ! first_item_got;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
353342_353435_11_41
353342_353446_5_28
Title: Performance of Object.GetType() 
----------------------------------------

static void Main () {
    int total = 0;
    Log (typeof (Test));
    Stopwatch sw = Stopwatch.StartNew ();
    for (int i = 0; i < Iterations; i ++) {
        total += Log (typeof (Test));
    }
    sw.Stop ();
    Console.WriteLine ("typeof(Test): {0}ms", sw.ElapsedMilliseconds);
    sw = Stopwatch.StartNew ();
    for (int i = 0; i < Iterations; i ++) {
        total += Log (TestType);
    }
    sw.Stop ();
    Console.WriteLine ("TestType (field): {0}ms", sw.ElapsedMilliseconds);
    Test test = new Test ();
    sw = Stopwatch.StartNew ();
    for (int i = 0; i < Iterations; i ++) {
        total += Log (test.GetType ());
    }
    sw.Stop ();
    Console.WriteLine ("test.GetType(): {0}ms", sw.ElapsedMilliseconds);
}
----------------------------------------

static void Main (string [] args) {
    int loopCount = 100000000;
    System.Diagnostics.Stopwatch timer1 = new System.Diagnostics.Stopwatch ();
    timer1.Start ();
    Foo foo = new Foo ();
    for (int i = 0; i < loopCount; i ++) {
        bar.SomeMethod ();
    }
    timer1.Stop ();
    Console.WriteLine (timer1.ElapsedMilliseconds);
    System.Diagnostics.Stopwatch timer2 = new System.Diagnostics.Stopwatch ();
    timer2.Start ();
    Bar bar = new Bar ();
    for (int i = 0; i < loopCount; i ++) {
        foo.SomeMethod ();
    }
    timer2.Stop ();
    Console.WriteLine (timer2.ElapsedMilliseconds);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
353430_353533_1_73
353430_701880_1_21
Title: Easiest way to get a common base class from a collection of types 
----------------------------------------

static Type GetCommonBaseClass (Type [] types) {
    if (types.Length == 0)
        return (typeof (object));
    else if (types.Length == 1)
        return (types [0]);

    Type [] temp = new Type [types.Length];
    for (int i = 0; i < types.Length; i ++) {
        temp [i] = types [i];
    }
    bool checkPass = false;
    Type tested = null;
    while (! checkPass) {
        tested = temp [0];
        checkPass = true;
        for (int i = 1; i < temp.Length; i ++) {
            if (tested.Equals (temp [i]))
                continue;
            else {
                if (tested.Equals (temp [i].BaseType)) {
                    temp [i] = temp [i].BaseType;
                    continue;
                } else if (tested.BaseType.Equals (temp [i])) {
                    for (int j = 0; j <= i - 1; j ++) {
                        temp [j] = temp [j].BaseType;
                    }
                    checkPass = false;
                    break;
                } else {
                    for (int j = 0; j <= i; j ++) {
                        temp [j] = temp [j].BaseType;
                    }
                    checkPass = false;
                    break;
                }
            }
        }
    }
    return tested;
}
----------------------------------------

public static Type GetCommonBaseClass (params Type [] types) {
    if (types.Length == 0)
        return typeof (object);

    Type ret = types [0];
    for (int i = 1; i < types.Length; ++ i) {
        if (types [i].IsAssignableFrom (ret))
            ret = types [i];
        else {
            while (! ret.IsAssignableFrom (types [i]))
                ret = ret.BaseType;

        }
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35348969_35348993_1_16
35348969_35349114_1_16
Title: Convert to double failed if the value is null or empty 
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

public double convertToDouble (string number) {
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    double returnDouble;
    if (double.TryParse (temp, out returnDouble))
        return returnDouble;

    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35366088_35366170_1_19
35366088_35744280_1_22
Title: how to disable able alerts if its not needed(critical level) 
----------------------------------------

void DisplayLowQuantityItems () {
    SqlCommand command = new SqlCommand ("Select Brand from Tires where Quantity <5", con);
    con.Open ();
    SqlDataReader reader = command.ExecuteReader ();
    StringBuilder productNames = new StringBuilder ();
    DataTable dt = new DataTable ();
    dt.Load (reader);
    con.Close ();
    if (dt.Rows.Count >= 5) {
        productNames.Append (reader ["Brand"].ToString () + Environment.NewLine);
    } else {
        MessageBox.Show ("Following Products quantity is lessthan 5\n" + productNames);
    }
}
----------------------------------------

void DisplayLowQuantityItems () {
    SqlCommand command = new SqlCommand ("Select Brand from Tires where Quantity <5", con);
    con.Open ();
    SqlDataReader reader = command.ExecuteReader ();
    StringBuilder productNames = new StringBuilder ();
    int count = 0;
    while (reader.Read ()) {
        productNames.Append (reader ["Brand"].ToString () + Environment.NewLine);
        count ++;
    }
    con.Close ();
    if (count == 0) {
    } else {
        MessageBox.Show ("Following Products quantity is lessthan 5\n" + productNames);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35409015_35409458_1_24
35409015_35410708_1_24
Title: Entity Framework EF6 Add data to Many to Many relationship Table 
----------------------------------------

static void Main (string [] args) {
    using (var context = new FakeEntities ())
    {
        var complaintList = new List < Complaint > () {new Complaint () {Description = "This is a Test"}};
        Context.Complaint.AddRange (complaintList);
        var employeeList = new List < Employee > () {new Employee () {FirstName = "John", Id = 1, LastName = "Doe"}, new Employee () {FirstName = "Jane", Id = 2, LastName = "Doe"}, new Employee () {FirstName = "Kid", Id = 3, LastName = "Smith"}};
        Context.Employee.AddRange (employeeList);
        employeeList [0].Complaints.Add (complaintList [0]);
        context.SaveChanges ();
    }}
----------------------------------------

static void Main (string [] args) {
    var complaintList = new List < Complaint > () {new Complaint () {Description = "This is a Test"}};
    var employeeList = new List < Employee > () {new Employee () {FirstName = "John", Id = 1, LastName = "Doe"}, new Employee () {FirstName = "Jane", Id = 2, LastName = "Doe"}, new Employee () {FirstName = "Kid", Id = 3, LastName = "Smith"}};
    var c = new ComplaintXEmployee ();
    c.Employees = employeeList;
    c.Complaints = complaintList;
    using (var context = new FakeEntities ())
    {
        context.ComplaintXEmployees.Add (c);
        context.SaveChanges ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3549457_3549579_13_23
3549457_3549579_1_12
Title: Change the delimiter in a csv export 
----------------------------------------

private void WriteLine < T > (StreamWriter sr, IEnumerable < T > line) {
    bool first = true;
    foreach (T item in line) {
        if (! first)
            sr.Write (',');

        first = false;
        WriteItem (sr, item);
    }
}
----------------------------------------

private void WriteItem < T > (StreamWriter sr, T item) {
    string itemString = item.ToString ();
    if (itemString.IndexOfAny ('"', ',', '\n', '\r') != - 1) {
        sr.Write ('"');
        sr.Write (itemString.Replace ("\"", "\"\""));
        sr.Write ('"');
    } else
        sr.Write (itemString);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3549457_3549579_13_23
3549457_3549579_24_34
Title: Change the delimiter in a csv export 
----------------------------------------

private void WriteLine < T > (StreamWriter sr, IEnumerable < T > line) {
    bool first = true;
    foreach (T item in line) {
        if (! first)
            sr.Write (',');

        first = false;
        WriteItem (sr, item);
    }
}
----------------------------------------

private void WriteCSV < T > (StreamWriter sr, IEnumerable < IEnumerable < T > > allLines) {
    bool first = true;
    foreach (IEnumerable < T > line in allLines) {
        if (! first)
            sr.Write ('\n');

        first = false;
        WriteLine (sr, line);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3549457_3549579_1_12
3549457_3549579_24_34
Title: Change the delimiter in a csv export 
----------------------------------------

private void WriteItem < T > (StreamWriter sr, T item) {
    string itemString = item.ToString ();
    if (itemString.IndexOfAny ('"', ',', '\n', '\r') != - 1) {
        sr.Write ('"');
        sr.Write (itemString.Replace ("\"", "\"\""));
        sr.Write ('"');
    } else
        sr.Write (itemString);

}
----------------------------------------

private void WriteCSV < T > (StreamWriter sr, IEnumerable < IEnumerable < T > > allLines) {
    bool first = true;
    foreach (IEnumerable < T > line in allLines) {
        if (! first)
            sr.Write ('\n');

        first = false;
        WriteLine (sr, line);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35502425_35503680_10_20
35502425_35503680_22_36
Title: Flatten self referencing object in Auto Mapper 
----------------------------------------

public static IEnumerable < T > Flatten < T > (this IEnumerable < T > source, Func < T, IEnumerable < T > > childrenSelector) {
    if (source == null)
        throw new ArgumentNullException (nameof (source));

    if (childrenSelector == null)
        throw new ArgumentNullException (nameof (childrenSelector));

    return FlattenIterator (source, childrenSelector);
}
----------------------------------------

private static IEnumerable < T > FlattenIterator < T > (this IEnumerable < T > source, Func < T, IEnumerable < T > > childrenSelector) {
    if (source != null) {
        foreach (var item in source) {
            yield return item;
            var children = childrenSelector (item);
            if (children != null)
                foreach (var child in FlattenIterator (children, childrenSelector))
                    yield return child;

        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35540154_35541315_1_11
35540154_35542317_1_12
Title: Why aren't my questions populating in the ListBox? 
----------------------------------------

private void ListBoxQuestions () {
    if (MainWindow.BegginerChecked == true) {
        ListBoxQ.Items.Add ("What is 2 + 2?");
        ListBoxQ.Items.Add ("What is 32 + 5?");
        ListBoxQ.Items.Add ("What is 42 + 7?");
        ListBoxQ.Items.Add ("What is 8 + 15?");
        ListBoxQ.Items.Add ("What is 4 + 2?");
    }
}
----------------------------------------

private void ListBoxQuestions () {
    MainWindow a = this.owner as MainWindow;
    if (a.Beginner.IsChecked == true) {
        ListBoxQ.Items.Add ("What is 2 + 2?");
        ListBoxQ.Items.Add ("What is 32 + 5?");
        ListBoxQ.Items.Add ("What is 42 + 7?");
        ListBoxQ.Items.Add ("What is 8 + 15?");
        ListBoxQ.Items.Add ("What is 4 + 2?");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35573855_35575216_7_49
35573855_35575223_13_28
Title: Why is threading increasing execution time c# 
----------------------------------------

static void Main (string [] args) {
    for (int i = 0; i < 10; i ++) {
        numbers.Add (i.ToString ());
    }
    sw.Start ();
    foreach (var item in numbers) {
        DoSomethingWithTheNumber (item);
    }
    sw.Stop ();
    Console.WriteLine ("foreach in main thread took, ticks: " + sw.ElapsedTicks);
    Thread tid1 = new Thread (new ThreadStart (MyThread.Thread1));
    Thread tid2 = new Thread (new ThreadStart (MyThread.Thread1));
    sw.Reset ();
    sw.Start ();
    tid1.Start ();
    tid2.Start ();
    tid1.Join ();
    tid2.Join ();
    sw.Stop ();
    Console.WriteLine ("for in 2 threads with lock took, ticks: " + sw.ElapsedTicks);
    Thread tid1A = new Thread (new ThreadStart (MyThreadWithoutLock.ThreadOddNumbers));
    Thread tid2A = new Thread (new ThreadStart (MyThreadWithoutLock.ThreadEvenNumbers));
    sw.Reset ();
    sw.Start ();
    tid1A.Start ();
    tid2A.Start ();
    tid1A.Join ();
    tid2A.Join ();
    sw.Stop ();
    Console.WriteLine ("for in 2 threads without lock took, ticks: " + sw.ElapsedTicks);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    for (int i = 0; i < 10; i ++) {
        numbers.Add (i.ToString ());
    }
    Console.WriteLine ("Before start thread");
    Thread tid1 = new Thread (new ThreadStart (MyThread.Thread1));
    Thread tid2 = new Thread (new ThreadStart (MyThread.Thread1));
    tid1.Start ();
    tid2.Start ();
    tid1.Join ();
    tid2.Join ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35574971_35575034_1_20
35574971_35575036_1_15
Title: The process cannot access the file because it is being used by another process c# asp.net 
----------------------------------------

public void AddLog (string message, string fn_name) {
    string path = @"E:\" + fn_name + ".txt";
    if (! File.Exists (path)) {
        File.Create (path);
        TextWriter tw = new StreamWriter (path);
        tw.WriteLine ("" + message + "");
        tw.Close ();
        File.Delete (path);
    } else if (File.Exists (path)) {
        TextWriter tw = new StreamWriter (path, true);
        tw.WriteLine ("" + message + "");
        tw.Close ();
    }
}
----------------------------------------

public void AddLog (string message, string fn_name) {
    string path = @"E:\" + fn_name + ".txt";
    if (! File.Exists (path)) {
        using (File.Create (path))
        using (TextWriter tw = new StreamWriter (path))
        tw.WriteLine ("" + message + "");
    } else if (File.Exists (path)) {
        using (TextWriter tw = new StreamWriter (path, true))
        tw.WriteLine ("" + message + "");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35575795_35596916_189_209
35575795_35596916_213_235
Title: How to open the telerik report file in C# and access the DataSource of Report? 
----------------------------------------

Report DeserializeReport (UriReportSource uriReportSource) {
    var settings = new System.Xml.XmlReaderSettings ();
    settings.IgnoreWhitespace = true;
    using (var xmlReader = System.Xml.XmlReader.Create (uriReportSource.Uri, settings))
    {
        var xmlSerializer = new Telerik.Reporting.XmlSerialization.ReportXmlSerializer ();
        var report = (Telerik.Reporting.Report) xmlSerializer.Deserialize (xmlReader);
        return report;
    }}
----------------------------------------

Report DeserializeReport (XmlReportSource xmlReportSource) {
    var settings = new System.Xml.XmlReaderSettings ();
    settings.IgnoreWhitespace = true;
    var textReader = new System.IO.StringReader (xmlReportSource.Xml);
    using (var xmlReader = System.Xml.XmlReader.Create (textReader, settings))
    {
        var xmlSerializer = new Telerik.Reporting.XmlSerialization.ReportXmlSerializer ();
        var report = (Telerik.Reporting.Report) xmlSerializer.Deserialize (xmlReader);
        return report;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35586593_35672992_3_23
35586593_35727716_9_19
Title: How do you specify the location when using handleexeption annotation for a 302 status code 
----------------------------------------

public override void OnException (HttpActionExecutedContext context) {
    if (context.Exception is InvalidOperationException) {
        var httpResponseMessage = context.Request.CreateResponse (HttpStatusCode.Redirect);
        httpResponseMessage.Headers.Location = new Uri ("http://www.YourRedirectUrl");
        throw new HttpResponseException (httpResponseMessage);
    }
    if (context.Exception is UnauthorizedAccessException) {
        context.Response = context.Request.CreateErrorResponse (HttpStatusCode.Unauthorized, context.Exception.Message);
        return;
    }
    if (context.Exception is TimeoutException) {
        throw new HttpResponseException (context.Request.CreateResponse (HttpStatusCode.RequestTimeout, context.Exception.Message));
    }
    context.Response = context.Request.CreateErrorResponse (HttpStatusCode.InternalServerError, "Unable to process your request.");
}
----------------------------------------

public override void OnException (HttpActionExecutedContext actionExecutedContext) {
    if (actionExecutedContext.Exception.GetType () == ExceptionType) {
        var response = actionExecutedContext.Request.CreateResponse (HttpStatusCode.Moved);
        response.Headers.Location = new Uri ("http://google.co.uk");
        response.Content = new StringContent ("Message");
        actionExecutedContext.Response = response;
    }
    base.OnException (actionExecutedContext);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3559183_3559257_1_14
3559183_3559429_1_14
Title: Reading an unsigned 24-bit integer from a C# stream 
----------------------------------------

private static uint ReadUInt24 (this BinaryReader reader) {
    try {
        var b1 = reader.ReadByte ();
        var b2 = reader.ReadByte ();
        var b3 = reader.ReadByte ();
        return (((uint) b1) << 16) | (((uint) b2) << 8) | ((uint) b3);
    }
    catch {
        return 0u;
    }
}
----------------------------------------

private static long ReadUInt24 (this BinaryReader reader) {
    try {
        byte [] buffer = new byte [4];
        reader.Read (buffer, 0, 3);
        return (long) BitConverter.ToUInt32 (buffer, 0);
    }
    catch {
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35593311_35593423_1_17
35593311_35593452_1_32
Title: How to count duplicates from ListBox and show the number of duplicated items beside it? 
----------------------------------------

private void btnCandy_Click (object sender, EventArgs e) {
    bool found = false;
    foreach (var item in lstProducts.Items) {
        if (item.ToString ().StartsWith ("Candy")) {
            found = true;
            break;
        }
    }
    if (! found) {
        lstProducts.Items.Add ("Candy");
    }
}
----------------------------------------

private void btnCandy_Click (object sender, EventArgs e) {
    string query = "Candy";
    bool isExist = false;
    for (int i = 0; i < lstProducts.Items.Count; i ++) {
        var s = lstProducts.Items [i].ToString ();
        if (s.StartsWith (query)) {
            if (s == query) {
                lstProducts.Items [i] = query + "x2";
                isExist = true;
                break;
            } else {
                var pattern = Regex.Escape (query);
                Match m = Regex.Match (s, "^" + pattern + @"x(\d+)$");
                if (m.Success) {
                    lstProducts.Items [i] = query + "x" + (Int32.Parse (m.Groups [1].Value) + 1);
                    isExist = true;
                    break;
                }
            }
        }
    }
    if (! isExist)
        lstProducts.Items.Add (query);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35606137_35607442_1_18
35606137_35610234_1_13
Title: c# how to check if selected item in listview1 is already in listview2 to prevent duplication? 
----------------------------------------

private void listView1_DoubleClick (object sender, EventArgs e) {
    foreach (ListViewItem item in listView1.SelectedItems) {
        bool isExist = false;
        foreach (ListViewItem item2 in listView2.Items) {
            if (item2.Text == item.Text) {
                isExist = true;
                break;
            }
        }
        if (! isExist)
            listView2.Items.Add ((ListViewItem) item.Clone ());

    }
}
----------------------------------------

private void listView1_DoubleClick (object sender, EventArgs e) {
    if (listView1.SelectedItems.Count > 0) {
        foreach (ListViewItem item in listView1.SelectedItems) {
            if (! listView2.Items.Contains (item))
                listView2.Items.Add ((ListViewItem) item.Clone ());

        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35610336_35610605_1_29
35610336_35611268_1_31
Title: Write longest and shortest palindrome from text file 
----------------------------------------

static void Main (string [] args) {
    string [] lines = System.IO.File.ReadAllLines (@"C:\palindromy.txt");
    private string longest;
    private string shortest;
    foreach (string line in lines) {
        char [] charArray = line.ToCharArray ();
        for (int i = 0; i < 1; i ++) {
            Array.Reverse (charArray);
            bool a = charArray.SequenceEqual (line);
            if (a) {
                if (a.Length > longest.length) {
                    longest = a;
                }
                if (a.Length < shortest.length) {
                    shortest = a;
                }
            }
        }
    }
    Console.WriteLine (longest);
    Console.WriteLine (shortest);
}
----------------------------------------

static void Main (string [] args) {
    var lines = System.IO.File.ReadAllLines (@"C:\palindromy.txt");
    string longest = string.Empty;
    string shortest = string.Empty;
    foreach (var line in lines) {
        if (line.Length == 0)
            continue;

        char [] charArray = line.ToCharArray ();
        Array.Reverse (charArray);
        string reversedLine = new string (charArray);
        if (line.Equals (reversedLine, StringComparison.OrdinalIgnoreCase)) {
            if (line.Length > longest.Length) {
                longest = line;
            }
            if (line.Length < shortest.Length || shortest.Length == 0) {
                shortest = line;
            }
        }
    }
    Console.WriteLine (longest);
    Console.WriteLine (shortest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35610336_35610605_1_29
35610336_35612094_9_29
Title: Write longest and shortest palindrome from text file 
----------------------------------------

static void Main (string [] args) {
    string [] lines = System.IO.File.ReadAllLines (@"C:\palindromy.txt");
    private string longest;
    private string shortest;
    foreach (string line in lines) {
        char [] charArray = line.ToCharArray ();
        for (int i = 0; i < 1; i ++) {
            Array.Reverse (charArray);
            bool a = charArray.SequenceEqual (line);
            if (a) {
                if (a.Length > longest.length) {
                    longest = a;
                }
                if (a.Length < shortest.length) {
                    shortest = a;
                }
            }
        }
    }
    Console.WriteLine (longest);
    Console.WriteLine (shortest);
}
----------------------------------------

public static void Main (string [] args) {
    List < string > words = new List < string > () {"anotherword", "civic", "deified", "lemel", "pop", "noon"};
    string shortest = "";
    string longest = "";
    foreach (string word in words) {
        if (isPalindrome (word)) {
            if (word.Length > longest.Length)
                longest = word;
            else if (shortest == "" || word.Length < shortest.Length)
                shortest = word;

        }
    }
    Console.WriteLine ("Shortest: {0}", shortest);
    Console.WriteLine ("Longest: {0}", longest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35610336_35611268_1_31
35610336_35612094_9_29
Title: Write longest and shortest palindrome from text file 
----------------------------------------

static void Main (string [] args) {
    var lines = System.IO.File.ReadAllLines (@"C:\palindromy.txt");
    string longest = string.Empty;
    string shortest = string.Empty;
    foreach (var line in lines) {
        if (line.Length == 0)
            continue;

        char [] charArray = line.ToCharArray ();
        Array.Reverse (charArray);
        string reversedLine = new string (charArray);
        if (line.Equals (reversedLine, StringComparison.OrdinalIgnoreCase)) {
            if (line.Length > longest.Length) {
                longest = line;
            }
            if (line.Length < shortest.Length || shortest.Length == 0) {
                shortest = line;
            }
        }
    }
    Console.WriteLine (longest);
    Console.WriteLine (shortest);
}
----------------------------------------

public static void Main (string [] args) {
    List < string > words = new List < string > () {"anotherword", "civic", "deified", "lemel", "pop", "noon"};
    string shortest = "";
    string longest = "";
    foreach (string word in words) {
        if (isPalindrome (word)) {
            if (word.Length > longest.Length)
                longest = word;
            else if (shortest == "" || word.Length < shortest.Length)
                shortest = word;

        }
    }
    Console.WriteLine ("Shortest: {0}", shortest);
    Console.WriteLine ("Longest: {0}", longest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35630892_35631041_1_29
35630892_35631802_1_19
Title: Checking Number of GameObjects in my array 
----------------------------------------

void CannonKiller () {
    foreach (var cannon in GameObject.FindGameObjectsWithTag ("EnemyCannon").Select (enemyCans = > enemyCans.transform).ToArray ()) {
        foreach (var aCan in enemyCans) {
            float enemyDis = Vector3.Distance (cannon.position, transform.position);
            if (enemyDis <= 4) {
                Destroy (aCan);
                bool allDestoyed = true;
                foreach (GameObject o in enemyCans) {
                    if (o != null && o != aCan) {
                        allDestoyed = false;
                        break;
                    }
                }
                if (allDestoyed) {
                }
            }
        }
    }
}
----------------------------------------

void CannonKiller () {
    Collider [] hitColliders = Physics.OverlapSphere (transform.position, 4);
    foreach (Collider hitCollider in hitColliders) {
        if (hitCollider.gameObject.tag == "EnemyCannon") {
            Destroy (hitCollider.gameObject);
            if (enemyCans.FirstOrDefault (cannon = > cannon != null) == null) {
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3564906_3564970_1_26
3564906_8685639_19_33
Title: How the StringBuilder class is implemented? Does it internally create new string objects each time we append? 
----------------------------------------

public StringBuilder Append (string value) {
    if (value != null) {
        string stringValue = this.m_StringValue;
        IntPtr currentThread = Thread.InternalGetCurrentThread ();
        if (this.m_currentThread != currentThread) {
            stringValue = string.GetStringForStringBuilder (stringValue, stringValue.Capacity);
        }
        int length = stringValue.Length;
        int requiredLength = length + value.Length;
        if (this.NeedsAllocation (stringValue, requiredLength)) {
            string newString = this.GetNewString (stringValue, requiredLength);
            newString.AppendInPlace (value, length);
            this.ReplaceString (currentThread, newString);
        } else {
            stringValue.AppendInPlace (value, length);
            this.ReplaceString (currentThread, stringValue);
        }
    }
    return this;
}
----------------------------------------

public ISimpleStringBuilder Append (string value) {
    char [] data = value.ToCharArray ();
    InternalEnsureCapacity (data.Length);
    foreach (char t in data) {
        _internalBuffer [Lenght] = t;
        Lenght ++;
    }
    return this;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35653986_35654326_18_43
35653986_35654326_1_16
Title: I want an efficient sorting algorithm to sort an array 
----------------------------------------

private static void HeapSort_sub < T > (List < T > source, int heapSize, int index) {
    IComparer < T > comparer = Comparer < T >.Default;
    int left = (index + 1) * 2 - 1;
    int right = (index + 1) * 2;
    int largest = 0;
    if (left < heapSize && comparer.Compare (source [left], source [index]) > 0) {
        largest = left;
    } else {
        largest = index;
    }
    if (right < heapSize && comparer.Compare (source [right], source [largest]) > 0) {
        largest = right;
    }
    if (largest != index) {
        var temp = source [index];
        source [index] = source [largest];
        source [largest] = temp;
        HeapSort_sub (source, heapSize, largest);
    }
}
----------------------------------------

public static void HeapSort < T > (this List < T > source) where T : IComparable < T > {
    int heapSize = source.Count;
    for (int p = (heapSize - 1) / 2; p >= 0; p --) {
        HeapSort_sub (source, heapSize, p);
    }
    for (int i = source.Count - 1; i > 0; i --) {
        var temp = source [i];
        source [i] = source [0];
        source [0] = temp;
        heapSize --;
        HeapSort_sub (source, heapSize, 0);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35684387_35685053_1_20
35684387_35685632_1_28
Title: Winforms - Position new form directly under Datagridview selected row of parent 
----------------------------------------

private void myBtn_Click (object sender, EventArgs e) {
    if (myDGV.SelectedCells.Count > 0) {
        int i = myDGV.SelectedCells [0].RowIndex;
        DataGridViewRow r = myDGV.Rows [i];
        newForm form = new newForm ();
        form.StartPosition = FormStartPosition.Manual;
        var rect = myDGV.RectangleToScreen (myDGV.GetRowDisplayRectangle (i, false));
        form.Location = new Point (rect.Left, rect.Bottom);
        form.ShowDialog (this);
    }
}
----------------------------------------

private void myBtn_Click (object sender, EventArgs e) {
    if (dataGridView1.SelectedRows.Count > 0) {
        var rowIndex = myDGV.SelectedRows [0].Index;
        var row = myDGV.Rows [rowIndex];
        var formLocation = this.Location;
        var gridLocation = myDGV.Location;
        var rowLocation = myDGV.GetRowDisplayRectangle (rowIndex, false).Location;
        newForm form = new newForm ();
        form.StartPosition = FormStartPosition.Manual;
        form.Location = GetPopupStartingLocation (new Point [] {formLocation, gridLocation, rowLocation}, row.Height);
        form.Show (this);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35730389_35732226_1_26
35730389_35732289_18_64
Title: C# formatting text in fixed column widths with wrapping 
----------------------------------------

string format (string column1, string column2, string column3) {
    int column1Width = 4;
    int column2Width = 10;
    int column3Width = 5;
    int loopCount = 0;
    StringBuilder output = new StringBuilder ();
    while (true) {
        string col1 = new string (column1.Skip < char > (loopCount * column1Width).Take < char > (column1Width).ToArray ()).PadRight (column1Width);
        string col2 = new string (column2.Skip < char > (loopCount * column2Width).Take < char > (column2Width).ToArray ()).PadRight (column2Width);
        string col3 = new string (column3.Skip < char > (loopCount * column3Width).Take < char > (column3Width).ToArray ()).PadRight (column3Width);
        if (String.IsNullOrWhiteSpace (col1) && String.IsNullOrWhiteSpace (col2) && String.IsNullOrWhiteSpace (col3)) {
            break;
        }
        output.AppendFormat ("{0} {1} {2}\n", col1, col2, col3);
        loopCount ++;
    }
    return output.ToString ();
}
----------------------------------------

public static string format (string oSeparator, string oNewLine, string [] oStrings, int [] oWidths) {
    if (oStrings == null || oWidths == null || oSeparator == null || oNewLine == null)
        throw new ArgumentException ("oStrings == null || oWidths == null || oSeparator == null || oNewLine == null");

    if (oStrings.Length != oWidths.Length)
        throw new ArgumentException ("oStrings.Length != oWidths.Length");

    foreach (int i in oWidths) {
        if (i <= 0)
            throw new ArgumentException ("width must be > 0");

    }
    var sb = new System.Text.StringBuilder ();
    List < string > oList = new List < string > (oStrings);
    do
        {
            for (int i = 0; i < oList.Count; i ++) {
                string oTmp = oList [i];
                sb.Append (PopFrontPadded (ref oTmp, oWidths [i]));
                oList [i] = oTmp;
                if (i < oList.Count - 1)
                    sb.Append (oSeparator);

            }
            sb.Append (oNewLine);
        } while (oList.Find (x = > x.Length > 0) != null);
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35735795_35735891_3_13
35735795_35736022_16_32
Title: Change generic type from within the class 
----------------------------------------

public static T GetRandomObject < T > () {
    if (typeof (T).IsInterface)
        throw new Exception ("Generator needs to be instanciated with an interface generic parameter");

    Random rnd = new Random ();
    var types = Assembly.GetExecutingAssembly ().GetTypes ().Where (x = > x.GetInterfaces ().Contains (typeof (T))).ToList ();
    int index = rnd.Next (types.Count);
    return (T) Activator.CreateInstance (types [index]);
}
----------------------------------------

private List < Type > GetTypes < T > () {
    List < Type > types;
    if (! _typesCache.TryGetValue (typeof (T), out types)) {
        if (! typeof (T).IsInterface)
            throw new Exception ("Generator needs to be instanciated with an interface generic parameter");

        types = Assembly.GetExecutingAssembly ().GetTypes ().Where (x = > x.GetInterfaces ().Contains (typeof (T))).ToList ();
        _typesCache [typeof (T)] = types;
    }
    return types;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3575086_3575413_1_29
3575086_3575750_1_47
Title: Algorithm to balance variably-sized items into roughly-balanced sets 
----------------------------------------

public static List < List < int > > Balance (List < int > input) {
    var result = new List < List < int > > ();
    if (input.Count > 0) {
        var values = new List < int > (input);
        values.Sort ();
        var max = values.Max ();
        var maxIndex = values.FindIndex (v = > v == max);
        for (int i = maxIndex; i < values.Count; i ++) {
            result.Add (new List < int > {max});
        }
        var limit = maxIndex;
        for (int i = 0; i < limit / 2; i ++) {
            result.Add (new List < int > {values [i], values [(limit - 1) - i]});
        }
        if (limit % 2 != 0) {
            result.Add (new List < int > {values [limit / 2]});
        }
    }
    return result;
}
----------------------------------------

public static List < List < int > > Balance (List < int > input, int desiredLimit) {
    var result = new List < List < int > > ();
    if (input.Count > 0) {
        var values = new List < int > (input);
        values.Sort ();
        var start = 0;
        var end = values.Count - 1;
        var orderedValues = new List < int > (values.Count);
        while (start < end) {
            orderedValues.Add (values [start]);
            orderedValues.Add (values [end]);
            start ++;
            end --;
        }
        if (values.Count % 2 != 0) {
            orderedValues.Add (values [values.Count / 2]);
        }
        var total = 0;
        var line = new List < int > ();
        for (int i = 0; i < orderedValues.Count; i ++) {
            var v = orderedValues [i];
            total += v;
            if (total <= desiredLimit) {
                line.Add (v);
            } else {
                total = v;
                result.Add (line);
                line = new List < int > () {v};
            }
        }
        result.Add (line);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35772763_35787638_1_29
35772763_35790254_39_72
Title: Conditional restructure a sortedDictionary (unionFind) 
----------------------------------------

static SortedDictionary < int, List < int > > SortTree (SortedDictionary < int, List < int > > trees) {
    if (trees.Count < 2) {
        return trees;
    }
    foreach (KeyValuePair < int, List < int > > singletree in trees) {
        int cursor = 1;
        bool nFinish = false;
        List < int > n = singletree.Value;
        if (n.Count <= 1)
            continue;

        while (nFinish == false) {
            if (trees.ContainsKey (n [cursor])) {
                List < int > t = trees [n [cursor]];
                t.AddRange (n);
                trees.Remove (n [cursor]);
                n.Sort ();
                trees [singletree.Key] = n;
            }
            cursor ++;
            if (cursor != n.Count)
                continue;

            nFinish = true;
        }
    }
    return trees;
}
----------------------------------------

private static SortedDictionary < int, List < int > > SortTree (SortedDictionary < int, List < int > > trees) {
    if (trees.Count < 2) {
        return trees;
    }
    SortedDictionary < int, List < int > > compressedTree = new SortedDictionary < int, List < int > > ();
    var allKeys = trees.Keys.ToList ();
    var allValues = trees.Values.ToList ();
    for (int i = 0; i < allKeys.Count; i ++) {
        var tempValues = allValues [i];
        var tempMax = tempValues.Max ();
        for (int j = i + 1; j < allKeys.Count;) {
            if (tempMax >= allKeys [j]) {
                tempValues.AddRange (allValues [j]);
                allKeys.Remove (allKeys [j]);
                allValues.Remove (allValues [j]);
                tempMax = tempValues.Max ();
                continue;
            }
            j ++;
        }
        compressedTree.Add (allKeys [i], tempValues.Distinct ().OrderBy (i1 = > i1).ToList ());
    }
    return compressedTree;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3582753_3582822_1_15
3582753_43929705_1_20
Title: Customizing the FIX logon process in a QuickFIX acceptor 
----------------------------------------

public void fromAdmin (Message message, SessionID id) {
    var logon = message as QuickFix44.Logon;
    if (logon != null) {
        string userName = logon.getUserName ().getValue ();
        string expectedPassword = PasswordsByUser [userName];
        string suppliedPassword = logon.getPassword ().getValue ();
        if (expectedPassword != suppliedPassword)
            throw new RejectLogon ();

    }
}
----------------------------------------

public void fromAdmin (Message message, SessionID id) {
    var logon = message as QuickFix44.Logon;
    if (logon != null) {
        string userName = logon.getUserName ().getValue ();
        string expectedPassword = PasswordsByUser [userName];
        string suppliedPassword = logon.getPassword ().getValue ();
        if (expectedPassword != suppliedPassword) {
            Message _logoutmess = new Message ();
            _logoutmess.Header.SetField (new MsgType () {Tag = 35, Obj = "5"});
            _logoutmess.SetField (new Text ("Invalid credentials"));
            Session.SendToTarget (_logoutmess, id);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3584416_3584474_5_38
3584416_3584562_3_15
Title: How to avoid wasting screen space writing sparse C# code? 
----------------------------------------

void SomeFunction () {
    StreamWriter someFile;
    try {
        someFile = new StreamWriter (somePath);
        lock (someCriticalSection)
        {
            using (var someDisposableThing1 = new DisposableThing ())
            {
                DoSomething ();
                using (var someDisposableThing2 = new DisposableThing ())
                {
                    lock (someOtherCriticalSection)
                    {
                        DoSomethingMore ();
                    }}}}}
    catch (Exception e) {
        Log (e);
    }
    finally {
        if (someFile != null) {
            someFile.Dispose ();
        }
    }
}
----------------------------------------

void SomeFunction () {
    using (var someFile = new StreamWriter (somePath))
    {
        try {
            lock (someCriticalSection)
            {
                using (var someDisposableThing1 = new DisposableThing ())
                {
                    DoSomething ();
                }}}
        catch (Exception e) {
            Log (e);
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3584416_3584474_5_38
3584416_3599398_5_24
Title: How to avoid wasting screen space writing sparse C# code? 
----------------------------------------

void SomeFunction () {
    StreamWriter someFile;
    try {
        someFile = new StreamWriter (somePath);
        lock (someCriticalSection)
        {
            using (var someDisposableThing1 = new DisposableThing ())
            {
                DoSomething ();
                using (var someDisposableThing2 = new DisposableThing ())
                {
                    lock (someOtherCriticalSection)
                    {
                        DoSomethingMore ();
                    }}}}}
    catch (Exception e) {
        Log (e);
    }
    finally {
        if (someFile != null) {
            someFile.Dispose ();
        }
    }
}
----------------------------------------

void SomeFunction () {
    using (var someFile = new StreamWriter (somePath))
    try {
        lock (someCriticalSection)
        {
            using (var someDisposableThing1 = new DisposableThing ())
            using (var someDisposableThing2 = new DisposableThing ())
            {
                DoSomething ();
                DoSomethingMore ();
            }}}
    catch (Exception e) {
        Log (e);
    }
}
----------------------------------------

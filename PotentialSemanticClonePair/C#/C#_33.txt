$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50693611_50693733_1_14
50693611_50694410_9_39
Title: I need to remove white spaces from console input that forms a list 
----------------------------------------

static void Main (string [] args) {
    string tokens = "1 2 3 |4 5 6 | 7 8";
    var list = tokens.Split ('|');
    list = list.Reverse ().Select (n = > n.Trim ().PadRight (n.Length, ' ')).ToArray ();
    for (int i = 0; i < list.Length; i ++) {
        Console.Write (list [i]);
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    string tokens = Console.ReadLine ();
    List < string > list = tokens.Split ('|').ToList ();
    List < string > listTwo = new List < string > (list.Count);
    foreach (var token in list) {
        token.Split (" ");
        listTwo.Add (token);
    }
    foreach (var token in listTwo) {
        listTwo.Remove (" ");
    }
    for (int i = 0; i < listTwo.Count; i ++) {
        Console.Write (listTwo [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5073925_5075234_25_46
5073925_5075234_9_23
Title: problem Storing a list of Objects in Isolated Storage 
----------------------------------------

public static ObservableCollection < T > LoadList < T > (string folderName, string dataName) where T : class {
    ObservableCollection < T > retval = new ObservableCollection < T > ();
    if (! IsoStore.DirectoryExists (folderName)) {
        IsoStore.CreateDirectory (folderName);
    }
    string fileStreamName = string.Format ("{0}\\{1}.dat", folderName, dataName);
    using (IsolatedStorageFileStream stream = new IsolatedStorageFileStream (fileStreamName, FileMode.OpenOrCreate, IsoStore))
    {
        if (stream.Length > 0) {
            DataContractSerializer dcs = new DataContractSerializer (typeof (ObservableCollection < T >));
            retval = dcs.ReadObject (stream) as ObservableCollection < T >;
        }
    } return retval;
}
----------------------------------------

public static void SaveList < T > (string folderName, string dataName, ObservableCollection < T > dataList) where T : class {
    if (! IsoStore.DirectoryExists (folderName)) {
        IsoStore.CreateDirectory (folderName);
    }
    string fileStreamName = string.Format ("{0}\\{1}.dat", folderName, dataName);
    using (IsolatedStorageFileStream stream = new IsolatedStorageFileStream (fileStreamName, FileMode.Create, IsoStore))
    {
        DataContractSerializer dcs = new DataContractSerializer (typeof (ObservableCollection < T >));
        dcs.WriteObject (stream, dataList);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5075290_5080440_1_43
5075290_5118734_1_40
Title: Facebook .NET SDK: How to authenticate with ASP.NET MVC 2 
----------------------------------------

public ActionResult FBAuthorize () {
    FacebookOAuthResult result = null;
    string url = Request.Url.OriginalString;
    url = url.Replace ("FBAuthorize?", "FBAuthorize#");
    if (FacebookOAuthResult.TryParse (url, out result)) {
        if (result.IsSuccess) {
            string [] extendedPermissions = new [] {"user_about_me", "offline_access"};
            var fb = new FacebookClient (result.AccessToken);
            dynamic resultGet = fb.Get ("/me");
            var name = resultGet.name;
            RegisterModel rm = new Models.RegisterModel ();
            rm.UserName = name;
            rm.Password = "something";
            rm.Email = "somethig";
            rm.ConfirmPassword = "23213";
            ViewData ["Register"] = rm;
            return RedirectToAction ("Register");
        } else {
            var errorDescription = result.ErrorDescription;
            var errorReason = result.ErrorReason;
        }
    }
    return View ();
}
----------------------------------------

public ActionResult FBAuthorize () {
    FacebookOAuthClient cl = new FacebookOAuthClient (FacebookContext.Current);
    FacebookOAuthResult result = null;
    string url = Request.Url.OriginalString;
    if (FacebookOAuthResult.TryParse (url, out result)) {
        if (result.IsSuccess) {
            string code = result.Code;
            cl.RedirectUri = new UriBuilder ("http://localhost:5000/account/FBAuthorize").Uri;
            var parameters = new Dictionary < string, object > ();
            Dictionary < String, Object > dict = (Dictionary < String, Object >) cl.ExchangeCodeForAccessToken (code, new Dictionary < string, object > {{"redirect_uri", "http://localhost:5000/account/FBAuthorize"}});
            Object Token = dict.Values.ElementAt (0);
            TempData ["accessToken"] = Token.ToString ();
            return RedirectToAction ("ShowUser");
        } else {
            var errorDescription = result.ErrorDescription;
        }
    } else {
    }
    return View ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50775252_50775331_1_17
50775252_50775347_1_18
Title: how to use variables in the same file for a other piece of code 
----------------------------------------

string getCode (string code) {
    int count = code.Length;
    string error = "";
    if (count % 2 == 0) {
        error = "no";
    } else {
        error = "yes";
        string error_message = "There is something wrong with the code. Program.cs - line 23";
    }
    if (error == "yes")
        return null;

}
----------------------------------------

string getCode (string code) {
    int count = code.Length;
    string error = null;
    if (count % 2 == 0) {
        error = "no";
    } else {
        error = "yes";
    }
    if (error == "yes")
        return "something that you intended to return when there is an error";
    else
        return "something that you intended to return when there is no error";

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50780490_50781043_8_33
50780490_50781142_1_21
Title: Percentage calculation and outputting images from those percentages c# WPF 
----------------------------------------

private void btnCalculate_Click (object sender, RoutedEventArgs e) {
    double dPercentage = Convert.ToDouble (((Convert.ToInt32 (txtScore1.Text) + Convert.ToInt32 (txtScore2.Text) + Convert.ToInt32 (txtScore3.Text) + Convert.ToInt32 (txtScore4.Text))) / 20.0) * 100;
    if (dPercentage >= 90) {
        MessageBox.Show ("Eligible For the Gold Award");
        imgAward.Source = new BitmapImage (new Uri ("pack://application:,,,/Images/gold.png", UriKind.Absolute));
    } else if (dPercentage >= 75) {
        MessageBox.Show ("Eligible For the Silver Award");
        imgAward.Source = new BitmapImage (new Uri ("pack://application:,,,/Images/silver.png", UriKind.Absolute));
    } else if (dPercentage >= 60) {
        MessageBox.Show ("Eligible For the Bronze Award");
        imgAward.Source = new BitmapImage (new Uri ("pack://application:,,,/Images/bronze.png", UriKind.Absolute));
    } else {
        MessageBox.Show ("Not Eligible For the Award");
    }
}
----------------------------------------

private void btnCalculate_Click (object sender, RoutedEventArgs e) {
    double dPercentage = Convert.ToDouble (((Convert.ToInt32 (txtScore1.Text) + Convert.ToInt32 (txtScore2.Text) + Convert.ToInt32 (txtScore3.Text) + Convert.ToInt32 (txtScore4.Text))) / 20.0) * 100;
    if (dPercentage >= 90) {
        imgAward.Source = new BitmapImage (new Uri (@"Images/gold.png", UriKind.RelativeOrAbsolute));
    } else if (dPercentage >= 75) {
        imgAward.Source = new BitmapImage (new Uri (@"Images/silver.png", UriKind.RelativeOrAbsolute));
    } else if (dPercentage >= 60) {
        imgAward.Source = new BitmapImage (new Uri (@"Images/bronze.png", UriKind.RelativeOrAbsolute));
    } else {
        imgAward.Source = null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50794053_50794123_1_44
50794053_50794193_1_22
Title: Using a File directory as a parameter 
----------------------------------------

public static void CreateFile (string fileName) {
    try {
        if (File.Exists (fileName)) {
            File.Delete (fileName);
        }
        using (File.Create (fileName))
        ;}
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
}
----------------------------------------

public static void CreateFile (string location) {
    var fileInfo = new FileInfo (location);
    try {
        if (fileInfo.Exists) {
            fileInfo.Delete ();
        }
        if (! Directory.Exists (fileInfo.DirectoryName))
            Directory.CreateDirectory (fileInfo.DirectoryName);

        fileInfo.Create ();
    }
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
508208_4080624_11_33
508208_5378983_10_32
Title: What is the impact of Thread.Sleep(1) in C#? 
----------------------------------------

static void Main (string [] args) {
    DateTime dtEnd = DateTime.Now.AddSeconds (1.0);
    int i = 0;
    while (DateTime.Now < dtEnd) {
        i ++;
        Thread.Sleep (1);
    }
    Console.WriteLine (i.ToString ());
    i = 0;
    long lStart = DateTime.Now.Ticks;
    while (i ++ < 1000)
        Thread.Sleep (1);

    long lTmp = (DateTime.Now.Ticks - lStart) / 10000;
    Console.WriteLine (lTmp.ToString ());
    Console.Read ();
}
----------------------------------------

public static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    for (int i = 0; i < 10; ++ i) {
        sw.Reset ();
        sw.Start ();
        Thread.Sleep (50);
        sw.Stop ();
        Console.WriteLine ("(default) Slept for " + sw.ElapsedMilliseconds);
        TimeBeginPeriod (1);
        sw.Reset ();
        sw.Start ();
        Thread.Sleep (50);
        sw.Stop ();
        TimeEndPeriod (1);
        Console.WriteLine ("(highres) Slept for " + sw.ElapsedMilliseconds + "\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
508390_2315110_1_21
508390_509340_6_22
Title: Create XML Nodes based on XPath? 
----------------------------------------

static private XmlNode makeXPath (XmlDocument doc, string xpath) {
    string [] partsOfXPath = xpath.Split ('/');
    XmlNode node = null;
    for (int xpathPos = partsOfXPath.Length; xpathPos > 0; xpathPos --) {
        string subXpath = string.Join ("/", partsOfXPath, 0, xpathPos);
        node = doc.SelectSingleNode (subXpath);
        if (node != null) {
            for (int newXpathPos = xpathPos; newXpathPos < partsOfXPath.Length; newXpathPos ++) {
                node = node.AppendChild (doc.CreateElement (partsOfXPath [newXpathPos]));
            }
            break;
        }
    }
    return node;
}
----------------------------------------

static private XmlNode makeXPath (XmlDocument doc, XmlNode parent, string xpath) {
    string [] partsOfXPath = xpath.Trim ('/').Split ('/');
    string nextNodeInXPath = partsOfXPath.First ();
    if (string.IsNullOrEmpty (nextNodeInXPath))
        return parent;

    XmlNode node = parent.SelectSingleNode (nextNodeInXPath);
    if (node == null)
        node = parent.AppendChild (doc.CreateElement (nextNodeInXPath));

    string rest = String.Join ("/", partsOfXPath.Skip (1).ToArray ());
    return makeXPath (doc, node, rest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5088157_5088196_1_16
5088157_5088242_1_11
Title: C# method foreach 
----------------------------------------

public string GetNetworkAdapterName (int Ordinal) {
    int i = 1;
    foreach (ManagementObject queryObj in name.Get ()) {
        bool physicaladapter = Convert.ToBoolean (queryObj ["PhysicalAdapter"]);
        if (physicaladapter == true && i == Ordinal) {
            return Convert.ToString (queryObj ["Name"]);
        } else if (physicaladapter == true) {
            i ++;
        }
    }
    return null;
}
----------------------------------------

public string GetNetworkAdapterName (int index) {
    ManagementObject [] queryObjects = name.Get ();
    if (index > queryObjects.Length)
        return String.Empty;

    ManagementObject queryObj = queryObjects [index];
    if (Convert.ToBoolean (queryObj ["PhysicalAdapter"]))
        return queryObj ["Name"].toString ();
    else
        return String.Empty;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5095738_5095766_1_18
5095738_5095779_1_32
Title: Best way to write a simple boolean method with good C# syntax 
----------------------------------------

private static bool isLastIntervalNewerThanDB (string muiMethod) {
    using (var db = new IntLMPDB ())
    {
        LastIntervalUpdated liRec = db.LastIntervalUpdateds.FirstOrDefault (rec = > rec.method == muiMethod);
        if (liRec == null) {
            throw new Exception (string.Format ("Could NOT find LastIntervalUpdated record for muiMethod: {0}", muiMethod));
        }
        return liRec.dbPostTime_EST == null || liRec.retrievalTime_EST > liRec.dbPostTime_EST;
    }}
----------------------------------------

private static bool isLastIntervalNewerThanDB (string muiMethod) {
    using (var db = new IntLMPDB ())
    {
        LastIntervalUpdated liRec = db.LastIntervalUpdateds.FirstOrDefault (rec = > rec.method == muiMethod);
        if (liRec == null) {
            throw new Exception (string.Format ("Could NOT find LastIntervalUpdated record for muiMethod: {0}", muiMethod));
        }
        return liRec.dbPostTime_EST == null || liRec.retrievalTime_EST > liRec.dbPostTime_EST;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5098494_32853556_1_25
5098494_32853556_32_56
Title: HttpWebRequest.BeginGetRequestStream() best practice 
----------------------------------------

public string GetResponse () {
    var response = _request.GetResponse ();
    Status = ((HttpWebResponse) response).StatusDescription;
    _dataStream = response.GetResponseStream ();
    var reader = new StreamReader (_dataStream);
    var responseFromServer = reader.ReadToEnd ();
    reader.Close ();
    if (_dataStream != null)
        _dataStream.Close ();

    response.Close ();
    return responseFromServer;
}
----------------------------------------

public string GetResponse (int millisec) {
    var responseFromServer = "";
    var resetEvent = new ManualResetEvent (false);
    ThreadPool.QueueUserWorkItem (arg = > {
        try {
            responseFromServer = GetResponse ();
        }
        catch (Exception ex) {
            throw ex;
        }
        finally {
            resetEvent.Set ();
        }
    });
    WaitHandle.WaitAll (new WaitHandle [] {resetEvent}, millisec);
    return responseFromServer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50987054_50987180_14_33
50987054_50988961_15_32
Title: "Start pause and restart a timer in Unity C# - Only decrease timer inside trigger and reset when outside trigger" 
----------------------------------------

void Update () {
    if (timer1 == 0)
        ;
    {
        teleport = 0;
    } if (timer1 == 1)
        ;
    {
        timecountdown -= Time.deltaTime;
        if (timecountdown <= 0.0f)
            ;
        {
            teleport = 1;
            timer1 = 0;
            timecountdown = 8f;
        }}}
----------------------------------------

void Update () {
    if (triggerActive) {
        timecountdown -= Time.deltaTime;
        if (timecountdown <= 0.0f) {
            timecountdown = 8.0f;
            teleport = 1;
            triggerActive = false;
        }
    } else {
        teleport = 0;
        timecountdown = 8.0f;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51058574_51058596_1_5
51058574_51058596_7_13
Title: Populate a list inside a linq select statement using the query's index 
----------------------------------------

public static IEnumerable < TResult > Select < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, int, TResult > selector) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    if (selector == null)
        throw Error.ArgumentNull ("selector");

    return SelectIterator < TSource, TResult > (source, selector);
}
----------------------------------------

static IEnumerable < TResult > SelectIterator < TSource, TResult > (IEnumerable < TSource > source, Func < TSource, int, TResult > selector) {
    int index = - 1;
    foreach (TSource element in source) {
        checked {
            index ++;
        }
        yield return selector (element, index);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51069838_51069908_1_19
51069838_51070041_1_23
Title: make label visible when invalid data entered 
----------------------------------------

private void btnAdd_Click (object sender, EventArgs e) {
    ushort operand1;
    ushort operand2;
    if ((UInt16.TryParse (txtOperand1.Text, out operand1) && UInt16.TryParse (txtOperand2.Text, out operand2)) == false) {
        label1.Visible = true;
        label1.ForeColor = Color.Red;
        label1.Text = "Value must be numeric and > 0";
    } else {
        label1.Visible = true;
        label1.Text = string.Format ("{0:N}", operand1 + operand2).ToString ();
    }
}
----------------------------------------

private void btnAdd_Click (object sender, EventArgs e) {
    ushort operand1;
    ushort operand2;
    bool validInput = UInt16.TryParse (txtOperand1.Text, out operand1) && UInt16.TryParse (txtOperand2.Text, out operand2);
    if (! validInput) {
        label1.Visible = true;
        label1.ForeColor = Color.Red;
        label1.Text = "Value must be numeric and > 0";
    } else {
        int result;
        result = operand1 + operand2;
        label1.Visible = true;
        label1.Text = string.Format ("{0:N}", result).ToString ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5107594_5107700_1_18
5107594_5107708_1_16
Title: C# Abstracting methods 
----------------------------------------

private List < T > GetData < T > (DateTime ? startDate, DateTime ? endDate, bool IsSelectAll) {
    List < T > ret = new List < T > ();
    string tableName = "";
    string sql = "";
    if (IsSelectAll) {
        sql = "select * from tbl_sensor_data";
    } else {
        sql = "select * from tbl_sensor_data where Timestamp between @start_date and @end_Date";
    }
    return Converter.SerializeToSensorDataList (this.GetData (startDate, endDate, IsSelectAll, sql));
}
----------------------------------------

private List < T > GetData < T > (DateTime ? startDate, DateTime ? endDate, bool IsSelectAll) where T : ENT_Data {
    List < T > ret = new List < T > ();
    string sql = "";
    if (IsSelectAll) {
        sql = "select * from " + T.table;
    } else {
        sql = " Select * from " + T.table + " where created_Date between @start_Date and @end_date";
    }
    return Converter.Serialize < T > (this.GetData (startDate, endDate, IsSelectAll, sql));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51077381_51077490_11_24
51077381_51077490_26_38
Title: How to read XML into dataset using C# 
----------------------------------------

public static string Serialize < T > (T dataToSerialize) {
    try {
        var stringwriter = new System.IO.StringWriter ();
        var serializer = new XmlSerializer (typeof (T));
        serializer.Serialize (stringwriter, dataToSerialize);
        return stringwriter.ToString ();
    }
    catch {
        throw;
    }
}
----------------------------------------

public static T Deserialize < T > (string xmlText) {
    try {
        var stringReader = new System.IO.StringReader (xmlText);
        var serializer = new XmlSerializer (typeof (T));
        return (T) serializer.Deserialize (stringReader);
    }
    catch {
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5114558_5114611_10_22
5114558_5114611_35_51
Title: using application role of sql server2005 express in multiple forms in c# 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    using (SqlCommand command = new SqlCommand ("sp_setapprole 'my_app' , 'app_pass' ", conn))
    {
        command.CommandType = CommandType.Text;
        conn.Open ();
        command.ExecuteNonQuery ();
    } Form2 f2 = new Form2 (conn);
    f2.Show ();
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    try {
        using (SqlCommand command = new SqlCommand ("create database new_db", conn))
        {
            command.CommandType = CommandType.Text;
            command.ExecuteNonQuery ();
        }}
    finally {
        conn.Close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51161957_51162082_3_16
51161957_51162565_7_26
Title: Want to write to a file converting an integer list of Hex to Char 
----------------------------------------

static void Main (string [] args) {
    List < byte [] > list = new List < byte [] > ();
    list.Add (new byte [] {0x54, 0x45, 0x53, 0x54, 0x20});
    list.Add (new byte [] {0x0});
    list.Add (new byte [] {0x4a, 0x41, 0x53});
    foreach (var b in list) {
        var chars = Encoding.ASCII.GetChars (b);
        var s = new string (chars);
        Console.WriteLine (s);
    }
}
----------------------------------------

public static void Main (string [] args) {
    List < long > list = new List < long > (new long [3]);
    list [0] = 0x5445535420;
    list [1] = 0;
    list [2] = 0x4a4153;
    for (int i = 0; i < list.Count; i ++) {
        StringBuilder sb = new StringBuilder ();
        while (list [i] > 0) {
            sb.Insert (0, Convert.ToChar (list [i] & 0xFF));
            list [i] > >= 8;
        }
        Console.WriteLine (sb);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51178272_51178405_1_31
51178272_51179014_1_30
Title: How to sort ascending only odd numbers in array? 
----------------------------------------

public static int [] SortArray (int [] array) {
    int temp = 0;
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] % 2 == 0)
            continue;

        for (int j = (i + 1); j < array.Length; j ++) {
            if (array [j] % 2 != 0) {
                if (array [i] > array [j]) {
                    temp = array [i];
                    array [i] = array [j];
                    array [j] = temp;
                }
            }
        }
    }
    return array;
}
----------------------------------------

public static int [] SortArray (int [] array) {
    var sortedOdds = new List < int > (array.Length);
    var oddsIndexes = new List < int > (array.Length);
    var newArray = new int [array.Length];
    for (var i = 0; i < array.Length; i ++) {
        var value = array [i];
        if (value % 2 == 1) {
            sortedOdds.Add (value);
            oddsIndexes.Add (i);
        } else {
            newArray [i] = value;
        }
    }
    sortedOdds.Sort ();
    for (var j = 0; j < sortedOdds.Count; j ++) {
        var value = sortedOdds [j];
        var index = oddsIndexes [j];
        newArray [index] = value;
    }
    return newArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51218293_51252781_1_25
51218293_51980988_1_17
Title: How to marshal an unknown length C++ string to C# using its pointer? 
----------------------------------------

public static string [] IntPtrToStringArrayAnsi (IntPtr ptr) {
    var lst = new List < string > ();
    do
        {
            lst.Add (Marshal.PtrToStringAnsi (ptr));
            while (Marshal.ReadByte (ptr) != 0) {
                ptr = IntPtr.Add (ptr, 1);
            }
            ptr = IntPtr.Add (ptr, 1);
        } while (Marshal.ReadByte (ptr) != 0);
    if (lst.Count == 1 && lst [0] == string.Empty) {
        return new string [0];
    }
    return lst.ToArray ();
}
----------------------------------------

private static List < string > IntPtrToStringArrayAnsi (IntPtr ptr) {
    var lst = new List < string > ();
    while (true) {
        var str = Marshal.PtrToStringAnsi (ptr);
        if (! string.IsNullOrEmpty (str)) {
            lst.Add (str);
            ptr += str.Length + 1;
        } else
            break;

    }
    return lst.ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5125940_16559227_18_31
5125940_16559227_3_16
Title: cannot loop oo components in a usercontrol 
----------------------------------------

public static T GetMemberByNameAndType < T > (this UserControl sourceObj, string requiredName, Type requiredType) {
    var members = sourceObj.GetType ().GetFields (BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);
    var found = members.Where (fi = > fi.FieldType.Equals (requiredType) && fi.Name == requiredName);
    if (found.Any ()) {
        var fld = found.FirstOrDefault ();
        T val = (T) fld.GetValue (sourceObj);
        return val;
    }
    throw new Exception ("No member found.");
}
----------------------------------------

public static IEnumerable < T > GetAllMembersByType < T > (this UserControl sourceObj, Type requiredType) {
    var members = sourceObj.GetType ().GetFields (BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);
    var found = members.Where (fi = > fi.FieldType.Equals (requiredType));
    List < T > items = new List < T > ();
    foreach (var fld in found) {
        T val = (T) fld.GetValue (sourceObj);
        items.Add (val);
    }
    return items;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51283008_51283429_1_15
51283008_51283439_6_23
Title: Can we create multiple events during runtime in C# for controls which are created during runtime 
----------------------------------------

public System.Windows.Forms.Label AddNewLabel () {
    System.Windows.Forms.Label lbl = new System.Windows.Forms.Label ();
    lbl.Name = "LabelX" + this.count.ToString ();
    lbl.ForeColor = Color.Black;
    lbl.Font = new Font ("Sego UI", 8, FontStyle.Bold);
    lbl.Top = count * 25;
    lbl.Left = 100;
    lbl.Text = "Label 1 " + this.count.ToString ();
    lbl.DoubleClick += Lbl_DoubleClick;
    lbl.BringToFront ();
    panel4.Controls.Add (lbl);
    count = count + 1;
    return lbl;
}
----------------------------------------

public System.Windows.Forms.Label AddNewLabel () {
    int count = 1;
    System.Windows.Forms.Label lbl = new System.Windows.Forms.Label ();
    lbl.Name = "LabelX" + count;
    lbl.ForeColor = Color.Black;
    lbl.Font = new Font ("Sego UI", 8, FontStyle.Bold);
    lbl.Top = count * 25;
    lbl.Left = 100;
    lbl.Text = "Label 1 " + count;
    lbl.BringToFront ();
    lbl.Click += lblMyLabel_Click;
    panel4.Controls.Add (lbl);
    count ++;
    return lbl;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5141322_5141341_1_19
5141322_5141370_1_15
Title: try & catch structure basic quesiton 
----------------------------------------

public bool TestMethod () {
    try {
        if (some_condition) {
            return true;
        } else {
            return false;
        }
    }
    catch {
        return false;
    }
}
----------------------------------------

public bool TestMethod () {
    bool retVal = false;
    try {
        if (true) {
            retVal = true;
        } else {
        }
    }
    catch {
    }
    return retVal;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5141322_5141341_1_19
5141322_5141387_1_18
Title: try & catch structure basic quesiton 
----------------------------------------

public bool TestMethod () {
    try {
        if (some_condition) {
            return true;
        } else {
            return false;
        }
    }
    catch {
        return false;
    }
}
----------------------------------------

public bool TestMethod () {
    bool returnValue = false;
    try {
        if (true) {
            returnValue = true;
        }
    }
    catch (Exception ex) {
    }
    return returnValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51560237_51560374_7_21
51560237_51560397_3_20
Title: How to run this program repeatedly? 
----------------------------------------

static void Main (string [] args) {
    string go = string.Empty;
    Console.WriteLine ("*** Welcome to the Hi-Lo game ***");
    Console.WriteLine ("The computer chose a number between 1 and 100, you guess it");
    do
        {
            GameLoop ();
            Console.WriteLine ("Go again? Y/N");
            go = Console.ReadLine ();
        } while (go == "Y" || go == "y");
}
----------------------------------------

static void Main (string [] args) {
    bool repeat = true;
    while (repeat) {
        DoTheGame ();
        Console.WriteLine ("Go again? Y/N");
        string go = Console.ReadLine ();
        if (go == "Y" || go == "y") {
            repeat = true;
        } else {
            repeat = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51569544_51747283_20_70
51569544_51747283_72_210
Title: Acumatica: Ability to override DefaultEndpointImpl to add advanced custom logic to contract REST API 
----------------------------------------

[FieldsProcessed (new [] {"POLineNbr", "POOrderType", "POOrderNbr", "OrigLineNbr", "OrigRefNbr"})] protected new void PurchaseReceiptDetail_Insert (PXGraph graph, EntityImpl entity, EntityImpl targetEntity) {
    var lineNbr = targetEntity.Fields.SingleOrDefault (f = > f.Name == "OrigLineNbr") as EntityValueField;
    var refNbr = targetEntity.Fields.SingleOrDefault (f = > f.Name == "OrigRefNbr") as EntityValueField;
    var receiptQty = targetEntity.Fields.SingleOrDefault (f = > f.Name == "ReceiptQty") as EntityValueField;
    var location = targetEntity.Fields.SingleOrDefault (f = > f.Name == "Location") as EntityValueField;
    var inventoryID = targetEntity.Fields.SingleOrDefault (f = > f.Name == "InventoryID") as EntityValueField;
    bool insertViaAddTR = lineNbr != null && refNbr != null;
    var receiptEntry = (POReceiptEntry) graph;
    if (insertViaAddTR) {
        receiptEntry.addReceipt.Cache.Remove (receiptEntry.addReceipt.Current);
        receiptEntry.addReceipt.Cache.Insert (new POReceiptEntry.POReceiptLineS ());
        var filter = receiptEntry.addReceipt.Current;
        receiptEntry.addReceipt.Cache.SetValueExt (filter, "OrigRefNbr", refNbr.Value);
        receiptEntry.addReceipt.Cache.SetValueExt (filter, "OrigLineNbr", lineNbr.Value);
        receiptEntry.addReceipt.Cache.SetValueExt (filter, "InventoryID", inventoryID.Value);
        receiptEntry.addReceipt.Cache.SetValueExt (filter, "ReceiptQty", receiptQty.Value);
        if (location != null)
            receiptEntry.addReceipt.Cache.SetValueExt (filter, "LocationID", location.Value);

        receiptEntry.addReceipt.Update (filter);
        var lines = receiptEntry.addReceipt.Select ().Select (r = > r.GetItem < POReceiptEntry.POReceiptLineS > ());
        var line = lines.FirstOrDefault (o = > o.OrigLineNbr == int.Parse (lineNbr.Value));
        if (line == null) {
            throw new PXException (PX.Objects.PO.Messages.PurchaseOrderLineNotFound);
        }
        receiptEntry.addPOReceiptLine2.Press ();
    } else {
        base.PurchaseReceiptDetail_Insert (graph, entity, targetEntity);
    }
    var allocations = (targetEntity.Fields.SingleOrDefault (f = > string.Equals (f.Name, "Allocations")) as EntityListField).Value ?? new EntityImpl [0];
    if (allocations.Any (a = > a.Fields != null && a.Fields.Length > 0)) {
        if (receiptEntry.splits.Current != null) {
            receiptEntry.splits.Delete (receiptEntry.splits.Current);
        }
    }
}
----------------------------------------

[FieldsProcessed (new [] {"OrigLineNbr", "OrigRefNbr", "Quantity", "Location"})] protected void ReceiptDetails_Insert (PXGraph graph, EntityImpl entity, EntityImpl targetEntity) {
    var lineNbr = targetEntity.Fields.SingleOrDefault (f = > f.Name == "OrigLineNbr") as EntityValueField;
    var receiptQty = targetEntity.Fields.SingleOrDefault (f = > f.Name == "Quantity") as EntityValueField;
    var location = targetEntity.Fields.SingleOrDefault (f = > f.Name == "Location") as EntityValueField;
    var allocations = (targetEntity.Fields.SingleOrDefault (f = > string.Equals (f.Name, "Allocations")) as EntityListField).Value ?? new EntityImpl [0];
    var hasAllocations = allocations.Any (a = > a.Fields != null && a.Fields.Length > 0);
    var receiptEntry = (INReceiptEntry) graph;
    string transferNbr = receiptEntry.receipt.Current.TransferNbr;
    var detailsCache = receiptEntry.transactions.Cache;
    if (lineNbr == null || transferNbr == null) {
        detailsCache.Current = detailsCache.Insert ();
        return;
    }
    INTran newtran = null;
    decimal newtranqty = Decimal.Parse (receiptQty.Value);
    decimal newtrancost = 0m;
    receiptEntry.ParseSubItemSegKeys ();
    using (new PXReadBranchRestrictedScope ())
    {
        foreach (PXResult < INTransitLine, INLocationStatus2, INTransitLineLotSerialStatus, INSite, InventoryItem, INTran > res in PXSelectJoin < INTransitLine, InnerJoin < INLocationStatus2, On < INLocationStatus2.locationID, Equal < INTransitLine.costSiteID > >, LeftJoin < INTransitLineLotSerialStatus, On < INTransitLine.transferNbr, Equal < INTransitLineLotSerialStatus.transferNbr >, And < INTransitLine.transferLineNbr, Equal < INTransitLineLotSerialStatus.transferLineNbr > > >, InnerJoin < INSite, On < INSite.siteID, Equal < INTransitLine.toSiteID > >, InnerJoin < InventoryItem, On < InventoryItem.inventoryID, Equal < INLocationStatus2.inventoryID > >, InnerJoin < INTran, On < INTran.docType, Equal < INDocType.transfer >, And < INTran.refNbr, Equal < INTransitLine.transferNbr >, And < INTran.lineNbr, Equal < INTransitLine.transferLineNbr >, And < INTran.invtMult, Equal < shortMinus1 > > > > > > > > > >, Where < INTransitLine.transferNbr, Equal < Required < INTransitLine.transferNbr > >, And < INTransitLine.transferLineNbr, Equal < Required < INTransitLine.transferLineNbr > > > >, OrderBy < Asc < INTransitLine.transferNbr, Asc < INTransitLine.transferLineNbr > > > >.Select (receiptEntry, transferNbr, lineNbr.Value)) {
            INTransitLine transitline = res;
            INLocationStatus2 stat = res;
            INTransitLineLotSerialStatus lotstat = res;
            INSite site = res;
            InventoryItem item = res;
            INTran tran = res;
            if (stat.QtyOnHand == 0m || (lotstat != null && lotstat.QtyOnHand == 0m))
                continue;

            if (newtran == null) {
                if (! object.Equals (receiptEntry.receipt.Current.BranchID, site.BranchID)) {
                    INRegister copy = PXCache < INRegister >.CreateCopy (receiptEntry.receipt.Current);
                    copy.BranchID = site.BranchID;
                    receiptEntry.receipt.Update (copy);
                }
                newtran = PXCache < INTran >.CreateCopy (tran);
                newtran.OrigBranchID = newtran.BranchID;
                newtran.OrigTranType = newtran.TranType;
                newtran.OrigRefNbr = transitline.TransferNbr;
                newtran.OrigLineNbr = transitline.TransferLineNbr;
                newtran.BranchID = site.BranchID;
                newtran.DocType = receiptEntry.receipt.Current.DocType;
                newtran.RefNbr = receiptEntry.receipt.Current.RefNbr;
                newtran.LineNbr = (int) PXLineNbrAttribute.NewLineNbr < INTran.lineNbr > (receiptEntry.transactions.Cache, receiptEntry.receipt.Current);
                newtran.InvtMult = (short) 1;
                newtran.SiteID = transitline.ToSiteID;
                newtran.LocationID = transitline.ToLocationID;
                newtran.ToSiteID = null;
                newtran.ToLocationID = null;
                newtran.BaseQty = 0m;
                newtran.Qty = 0m;
                newtran.UnitCost = 0m;
                newtran.Released = false;
                newtran.InvtAcctID = null;
                newtran.InvtSubID = null;
                newtran.ReasonCode = null;
                newtran.ARDocType = null;
                newtran.ARRefNbr = null;
                newtran.ARLineNbr = null;
                newtran.ProjectID = null;
                newtran.TaskID = null;
                newtran.CostCodeID = null;
                newtran.TranCost = 0m;
                receiptEntry.splits.Current = null;
                newtran = receiptEntry.transactions.Insert (newtran);
                receiptEntry.transactions.Current = newtran;
                if (receiptEntry.splits.Current != null) {
                    receiptEntry.splits.Delete (receiptEntry.splits.Current);
                }
            }
            if (hasAllocations) {
                newtranqty = 0m;
                foreach (var allocation in allocations) {
                    var newsplitqty = allocation.Fields.SingleOrDefault (f = > f.Name == "Quantity") as EntityValueField;
                    var newsplitlocation = allocation.Fields.SingleOrDefault (f = > f.Name == "Location") as EntityValueField;
                    INTranSplit newsplit = this.addReceiptSplitLine (receiptEntry, stat, lotstat, transitline, newtran, item, Decimal.Parse (newsplitqty.Value), newsplitlocation.Value);
                    newtrancost += newsplit.BaseQty.Value * newsplit.UnitCost.Value;
                    newtranqty += newsplit.BaseQty.Value;
                }
                break;
            } else {
                INTranSplit newsplit = this.addReceiptSplitLine (receiptEntry, stat, lotstat, transitline, tran, item, newtranqty, null);
                newtrancost += newsplit.BaseQty.Value * newsplit.UnitCost.Value;
                newtranqty += newsplit.BaseQty.Value;
            }
        }
        receiptEntry.UpdateTranCostQty (newtran, newtranqty, newtrancost);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51583377_51583488_1_14
51583377_51593266_1_15
Title: "Function which takes a string as input and returns an array of strings as follows ABC(abcde) should return [Abcde aBcde abCde abcDe abcdE]" 
----------------------------------------

public static string [] Transform (string str) {
    var strs = new List < string > ();
    var sb = new StringBuilder ();
    for (int i = 0; i < str.Length; i ++) {
        sb.Clear ();
        sb.Append (str);
        sb [i] = char.ToUpper (str [i]);
        strs.Add (sb.ToString ());
    }
    return strs.ToArray ();
}
----------------------------------------

public static string [] Transform (string str) {
    var strs = new string [str.Length];
    var sb = str.ToCharArray ();
    char oldCh;
    for (int i = 0; i < str.Length; i ++) {
        oldCh = sb [i];
        sb [i] = char.ToUpper (sb [i]);
        strs [i] = new string (sb);
        sb [i] = oldCh;
    }
    return strs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51665465_51665915_1_17
51665465_51665918_18_48
Title: Can someone help me get my audio to play in Unity? 
----------------------------------------

void Update () {
    if (Input.GetKey ("up") == true || Input.GetKey ("down") == true || Input.GetKey ("left") == true || Input.GetKey ("right") == true) {
        Drive ();
        if (! CarEngine.isPlaying)
            CarEngine.Play ();

    } else {
        if (CarEngine.isPlaying) {
            Debug.Log ("Stop playing....");
            CarEngine.Stop ();
        }
    }
}
----------------------------------------

void Update () {
    if (Input.GetKey ("up")) {
        transform.position = new Vector3 (transform.position.x + drivespeed, transform.position.y);
        PlayCarSound (true);
    } else if (Input.GetKey ("down")) {
        transform.position = new Vector3 (transform.position.x - drivespeed, transform.position.y);
        PlayCarSound (true);
    } else if (Input.GetKey ("left")) {
        transform.position = new Vector3 (transform.position.x, transform.position.y + drivespeed);
        PlayCarSound (true);
    } else if (Input.GetKey ("right")) {
        transform.position = new Vector3 (transform.position.x, transform.position.y - drivespeed);
        PlayCarSound (true);
    } else {
        PlayCarSound (false);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51761010_51761368_19_26
51761010_51761368_37_51
Title: How to store API result set for different response types using C#.Net 
----------------------------------------

public override string InvokeRest (string url) {
    if (url == "API_URL1")
        return "{\"Name\": \"Apple\",\"Expiry\": \"2008-12-28T00:00:00\",\"Price\": 3.99,\"Sizes\": [\"Small\",\"Medium\",\"Large\"]}";

    if (url == "API_URL2")
        return "[\"Name=xyz, Id=1, Version=1\", \"Name=abc, Id=1, Version=2\", \"Name=hgf, Id=1, Version=3\", \"Name=utgds, Id=1, Version=4\", \"Name=kfgf, Id=2, Version=1\"]";

    throw new NotImplementedException ();
}
----------------------------------------

public virtual string InvokeRest (string url) {
    using (var handler = new HttpClientHandler {Credentials = CredentialCache.DefaultNetworkCredentials})
    using (var httpClient = CreateNewRequest (handler))
    {
        var httpTask = httpClient.GetAsync (url);
        var response = httpTask.Result;
        response.EnsureSuccessStatusCode ();
        if (response.IsSuccessStatusCode) {
            return response.Content.ReadAsStringAsync ().Result;
        }
    } return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51766972_51767134_1_31
51766972_51767228_1_28
Title: Finding the length of a valid substring in a string. C# 
----------------------------------------

public static int solution (string S) {
    int result = 0;
    int tally = 0;
    bool foundUpper = false;
    for (int i = 0; i < S.Length; i ++) {
        char Z = S [i];
        if (char.IsDigit (Z)) {
            if (foundUpper && tally > result) {
                result = tally;
            }
            tally = 0;
            foundUpper = false;
        } else {
            tally ++;
            foundUpper |= char.IsUpper (Z);
        }
    }
    if (foundUpper && tally > result) {
        result = tally;
    }
    return result;
}
----------------------------------------

public static int solution (string s) {
    int result = 0;
    for (int i = 0; i < s.Length; i ++) {
        bool containsUpper = false;
        if (Char.IsLetter (s [i])) {
            int len = 0;
            do
                {
                    if (Char.IsUpper (s [i])) {
                        containsUpper = true;
                    }
                    i ++;
                    len ++;
                } while (i < s.Length && Char.IsLetter (s [i]));
            if ((len > result) && containsUpper)
                result = len;

        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51796517_51796734_1_23
51796517_51796794_1_16
Title: Getting strings of specific length from a string of different length 
----------------------------------------

private List < string > MakeCustomDataReadyForPromotion () {
    var setting = SettingsDbManager.Instance.GetSettingBaseOnTrackId (Settings.PromotionDetailsTrackId);
    var restaurantTitle = setting.PromotionTitle;
    var promotionBody = setting.PromotionBody;
    var totalCharacters = promotionBody.Length;
    List < string > message = new List < string > {restaurantTitle};
    for (int i = 0; i < totalCharacters; i += 100) {
        try {
            message.Add (promotionBody.Substring (i, 100));
        }
        catch {
            message.Add (promotionBody.Substring (i, totalCharacters - i));
        }
    }
    return message;
}
----------------------------------------

private List < string > MakeCustomDataReadyForPromotion () {
    var setting = SettingsDbManager.Instance.GetSettingBaseOnTrackId (Settings.PromotionDetailsTrackId);
    var restaurantTitle = setting.PromotionTitle;
    var promotionBody = setting.PromotionBody;
    int chunkSize = 100;
    List < string > message = new List < string > {restaurantTitle};
    for (int i = 0; i < promotionBody.Length; i += chunkSize) {
        if (promotionBody.Length - i > chunkSize)
            message.Add (promotionBody.Substring (i, chunkSize));
        else
            message.Add (promotionBody.Substring (i));

    }
    return message;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51837176_51837521_31_46
51837176_51839248_5_16
Title: draw filled circle in WinForms C# 
----------------------------------------

private void DrawClientStateIcon (bool isSignedIn) {
    Point rectangleLocation = picBoxClientState.Location;
    Size rectangleSize = picBoxClientState.Size;
    Rectangle rectangle = new Rectangle (rectangleLocation, new Size (rectangleSize.Width / 2, rectangleSize.Height / 2));
    Color iconColor = isSignedIn ? Color.Green : Color.Red;
    using (SolidBrush iconBrush = new SolidBrush (iconColor))
    {
        using (Graphics graphics = picBoxClientState.CreateGraphics ())
        {
            graphics.FillEllipse (iconBrush, rectangle);
        }}}
----------------------------------------

private void DrawClientStateIcon (bool isSignedIn) {
    Point rectangleLocation = picBoxClientState.Location;
    Size rectangleSize = picBoxClientState.Size;
    Rectangle rectangle = new Rectangle (rectangleLocation, rectangleSize);
    Color iconColor = isSignedIn ? Color.Green : Color.Red;
    SolidBrush iconBrush = new SolidBrush (iconColor);
    Graphics graphics = base.CreateGraphics ();
    graphics.FillEllipse (iconBrush, rectangle);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51861249_51861540_1_32
51861249_51861842_1_54
Title: Authentication form with a XML file 
----------------------------------------

private void button4_Click (object sender, EventArgs e) {
    XmlDocument doc = new XmlDocument ();
    doc.Load ("dati.txt");
    bool found = false;
    foreach (XmlNode node in doc.SelectNodes ("//user")) {
        String User = node.SelectSingleNode ("name").InnerText;
        String Pass = node.SelectSingleNode ("password").InnerText;
        if (User == textBox1.Text && Pass == textBox2.Text) {
            found = true;
            break;
        }
    }
    if (found) {
        button1.Visible = true;
        dlt_btn.Visible = true;
        button3.Visible = true;
        button3.Visible = true;
        button5.Visible = true;
    } else {
        MessageBox.Show ("Invalid Username or Password!");
    }
}
----------------------------------------

private void button4_Click (object sender, EventArgs e) {
    string username;
    string password;
    string CurrentUser = "";
    string CurrentPwd = "";
    bool LoginStatus = false;
    username = textBox1.Text;
    password = textBox2.Text;
    XmlDocument xmxdoc = new XmlDocument ();
    xmxdoc.Load ("dati.txt");
    XmlNodeList xmlnodelist = xmxdoc.GetElementsByTagName ("user");
    foreach (XmlNode xn in xmlnodelist) {
        XmlNodeList xmlnl = xn.ChildNodes;
        foreach (XmlNode xmln in xmlnl) {
            if (xmln.Name == "name") {
                if (xmln.InnerText == username) {
                    CurrentUser = username;
                }
            }
            if (xmln.Name == "password") {
                if (xmln.InnerText == password) {
                    CurrentPwd = password;
                }
            }
        }
        if ((CurrentUser != "") & (CurrentPwd != "")) {
            LoginStatus = true;
        }
    }
    if (LoginStatus == true) {
        button1.Visible = true;
        dlt_btn.Visible = true;
        button3.Visible = true;
        button3.Visible = true;
        button5.Visible = true;
        return;
    } else {
        MessageBox.Show ("Invalid Username or Password!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51907319_51907609_20_31
51907319_51912211_7_22
Title: C# - check if List<> is initialized 
----------------------------------------

static void CheckList (ref List < string > checkList) {
    if (checkList == null) {
        Console.WriteLine ("List to check is null. Initializing.");
        checkList = new List < string > ();
        return;
    }
    Console.WriteLine ("List to check is initialized.");
    return;
}
----------------------------------------

public static void CheckList (out List < int > list, List < int > sameList) {
    list = sameList;
    if (list == null) {
        list = new List < int > ();
        list.Add (1);
    } else {
        list.Add (12);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51932626_51933401_11_23
51932626_51933401_33_42
Title: how to get the updated or modified list record by comparing 2 list using linq or reflection 
----------------------------------------

public int GetHashCode (NeWClient obj) {
    unchecked {
        if (obj == null)
            return 0;

        int hashCode = obj.ClientID.GetHashCode ();
        hashCode = hashCode * 23 + obj.ClientName.GetHashCode ();
        hashCode = hashCode * 23 + obj.companyLocation.GetHashCode ();
        hashCode = hashCode * 23 + obj.companyName.GetHashCode ();
        return hashCode;
    }
}
----------------------------------------

public int GetHashCode (NeWClient obj) {
    unchecked {
        if (obj == null)
            return 0;

        int hashCode = obj.ClientID.GetHashCode ();
        return hashCode;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51943590_51943677_1_15
51943590_51949024_1_16
Title: passing class object into list 
----------------------------------------

public static void Main (String [] args) {
    Console.WriteLine ("Enter number users:");
    int nbUsers = int.Parse (Console.ReadLine ());
    storeDetails sd = new storeDetails ();
    for (int i = 0; i < nbUsers; i ++) {
        Class1 tr = new Class1 ();
        tr.getDetails ();
        sd.store (tr);
    }
    Console.ReadLine ();
}
----------------------------------------

public static void Main (String [] args) {
    Class1 tr;
    Console.WriteLine ("Enter number users:");
    int nbUsers = Console.ReadLine ();
    List < Class1 > sd = new List < Class1 > ();
    for (int i = 0; i < nbUsers; i ++) {
        tr = new Class1 ();
        tr.getDetails ();
        sd.Add (tr);
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51949880_51950175_1_14
51949880_51950456_1_17
Title: How to execute all statement except one based on some condition? 
----------------------------------------

int GetSum (Abc abc) {
    int sum = 307;
    switch (abc) {
        case Abc.A :
            sum -= 23;
            break;
        case Abc.B :
            sum -= 68;
            break;
    }
    return sum;
}
----------------------------------------

int GetSum (Abc abc) {
    int sum = 0;
    var actions = new List < KeyValuePair < Abc, Action > > {KVP (Abc.A, () = > sum += 23), KVP (Abc.B, () = > sum += 68), KVP (Abc.C, () = > sum += 96), KVP (Abc.D, () = > sum += 57), KVP (Abc.E, () = > sum += 63)};
    foreach (var action in actions)
        if (action.Key != abc)
            action.Value ();

    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51990273_51990375_1_25
51990273_51990399_1_18
Title: Stop adding to List<String> when line matches regex - C# 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    StreamReader reader = File.OpenText ("cru-ts-2-10.1991-2000-cutdown.pre");
    string line;
    var regex = new Regex (@"(Grid)");
    List < String > HeaderParse = new List < string > ();
    while ((line = reader.ReadLine ()) != null) {
        if (! regex.IsMatch (line)) {
            HeaderParse.Add (line);
        } else {
            break;
        }
    }
    MessageBox.Show ("This button has been clicked");
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    StreamReader reader = File.OpenText ("cru-ts-2-10.1991-2000-cutdown.pre");
    string line;
    var regex = new Regex (@"(Grid)");
    List < String > HeaderParse = new List < string > ();
    while ((line = reader.ReadLine ()) != null && ! regex.IsMatch (line)) {
        HeaderParse.Add (line);
    }
    MessageBox.Show ("This button has been clicked");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
520030_3893291_1_14
520030_520046_9_27
Title: Why is there no Linq method to return distinct values by a predicate? 
----------------------------------------

public static IEnumerable < T > DistinctBy < T, TKey > (this IEnumerable < T > source, Func < T, TKey > keySelector) {
    HashSet < TKey > keys = new HashSet < TKey > ();
    foreach (T item in source) {
        TKey key = keySelector (item);
        if (! keys.Contains (key)) {
            keys.Add (key);
            yield return item;
        }
    }
}
----------------------------------------

public static IEnumerable < TSource > DistinctBy < TSource, TKey > (this IEnumerable < TSource > source, Func < TSource, TKey > keySelector, IEqualityComparer < TKey > comparer) {
    if (source == null) {
        throw new ArgumentNullException ("source");
    }
    if (keySelector == null) {
        throw new ArgumentNullException ("keySelector");
    }
    if (comparer == null) {
        throw new ArgumentNullException ("comparer");
    }
    return DistinctByImpl (source, keySelector, comparer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5201414_5201549_29_42
5201414_5201550_1_25
Title: Using FileStream.Seek 
----------------------------------------

public void SeekMethod (List < int > lineNumbers) {
    Debug.Print ("");
    Debug.Print ("Line No\t\tPosition\t\tLine");
    Debug.Print ("-------\t\t--------\t\t-----------------");
    lineNumbers.Sort ();
    using (var fs = new FileStream (File.FullName, FileMode.Open))
    {
        lineNumbers.ForEach (ln = > OutputData (fs, ln));
    }}
----------------------------------------

public void SeekMethod (int [] lineNos) {
    string line = null;
    long step;
    Array.Sort (lineNos);
    Debug.Print ("");
    Debug.Print ("Line No\t\tPosition\t\tLine");
    Debug.Print ("-------\t\t--------\t\t-----------------");
    using (FileStream fs = new FileStream (FileName, FileMode.Open, FileAccess.Read, FileShare.None))
    {
        foreach (int lineNo in lineNos) {
            StreamReader reader = new StreamReader (fs);
            step = (lineNo - 1) * LineLength - fs.Position;
            fs.Position += step;
            if ((line = reader.ReadLine ()) != null) {
                Debug.Print ("{0}\t\t\t{1}\t\t\t\t{2}", lineNo, step, line);
            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5204537_5204564_13_33
5204537_5204564_3_11
Title: Linq Query Question 
----------------------------------------

private static IEnumerable < TSource > WhereNextImpl < TSource > (IEnumerable < TSource > source, Func < TSource, bool > predicate, TSource next) {
    using (var enumerator = source.GetEnumerator ())
    {
        TSource current;
        TSource nextElement;
        if (! enumerator.MoveNext ())
            yield break;

        while (true) {
            current = enumerator.Current;
            if (! enumerator.MoveNext ())
                yield break;

            nextElement = enumerator.Current;
            if (predicate (current) && EqualityComparer < TSource >.Default.Equals (next, nextElement))
                yield return current;

        }
    }}
----------------------------------------

public static IEnumerable < TSource > WhereNext < TSource > (this IEnumerable < TSource > source, Func < TSource, bool > predicate, TSource next) {
    if (source == null)
        throw new ArgumentNullException ("source");

    if (predicate == null)
        throw new ArgumentNullException ("predicate");

    return WhereNextImpl (source, predicate, next);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52045751_52075800_65_84
52045751_52075800_93_118
Title: How to send Google drive token stored as json string(in database) in GoogleWebAuthorizationBroker.AuthorizeAsync method in .Net? 
----------------------------------------

Task IDataStore.DeleteAsync < T > (string key) {
    if (string.IsNullOrEmpty (key)) {
        throw new ArgumentException ("Key MUST have a value");
    }
    try {
        var hold = GoogleUserCredentials.Where (a = > a.Key == key).FirstOrDefault ();
        GoogleUserCredentials.Remove (hold);
        SaveChangesAsync ();
    }
    catch (System.Data.SqlClient.SqlException ex) {
        throw new Exception ("Failed to delete credentials", ex);
    }
    return Task.Delay (0);
}
----------------------------------------

Task < T > IDataStore.GetAsync < T > (string key) {
    if (string.IsNullOrEmpty (key)) {
        throw new ArgumentException ("Key MUST have a value");
    }
    TaskCompletionSource < T > tcs = new TaskCompletionSource < T > ();
    var user = GetUserByKey (GenerateStoredKey (key));
    if (user != null) {
        try {
            tcs.SetResult (NewtonsoftJsonSerializer.Instance.Deserialize < T > (user.Credentials));
        }
        catch (Exception ex) {
            tcs.SetException (ex);
        }
    } else {
        tcs.SetResult (default (T));
    }
    return tcs.Task;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52064046_52064198_13_30
52064046_52064486_22_48
Title: Creating an Enemy Class 
----------------------------------------

public void AssignStats () {
    if (gameObject.tag == "Enemy1") {
        MaxHp = 50;
        Hp = MaxHp;
        Debug.Log (Hp);
    }
    if (gameObject.tag == "Boss") {
        MaxHp = 500;
        Hp = MaxHp;
        Debug.Log (Hp);
    }
}
----------------------------------------

public void AssignStats () {
    if (gameObject.CompareTag (CurrentEnemyType.ToString ())) {
        if (CurrentEnemyType == EnemyType.Enemy1) {
            MaxHp = 50;
            Hp = MaxHp;
            Debug.Log (Hp);
        } else if (CurrentEnemyType == EnemyType.Boss) {
            MaxHp = 500;
            Hp = MaxHp;
            Debug.Log (Hp);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52158271_52158762_24_51
52158271_52159300_16_29
Title: Thread vs Parallel.For performance 
----------------------------------------

public static bool ParallelThread () {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    var events = new ManualResetEvent [100];
    for (int i = 0; i < 100; i ++) {
        int x = i;
        events [x] = new ManualResetEvent (false);
        ThreadPool.QueueUserWorkItem (_ = > {
            Thread1 (x);
            events [x].Set ();
        });
    }
    for (int i = 0; i < 100; i ++) {
        events [i].WaitOne ();
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Time in secs {0}", sw.Elapsed.Seconds));
    return true;
}
----------------------------------------

public static bool ParallelThread () {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    var threads = Enumerable.Range (0, 10).Select (x = > new Thread (new ThreadStart (Thread1))).ToList ();
    foreach (var thread in threads)
        thread.Start ();

    foreach (var thread in threads)
        thread.Join ();

    sw.Stop ();
    Console.WriteLine (string.Format ("Time in secs {0}", sw.Elapsed.TotalMilliseconds));
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52169396_52169845_1_26
52169396_52170622_1_17
Title: Non Overlappings datetimes in two lists 
----------------------------------------

private List < DateSpan > GetNonOverlappingTimes () {
    var AvailableHours = new System.Collections.Generic.List < DateSpan > ();
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 1, 5, 0, 0), 2));
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 2, 4, 0, 0), 2));
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 2, 5, 0, 0), 2));
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 2, 1, 30, 0), 2));
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 4, 5, 0, 0), 2));
    var BlockTimes = new System.Collections.Generic.List < DateSpan > ();
    BlockTimes.Add (new DateSpan (new DateTime (2018, 9, 1, 10, 0, 0), 2));
    BlockTimes.Add (new DateSpan (new DateTime (2018, 9, 2, 5, 0, 0), 2));
    BlockTimes.Add (new DateSpan (new DateTime (2018, 9, 3, 5, 0, 0), 2));
    BlockTimes.Add (new DateSpan (new DateTime (2018, 9, 4, 4, 0, 0), 2));
    var availableTimes = new List < DateSpan > ();
    foreach (var avail in AvailableHours) {
        bool isConflict = BlockTimes.Exists (bt = > (bt.StartDate >= avail.StartDate && bt.StartDate < avail.EndDate) || (bt.EndDate > avail.StartDate && bt.EndDate <= avail.EndDate));
        if (! isConflict)
            availableTimes.Add (avail);

    }
    return availableTimes;
}
----------------------------------------

private List < DateSpan > GetNonOverlappingTimes () {
    var AvailableHours = new System.Collections.Generic.List < DateSpan > ();
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 1, 5, 0, 0), 2));
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 2, 4, 0, 0), 2));
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 2, 5, 0, 0), 2));
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 2, 1, 30, 0), 2));
    AvailableHours.Add (new DateSpan (new DateTime (2018, 9, 4, 5, 0, 0), 2));
    var BlockTimes = new System.Collections.Generic.List < DateSpan > ();
    BlockTimes.Add (new DateSpan (new DateTime (2018, 9, 1, 10, 0, 0), 2));
    BlockTimes.Add (new DateSpan (new DateTime (2018, 9, 2, 5, 0, 0), 2));
    BlockTimes.Add (new DateSpan (new DateTime (2018, 9, 3, 5, 0, 0), 2));
    BlockTimes.Add (new DateSpan (new DateTime (2018, 9, 4, 4, 0, 0), 2));
    return AvailableHours.Where (x = > BlockTimes.All (y = > ! x.Intersect (y))).ToList ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52174382_52174611_1_23
52174382_52174937_1_24
Title: TextBox : Modify user's input 
----------------------------------------

private void TextBox_OnPreviewTextInput (object sender, TextCompositionEventArgs e) {
    if (e.Text == ";") {
        ((TextBox) sender).PreviewTextInput -= TextBox_OnPreviewTextInput;
        int index = ((TextBox) sender).CaretIndex;
        ((TextBox) sender).Text = ((TextBox) sender).Text.Insert (index, ";\r\n");
        ((TextBox) sender).PreviewTextInput += TextBox_OnPreviewTextInput;
        ((TextBox) sender).Select (index + 3, 0);
        e.Handled = true;
    }
}
----------------------------------------

private void TextBox_OnPreviewTextInput (object sender, TextCompositionEventArgs e) {
    if (e.Text == ";") {
        var textBox = (TextBox) sender;
        var selectStart = textBox.SelectionStart;
        var insertedText = ";" + Environment.NewLine;
        textBox.PreviewTextInput -= TextBox_OnPreviewTextInput;
        textBox.Text = textBox.Text.Insert (selectStart, insertedText);
        textBox.PreviewTextInput += TextBox_OnPreviewTextInput;
        textBox.Select (selectStart + insertedText.Length, 0);
        e.Handled = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52191973_52195703_103_117
52191973_52195703_126_140
Title: c# Creating Matrix from sub matrixes 
----------------------------------------

public static T [,] SubArray < T > (T [,] src, int srcx, int srcy, int dstWidth, int dstHeight) {
    int srcWidth = src.GetLength (0);
    int srcHeight = src.GetLength (1);
    if (srcx < 0)
        throw new ArgumentOutOfRangeException ();

    if (srcy < 0)
        throw new ArgumentOutOfRangeException ();

    if (srcx + dstWidth > srcWidth)
        throw new ArgumentOutOfRangeException ();

    if (srcy + dstHeight > srcHeight)
        throw new ArgumentOutOfRangeException ();

    T [,] dst = new T [dstWidth, dstHeight];
    for (int dsty = 0; dsty < dstHeight; ++ dsty) {
        for (int dstx = 0; dstx < dstWidth; ++ dstx) {
            dst [dstx, dsty] = src [srcx + dstx, srcy + dsty];
        }
    }
    return dst;
}
----------------------------------------

public T [,] [,] ArrayToBlockArray < T > (T [,] src, int blockSize) {
    int srcWidth = src.GetLength (0);
    int srcHeight = src.GetLength (1);
    if (srcWidth % blockSize != 0)
        throw new Exception (string.Format ("Width must be divisible by {0}", blockSize));

    if (srcHeight % blockSize != 0)
        throw new Exception (string.Format ("Height must be divisible by {0}", blockSize));

    int dstWidth = srcWidth / blockSize;
    int dstHeight = srcHeight / blockSize;
    T [,] [,] dst = new T [dstWidth, dstHeight] [,];
    for (int dsty = 0; dsty < dstHeight; ++ dsty) {
        for (int dstx = 0; dstx < dstWidth; ++ dstx) {
            dst [dstx, dsty] = SubArray (src, dstx * blockSize, dsty * blockSize, blockSize, blockSize);
        }
    }
    return dst;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52191973_52195703_103_117
52191973_52195703_148_172
Title: c# Creating Matrix from sub matrixes 
----------------------------------------

public static T [,] SubArray < T > (T [,] src, int srcx, int srcy, int dstWidth, int dstHeight) {
    int srcWidth = src.GetLength (0);
    int srcHeight = src.GetLength (1);
    if (srcx < 0)
        throw new ArgumentOutOfRangeException ();

    if (srcy < 0)
        throw new ArgumentOutOfRangeException ();

    if (srcx + dstWidth > srcWidth)
        throw new ArgumentOutOfRangeException ();

    if (srcy + dstHeight > srcHeight)
        throw new ArgumentOutOfRangeException ();

    T [,] dst = new T [dstWidth, dstHeight];
    for (int dsty = 0; dsty < dstHeight; ++ dsty) {
        for (int dstx = 0; dstx < dstWidth; ++ dstx) {
            dst [dstx, dsty] = src [srcx + dstx, srcy + dsty];
        }
    }
    return dst;
}
----------------------------------------

public T [,] BlockArrayToArray < T > (T [,] [,] src) {
    int blockWidth = src [0, 0].GetLength (0);
    int blockHeight = src [0, 0].GetLength (1);
    int srcWidth = src.GetLength (0);
    int srcHeight = src.GetLength (1);
    int dstWidth = srcWidth * blockWidth;
    int dstHeight = srcHeight * blockHeight;
    T [,] dst = new T [dstWidth, dstHeight];
    for (int srcy = 0; srcy < srcHeight; ++ srcy) {
        for (int srcx = 0; srcx < srcWidth; ++ srcx) {
            for (int blocky = 0; blocky < blockHeight; ++ blocky) {
                for (int blockx = 0; blockx < blockWidth; ++ blockx) {
                    T [,] block = src [srcx, srcy];
                    if (block.GetLength (0) != blockWidth)
                        throw new Exception (string.Format ("Blocks must all have width {0}", blockWidth));

                    if (block.GetLength (1) != blockHeight)
                        throw new Exception (string.Format ("Blocks must all have height {0}", blockHeight));

                    int dstx = srcx * blockWidth + blockx;
                    int dsty = srcy * blockHeight + blocky;
                    dst [dstx, dsty] = src [srcx, srcy] [blockx, blocky];
                }
            }
        }
    }
    return dst;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52191973_52195703_126_140
52191973_52195703_148_172
Title: c# Creating Matrix from sub matrixes 
----------------------------------------

public T [,] [,] ArrayToBlockArray < T > (T [,] src, int blockSize) {
    int srcWidth = src.GetLength (0);
    int srcHeight = src.GetLength (1);
    if (srcWidth % blockSize != 0)
        throw new Exception (string.Format ("Width must be divisible by {0}", blockSize));

    if (srcHeight % blockSize != 0)
        throw new Exception (string.Format ("Height must be divisible by {0}", blockSize));

    int dstWidth = srcWidth / blockSize;
    int dstHeight = srcHeight / blockSize;
    T [,] [,] dst = new T [dstWidth, dstHeight] [,];
    for (int dsty = 0; dsty < dstHeight; ++ dsty) {
        for (int dstx = 0; dstx < dstWidth; ++ dstx) {
            dst [dstx, dsty] = SubArray (src, dstx * blockSize, dsty * blockSize, blockSize, blockSize);
        }
    }
    return dst;
}
----------------------------------------

public T [,] BlockArrayToArray < T > (T [,] [,] src) {
    int blockWidth = src [0, 0].GetLength (0);
    int blockHeight = src [0, 0].GetLength (1);
    int srcWidth = src.GetLength (0);
    int srcHeight = src.GetLength (1);
    int dstWidth = srcWidth * blockWidth;
    int dstHeight = srcHeight * blockHeight;
    T [,] dst = new T [dstWidth, dstHeight];
    for (int srcy = 0; srcy < srcHeight; ++ srcy) {
        for (int srcx = 0; srcx < srcWidth; ++ srcx) {
            for (int blocky = 0; blocky < blockHeight; ++ blocky) {
                for (int blockx = 0; blockx < blockWidth; ++ blockx) {
                    T [,] block = src [srcx, srcy];
                    if (block.GetLength (0) != blockWidth)
                        throw new Exception (string.Format ("Blocks must all have width {0}", blockWidth));

                    if (block.GetLength (1) != blockHeight)
                        throw new Exception (string.Format ("Blocks must all have height {0}", blockHeight));

                    int dstx = srcx * blockWidth + blockx;
                    int dsty = srcy * blockHeight + blocky;
                    dst [dstx, dsty] = src [srcx, srcy] [blockx, blocky];
                }
            }
        }
    }
    return dst;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52213573_52213720_1_19
52213573_52213782_22_31
Title: Converting a json string to a public ulong 
----------------------------------------

public static ulong GetWhitelisted (string key) {
    if (whitelisted.ContainsKey (MinecraftClient.ChatBots.WeeWoo.username)) {
        ulong userWhiteListId;
        if (UInt64.TryParse (key, out userWhiteListId)) {
            return userWhiteListId;
        }
    }
    return 0;
}
----------------------------------------

public static ulong GetWhitelisted (string key) {
    if (whitelisted.ContainsKey (MinecraftClient.ChatBots.WeeWoo.username)) {
        ulong parsedId;
        if (UInt64.TryParse (key, out parsedId))
            return parsedId;

    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5226688_14264246_34_67
5226688_16338022_3_13
Title: Numericupdown mousewheel event increases decimal more than one increment 
----------------------------------------

protected override void OnMouseWheel (MouseEventArgs e) {
    HandledMouseEventArgs args = e as HandledMouseEventArgs;
    if (args != null) {
        if (args.Handled) {
            base.OnMouseWheel (e);
            return;
        }
        args.Handled = true;
    }
    base.OnMouseWheel (e);
    if ((Control.ModifierKeys & (Keys.Alt | Keys.Shift)) == Keys.None && Control.MouseButtons == MouseButtons.None) {
        if (mouseWheelScrollLines != 0) {
            this.wheelDelta += e.Delta;
            float num2 = (float) this.wheelDelta / 120f;
            if (mouseWheelScrollLines == - 1)
                mouseWheelScrollLines = 1;

            int num3 = (int) (mouseWheelScrollLines * num2);
            if (num3 != 0) {
                int num4;
                if (num3 > 0) {
                    for (num4 = num3; num4 > 0; num4 --)
                        this.UpButton ();

                    this.wheelDelta -= (int) (num3 * (120f / (float) mouseWheelScrollLines));
                } else {
                    for (num4 = - num3; num4 > 0; num4 --)
                        this.DownButton ();

                    this.wheelDelta -= (int) (num3 * (120f / (float) mouseWheelScrollLines));
                }
            }
        }
    }
}
----------------------------------------

protected override void OnMouseWheel (MouseEventArgs e) {
    HandledMouseEventArgs hme = e as HandledMouseEventArgs;
    if (hme != null)
        hme.Handled = true;

    if (e.Delta > 0)
        this.Value += this.Increment;
    else if (e.Delta < 0)
        this.Value -= this.Increment;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5226688_14264246_34_67
5226688_27520414_13_26
Title: Numericupdown mousewheel event increases decimal more than one increment 
----------------------------------------

protected override void OnMouseWheel (MouseEventArgs e) {
    HandledMouseEventArgs args = e as HandledMouseEventArgs;
    if (args != null) {
        if (args.Handled) {
            base.OnMouseWheel (e);
            return;
        }
        args.Handled = true;
    }
    base.OnMouseWheel (e);
    if ((Control.ModifierKeys & (Keys.Alt | Keys.Shift)) == Keys.None && Control.MouseButtons == MouseButtons.None) {
        if (mouseWheelScrollLines != 0) {
            this.wheelDelta += e.Delta;
            float num2 = (float) this.wheelDelta / 120f;
            if (mouseWheelScrollLines == - 1)
                mouseWheelScrollLines = 1;

            int num3 = (int) (mouseWheelScrollLines * num2);
            if (num3 != 0) {
                int num4;
                if (num3 > 0) {
                    for (num4 = num3; num4 > 0; num4 --)
                        this.UpButton ();

                    this.wheelDelta -= (int) (num3 * (120f / (float) mouseWheelScrollLines));
                } else {
                    for (num4 = - num3; num4 > 0; num4 --)
                        this.DownButton ();

                    this.wheelDelta -= (int) (num3 * (120f / (float) mouseWheelScrollLines));
                }
            }
        }
    }
}
----------------------------------------

protected override void OnMouseWheel (MouseEventArgs e) {
    decimal newValue = Value;
    if (e.Delta > 0)
        newValue += MouseWheelIncrement;
    else
        newValue -= MouseWheelIncrement;

    if (newValue > Maximum)
        newValue = Maximum;
    else if (newValue < Minimum)
        newValue = Minimum;

    Value = newValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5226688_16338022_3_13
5226688_27520414_13_26
Title: Numericupdown mousewheel event increases decimal more than one increment 
----------------------------------------

protected override void OnMouseWheel (MouseEventArgs e) {
    HandledMouseEventArgs hme = e as HandledMouseEventArgs;
    if (hme != null)
        hme.Handled = true;

    if (e.Delta > 0)
        this.Value += this.Increment;
    else if (e.Delta < 0)
        this.Value -= this.Increment;

}
----------------------------------------

protected override void OnMouseWheel (MouseEventArgs e) {
    decimal newValue = Value;
    if (e.Delta > 0)
        newValue += MouseWheelIncrement;
    else
        newValue -= MouseWheelIncrement;

    if (newValue > Maximum)
        newValue = Maximum;
    else if (newValue < Minimum)
        newValue = Minimum;

    Value = newValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52288496_52288604_1_15
52288496_52288726_1_18
Title: Is it possible to conditionally execute a statement if there is no exception? 
----------------------------------------

public void Test () {
    bool completed = false;
    try {
        statement2;
        completed = true;
    }
    catch (Exception) {
    }
    if (completed)
        statement1;

}
----------------------------------------

public void Test () {
    bool hasException = false;
    statement1;
    try {
        statement2;
    }
    catch (Exception) {
        hasException = true;
    }
    finally {
        if (hasException)
            Test ();

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52306705_52306747_1_30
52306705_52306840_1_20
Title: Most effective and elegant way to check parameters using if conditons 
----------------------------------------

public string checkIfConnditions (string msg, int score, int age) {
    if (msg == "hello" && score > 20 && age < 25) {
        return "All para success";
    }
    if (msg != "hello" && score < 20 && age < 25) {
        return "Unmatiching message & Score not satisfied ";
    }
    if (msg != "hello" && score > 20 && age > 25) {
        return "Unmatiching message & Age not satisfied";
    }
    if (msg != "hello" && score > 20 && age < 25) {
        return "Unmatching message";
    }
    if (msg == "hello" && score < 20 && age < 25) {
        return "Score not satisfied";
    }
    if (msg == "hello" && score > 20 && age > 25) {
        return "Age not satisfied";
    }
    return "All parameter unsatisfied";
}
----------------------------------------

public string checkIfConnditions (string msg, int score, int age) {
    var response = "";
    if (msg == "hello") {
        response = score > 20 ? age > 25 ? "Age not satisfied" : "All para success" : age < 25 ? "Score not satisfied" : "Age & Score not satisfied";
    } else {
        if (score > 20) {
            response = age < 25 ? "Unmatching message" : "Unmatiching message & Age not satisfied";
        } else {
            response = age < 25 ? "Unmatiching message & Score not satisfied " : "All parameter unsatisfied";
        }
    }
    return response;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52306705_52306747_1_30
52306705_52307025_1_27
Title: Most effective and elegant way to check parameters using if conditons 
----------------------------------------

public string checkIfConnditions (string msg, int score, int age) {
    if (msg == "hello" && score > 20 && age < 25) {
        return "All para success";
    }
    if (msg != "hello" && score < 20 && age < 25) {
        return "Unmatiching message & Score not satisfied ";
    }
    if (msg != "hello" && score > 20 && age > 25) {
        return "Unmatiching message & Age not satisfied";
    }
    if (msg != "hello" && score > 20 && age < 25) {
        return "Unmatching message";
    }
    if (msg == "hello" && score < 20 && age < 25) {
        return "Score not satisfied";
    }
    if (msg == "hello" && score > 20 && age > 25) {
        return "Age not satisfied";
    }
    return "All parameter unsatisfied";
}
----------------------------------------

public string checkIfConnditions (string msg, int score, int age) {
    string response = string.Empty;
    if (msg == "hello") {
        if (score > 20 && age < 25)
            response = "All para success";
        else if (score < 20 && age < 25)
            response = "Score not satisfied";
        else if (score > 20 && age > 25)
            response = "Age not satisfied";
        else if (score < 20 && age > 25)
            response = "Age & Score not satisfied";

    } else {
        if (score < 20 && age < 25)
            response = "Unmatiching message & Score not satisfied ";
        else if (score > 20 && age > 25)
            response = "Unmatiching message & Age not satisfied";
        else if (score > 20 && age < 25)
            response = "Unmatching message";
        else if (score < 20 && age > 25)
            response = "All parameter unsatisfied";

    }
    return response;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52306705_52306840_1_20
52306705_52307025_1_27
Title: Most effective and elegant way to check parameters using if conditons 
----------------------------------------

public string checkIfConnditions (string msg, int score, int age) {
    var response = "";
    if (msg == "hello") {
        response = score > 20 ? age > 25 ? "Age not satisfied" : "All para success" : age < 25 ? "Score not satisfied" : "Age & Score not satisfied";
    } else {
        if (score > 20) {
            response = age < 25 ? "Unmatching message" : "Unmatiching message & Age not satisfied";
        } else {
            response = age < 25 ? "Unmatiching message & Score not satisfied " : "All parameter unsatisfied";
        }
    }
    return response;
}
----------------------------------------

public string checkIfConnditions (string msg, int score, int age) {
    string response = string.Empty;
    if (msg == "hello") {
        if (score > 20 && age < 25)
            response = "All para success";
        else if (score < 20 && age < 25)
            response = "Score not satisfied";
        else if (score > 20 && age > 25)
            response = "Age not satisfied";
        else if (score < 20 && age > 25)
            response = "Age & Score not satisfied";

    } else {
        if (score < 20 && age < 25)
            response = "Unmatiching message & Score not satisfied ";
        else if (score > 20 && age > 25)
            response = "Unmatiching message & Age not satisfied";
        else if (score > 20 && age < 25)
            response = "Unmatching message";
        else if (score < 20 && age > 25)
            response = "All parameter unsatisfied";

    }
    return response;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52306778_52306940_1_33
52306778_52307768_1_17
Title: Making formulas in c# to convert dollar amount into denominations 
----------------------------------------

public static Dictionary < string, int > Denominations (int amount) {
    Dictionary < string, int > denominations = new Dictionary < string, int > () {{"twenties", 0}, {"tens", 0}, {"fives", 0}, {"ones", 0}};
    int twenties, tens, fives, ones;
    if (amount >= 20) {
        twenties = amount / 20;
        denominations ["twenties"] = twenties;
        amount -= twenties * 20;
    }
    if (amount >= 10) {
        tens = amount / 10;
        denominations ["tens"] = tens;
        amount -= tens * 10;
    }
    if (amount >= 5) {
        fives = amount / 5;
        denominations ["fives"] = fives;
        amount -= fives * 5;
    }
    if (amount >= 1) {
        ones = amount;
        denominations ["ones"] = ones;
    }
    return denominations;
}
----------------------------------------

public static Dictionary < string, int > Denominations (int amount) {
    var denominations = new Dictionary < string, int > ();
    denominations ["twenties"] = amount / 20;
    amount = amount % 20;
    denominations ["tens"] = amount / 10;
    amount = amount % 10;
    denominations ["fives"] = amount / 5;
    amount = amount % 5;
    denominations ["ones"] = amount;
    return denominations;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52317155_52317203_1_14
52317155_52317208_1_14
Title: How to pass and use a generic object in c#? 
----------------------------------------

public T myCall < T > (string [] args) {
    webAPI myAPI = new webAPI ();
    returnData = myAPI.callApi ("http://localhsot/api", args, "POST");
    XmlSerializer serializer = new XmlSerializer (typeof (T));
    using (TextReader reader = new StringReader (returnData))
    {
        T result = (T) serializer.Deserialize (reader);
        return result;
    }}
----------------------------------------

public T myCall < T > (string [] args) {
    webAPI myAPI = new webAPI ();
    returnData = myAPI.callApi ("http://localhsot/api", args, "POST");
    XmlSerializer serializer = new XmlSerializer (typeof (T));
    using (TextReader reader = new StringReader (returnData))
    {
        T result = (T) serializer.Deserialize (reader);
        return result;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52317497_52319011_14_41
52317497_52320864_1_42
Title: Xml populate datatable 
----------------------------------------

static void Main (string [] args) {
    DataTable dt = new DataTable ();
    dt.Columns.Add ("ITEM NO.", typeof (int));
    dt.Columns.Add ("ITEMCODE", typeof (string));
    dt.Columns.Add ("PARTNUMBER.", typeof (string));
    dt.Columns.Add ("DESCRIPTION", typeof (string));
    dt.Columns.Add ("QTY.", typeof (int));
    XDocument doc = XDocument.Load (FILENAME);
    foreach (XElement bomrow in doc.Descendants ("bomrow")) {
        dt.Rows.Add (new object [] {bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 0).FirstOrDefault () == null ? null : (int ?) bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 0).FirstOrDefault ().Attribute ("value"), bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 1).FirstOrDefault () == null ? null : (string) bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 1).FirstOrDefault ().Attribute ("value"), bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 2).FirstOrDefault () == null ? null : (string) bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 2).FirstOrDefault ().Attribute ("value"), bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 3).FirstOrDefault () == null ? null : (string) bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 3).FirstOrDefault ().Attribute ("value"), bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 4).FirstOrDefault () == null ? null : (int ?) bomrow.Elements ("bomcell").Where (x = > (int) x.Attribute ("col_no") == 4).FirstOrDefault ().Attribute ("value")});
    }
}
----------------------------------------

static void Main (string [] args) {
    DataTable dt = new DataTable ("Items");
    string xmlFile = @"new.xml";
    DataSet ds = new DataSet ();
    ds.ReadXml (xmlFile);
    foreach (DataRow rowCol in ds.Tables ["bomcol"].Rows) {
        dt.Columns.Add (rowCol.ItemArray [2].ToString ());
    }
    DataRow dr = dt.Rows.Add ();
    for (int j = 0; j < ds.Tables ["bomcell"].Rows.Count; j ++) {
        var i = j % 5;
        if (i == 0 && j != 0) {
            dr = dt.Rows.Add ();
        }
        dr [dt.Columns [i]] = ds.Tables ["bomcell"].Rows [j].ItemArray [1];
    }
    Console.WriteLine ("Rows: " + dt.Rows.Count);
    Console.WriteLine ("Cols: " + dt.Columns.Count);
    DataColumnCollection cols = dt.Columns;
    foreach (DataColumn col in cols) {
        Console.Write (cols [0] + "\t");
    }
    foreach (DataRow row in dt.Rows) {
        Console.WriteLine ();
        Console.Write (row.ItemArray [0] + "\t\t" + row.ItemArray [1] + "\t\t" + row.ItemArray [2] + "\t\t" + row.ItemArray [3] + "\t\t" + row.ItemArray [4] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5233502_13410253_1_15
5233502_5233608_1_10
Title: How to return a value from a Form in C#? 
----------------------------------------

public static ResultFromFrmMain Execute () {
    using (var f = new frmMain ())
    {
        f.buttonOK.DialogResult = DialogResult.OK;
        f.buttonCancel.DialogResult = DialogResult.Cancel;
        var result = new ResultFromFrmMain ();
        result.Result = f.ShowDialog ();
        if (result.Result == DialogResult.OK) {
        }
        return result;
    }}
----------------------------------------

public static ResultFromFrmMain Execute () {
    using (var f = new frmMain ())
    {
        var result = new ResultFromFrmMain ();
        result.Result = f.ShowDialog ();
        if (result.Result == DialogResult.OK) {
        }
        return result;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52340860_52341037_14_24
52340860_52350648_3_8
Title: C# LINQ Group By multiple fields with Custom Properties 
----------------------------------------

public override bool Equals (object obj) {
    var other = obj as TranslationDataList;
    if (other == null)
        return false;

    if (other.Count != Count)
        return false;

    for (int i = 0; i < other.Count; i ++)
        if (other [i].Text != this [i].Text)
            return false;

    return true;
}
----------------------------------------

public bool Equals (Key x, Key y) {
    if (x.UnitPoints != y.UnitPoints)
        return false;

    if (! ListsAreEqual (x.Texts, y.Texts))
        return false;

    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52350696_52350943_10_19
52350696_52350943_1_8
Title: "Is a takewhile() checked every iteration using something like yeild or does it just grab a set of elements all at once?" 
----------------------------------------

private static IEnumerable < TSource > TakeWhileIterator < TSource > (IEnumerable < TSource > source, Func < TSource, bool > predicate) {
    foreach (TSource source1 in source) {
        if (predicate (source1))
            yield return source1;
        else
            break;

    }
}
----------------------------------------

public static IEnumerable < TSource > TakeWhile < TSource > (this IEnumerable < TSource > source, Func < TSource, bool > predicate) {
    if (source == null)
        throw Error.ArgumentNull (nameof (source));

    if (predicate == null)
        throw Error.ArgumentNull (nameof (predicate));

    return Enumerable.TakeWhileIterator < TSource > (source, predicate);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52367952_52694672_1_11
52367952_53455313_1_12
Title: Rest API for Blockchain.info 
----------------------------------------

public string BtcToDollar (decimal btc) {
    using (HttpClient client = new HttpClient ())
    {
        client.BaseAddress = new Uri ("https://blockchain.com/");
        client.DefaultRequestHeaders.Accept.Add (new MediaTypeWithQualityHeaderValue ("application/json"));
        string methodename = "frombtc?currency=USD&value=" + HttpUtility.HtmlEncode (btc * 100000000);
        var response = client.GetAsync (methodename);
        return response.Result.Content.ReadAsStringAsync ().Result;
    }}
----------------------------------------

public string BtcToDollar (decimal btc) {
    using (HttpClient client = new HttpClient ())
    {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolTypeExtensions.Tls11 | SecurityProtocolTypeExtensions.Tls12;
        client.BaseAddress = new Uri ("https://blockchain.com/");
        client.DefaultRequestHeaders.Accept.Add (new MediaTypeWithQualityHeaderValue ("application/json"));
        string methodename = "frombtc?currency=USD&value=" + HttpUtility.HtmlEncode (btc * 100000000);
        var response = client.GetAsync (methodename);
        return response.Result.Content.ReadAsStringAsync ().Result;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52380964_52381664_1_16
52380964_52381671_1_18
Title: How to return an empty list in View in ASP.NET 
----------------------------------------

public ActionResult ViewUser (string roleName) {
    var UsersContext = new ApplicationDbContext ();
    var roleManager = new RoleManager < IdentityRole > (new RoleStore < IdentityRole > (new ApplicationDbContext ()));
    if (roleManager.RoleExists (roleName)) {
        var role = roleManager.FindByName (roleName).Users.First ();
        var usersInRole = UsersContext.Users.Where (u = > u.Roles.Select (r = > r.RoleId).Contains (role.RoleId)).ToList ();
        return View (usersInRole);
    } else {
        return View (new List < Users > ());
    }
}
----------------------------------------

public ActionResult ViewUser (string roleName) {
    var UsersContext = new ApplicationDbContext ();
    var usersInRole = new List < User > ();
    var roleManager = new RoleManager < IdentityRole > (new RoleStore < IdentityRole > (new ApplicationDbContext ()));
    if (roleManager.RoleExists (roleName)) {
        var role = roleManager.FindByName (roleName).Users.FirstOrDefault ();
        if (role != null) {
            usersInRole = UsersContext.Users.Where (u = > u.Roles.Select (r = > r.RoleId).Contains (role.RoleId)).ToList ();
        }
    }
    return View (usersInRole);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52392432_52392900_16_31
52392432_52393563_55_79
Title: How to Sort a List<T> by a property in the object with optional attribute order 
----------------------------------------

static void Main (string [] args) {
    List < test > listOrder = new List < test > ();
    listOrder.Add (new test () {Id = 1, Name = "john", Description = "test", Owner = "test", DateAdded = DateTime.Now});
    listOrder.Add (new test () {Id = 1, Name = "max", Description = "test1", Owner = "test1", DateAdded = DateTime.Now});
    listOrder.Add (new test () {Id = 1, Name = "phil", Description = "test2", Owner = "test2", DateAdded = DateTime.Now});
    List < test > sortbyName = listOrder.OrderBy (item = > item.Name).ToList ();
    List < test > sortbyDescription = listOrder.OrderBy (item = > item.Description).ToList ();
    List < test > sortbyOwner = listOrder.OrderBy (item = > item.Owner).ToList ();
}
----------------------------------------

static void Main () {
    List < Bar > listToOrder = new List < Bar > ();
    listToOrder.Add (new Bar () {Id = 5, Keywords = "Hello", Organization = "Arlando"});
    listToOrder.Add (new Bar () {Id = 12, Keywords = "Table", Organization = "Fuelta", Name = "Deep"});
    listToOrder.Add (new Bar () {Id = 12, Keywords = "Table", Organization = "Fuelta", Name = "Inherit"});
    listToOrder.Add (new Bar () {Id = 1, Keywords = "Muppet", Organization = "Coke"});
    listToOrder.Add (new Bar () {Id = 6, Keywords = "Grumpy", Organization = "Snow"});
    listToOrder.Add (new Bar () {Id = 9, Keywords = "Johny", Organization = "White"});
    listToOrder.Add (new Bar () {Id = 12, Keywords = "Table", Organization = "Bruno"});
    listToOrder.Add (new Bar () {Id = 12, Keywords = "Table", Organization = "Fuelta"});
    listToOrder.Add (new Bar () {Id = 7, Keywords = "Set", Organization = "Voltra"});
    listToOrder.Add (new Bar () {Id = 45, Keywords = "Brr", Organization = "Elvis"});
    listToOrder.Add (new Bar () {Id = 15, Keywords = "Tsss", Organization = "Marion"});
    OrderComparer < Bar > myOrder = new OrderComparer < Bar > ();
    listToOrder.Sort (myOrder);
    foreach (Bar oneBar in listToOrder) {
        Console.WriteLine (oneBar.Id + " " + oneBar.Keywords + " " + oneBar.Organization);
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52429059_52438513_1_26
52429059_52438513_28_43
Title: Asp.Net Identity default name for DpapiDataProtectionProvider for Owin 
----------------------------------------

[HttpGet] [AllowAnonymous] [Route ("testReset")] public IHttpActionResult TestResetAdminDomain () {
    var db = new ApplicationDbContext ();
    var manager = new ApplicationUserManager (new UserStore < ApplicationUser > (db));
    var provider = new DpapiDataProtectionProvider ("ASP.NET Identity");
    manager.UserTokenProvider = new DataProtectorTokenProvider < ApplicationUser > (provider.Create ("ASP.NET Identity"));
    var email = "test@test.com";
    var user = new ApplicationUser () {UserName = email, Email = email};
    var identityUser = manager.FindByEmail (email);
    if (identityUser == null) {
        manager.Create (user);
        identityUser = manager.FindByEmail (email);
    }
    var token = manager.GeneratePasswordResetToken (identityUser.Id);
    return Ok (HttpUtility.UrlEncode (token));
}
----------------------------------------

[HttpGet] [AllowAnonymous] [Route ("testReset")] public IHttpActionResult TestResetClientDomain (string token) {
    var db = new ApplicationDbContext ();
    var manager = new ApplicationUserManager (new UserStore < ApplicationUser > (db));
    var provider = new DpapiDataProtectionProvider ("ASP.NET Identity");
    manager.UserTokenProvider = new DataProtectorTokenProvider < ApplicationUser > (provider.Create ("ASP.NET Identity"));
    var email = "test@test.com";
    var identityUser = manager.FindByEmail (email);
    var valid = Task.Run (() = > manager.UserTokenProvider.ValidateAsync ("ResetPassword", token, manager, identityUser)).Result;
    var result = manager.ResetPassword (identityUser.Id, token, "TestingTest1!");
    return Ok (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5243237_23390837_79_94
5243237_5243263_48_63
Title: Code for password generator 
----------------------------------------

private static char GetRandomCharacter () {
    var upperBound = PwdCharArray.GetUpperBound (0);
    if (ExcludeSymbols) {
        upperBound = UBoundDigit;
    }
    int randomCharPosition = GetCryptographicRandomNumber (PwdCharArray.GetLowerBound (0), upperBound);
    char randomChar = PwdCharArray [randomCharPosition];
    return randomChar;
}
----------------------------------------

protected char GetRandomCharacter () {
    int upperBound = pwdCharArray.GetUpperBound (0);
    if (true == this.ExcludeSymbols) {
        upperBound = PasswordGenerator.UBoundDigit;
    }
    int randomCharPosition = GetCryptographicRandomNumber (pwdCharArray.GetLowerBound (0), upperBound);
    char randomChar = pwdCharArray [randomCharPosition];
    return randomChar;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5243237_23390837_96_139
5243237_5243263_65_126
Title: Code for password generator 
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

public string Generate () {
    int pwdLength = GetCryptographicRandomNumber (this.Minimum, this.Maximum);
    StringBuilder pwdBuffer = new StringBuilder ();
    pwdBuffer.Capacity = this.Maximum;
    char lastCharacter, nextCharacter;
    lastCharacter = nextCharacter = '\n';
    for (int i = 0; i < pwdLength; i ++) {
        nextCharacter = GetRandomCharacter ();
        if (false == this.ConsecutiveCharacters) {
            while (lastCharacter == nextCharacter) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        if (false == this.RepeatCharacters) {
            string temp = pwdBuffer.ToString ();
            int duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != this.Exclusions)) {
            while (- 1 != this.Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    if (null != pwdBuffer) {
        return pwdBuffer.ToString ();
    } else {
        return String.Empty;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52438421_52438875_1_48
52438421_52438950_1_56
Title: How to merge two stored procedures into one method and return one result? 
----------------------------------------

public IEnumerable < ApplicationUser > GetAllUsers () {
    try {
        List < ApplicationUser > userList = new List < ApplicationUser > ();
        using (SqlConnection con = new SqlConnection (connectionString))
        {
            SqlCommand cmd = new SqlCommand (@"exec sp_UsersReadAll
                                              exec sp_GetUserRolls", con);
            cmd.CommandType = System.Data.CommandType.Text;
            con.Open ();
            SqlDataReader reader = cmd.ExecuteReader ();
            while (reader.Read ()) {
                ApplicationUser apUser = new ApplicationUser ();
                apUser.Id = Convert.ToString (reader ["Id"]);
                apUser.UserName = reader ["Username"].ToString ();
                apUser.FirstName = reader ["FirstName"].ToString ();
                apUser.LastName = reader ["LastName"].ToString ();
                apUser.Email = reader ["Email"].ToString ();
                userList.Add (apUser);
            }
            reader.NextResult ();
            while (reader.Read ()) {
                ApplicationUserRoll apUserRoll = new ApplicationUserRoll ();
                apUserRoll.Id = Convert.ToString (reader ["Id"]);
                apUserRoll.UserId = reader ["UserId"].ToString ();
                userList.Single (u = > u.Id == apUserRoll.UserId).Rolls.Add (apUserRoll);
            }
            con.Close ();
        } return userList;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

public IEnumerable < ApplicationUser > GetAllUsers () {
    try {
        ApplicationUser apUser;
        List < ApplicationUser > userList = new List < ApplicationUser > ();
        using (SqlConnection con = new SqlConnection (connectionString))
        {
            SqlCommand cmd = new SqlCommand ("sp_UsersReadAll", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            SqlCommand cmd2 = new SqlCommand ("sp_GetUserRolls", con);
            cmd2.CommandType = System.Data.CommandType.StoredProcedure;
            con.Open ();
            SqlDataReader reader = cmd.ExecuteReader ();
            while (reader.Read ()) {
                apUser = new ApplicationUser ();
                apUser.Id = Convert.ToString (reader ["Id"]);
                apUser.UserName = reader ["Username"].ToString ();
                apUser.FirstName = reader ["FirstName"].ToString ();
                apUser.LastName = reader ["LastName"].ToString ();
                apUser.Email = reader ["Email"].ToString ();
                userList.Add (apUser);
            }
            reader = cmd2.ExecuteReader ();
            while (reader.Read ()) {
                apUser = new ApplicationUser ();
                apUser.Id = Convert.ToString (reader ["Id"]);
                if (! userList.Exists (o = > o.Id == apUser.Id)) {
                    apUser.UserName = reader ["Username"].ToString ();
                    apUser.FirstName = reader ["FirstName"].ToString ();
                    apUser.LastName = reader ["LastName"].ToString ();
                    apUser.Email = reader ["Email"].ToString ();
                    userList.Add (apUser);
                }
            }
            con.Close ();
        } return userList;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52440235_52440697_1_11
52440235_52440703_1_14
Title: Custom column display text gets applied to cells it shouldn't 
----------------------------------------

private void gridView1_CustomColumnDisplayText (object sender, CustomColumnDisplayTextEventArgs e) {
    GridView view = sender as GridView;
    if (e.Column == colVehicle_FahrzeugartID && e.ListSourceRowIndex >= 0) {
        object cellValue = view.GetListSourceRowCellValue (e.ListSourceRowIndex, "Vehicle_FahrzeugartID");
        this.clsFahrzeugart.ReadFromDb ((int) cellValue);
        if (this.clsFahrzeugart.Systemstatus == 11)
            e.DisplayText = "Deleted...";

    }
}
----------------------------------------

private void gridView1_CustomColumnDisplayText (object sender, CustomColumnDisplayTextEventArgs e) {
    if (e.Column == colVehicle_FahrzeugartID && e.ListSourceRowIndex >= 0) {
        int rowHandle = gridViewList.GetRowHandle (e.ListSourceRowIndex);
        object cellValue = gridViewList.GetRowCellValue (rowHandle, "Vehicle_FahrzeugartID");
        this.clsFahrzeugart.ReadFromDb ((int) cellValue);
        if (this.clsFahrzeugart.Systemstatus == 11) {
            e.DisplayText = "Deleted...";
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52460974_52461593_15_33
52460974_52476087_1_30
Title: How can I evaluate an IEnumerable<T> while giving special treatment to its first and/or last element in C#? 
----------------------------------------

protected bool ProcessInternal < T > (IEnumerable < T > source, Action < T > first, Action < T > middle, Action < T > last) {
    T current = default (T);
    var enumerator = source.GetEnumerator ();
    bool ok = enumerator.MoveNext ();
    if (! ok)
        return false;

    var firstElement = enumerator.Current;
    ok = enumerator.MoveNext ();
    if (! ok)
        return false;

    first (firstElement);
    while (ok) {
        current = enumerator.Current;
        ok = enumerator.MoveNext ();
        if (ok)
            middle (current);

    }
    last (current);
    return true;
}
----------------------------------------

public static IEnumerable < TResult > Transform < TSource, Tresult > (this IEnumerable < TSource > source, Func < TSource, TResult > transformFuncNonLastElement, Func < TSource, TResult > transformFuncLansElement) {
    IEnumerator < TSource > enumerator = source.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        TSource current = enumerator.Current;
        while (enumerator.MoveNext ()) {
            TResult transformedNonLastValue = transformFuncNonLastElement (current);
            yield return transformedNonLastValue;
            current = enumerator.Current;
        }
        TResult transformedLastValue = transformFuncLastElement (current);
        yield return transformedLastValue;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5247798_23382239_1_13
5247798_52856783_1_16
Title: Get list of local computer usernames in Windows 
----------------------------------------

public static List < string > GetComputerUsers () {
    List < string > users = new List < string > ();
    var path = string.Format ("WinNT://{0},computer", Environment.MachineName);
    using (var computerEntry = new DirectoryEntry (path))
    foreach (DirectoryEntry childEntry in computerEntry.Children)
        if (childEntry.SchemaClassName == "User")
            users.Add (childEntry.Name);

    return users;
}
----------------------------------------

public static List < string > GetComputerUsers () {
    List < string > users = new List < string > ();
    var path = string.Format ("WinNT://{0},computer", Environment.MachineName);
    using (var computerEntry = new DirectoryEntry (path))
    {
        foreach (DirectoryEntry childEntry in computerEntry.Children) {
            if (childEntry.SchemaClassName == "User") {
                users.Add (childEntry.Name);
            }
        }
    } return users;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52577648_52577816_14_28
52577648_52578486_2_15
Title: Better way to count all existing citizens? 
----------------------------------------

void Update () {
    if (human != null) {
        Vector3 targetPosition = human.Target.GameObject.transform.position;
        if (transform.position.Equals (targetPosition)) {
            if (! human.HasAHouse) {
                HouseHuman ++;
                human.HasAHouse = true;
            }
        }
    }
}
----------------------------------------

void Update () {
    if (human != null) {
        Vector3 targetPosition = human.Target.GameObject.transform.position;
        if (transform.position.Equals (targetPosition)) {
            if (! human.HasAHouse)
                ((House) human.Target).AddHuman (human);

        } else {
            float step = speed * Time.deltaTime;
            transform.position = Vector3.MoveTowards (transform.position, targetPosition, step);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5262693_5265378_21_47
5262693_5265378_49_64
Title: C# Using Activator.CreateInstance 
----------------------------------------

private ObjectActivator CreateActivator (ConstructorInfo ctor) {
    Type type = ctor.DeclaringType;
    ParameterInfo [] paramsInfo = ctor.GetParameters ();
    ParameterExpression param = Expression.Parameter (typeof (object []), "args");
    Expression [] argsExp = new Expression [paramsInfo.Length];
    for (int i = 0; i < paramsInfo.Length; i ++) {
        Expression index = Expression.Constant (i);
        Type paramType = paramsInfo [i].ParameterType;
        Expression paramAccessorExp = Expression.ArrayIndex (param, index);
        Expression paramCastExp = Expression.Convert (paramAccessorExp, paramType);
        argsExp [i] = paramCastExp;
    }
    NewExpression newExp = Expression.New (ctor, argsExp);
    LambdaExpression lambda = Expression.Lambda (typeof (ObjectActivator), newExp, param);
    return (ObjectActivator) lambda.Compile ();
}
----------------------------------------

private ObjectActivator CreateActivator (string className) {
    Type type = Type.GetType (className);
    if (type == null)
        throw new ArgumentException ("Incorrect class name", "className");

    ConstructorInfo ctor = type.GetConstructors ().SingleOrDefault (w = > w.GetParameters ().Length == 1 && w.GetParameters () [0].ParameterType == typeof (object));
    if (ctor == null)
        throw new Exception ("There is no any constructor with 1 object parameter.");

    return CreateActivator (ctor);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5269000_5269160_1_17
5269000_5269439_1_21
Title: Finding Local Maxima Over a Dynamic Range 
----------------------------------------

static IList < double > FindPeaks (IList < double > values, int rangeOfPeaks) {
    List < double > peaks = new List < double > ();
    int checksOnEachSide = rangeOfPeaks / 2;
    for (int i = 0; i < values.Count; i ++) {
        double current = values [i];
        IEnumerable < double > range = values;
        if (i > checksOnEachSide)
            range = range.Skip (i - checksOnEachSide);

        range = range.Take (rangeOfPeaks);
        if (current == range.Max ())
            peaks.Add (current);

    }
    return peaks;
}
----------------------------------------

public static IEnumerable < double > FindPeaks (IEnumerable < double > values, int rangeOfPeaks) {
    double peak = 0;
    int decay = 0;
    foreach (var value in values) {
        if (value > peak || decay > rangeOfPeaks / 2) {
            peak = value;
            decay = 0;
        } else {
            decay ++;
        }
        if (decay == rangeOfPeaks / 2)
            yield return peak;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5269000_5269160_1_17
5269000_9136236_1_26
Title: Finding Local Maxima Over a Dynamic Range 
----------------------------------------

static IList < double > FindPeaks (IList < double > values, int rangeOfPeaks) {
    List < double > peaks = new List < double > ();
    int checksOnEachSide = rangeOfPeaks / 2;
    for (int i = 0; i < values.Count; i ++) {
        double current = values [i];
        IEnumerable < double > range = values;
        if (i > checksOnEachSide)
            range = range.Skip (i - checksOnEachSide);

        range = range.Take (rangeOfPeaks);
        if (current == range.Max ())
            peaks.Add (current);

    }
    return peaks;
}
----------------------------------------

public static IList < int > FindPeaks (IList < double > values, int rangeOfPeaks) {
    List < int > peaks = new List < int > ();
    double current;
    IEnumerable < double > range;
    int checksOnEachSide = rangeOfPeaks / 2;
    for (int i = 0; i < values.Count; i ++) {
        current = values [i];
        range = values;
        if (i > checksOnEachSide) {
            range = range.Skip (i - checksOnEachSide);
        }
        range = range.Take (rangeOfPeaks);
        if ((range.Count () > 0) && (current == range.Max ())) {
            peaks.Add (i);
        }
    }
    return peaks;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5269000_5269439_1_21
5269000_9136236_1_26
Title: Finding Local Maxima Over a Dynamic Range 
----------------------------------------

public static IEnumerable < double > FindPeaks (IEnumerable < double > values, int rangeOfPeaks) {
    double peak = 0;
    int decay = 0;
    foreach (var value in values) {
        if (value > peak || decay > rangeOfPeaks / 2) {
            peak = value;
            decay = 0;
        } else {
            decay ++;
        }
        if (decay == rangeOfPeaks / 2)
            yield return peak;

    }
}
----------------------------------------

public static IList < int > FindPeaks (IList < double > values, int rangeOfPeaks) {
    List < int > peaks = new List < int > ();
    double current;
    IEnumerable < double > range;
    int checksOnEachSide = rangeOfPeaks / 2;
    for (int i = 0; i < values.Count; i ++) {
        current = values [i];
        range = values;
        if (i > checksOnEachSide) {
            range = range.Skip (i - checksOnEachSide);
        }
        range = range.Take (rangeOfPeaks);
        if ((range.Count () > 0) && (current == range.Max ())) {
            peaks.Add (i);
        }
    }
    return peaks;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52706459_52707142_1_26
52706459_52708528_8_34
Title: How to make couple of different lists using c#? 
----------------------------------------

public static List < List < string > > ParseSentences (string text) {
    var sentencesList = new List < List < string > > ();
    var splittedText = text.Split ('.', '!', '?', ';', ':', '(', ')');
    List < string > [] mas = new List < string > [splittedText.Length];
    for (int i = 0; i < splittedText.Length; i ++) {
        mas [i] = new List < string > ();
    }
    for (int j = 0; j < splittedText.Length; j ++) {
        mas [j] = GetWordsOutOfTheSentence (splittedText);
        mas [j] = GetWordsOutOfTheSentence (splittedText [j]);
        bool isEmpty = ! (mas [j]).Any ();
        if (! isEmpty)
            sentencesList.Add (mas [j]);

    }
    return sentencesList;
}
----------------------------------------

public static List < List < string > > ParseSentences (string text) {
    var sentencesList = new List < List < string > > ();
    var splittedText = text.Split ('.', '!', '?', ';', ':', '(', ')');
    foreach (var sentence in splittedText) {
        var wordsArray = sentence.Split ('^', '#', '$', '-', '+', '1', '=', ' ', '\t', '\n', '\r', ',');
        var additionalMainList = new List < string > ();
        var wordList = new List < string > ();
        foreach (var word in wordsArray) {
            if (word != string.Empty) {
                var fineWord = word;
                wordList.Add (fineWord.ToLower ());
                additionalMainList.Add (fineWord.ToLower ());
            }
        }
        bool isEmpty = ! (wordList).Any ();
        if (! isEmpty)
            sentencesList.Add (additionalMainList);

        wordList.Clear ();
    }
    return sentencesList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52732536_52733127_1_51
52732536_52791310_1_37
Title: Error while insert/update records in asp.net core 
----------------------------------------

public bool SaveDataCapDetails (List < TDataCapDetails > lstDataCapDetails) {
    bool IsSuccess = false;
    using (var dbContextTransaction = _objContext.Database.BeginTransaction ())
    {
        try {
            int ? id = _objContext.TDataCapDetails.Max (x = > (int ?) x.Id);
            id = id == null ? 0 : id;
            var entitiesToAdd = lstDataCapDetails.Where (x = > x.Id == 0);
            foreach (var entity in entitiesToAdd) {
                entity.Id = id ++;
                _objContext.Entry (entity).State = EntityState.Added;
            }
            var entitiesToUpdate = lstDataCapDetails.Where (x = > x.Id > 0);
            foreach (var entity in entitiesToUpdate) {
                var local = _objContext.Set < TDataCapDetails > ().Local.FirstOrDefault (x = > x.Id.Equals (entity.Id));
                if (local != null)
                    _objContext.Entry < TDataCapDetails > (local).State = EntityState.Detached;

                _objContext.Attach (entity).State = EntityState.Modified;
            }
            IsSuccess = _objContext.SaveChanges () > 0;
            dbContextTransaction.Commit ();
        }
        catch (Exception ex) {
            dbContextTransaction.Rollback ();
            throw ex;
        }
    } return IsSuccess;
}
----------------------------------------

public bool SaveDataCapDetails (List < TDataCapDetails > lstDataCapDetails) {
    bool IsSuccess = false;
    using (var dbContextTransaction = _objContext.Database.BeginTransaction ())
    {
        try {
            List < TDataCapDetails > lstDataCapDetailsRecords = null;
            if (lstDataCapDetails.Where (x = > x.Id == 0).Count () > 0) {
                lstDataCapDetailsRecords = new List < TDataCapDetails > ();
                _objContext.AddRange (lstDataCapDetailsRecords);
                _objContext.SaveChanges ();
            }
            if (lstDataCapDetails.Where (x = > x.Id > 0).Count () > 0) {
                lstDataCapDetailsRecords = new List < TDataCapDetails > ();
                lstDataCapDetailsRecords = lstDataCapDetails.Where (x = > x.Id > 0).ToList ();
                _objContext.UpdateRange (lstDataCapDetailsRecords);
                _objContext.SaveChanges ();
            }
            dbContextTransaction.Commit ();
        }
        catch (Exception ex) {
            dbContextTransaction.Rollback ();
            throw ex;
        }
    } return IsSuccess;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52757622_52758570_1_16
52757622_52759663_1_15
Title: Entity Framework - LINQ - Dynamic Column Names 
----------------------------------------

public List < string > GetProductCategories (int catno) {
    string catName = string.Format ("Category{0}", catno);
    using (var ctx = new myEntities ())
    {
        var result = ctx.Categories.Select (x = > {
            var prop = x.GetType ().GetProperty (catName);
            if (prop == null) {
                return double.NaN;
            }
            return double.Parse (prop.GetValue (x).ToString ());
        }).ToList ();
        return result.Where (x = > ! double.IsNaN (x)).ToList ();
    }}
----------------------------------------

public List < string > GetProductCategories (int catno) {
    using (var ctx = new myEntities ())
    {
        switch (catno) {
            case 1 :
                return ctx.Categories.Select (c = > c.Category1).ToList ();
            case 2 :
                return ctx.Categories.Select (c = > c.Category2).ToList ();
            default :
                throw new ArgumentException ("Category number not supported!");
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
527602_10814383_15_34
527602_10814383_3_13
Title: Automatically INotifyPropertyChanged 
----------------------------------------

public static PropertyChangedEventHandler SubscribeToPropertyChanged < T, TProperty > (this T obj, Expression < Func < T, TProperty > > property, Action < T > handler) where T : INotifyPropertyChanged {
    if (handler == null)
        return null;

    var memberExpr = (MemberExpression) property.Body;
    var propertyName = memberExpr.Member.Name;
    PropertyChangedEventHandler subscription = (sender, eventArgs) = > {
        if (propertyName == eventArgs.PropertyName)
            handler (obj);

    };
    obj.PropertyChanged += subscription;
    return subscription;
}
----------------------------------------

public static void Raise < TProperty > (this PropertyChangedEventHandler handler, Expression < Func < TProperty > > property) {
    if (handler == null)
        return;

    var memberExpr = (MemberExpression) property.Body;
    var propertyName = memberExpr.Member.Name;
    var sender = ((ConstantExpression) memberExpr.Expression).Value;
    handler.Invoke (sender, new PropertyChangedEventArgs (propertyName));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
527602_10814383_15_34
527602_527840_69_94
Title: Automatically INotifyPropertyChanged 
----------------------------------------

public static PropertyChangedEventHandler SubscribeToPropertyChanged < T, TProperty > (this T obj, Expression < Func < T, TProperty > > property, Action < T > handler) where T : INotifyPropertyChanged {
    if (handler == null)
        return null;

    var memberExpr = (MemberExpression) property.Body;
    var propertyName = memberExpr.Member.Name;
    PropertyChangedEventHandler subscription = (sender, eventArgs) = > {
        if (propertyName == eventArgs.PropertyName)
            handler (obj);

    };
    obj.PropertyChanged += subscription;
    return subscription;
}
----------------------------------------

public static void SubscribeToChange < T > (this T ObjectThatNotifies, Expression < Func < object > > Property, PropertyChangedHandler < T > Handler) where T : INotifyPropertyChanged {
    ObjectThatNotifies.PropertyChanged += (s, e) = > {
        var lambda = Property as LambdaExpression;
        MemberExpression memberExpression;
        if (lambda.Body is UnaryExpression) {
            var unaryExpression = lambda.Body as UnaryExpression;
            memberExpression = unaryExpression.Operand as MemberExpression;
        } else {
            memberExpression = lambda.Body as MemberExpression;
        }
        var propertyInfo = memberExpression.Member as PropertyInfo;
        if (e.PropertyName.Equals (propertyInfo.Name)) {
            Handler (ObjectThatNotifies);
        }
    };
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
527602_10814383_3_13
527602_527840_69_94
Title: Automatically INotifyPropertyChanged 
----------------------------------------

public static void Raise < TProperty > (this PropertyChangedEventHandler handler, Expression < Func < TProperty > > property) {
    if (handler == null)
        return;

    var memberExpr = (MemberExpression) property.Body;
    var propertyName = memberExpr.Member.Name;
    var sender = ((ConstantExpression) memberExpr.Expression).Value;
    handler.Invoke (sender, new PropertyChangedEventArgs (propertyName));
}
----------------------------------------

public static void SubscribeToChange < T > (this T ObjectThatNotifies, Expression < Func < object > > Property, PropertyChangedHandler < T > Handler) where T : INotifyPropertyChanged {
    ObjectThatNotifies.PropertyChanged += (s, e) = > {
        var lambda = Property as LambdaExpression;
        MemberExpression memberExpression;
        if (lambda.Body is UnaryExpression) {
            var unaryExpression = lambda.Body as UnaryExpression;
            memberExpression = unaryExpression.Operand as MemberExpression;
        } else {
            memberExpression = lambda.Body as MemberExpression;
        }
        var propertyInfo = memberExpression.Member as PropertyInfo;
        if (e.PropertyName.Equals (propertyInfo.Name)) {
            Handler (ObjectThatNotifies);
        }
    };
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5277675_5277754_1_17
5277675_5277774_1_14
Title: c# MDI parent form + login form error 
----------------------------------------

static void Main () {
    Application.EnableVisualStyles ();
    Application.SetCompatibleTextRenderingDefault (false);
    using (frmLogin frmLogin_ = new frmLogin ())
    {
        frmLogin_.ShowDialog ();
        if (frmLogin_.DialogResult == DialogResult.Cancel) {
            return;
        }
    } Application.Run (new frmMainMDI ());
}
----------------------------------------

static void Main () {
    Application.EnableVisualStyles ();
    Application.SetCompatibleTextRenderingDefault (false);
    LoginForm loginForm = new LoginForm ();
    if (loginForm.ShowDialog () != DialogResult.Cancel) {
        MainMdiForm mainMdiForm = new MainMdiForm ();
        mainMdiForm.intCurrentLoggedInStaffID = loginForm.intStaffID;
        loginForm.Dispose ();
        loginForm = null;
        Application.Run (mainMdiForm);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52793926_52794095_5_21
52793926_52794116_12_24
Title: Multidimensional Array from a txt file 
----------------------------------------

static void Main (string [] args) {
    string input = @"Name1:Id1:Class1:Status1
Name2:Id2:Class2:Status2";
    var jagged = input.Split (new string [] {Environment.NewLine}, StringSplitOptions.None).Select (s = > s.Split (':').ToArray ()).ToArray ();
    var multi = new string [jagged.Length, jagged [0].Length];
    for (int i = 0; i < jagged.Length; ++ i) {
        for (int j = 0; j < jagged [0].Length; ++ j) {
            multi [i, j] = jagged [i] [j];
            Console.WriteLine ("[{0},{1}] = {2}", i, j, multi [i, j]);
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    List < List < string > > data = new List < List < string > > ();
    StreamReader reader = new StreamReader (FILENAME);
    string line = "";
    while ((line = reader.ReadLine ()) != null) {
        List < string > lineArray = line.Split (new char [] {':'}).ToList ();
        data.Add (lineArray);
    }
    reader.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52806904_52807187_28_42
52806904_52812887_12_29
Title: Dragging a borderless form to a negative location 
----------------------------------------

protected override void OnMove (EventArgs e) {
    if (Location.Y < 0) {
        _isNegative = true;
        _flag = true;
        _negative = Location;
    } else {
        if (_flag) {
            _flag = false;
            return;
        }
        _isNegative = false;
    }
}
----------------------------------------

protected override void OnMove (EventArgs e) {
    if (this.Right == oldRight || this.Bottom == oldBottom)
        return;

    if (Location.Y < 0) {
        _isNegative = true;
        _negative = Location;
    } else {
        _isNegative = false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52807029_52807158_1_16
52807029_52807169_1_18
Title: C# Array of instance of Class 
----------------------------------------

static IEnumerable < Employee > GetEmployeeData (int size) {
    for (int i = 0; i < size; i ++) {
        Employee e = new Employee ();
        Console.Write ("Code: ");
        e.code = int.Parse (Console.ReadLine ());
        Console.Write ("Salary: ");
        e.salary = float.Parse (Console.ReadLine ());
        Console.Write ("Bonus: ");
        e.bonus = float.Parse (Console.ReadLine ());
        Console.Write ("Deduction: ");
        e.deduction = float.Parse (Console.ReadLine ());
        yield return e;
    }
}
----------------------------------------

static Employee [] GetEmployeeData (int size) {
    Employee [] E = new Employee [size];
    for (int i = 0; i < size; i ++) {
        E [i] = new Employee ();
        Console.Write ("Code: ");
        E [i].code = int.Parse (Console.ReadLine ());
        Console.Write ("Salary: ");
        E [i].salary = float.Parse (Console.ReadLine ());
        Console.Write ("Bonus: ");
        E [i].bonus = float.Parse (Console.ReadLine ());
        Console.Write ("Deduction: ");
        E [i].deduction = float.Parse (Console.ReadLine ());
    }
    return E;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5280920_5281126_27_47
5280920_5281298_42_71
Title: Is there a good C# design pattern for parsing strings that when split have different amounts of data? 
----------------------------------------

public static object [] ParseString (string input) {
    string [] items = input.Split (',');
    if (items.Length < 2)
        return null;

    object [] output = new object [items.Length - 2];
    string identifier = items [1];
    string template;
    if (! templates.TryGetValue (identifier, out template))
        return null;

    if (template.Length != output.Length)
        return null;

    for (int i = 0; i < template.Length; i ++)
        if (! ParseItem (items [i + 2], template [i], out output [i]))
            return null;

    return output;
}
----------------------------------------

public static object ParseString (string input) {
    string [] items = input.Split (',');
    if (items.Length < 2)
        return null;

    string identifier = items [1];
    Type type = Type.GetType ("Parser." + identifier, false);
    if (type == null)
        return null;

    object output = Activator.CreateInstance (type);
    foreach (var field in type.GetFields ())
        foreach (CsvPositionAttribute attr in field.GetCustomAttributes (typeof (CsvPositionAttribute), false))
            if (attr.Position + 2 >= items.Length)
                return null;
            else
                try {
                    field.SetValue (output, Convert.ChangeType (items [attr.Position + 2], field.FieldType));
                }
                catch {
                    return null;
                }

    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52885959_52886694_1_17
52885959_52886879_1_15
Title: i am trying to convert this function in c# plase help me 
----------------------------------------

public string Encrypt (ref string passStr) {
    int pos, strLen, i, iValue;
    string returnValue;
    iValue = 100;
    strLen = passStr.Length;
    returnValue = "";
    for (i = 1; i <= strLen; i ++) {
        pos = ((int) (Convert.ToChar (passStr.Substring (i, 1))) + (iValue + i));
        returnValue = returnValue + passStr [pos];
    }
    return returnValue;
}
----------------------------------------

public string Encrypt (ref string PassStr) {
    short Pos, StrLen, i, iValue;
    string RetValue;
    iValue = 100;
    StrLen = Strings.Len (PassStr);
    RetValue = "";
    for (i = 1; i <= StrLen; i ++) {
        Pos = Strings.Asc (Strings.Mid (PassStr, i, 1)) + (iValue + i);
        RetValue = RetValue + Strings.Chr (Pos);
    }
    Encrypt = RetValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52929659_52970567_32_68
52929659_52970567_69_88
Title: Include more rows in Pivot 
----------------------------------------

public static DataTable ToPivotTable < T, TColumn, TRow, TData > (this IEnumerable < T > source, Func < T, TColumn > columnSelector, Expression < Func < T, TRow > > rowSelector, Func < IEnumerable < T >, TData > dataSelector) {
    DataTable table = new DataTable ();
    var rowNames = GetMemberNames (rowSelector);
    rowNames.ToList ().ForEach (x = > table.Columns.Add (new DataColumn (x)));
    var columns = source.Select (columnSelector).Distinct ();
    foreach (var column in columns)
        table.Columns.Add (new DataColumn (column.ToString ()));

    var rows = source.GroupBy (rowSelector.Compile ()).Select (rowGroup = > new {Key = rowGroup.Key, Values = columns.GroupJoin (rowGroup, c = > c, r = > columnSelector (r), (c, columnGroup) = > dataSelector (columnGroup))});
    foreach (var row in rows) {
        var dataRow = table.NewRow ();
        var items = row.Values.Cast < object > ().ToList ();
        items.Insert (0, row.Key);
        dataRow.ItemArray = items.ToArray ();
        table.Rows.Add (dataRow);
    }
    return table;
}
----------------------------------------

public static IEnumerable < string > GetMemberNames < T1, T2 > (Expression < Func < T1, T2 > > expression) {
    var memberExpression = expression.Body as MemberExpression;
    if (memberExpression != null) {
        return new [] {memberExpression.Member.Name};
    }
    var memberInitExpression = expression.Body as MemberInitExpression;
    if (memberInitExpression != null) {
        return memberInitExpression.Bindings.Select (x = > x.Member.Name);
    }
    var newExpression = expression.Body as NewExpression;
    if (newExpression != null) {
        return newExpression.Arguments.Select (x = > (x as MemberExpression).Member.Name);
    }
    throw new ArgumentException ("expression");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52964117_52964331_25_33
52964117_52964865_62_70
Title: How to copy data to another list without linq and without altering the original list 
----------------------------------------

public int CompareTo (DataPair that) {
    if (this.Volume > that.Volume)
        return - 1;

    if (this.Volume == that.Volume)
        return 0;

    return 1;
}
----------------------------------------

public int CompareTo (DataPair that) {
    if (this.Volume > that.Volume)
        return - 1;

    if (this.Volume == that.Volume)
        return 0;

    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52968209_52968531_1_11
52968209_52968556_1_13
Title: Simple List Merge C# (Without Generics) 
----------------------------------------

public void Print () {
    Node node = firstNode;
    for (int i = 0; i < this.count; i ++) {
        Console.Write (node.Data + "->");
        if (node.Next != null)
            node = node.Next;

    }
}
----------------------------------------

public void Print () {
    while (this.count > 0) {
        Console.Write (firstNode.Data + "->");
        if (firstNode.Next != null)
            firstNode = firstNode.Next;

        count --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53001863_53002127_1_28
53001863_53007519_35_91
Title: Add mouse speed multiplier to score 
----------------------------------------

void FixedUpdate () {
    if (Time.fixedTime > timeToGo) {
        scoreText.text = "Score: " + score + (int) mouseSpeed * 0.1;
        if (Input.GetMouseButtonDown (0)) {
            mouseDelta = Input.mousePosition - lastPos;
            score ++;
            Debug.Log ("delta X : " + mouseDelta.x);
            Debug.Log ("delta Y : " + mouseDelta.y);
            Debug.Log ("delta distance : " + mouseDelta.magnitude);
            mouseSpeed = mouseDelta.magnitude / Time.deltaTime;
        }
        lastPos = Input.mousePosition;
        timeToGo = Time.fixedTime + 0.5f;
    }
}
----------------------------------------

private void FixedUpdate () {
    if (Time.fixedTime > timeToGo) {
        mouseDelta = Input.mousePosition - lastPos;
        mouseSpeed = mouseDelta.magnitude / Time.deltaTime;
        scoretext.text = "Score: " + score;
        Debug.Log ("Speed: " + mouseSpeed);
        Debug.Log ("Score: " + score);
        if (Input.GetMouseButton (0)) {
            if (mouseSpeed <= 1000) {
                score += 1;
            } else if (mouseSpeed > 1000 & mouseSpeed < 2000) {
                score += 1 * 2;
            } else if (mouseSpeed >= 2000 & mouseSpeed < 4000) {
                score += 1 * 3;
            } else if (mouseSpeed >= 4000 & mouseSpeed < 8000) {
                score += 1 * 4;
            } else if (mouseSpeed >= 8000) {
                score += 1 * 5;
            }
        }
        lastPos = Input.mousePosition;
        timeToGo = Time.fixedTime + 0.2f;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53060892_53089988_17_30
53060892_53090614_2_14
Title: Unity3D movement right/left fail 
----------------------------------------

void Update () {
    GetComponent < Rigidbody > ().velocity = new Vector3 (- 4, GM.vertVol, horizVel);
    if (Input.GetKeyDown (moveL)) {
        horizVel = - 3;
        StartCoroutine (stopSlid ());
    }
    if (Input.GetKeyDown (moveR)) {
        horizVel = 3;
        StartCoroutine (stopSlid ());
    }
}
----------------------------------------

void Update () {
    var horizVel = 0;
    if (Input.GetKey (moveL)) {
        horizVel += 3;
    }
    if (Input.GetKey (moveR)) {
        horizVel -= 3;
    }
    GetComponent < Rigidbody > ().MovePosition (this.transform.position + new Vector3 (- 4, GM.vertVol, horizVel) * Time.deltaTime);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53102_53118_1_9
53102_53122_1_29
Title: Why does Path.Combine not properly concatenate filenames that start with Path.DirectorySeparatorChar? 
----------------------------------------

public static String Combine (String path1, String path2) {
    if (path1 == null || path2 == null)
        throw new ArgumentNullException ((path1 == null) ? "path1" : "path2");

    Contract.EndContractBlock ();
    CheckInvalidPathChars (path1);
    CheckInvalidPathChars (path2);
    return CombineNoChecks (path1, path2);
}
----------------------------------------

public static string Combine (string path1, string path2) {
    if ((path1 == null) || (path2 == null)) {
        throw new ArgumentNullException ((path1 == null) ? "path1" : "path2");
    }
    CheckInvalidPathChars (path1);
    CheckInvalidPathChars (path2);
    if (path2.Length == 0) {
        return path1;
    }
    if (path1.Length == 0) {
        return path2;
    }
    if (IsPathRooted (path2)) {
        return path2;
    }
    char ch = path1 [path1.Length - 1];
    if (((ch != DirectorySeparatorChar) && (ch != AltDirectorySeparatorChar)) && (ch != VolumeSeparatorChar)) {
        return (path1 + DirectorySeparatorChar + path2);
    }
    return (path1 + path2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5310839_5311104_13_25
5310839_5311104_1_11
Title: Linq skip first where (linq to objects) 
----------------------------------------

private static IEnumerable < T > SkipFirstMatchingCore < T > (IEnumerable < T > source, Func < T, bool > predicate) {
    bool itemToSkipSeen = false;
    foreach (T item in source) {
        if (! itemToSkipSeen && predicate (item))
            itemToSkipSeen = true;
        else
            yield return item;

    }
}
----------------------------------------

public static IEnumerable < T > SkipFirstMatching < T > (this IEnumerable < T > source, Func < T, bool > predicate) {
    if (source == null)
        throw new ArgumentNullException ("source");

    if (predicate == null)
        throw new ArgumentNullException ("predicate");

    return SkipFirstMatchingCore (source, predicate);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5332454_5332652_12_31
5332454_5489615_20_42
Title: Mapping Entire Drive Into A Tree View 
----------------------------------------

private TreeNode RecursiveDirWalk (string path) {
    TreeNode node = new TreeNode (path.Substring (path.LastIndexOf ('\\')));
    node.ImageIndex = 1;
    node.Tag = path;
    string [] dirs = System.IO.Directory.GetDirectories (path);
    for (int t = 0; t < dirs.Length; t ++) {
        node.Nodes.Add (RecursiveDirWalk (dirs [t]));
    }
    string [] files = System.IO.Directory.GetFiles (path);
    for (int t = 0; t < files.Length; t ++) {
        TreeNode tn = new TreeNode (System.IO.Path.GetFileName (files [t]));
        tn.Tag = files [t];
        tn.ImageIndex = 2;
        node.Nodes.Add (tn);
    }
    return node;
}
----------------------------------------

private TreeNode RecursiveDirWalk (TreeNode node) {
    string path = (string) node.Tag;
    node.Nodes.Clear ();
    string [] dirs = System.IO.Directory.GetDirectories (path);
    for (int t = 0; t < dirs.Length; t ++) {
        TreeNode n = new TreeNode (dirs [t].Substring (dirs [t].LastIndexOf ('\\') + 1));
        n.ImageIndex = 1;
        n.Tag = dirs [t];
        node.Nodes.Add (n);
        n.Nodes.Add (new TreeNode ("?"));
    }
    string [] files = System.IO.Directory.GetFiles (path);
    for (int t = 0; t < files.Length; t ++) {
        TreeNode tn = new TreeNode (System.IO.Path.GetFileName (files [t]));
        tn.Tag = files [t];
        tn.ImageIndex = 2;
        node.Nodes.Add (tn);
    }
    return node;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5332454_5332652_1_9
5332454_5489615_1_12
Title: Mapping Entire Drive Into A Tree View 
----------------------------------------

private void fillTree () {
    string [] drives = Environment.GetLogicalDrives ();
    foreach (string dr in drives) {
        TreeNode node = RecursiveDirWalk (dr);
        node.ImageIndex = 0;
        node.Tag = dr;
        treeView1.Nodes.Add (node);
    }
}
----------------------------------------

private void fillTree () {
    string [] drives = Environment.GetLogicalDrives ();
    foreach (string dr in drives) {
        TreeNode node = new TreeNode (dr);
        node.Tag = dr;
        node.ImageIndex = 0;
        node.Tag = dr;
        treeView1.Nodes.Add (node);
        node.Nodes.Add (new TreeNode ("?"));
    }
    treeView1.BeforeExpand += new TreeViewCancelEventHandler (treeView1_BeforeExpand);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2503645_2518196_1_42
2503645_2518196_82_91
Title: Reflect.Emit Dynamic Type Memory Blowup 
----------------------------------------

public static void Dispose (this TypeBuilder tb) {
    if (tb == null)
        return;

    Type tbType = typeof (TypeBuilder);
    FieldInfo tbMbList = tbType.GetField ("m_listMethods", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbDecType = tbType.GetField ("m_DeclaringType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbGenType = tbType.GetField ("m_genTypeDef", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbDeclMeth = tbType.GetField ("m_declMeth", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbMbCurMeth = tbType.GetField ("m_currentMethod", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbMod = tbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbGenTypeParArr = tbType.GetField ("m_inst", BindingFlags.Instance | BindingFlags.NonPublic);
    TypeBuilder tempDecType = tbDecType.GetValue (tb) as TypeBuilder;
    tempDecType.Dispose ();
    tbDecType.SetValue (tb, null);
    tempDecType = tbGenType.GetValue (tb) as TypeBuilder;
    tempDecType.Dispose ();
    tbDecType.SetValue (tb, null);
    MethodBuilder tempMeth = tbDeclMeth.GetValue (tb) as MethodBuilder;
    tempMeth.Dispose ();
    tbDeclMeth.SetValue (tb, null);
    tempMeth = tbMbCurMeth.GetValue (tb) as MethodBuilder;
    tempMeth.Dispose ();
    tbMbCurMeth.SetValue (tb, null);
    ArrayList mbList = tbMbList.GetValue (tb) as ArrayList;
    for (int i = 0; i < mbList.Count; i ++) {
        tempMeth = mbList [i] as MethodBuilder;
        tempMeth.Dispose ();
        mbList [i] = null;
    }
    tbMbList.SetValue (tb, null);
    ModuleBuilder tempMod = tbMod.GetValue (tb) as ModuleBuilder;
    tempMod.Dispose ();
    tbMod.SetValue (tb, null);
    tbGenTypeParArr.SetValue (tb, null);
}
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;

    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2503645_2518196_1_42
2503645_2518196_92_112
Title: Reflect.Emit Dynamic Type Memory Blowup 
----------------------------------------

public static void Dispose (this TypeBuilder tb) {
    if (tb == null)
        return;

    Type tbType = typeof (TypeBuilder);
    FieldInfo tbMbList = tbType.GetField ("m_listMethods", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbDecType = tbType.GetField ("m_DeclaringType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbGenType = tbType.GetField ("m_genTypeDef", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbDeclMeth = tbType.GetField ("m_declMeth", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbMbCurMeth = tbType.GetField ("m_currentMethod", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbMod = tbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo tbGenTypeParArr = tbType.GetField ("m_inst", BindingFlags.Instance | BindingFlags.NonPublic);
    TypeBuilder tempDecType = tbDecType.GetValue (tb) as TypeBuilder;
    tempDecType.Dispose ();
    tbDecType.SetValue (tb, null);
    tempDecType = tbGenType.GetValue (tb) as TypeBuilder;
    tempDecType.Dispose ();
    tbDecType.SetValue (tb, null);
    MethodBuilder tempMeth = tbDeclMeth.GetValue (tb) as MethodBuilder;
    tempMeth.Dispose ();
    tbDeclMeth.SetValue (tb, null);
    tempMeth = tbMbCurMeth.GetValue (tb) as MethodBuilder;
    tempMeth.Dispose ();
    tbMbCurMeth.SetValue (tb, null);
    ArrayList mbList = tbMbList.GetValue (tb) as ArrayList;
    for (int i = 0; i < mbList.Count; i ++) {
        tempMeth = mbList [i] as MethodBuilder;
        tempMeth.Dispose ();
        mbList [i] = null;
    }
    tbMbList.SetValue (tb, null);
    ModuleBuilder tempMod = tbMod.GetValue (tb) as ModuleBuilder;
    tempMod.Dispose ();
    tbMod.SetValue (tb, null);
    tbGenTypeParArr.SetValue (tb, null);
}
----------------------------------------

public static void Dispose (this ModuleBuilder modBuild) {
    if (modBuild == null)
        return;

    Type modBuildType = typeof (ModuleBuilder);
    FieldInfo modBuildModData = modBuildType.GetField ("m__moduleData", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
    FieldInfo modTypeBuildList = modBuildType.GetField ("m__TypeBuilderList", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
    ArrayList modTypeList = modTypeBuildList.GetValue (modBuild) as ArrayList;
    if (modTypeList != null) {
        for (int i = 0; i < modTypeList.Count; i ++) {
            TypeBuilder tb = modTypeList [i] as TypeBuilder;
            tb.Dispose ();
            modTypeList = null;
        }
        modTypeBuildList.SetValue (modBuild, null);
    }
    modBuildModData.SetValue (modBuild, null);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2503645_2518196_43_71
2503645_2518196_82_91
Title: Reflect.Emit Dynamic Type Memory Blowup 
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;

    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;

    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2503645_2518196_43_71
2503645_2518196_92_112
Title: Reflect.Emit Dynamic Type Memory Blowup 
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;

    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

public static void Dispose (this ModuleBuilder modBuild) {
    if (modBuild == null)
        return;

    Type modBuildType = typeof (ModuleBuilder);
    FieldInfo modBuildModData = modBuildType.GetField ("m__moduleData", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
    FieldInfo modTypeBuildList = modBuildType.GetField ("m__TypeBuilderList", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
    ArrayList modTypeList = modTypeBuildList.GetValue (modBuild) as ArrayList;
    if (modTypeList != null) {
        for (int i = 0; i < modTypeList.Count; i ++) {
            TypeBuilder tb = modTypeList [i] as TypeBuilder;
            tb.Dispose ();
            modTypeList = null;
        }
        modTypeBuildList.SetValue (modBuild, null);
    }
    modBuildModData.SetValue (modBuild, null);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2503645_2518196_82_91
2503645_2518196_92_112
Title: Reflect.Emit Dynamic Type Memory Blowup 
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;

    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

public static void Dispose (this ModuleBuilder modBuild) {
    if (modBuild == null)
        return;

    Type modBuildType = typeof (ModuleBuilder);
    FieldInfo modBuildModData = modBuildType.GetField ("m__moduleData", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
    FieldInfo modTypeBuildList = modBuildType.GetField ("m__TypeBuilderList", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
    ArrayList modTypeList = modTypeBuildList.GetValue (modBuild) as ArrayList;
    if (modTypeList != null) {
        for (int i = 0; i < modTypeList.Count; i ++) {
            TypeBuilder tb = modTypeList [i] as TypeBuilder;
            tb.Dispose ();
            modTypeList = null;
        }
        modTypeBuildList.SetValue (modBuild, null);
    }
    modBuildModData.SetValue (modBuild, null);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2504879_2504932_1_35
2504879_2504937_1_22
Title: Comparing Nested object properties using C# 
----------------------------------------

public static IList < string > GetDifferingProperties (object source, object target) {
    var sourceType = source.GetType ();
    var sourceProperties = sourceType.GetProperties ();
    var targetType = target.GetType ();
    var targetProperties = targetType.GetProperties ();
    var result = new List < string > ();
    foreach (var property in (from s in sourceProperties
        from t in targetProperties
        where s.Name == t.Name && s.PropertyType == t.PropertyType && ! Equals (s.GetValue (source, null), t.GetValue (target, null))
        select new {Source = s, Target = t})) {
        if (IsPrimitive (property.Source.PropertyType)) {
            result.Add (property.Source.Name);
        } else {
            foreach (var subProperty in GetDifferingProperties (property.Source.GetValue (source, null), property.Target.GetValue (target, null))) {
                result.Add (property.Source.Name + "." + subProperty);
            }
        }
    }
    return result;
}
----------------------------------------

public static IEnumerable < string > GetDifferingProperties (object source, object target) {
    if (source == target)
        return new List < string > ();

    var sourceProperties = source.GetType ().GetProperties ();
    var targetProperties = target.GetType ().GetProperties ();
    return from s in sourceProperties
        from t in targetProperties
        where s.Name == t.Name && s.PropertyType == t.PropertyType
        let sVal = s.GetValue (source, null)
        let tVal = t.GetValue (target, null)
        from name in GetDifferingProperties (sVal, tVal)
        select name;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2508802_2508830_1_21
2508802_2509045_1_29
Title: C# text creation issue 
----------------------------------------

public void step1a () {
    string begins = ("\"\\\"A\"");
    string betaFilePath = @"C:\ext.txt";
    string [] lines = File.ReadAllLines (betaFilePath);
    foreach (string line in lines) {
        if (line.StartsWith (begins)) {
            File.AppendAllText (@"C:\xt2.txt", line);
            File.AppendAllText (@"C:\xt2.txt", "\n");
        } else {
            string line2 = line.Replace (Environment.NewLine, " ");
            File.AppendAllText (@"C:\xt2.txt", line2);
        }
    }
}
----------------------------------------

public static void step1a () {
    string betaFilePath = @"C:\ext.txt";
    string [] lines = File.ReadAllLines (betaFilePath);
    using (StreamWriter writer = new StreamWriter (File.Create (@"C:\xt2.txt")))
    {
        string buffer = null;
        foreach (string line in lines) {
            if (! line.StartsWith (begins)) {
                writer.WriteLine (buffer + line);
                buffer = null;
            } else {
                if (buffer != null)
                    writer.WriteLine (buffer);

                buffer = line;
            }
        }
        if (buffer != null)
            Console.Out.WriteLine (buffer);

    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2509965_2510095_13_18
2509965_2510095_6_11
Title: Writing A Good C# Equals Method 
----------------------------------------

public bool Equals (T other) {
    if (ReferenceEquals (null, other))
        return false;

    if (ReferenceEquals (this, other))
        return true;

    return Reflect ().SequenceEqual (other.Reflect ());
}
----------------------------------------

public override bool Equals (Object obj) {
    if (ReferenceEquals (null, obj))
        return false;

    if (obj.GetType () != GetType ())
        return false;

    return Equals (obj as T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25103508_25103641_3_21
25103508_25104672_1_15
Title: Using LINQ to take the top 100 and bottom 100? 
----------------------------------------

public static IEnumerable < T > GetLastAndFirst < T > (this IEnumerable < T > seq, int number, int totalLength) {
    if (totalLength < number * 2)
        throw new Exception ("List length must be >= (number * 2)");

    using (var en = seq.GetEnumerator ())
    {
        int i = 0;
        while (en.MoveNext ()) {
            i ++;
            if (i <= number || i >= totalLength - number)
                yield return en.Current;

        }
    }}
----------------------------------------

public static IEnumerable < T > TakeFirstAndLast < T > (this IEnumerable < T > source, int count) {
    var first = new List < T > ();
    var last = new LinkedList < T > ();
    foreach (var item in source) {
        if (first.Count < count)
            first.Add (item);

        if (last.Count >= count)
            last.RemoveFirst ();

        last.AddLast (item);
    }
    return first.Concat (last);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25113179_25114739_28_47
25113179_25114739_3_25
Title: How to interchange/reorder rows in gridview containing input entries 
----------------------------------------

public static void MoveRow (DataTable dt, int row0Index, int row1Index) {
    if (dt != null) {
        int lowIndex = Math.Min (row0Index, row1Index);
        int highIndex = Math.Max (row0Index, row1Index);
        if (dt.Rows.Count >= 2)
            if (lowIndex != highIndex)
                if ((lowIndex >= 0) && (highIndex < dt.Rows.Count)) {
                    DataRow oldRow = dt.NewRow ();
                    oldRow.ItemArray = dt.Rows [lowIndex].ItemArray;
                    dt.Rows.Remove (dt.Rows [lowIndex]);
                    dt.Rows.InsertAt (oldRow, highIndex);
                }

    }
}
----------------------------------------

public static void MoveRow (DataGridView dgv, int dgvRowIndex0, int dgvRowIndex1) {
    if (dgv.Rows != null)
        if (dgv.DataSource != null) {
            DataTable dt = null;
            if (dgv.DataSource is BindingSource) {
                dt = (DataTable) ((BindingSource) dgv.DataSource).DataSource;
            } else if (dgv.DataSource is DataTable) {
                dt = (DataTable) dgv.DataSource;
            }
            DataRow row0 = ((DataRowView) dgv.Rows [dgvRowIndex0].DataBoundItem).Row;
            int row0Index = dt.Rows.IndexOf (row0);
            DataRow row1 = ((DataRowView) dgv.Rows [dgvRowIndex1].DataBoundItem).Row;
            int row1Index = dt.Rows.IndexOf (row1);
            MoveRow (dt, row0Index, row1Index);
        }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25115007_25115038_1_19
25115007_25115072_1_14
Title: How to break out recursive call 
----------------------------------------

private static string GetDirectory (string folderPath, string number) {
    foreach (string directory in Directory.GetDirectories (folderPath)) {
        if (directory.Contains (number)) {
            return directory;
        }
        string result = GetDirectory (directory, number);
        if (! string.IsNullOrEmpty (result)) {
            return result;
        }
    }
    return null;
}
----------------------------------------

private static string GetDirectory (string folderPath, string number) {
    foreach (string directory in Directory.GetDirectories (folderPath)) {
        if (directory.Contains (number))
            return directory;

        var innerDir = GetDirectory (directory, number);
        if (innerDir != null)
            return innerDir;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25119399_25120052_3_32
25119399_25121096_1_27
Title: How to find modal value accross List<List<double>> for each inner value? 
----------------------------------------

static void Main (string [] args) {
    Random rnd = new Random ();
    int numberOfLoops = 10;
    List < List < int > > myFullList = new List < List < int > > ();
    for (int i = 0; i < numberOfLoops; i ++) {
        List < int > myInnerList = new List < int > ();
        for (int j = 0; j < 10; j ++) {
            myInnerList.Add (rnd.Next (0, 10));
        }
        myFullList.Add (myInnerList);
    }
    myFullList = Transpose < int > (myFullList);
    List < int > result = new List < int > ();
    foreach (List < int > subList in myFullList)
        result.Add (Mode (subList));

}
----------------------------------------

static void Main (string [] args) {
    List < List < double > > list = new List < List < double > > ();
    list.Add (new List < double > {1.00, 2.00, 3.00});
    list.Add (new List < double > {3.00, 2.00, 8.00});
    list.Add (new List < double > {3.00, 9.00, 1.00});
    list.Add (new List < double > {3.00, 1.00, 1});
    var result = list.Select < List < double >, List < KeyValuePair < int, double > > > (sub = > {
        List < KeyValuePair < int, double > > elems = new List < KeyValuePair < int, double > > (sub.Count);
        for (int i = 0; i < sub.Count; ++ i)
            elems.Add (new KeyValuePair < int, double > (i, sub [i]));

        return elems;
    }).SelectMany ((x) = > x).GroupBy ((x) = > x.Key).Select < IGrouping < int, KeyValuePair < int, double > >, double > (x = > {
        var y = x.GroupBy (g = > g.Value).OrderByDescending (g = > g.Count ());
        return y.First ().First ().Value;
    });
    foreach (double val in result)
        Console.Write (val + " ");

    Console.WriteLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25121554_25122469_185_194
25121554_25122882_10_54
Title: visual C# is it possible to have more feedback than a progress bar for a process running? 
----------------------------------------

static void Main (string [] args) {
    if (args.Length > 0 && args [0] == "worker")
        runWorker ();
    else
        runMonitor ();

    Console.WriteLine ("\nEnded. Press a key to exit.");
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    string fileName = "c:\\_data\\temp.txt";
    Task writer = new Task (() = > {
        using (FileStream fs = File.Open (fileName, FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
        using (StreamWriter sw = new StreamWriter (fs))
        {
            for (int i = 0; i < 50; i ++) {
                sw.WriteLine (DateTime.Now.Millisecond.ToString ());
                sw.Flush ();
                Thread.Sleep (500);
            }
        }});
    Task reader = new Task (() = > {
        for (int i = 0; i < 50; i ++) {
            Thread.Sleep (500);
            Console.WriteLine ("Read again");
            if (File.Exists (fileName)) {
                using (FileStream fs = File.Open (fileName, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))
                using (StreamReader r = new StreamReader (fs))
                {
                    while (! r.EndOfStream) {
                        Console.WriteLine (r.ReadLine ());
                    }
                }}
        }
    });
    writer.Start ();
    reader.Start ();
    writer.Wait ();
    reader.Wait ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25124670_25124817_1_17
25124670_25124831_1_20
Title: Returning a Json object from c# to an Angular controller 
----------------------------------------

public RzEnvParameters GetRzEnv () {
    string clConfig = System.Configuration.ConfigurationManager.AppSettings ["ClConfig"].ToString ();
    string envName = System.Configuration.ConfigurationManager.AppSettings ["EnvironmentName"].ToString ();
    string spaceName = System.Configuration.ConfigurationManager.AppSettings ["SpaceName"].ToString ();
    string domainName = System.Configuration.ConfigurationManager.AppSettings ["DomainName"].ToString ();
    string port = System.Configuration.ConfigurationManager.AppSettings ["Port"].ToString ();
    var razParams = new RzEnvParameters {clConfig = clConfig, envName = envName, spaceName = spaceName, domainName = domainName, port = port};
    return rzParams;
}
----------------------------------------

[HttpGet] public RzEnvParameters GetRzEnv () {
    string clConfig = System.Configuration.ConfigurationManager.AppSettings ["ClConfig"].ToString ();
    string envName = System.Configuration.ConfigurationManager.AppSettings ["EnvironmentName"].ToString ();
    string spaceName = System.Configuration.ConfigurationManager.AppSettings ["SpaceName"].ToString ();
    string domainName = System.Configuration.ConfigurationManager.AppSettings ["DomainName"].ToString ();
    string port = System.Configuration.ConfigurationManager.AppSettings ["Port"].ToString ();
    var razParams = new RzEnvParameters {clConfig = clConfig, envName = envName, spaceName = spaceName, domainName = domainName, port = port};
    return razParams;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25124670_25124817_1_17
25124670_25124848_1_19
Title: Returning a Json object from c# to an Angular controller 
----------------------------------------

public RzEnvParameters GetRzEnv () {
    string clConfig = System.Configuration.ConfigurationManager.AppSettings ["ClConfig"].ToString ();
    string envName = System.Configuration.ConfigurationManager.AppSettings ["EnvironmentName"].ToString ();
    string spaceName = System.Configuration.ConfigurationManager.AppSettings ["SpaceName"].ToString ();
    string domainName = System.Configuration.ConfigurationManager.AppSettings ["DomainName"].ToString ();
    string port = System.Configuration.ConfigurationManager.AppSettings ["Port"].ToString ();
    var razParams = new RzEnvParameters {clConfig = clConfig, envName = envName, spaceName = spaceName, domainName = domainName, port = port};
    return rzParams;
}
----------------------------------------

[HttpGet] public object GetRzEnv () {
    string clConfig = System.Configuration.ConfigurationManager.AppSettings ["ClConfig"].ToString ();
    string envName = System.Configuration.ConfigurationManager.AppSettings ["EnvironmentName"].ToString ();
    string spaceName = System.Configuration.ConfigurationManager.AppSettings ["SpaceName"].ToString ();
    string domainName = System.Configuration.ConfigurationManager.AppSettings ["DomainName"].ToString ();
    string port = System.Configuration.ConfigurationManager.AppSettings ["Port"].ToString ();
    var razParams = new {clConfig = new RzEnvParameters {clConfig = clConfig}, envName = new RzEnvParameters {envName = envName}, spaceName = new RzEnvParameters {spaceName = spaceName}, domainName = new RzEnvParameters {domainName = domainName}, port = new RzEnvParameters {port = port}};
    return rzParams;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25124670_25124831_1_20
25124670_25124848_1_19
Title: Returning a Json object from c# to an Angular controller 
----------------------------------------

[HttpGet] public RzEnvParameters GetRzEnv () {
    string clConfig = System.Configuration.ConfigurationManager.AppSettings ["ClConfig"].ToString ();
    string envName = System.Configuration.ConfigurationManager.AppSettings ["EnvironmentName"].ToString ();
    string spaceName = System.Configuration.ConfigurationManager.AppSettings ["SpaceName"].ToString ();
    string domainName = System.Configuration.ConfigurationManager.AppSettings ["DomainName"].ToString ();
    string port = System.Configuration.ConfigurationManager.AppSettings ["Port"].ToString ();
    var razParams = new RzEnvParameters {clConfig = clConfig, envName = envName, spaceName = spaceName, domainName = domainName, port = port};
    return razParams;
}
----------------------------------------

[HttpGet] public object GetRzEnv () {
    string clConfig = System.Configuration.ConfigurationManager.AppSettings ["ClConfig"].ToString ();
    string envName = System.Configuration.ConfigurationManager.AppSettings ["EnvironmentName"].ToString ();
    string spaceName = System.Configuration.ConfigurationManager.AppSettings ["SpaceName"].ToString ();
    string domainName = System.Configuration.ConfigurationManager.AppSettings ["DomainName"].ToString ();
    string port = System.Configuration.ConfigurationManager.AppSettings ["Port"].ToString ();
    var razParams = new {clConfig = new RzEnvParameters {clConfig = clConfig}, envName = new RzEnvParameters {envName = envName}, spaceName = new RzEnvParameters {spaceName = spaceName}, domainName = new RzEnvParameters {domainName = domainName}, port = new RzEnvParameters {port = port}};
    return rzParams;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25126622_25126658_1_16
25126622_25126693_1_11
Title: How do to add validation to my calculator in c# 
----------------------------------------

private void button4_Click (object sender, EventArgs e) {
    int R, I;
    if (int.TryParse (textBox1.Text, out R) && int.TryParse (textBox2.Text, out I)) {
        int E = R - I;
        textBox3.Text = E.ToString ();
    } else {
        MessageBox.Show ("You have entered an invalid value!");
    }
}
----------------------------------------

private void button4_Click (object sender, EventArgs e) {
    int R, I;
    if (int.TryParse (textBox1.Text, out R) && int.TryParse (textBox2.Text, out I)) {
        int E = R - I;
        textBox3.Text = E.ToString ();
    } else {
        textBox3.Text = ("value entered is not whole number");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25139767_25140155_1_24
25139767_25140168_3_24
Title: Loop through observable collection to create a new observable collection 
----------------------------------------

public static List < T > PaginateWithOffset < T > (List < T > list, int offset, int pageSize) {
    List < T > tempList = new List < T > ();
    if (offset < 0 || pageSize < 0 || offset >= list.Count || list.Count == 0) {
        return list;
    } else {
        int endPage = offset + pageSize;
        int startPage = offset;
        if ((startPage < list.Count && endPage > list.Count) || (pageSize == 0)) {
            endPage = list.Count;
        }
        for (int i = startPage; i < endPage; i ++) {
            tempList.Add (list [i]);
        }
        return tempList;
    }
}
----------------------------------------

public static ObservableCollection < T > TakeSomeIgnoreSome < T > (this ObservableCollection < T > collection, int numberGet, int numberIgnore) {
    var col = new ObservableCollection < T > ();
    var enumerator = collection.GetEnumerator ();
    int counter = 0;
    bool getting = true;
    while (enumerator.MoveNext ()) {
        if (getting)
            col.Add (enumerator.Current);

        counter ++;
        if (getting && counter == numberGet || ! getting && counter == numberIgnore) {
            getting ^= true;
            counter = 0;
        }
    }
    return col;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25181461_25181499_1_13
25181461_25181519_1_13
Title: How do I make a button click event to be switch button? 
----------------------------------------

private void demoAlertToolStripMenuItem_Click (object sender, EventArgs e) {
    if (timer1.Enabled) {
        demoAlertToolStripMenuItem.ForeColor = Color.Red;
        timer1.Stop ();
    } else {
        demoAlertToolStripMenuItem.ForeColor = Color.Black;
        timer1.Start ();
    }
}
----------------------------------------

private void demoAlertToolStripMenuItem_Click (object sender, EventArgs e) {
    if (timer1.Enabled) {
        demoAlertToolStripMenuItem.ForeColor = Color.Red;
        timer1.Stop ();
    } else {
        demoAlertToolStripMenuItem.ForeColor = Color.Black;
        timer1.Start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2519423_2554401_1_12
2519423_2560862_1_12
Title: CRM plugin to execute when opportunity is reopened 
----------------------------------------

public void Execute (IPluginExecutionContext context) {
    string state = (string) context.InputParameters ["State"];
    if (state == "Open") {
        Moniker entityMoniker = (Moniker) context.InputParameters ["EntityMoniker"];
        DynamicEntity opp = new DynamicEntity ("opportunity");
        opp ["opportunityid"] = new Key (entityMoniker.Id);
        opp ["salesstagecode"] = new Picklist ();
        context.CreateCrmService (true).Update (opp);
    }
}
----------------------------------------

public void Execute (IPluginExecutionContext context) {
    if (context.InputParameters.Properties.Contains ("Target") && context.InputParameters.Properties ["Target"] is DynamicEntity) {
        DynamicEntity opp = (DynamicEntity) context.InputParameters ["Target"];
        Picklist StageCodePicklist = new Picklist ();
        (Picklist);
        opp.Properties ["salesstagecode"];
        StageCodePicklist.name = "Advocating - Advanced (90%)";
        StageCodePicklist.Value = 200004;
        opp.Properties ["salesstagecode"] = StageCodePicklist;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2528907_2557121_3_36
2528907_3080675_3_22
Title: Spawn Multiple Threads for work then wait until all finished 
----------------------------------------

static void Main (string [] args) {
    int numThreads = 10;
    int toProcess = numThreads;
    object syncRoot = new object ();
    for (int i = 0; i < numThreads; i ++) {
        new Thread (delegate () {
            Console.WriteLine (Thread.CurrentThread.ManagedThreadId);
            if (Interlocked.Decrement (ref toProcess) == 0) {
                lock (syncRoot)
                {
                    Monitor.Pulse (syncRoot);
                }}
        }).Start ();
    }
    lock (syncRoot)
    {
        if (toProcess > 0) {
            Monitor.Wait (syncRoot);
        }
    } Console.WriteLine ("Finished.");
}
----------------------------------------

static void Main (string [] args) {
    var numThreads = 10;
    var countdownEvent = new CountdownEvent (numThreads);
    for (var i = 0; i < numThreads; i ++) {
        new Thread (delegate () {
            Console.WriteLine (Thread.CurrentThread.ManagedThreadId);
            countdownEvent.Signal ();
        }).Start ();
    }
    countdownEvent.Wait ();
    Console.WriteLine ("Finished.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25342011_25342391_3_23
25342011_25342411_3_27
Title: How to merge two List<string> into one List<KeyValuePair> including blanks? 
----------------------------------------

public static IEnumerable < TReturn > ZipAll < T1, T2, TReturn > (this IEnumerable < T1 > first, IEnumerable < T2 > second, Func < T1, T2, TReturn > f, T1 seed1, T2 seed2) {
    var iter1 = first.GetEnumerator ();
    var iter2 = second.GetEnumerator ();
    while (iter1.MoveNext ()) {
        if (iter2.MoveNext ())
            yield return f (iter1.Current, iter2.Current);
        else
            yield return f (iter1.Current, seed2);

    }
    while (iter2.MoveNext ())
        yield return f (seed1, iter2.Current);

}
----------------------------------------

public static IEnumerable < TOut > ZipAll < TIn1, TIn2, TOut > (this IEnumerable < TIn1 > sequence1, IEnumerable < TIn2 > sequence2, Func < TIn1, TIn2, TOut > combiner) {
    sequence1 = sequence1 ?? Enumerable.Empty < TIn1 > ();
    sequence2 = sequence2 ?? Enumerable.Empty < TIn2 > ();
    var seq1Enum = sequence1.GetEnumerator ();
    var seq2Enum = sequence2.GetEnumerator ();
    for (;;) {
        var hasMore1 = seq1Enum.MoveNext ();
        var hasMore2 = seq2Enum.MoveNext ();
        if (hasMore1 || hasMore2) {
            yield return combiner (hasMore1 ? seq1Enum.Current : default (TIn1), hasMore2 ? seq2Enum.Current : default (TIn2));
        } else {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25346207_25346385_12_22
25346207_25346385_45_71
Title: C# Metro (Windows Store) Keeping ListView sorted 
----------------------------------------

public static int BinarySearchLast < T > (this IList < T > list, T item, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    int start = list.BinarySearch (item, comparer);
    if (start > 0) {
        for (int end = list.Count - 1; start < end && comparer.Compare (list [start], list [start + 1]) == 0; start ++)
            ;
    }
    return start;
}
----------------------------------------

public static int BinarySearch < T > (this IList < T > list, T value, IComparer < T > comparer) {
    if (list == null)
        throw new ArgumentNullException ("list");

    comparer = comparer ?? Comparer < T >.Default;
    int lo = 0;
    int hi = list.Count - 1;
    while (lo <= hi) {
        int i = lo + ((hi - lo) > > 1);
        int order = comparer.Compare (list [i], value);
        if (order == 0)
            return i;

        if (order < 0) {
            lo = i + 1;
        } else {
            hi = i - 1;
        }
    }
    return ~ lo;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25346207_25346385_12_22
25346207_25346385_78_89
Title: C# Metro (Windows Store) Keeping ListView sorted 
----------------------------------------

public static int BinarySearchLast < T > (this IList < T > list, T item, IComparer < T > comparer) {
    comparer = comparer ?? Comparer < T >.Default;
    int start = list.BinarySearch (item, comparer);
    if (start > 0) {
        for (int end = list.Count - 1; start < end && comparer.Compare (list [start], list [start + 1]) == 0; start ++)
            ;
    }
    return start;
}
----------------------------------------

public static int AddToSortedList < T > (this IList < T > list, T value, bool allowDuplicates, IComparer < T > comparer) {
    int index = list.BinarySearchLast (value, comparer);
    if (! allowDuplicates && index >= 0)
        return index;

    if (index < 0)
        index = ~ index;

    list.Insert (index, value);
    return index;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25346207_25346385_45_71
25346207_25346385_78_89
Title: C# Metro (Windows Store) Keeping ListView sorted 
----------------------------------------

public static int BinarySearch < T > (this IList < T > list, T value, IComparer < T > comparer) {
    if (list == null)
        throw new ArgumentNullException ("list");

    comparer = comparer ?? Comparer < T >.Default;
    int lo = 0;
    int hi = list.Count - 1;
    while (lo <= hi) {
        int i = lo + ((hi - lo) > > 1);
        int order = comparer.Compare (list [i], value);
        if (order == 0)
            return i;

        if (order < 0) {
            lo = i + 1;
        } else {
            hi = i - 1;
        }
    }
    return ~ lo;
}
----------------------------------------

public static int AddToSortedList < T > (this IList < T > list, T value, bool allowDuplicates, IComparer < T > comparer) {
    int index = list.BinarySearchLast (value, comparer);
    if (! allowDuplicates && index >= 0)
        return index;

    if (index < 0)
        index = ~ index;

    list.Insert (index, value);
    return index;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25348544_25348695_18_42
25348544_25348695_48_61
Title: "Sorting an Arraylist of strings on a portion of each string delimited by a character" 
----------------------------------------

public int Compare (string x, string y) {
    var xVal = ExtractNumber (x);
    var yVal = ExtractNumber (y);
    if (! xVal.HasValue && ! yVal.HasValue)
        return x.CompareTo (y);
    else if (! xVal.HasValue)
        return 1;
    else if (! yVal.HasValue)
        return - 1;

    int cmp = xVal.Value.CompareTo (yVal.Value);
    if (cmp != 0)
        return cmp;

    return x.CompareTo (y);
}
----------------------------------------

public int Compare (object x, object y) {
    if (object.ReferenceEquals (x, y))
        return 0;

    string xStr = x as string;
    string yStr = y as string;
    if (xStr == null && yStr == null)
        return 0;
    else if (xStr == null)
        return 1;
    else if (yStr == null)
        return - 1;
    else
        return Compare (xStr, yStr);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25348544_25348695_18_42
25348544_25348794_3_12
Title: "Sorting an Arraylist of strings on a portion of each string delimited by a character" 
----------------------------------------

public int Compare (string x, string y) {
    var xVal = ExtractNumber (x);
    var yVal = ExtractNumber (y);
    if (! xVal.HasValue && ! yVal.HasValue)
        return x.CompareTo (y);
    else if (! xVal.HasValue)
        return 1;
    else if (! yVal.HasValue)
        return - 1;

    int cmp = xVal.Value.CompareTo (yVal.Value);
    if (cmp != 0)
        return cmp;

    return x.CompareTo (y);
}
----------------------------------------

public int Compare (string x, string y) {
    var xIntValues = x.Split (new [] {","}, StringSplitOptions.RemoveEmptyEntries).Select (int.Parse).ToArray ();
    var yIntValues = y.Split (new [] {","}, StringSplitOptions.RemoveEmptyEntries).Select (int.Parse).ToArray ();
    for (var i = 0; i < Math.Min (xIntValues.Count (), yIntValues.Count ()); ++ i)
        if (xIntValues [i] != yIntValues [i])
            return xIntValues [i] - yIntValues [i];

    return xIntValues.Count () - yIntValues.Count ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25348544_25348695_48_61
25348544_25348794_3_12
Title: "Sorting an Arraylist of strings on a portion of each string delimited by a character" 
----------------------------------------

public int Compare (object x, object y) {
    if (object.ReferenceEquals (x, y))
        return 0;

    string xStr = x as string;
    string yStr = y as string;
    if (xStr == null && yStr == null)
        return 0;
    else if (xStr == null)
        return 1;
    else if (yStr == null)
        return - 1;
    else
        return Compare (xStr, yStr);

}
----------------------------------------

public int Compare (string x, string y) {
    var xIntValues = x.Split (new [] {","}, StringSplitOptions.RemoveEmptyEntries).Select (int.Parse).ToArray ();
    var yIntValues = y.Split (new [] {","}, StringSplitOptions.RemoveEmptyEntries).Select (int.Parse).ToArray ();
    for (var i = 0; i < Math.Min (xIntValues.Count (), yIntValues.Count ()); ++ i)
        if (xIntValues [i] != yIntValues [i])
            return xIntValues [i] - yIntValues [i];

    return xIntValues.Count () - yIntValues.Count ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2535287_25151255_1_14
2535287_29443227_1_18
Title: Getting Nested Object Property Value Using Reflection 
----------------------------------------

public object GetPropertyValue (object obj, string propertyName) {
    object targetObject = obj;
    string targetPropertyName = propertyName;
    if (propertyName.Contains ('.')) {
        string [] split = propertyName.Split ('.');
        targetObject = obj.GetType ().GetProperty (split [0]).GetValue (obj, null);
        targetPropertyName = split [1];
    }
    return targetObject.GetType ().GetProperty (targetPropertyName).GetValue (targetObject, null);
}
----------------------------------------

public object GetPropertyValue (object obj, string propertyName) {
    var _propertyNames = propertyName.Split ('.');
    for (var i = 0; i < _propertyNames.Length; i ++) {
        if (obj != null) {
            var _propertyInfo = obj.GetType ().GetProperty (_propertyNames [i]);
            if (_propertyInfo != null)
                obj = _propertyInfo.GetValue (obj);
            else
                obj = null;

        }
    }
    return obj;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2535287_25151255_1_14
2535287_29823241_1_16
Title: Getting Nested Object Property Value Using Reflection 
----------------------------------------

public object GetPropertyValue (object obj, string propertyName) {
    object targetObject = obj;
    string targetPropertyName = propertyName;
    if (propertyName.Contains ('.')) {
        string [] split = propertyName.Split ('.');
        targetObject = obj.GetType ().GetProperty (split [0]).GetValue (obj, null);
        targetPropertyName = split [1];
    }
    return targetObject.GetType ().GetProperty (targetPropertyName).GetValue (targetObject, null);
}
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");

    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");

    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2535287_29443227_1_18
2535287_29823241_1_16
Title: Getting Nested Object Property Value Using Reflection 
----------------------------------------

public object GetPropertyValue (object obj, string propertyName) {
    var _propertyNames = propertyName.Split ('.');
    for (var i = 0; i < _propertyNames.Length; i ++) {
        if (obj != null) {
            var _propertyInfo = obj.GetType ().GetProperty (_propertyNames [i]);
            if (_propertyInfo != null)
                obj = _propertyInfo.GetValue (obj);
            else
                obj = null;

        }
    }
    return obj;
}
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");

    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");

    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25382020_25382330_1_41
25382020_25404919_33_68
Title: Dropdown value disappears after submit 
----------------------------------------

protected void btnAddDropDown_Click1 (object sender, EventArgs e) {
    string strconnection = System.Configuration.ConfigurationManager.AppSettings ["YourConnectionString"].ToString ();
    string city = txtOtherCity.Text.Trim ();
    DataSet ds = new DataSet ();
    if (! string.IsNullOrEmpty (city)) {
        string query = "INSERT INTO Career.Location (State) " + "VALUES (@city) ";
        using (SqlConnection cn = new SqlConnection (strconnection))
        using (SqlCommand cmd = new SqlCommand (query, cn))
        {
            cmd.Parameters.Add ("@city", SqlDbType.VarChar, 50).Value = city;
            cn.Open ();
            cmd.ExecuteNonQuery ();
            cn.Close ();
        } query = "select State from Career.Location";
        using (SqlConnection cnn = new SqlConnection (strconnection))
        using (SqlCommand cmdd = new SqlCommand (query, cnn))
        {
            SqlDataAdapter adp = new SqlDataAdapter (cmdd);
            cnn.Open ();
            adp.Fill (ds);
            cnn.Close ();
        } ddlLocation.DataSource = ds;
        ddlLocation.DataTextField = "State";
        ddlLocation.DataValueField = "State";
        ddlLocation.DataBind ();
    }
}
----------------------------------------

protected void btnAddDropDown_Click1 (object sender, EventArgs e) {
    using (SqlConnection con = new SqlConnection (constring))
    {
        con.Open ();
        SqlCommand cmd = new SqlCommand ();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "Add_CityforLocation";
        cmd.Parameters.Add ("@ID", SqlDbType.VarChar).Value = 0;
        cmd.Parameters.Add ("@CountryName", SqlDbType.VarChar).Value = "India";
        cmd.Parameters.Add ("@CityName", SqlDbType.VarChar).Value = txtOtherCity.Text.Trim ();
        cmd.Parameters.Add ("@StateName", SqlDbType.VarChar).Value = ddlLocation.SelectedItem.ToString ();
        cmd.Connection = con;
        try {
            cmd.ExecuteNonQuery ();
            BindContrydropdown ();
        }
        catch (Exception ex) {
            Response.Write (ex.Message);
        }
        finally {
            con.Close ();
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25389524_25390103_1_11
25389524_25433410_1_27
Title: "Selecting two other datagridview rows after selecting first related on 'rptId' field" 
----------------------------------------

private void dataGridView1_CellClick (object sender, DataGridViewCellEventArgs e) {
    var rptIdValue1 = (int) dataGridView1.Rows [e.RowIndex].Cells [0].Value;
    foreach (DataGridViewRow r in dataGridView2.Rows) {
        if ((int) r.Cells [0].Value != rptIdValue1)
            continue;

        dataGridView2.Rows [r.Index].Selected = true;
        break;
    }
}
----------------------------------------

private void dataGridView1_CellClick (object sender, DataGridViewCellEventArgs e) {
    var rptIdValue1 = (int) dataGridView1.Rows [e.RowIndex].Cells [0].Value;
    foreach (DataGridViewRow r2 in dataGridView2.Rows) {
        if ((int) r2.Cells [0].Value != rptIdValue1)
            continue;

        dataGridView2.Rows [r2.Index].Selected = true;
        dataGridView2.CurrentCell = dataGridView2.Rows [r2.Index].Cells [0];
        break;
    }
    foreach (DataGridViewRow r3 in dataGridView3.Rows) {
        int dgv3Index = (int) dataGridView3.Rows [e.RowIndex].Cells [0].RowIndex;
        if ((int) r3.Cells [0].Value != rptIdValue1)
            continue;

        dataGridView3.Rows [r3.Index].Selected = true;
        dataGridView3.CurrentCell = dataGridView3.Rows [r3.Index].Cells [0];
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25404633_25404898_6_17
25404633_25405766_4_18
Title: C# Generic Class field possible 
----------------------------------------

public void SetFilters (String key, params T [] values) {
    if (key == null || values == null) {
        throw new ArgumentNullException ("Must have filter name and values.");
    }
    if (filters == null)
        filters = new Dictionary < String, IList < T > > ();

    IList < T > fvalues = values.ToList ();
    filters.Add (key, fvalues);
}
----------------------------------------

public void SetFilters (String key, params object [] values) {
    if (key == null || values == null) {
        throw new ArgumentNullException ("Must have filter name and values.");
    }
    if (filters == null) {
        filters = new Dictionary < String, IList > ();
    }
    IList fvalues = values.ToList ();
    filters.Add (key, fvalues);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25415206_25453935_15_35
25415206_25453935_37_61
Title: WeakEventHandler with LINQ and delegate constraint 
----------------------------------------

public static WeakEventHandler Register < TEventSource, TEventListener > (TEventSource senderObject, Action < TEventSource, TEventHandler > registerEvent, Action < TEventSource, TEventHandler > deregisterEvent, TEventListener listeningObject, Action < TEventListener, object, TEventArgs > forwarderAction) where TEventSource : class where TEventListener : class {
    if (senderObject == null)
        throw new ArgumentNullException ("senderObject");

    if (listeningObject == null)
        throw new ArgumentNullException ("listeningObject");

    WeakEventHandler.VerifyDelegate (registerEvent, "registerEvent");
    WeakEventHandler.VerifyDelegate (deregisterEvent, "deregisterEvent");
    WeakEventHandler.VerifyDelegate (forwarderAction, "forwarderAction");
    WeakEventHandler weh = new WeakEventHandler (listeningObject);
    TEventHandler eh = MakeDeregisterCodeAndWeakEventHandler (weh, senderObject, deregisterEvent, forwarderAction);
    registerEvent (senderObject, eh);
    return weh;
}
----------------------------------------

static TEventHandler MakeDeregisterCodeAndWeakEventHandler < TEventSource, TEventListener > (WeakEventHandler weh, TEventSource senderObject, Action < TEventSource, TEventHandler > deregisterEvent, Action < TEventListener, object, TEventArgs > forwarderAction) where TEventSource : class where TEventListener : class {
    Action < object, TEventArgs > eventHandler = (sender, args) = > {
        TEventListener listeningObject = (TEventListener) weh.listeningReference.Target;
        if (listeningObject != null)
            forwarderAction (listeningObject, sender, args);
        else
            weh.Deregister ();

    };
    weh.deregisterCode = delegate {
        deregisterEvent (senderObject, ConvertDelegate (eventHandler));
    };
    return ConvertDelegate (eventHandler);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25417026_25417101_6_20
25417026_25417139_5_23
Title: Mental Approach to solving prime checking? 
----------------------------------------

static void Main () {
    Console.WriteLine ("Prime numbers x, where: 0 < x < 100");
    for (int num = 2; num <= 100; num ++) {
        prime = True;
        for (int div = 2; div <= Math.Sqrt (num); div ++)
            if (num % div == 0)
                prime = False;

        if (prime)
            Console.Write (num.ToString () + ", ");

    }
}
----------------------------------------

static void Main () {
    Console.WriteLine ("This program screens all numbers between 1 and 100 for primes and displays the results.");
    for (var numberToPrimeCheck = 2; numberToPrimeCheck <= 100; numberToPrimeCheck ++) {
        var remainder = 1;
        for (var divisor = 2; divisor <= Math.Sqrt (numberToPrimeCheck); divisor ++) {
            remainder = numberToPrimeCheck % divisor;
            if (remainder == 0) {
                break;
            }
        }
        if (remainder != 0)
            Console.WriteLine (numberToPrimeCheck);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25420343_25420937_1_15
25420343_25421570_1_16
Title: Add two values from two different Lists 
----------------------------------------

public List < decimal > getTotalSellingPrice (int costSheetID) {
    List < decimal > totalSellingPrice = new List < decimal > ();
    decimal bothMarkupAndToms = 0;
    foreach (var i in getMarkupPrice (costSheetID)) {
        bothMarkupAndToms = i;
        foreach (var m in getToms (costSheetID)) {
            bothMarkupAndToms += m;
        }
        totalSellingPrice.Add (Math.Round (bothMarkupAndToms));
    }
    return totalSellingPrice;
}
----------------------------------------

public List < decimal > getTotalSellingPrice (int costSheetID) {
    List < decimal > totalSellingPrice = new List < decimal > ();
    List < object > toms = getToms (costSheetID);
    int j = 0, tomsCount = toms.Count;
    foreach (var i in getMarkupPrice (costSheetID)) {
        if (j >= tomsCount)
            break;

        totalSellingPrice.Add (Math.Round (i + Convert.ToDecimal (toms [j])));
        j ++;
    }
    return totalSellingPrice;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25428005_31613093_35_52
25428005_31613093_9_33
Title: Asp.Net - Identity 2 - Attach files in emails fired by EmailService 
----------------------------------------

public Task SendAsync (IdentityMessage message, IEnumerable < KeyValuePair < string, Stream > > attachments) {
    var myMessage = new SendGridMessage () {From = new MailAddress (from)};
    var credentials = new NetworkCredential (username, pswd);
    var transportWeb = new Web (credentials);
    myMessage.AddTo (message.Destination);
    myMessage.Subject = message.Subject;
    myMessage.Html = message.Body;
    myMessage.Text = message.Body;
    foreach (var attachment in attachments) {
        myMessage.AddAttachment (attachment.Value, attachment.Key);
    }
    return transportWeb.DeliverAsync (myMessage);
}
----------------------------------------

public Task SendAsync (IdentityMessage message) {
    var myMessage = new SendGridMessage () {From = new MailAddress (from)};
    var credentials = new NetworkCredential (username, pswd);
    var transportWeb = new Web (credentials);
    myMessage.AddTo (message.Destination);
    if (_recipients != null) {
        _recipients.ForEach (r = > myMessage.AddTo (string.Format ("{0} {1}", r.Key, r.Value)));
    }
    myMessage.Subject = message.Subject;
    myMessage.Html = message.Body;
    myMessage.Text = message.Body;
    if (_attachments != null) {
        foreach (var attachment in _attachments) {
            myMessage.AddAttachment (attachment.Value, attachment.Key);
        }
    }
    return transportWeb.DeliverAsync (myMessage);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25428005_31613093_54_67
25428005_31613093_9_33
Title: Asp.Net - Identity 2 - Attach files in emails fired by EmailService 
----------------------------------------

public Task SendAsync (IdentityMessage message, KeyValuePair < string, Stream > attachment) {
    var myMessage = new SendGridMessage () {From = new MailAddress (from)};
    var credentials = new NetworkCredential (username, pswd);
    var transportWeb = new Web (credentials);
    myMessage.AddTo (message.Destination);
    myMessage.Subject = message.Subject;
    myMessage.Html = message.Body;
    myMessage.Text = message.Body;
    myMessage.AddAttachment (attachment.Value, attachment.Key);
    return transportWeb.DeliverAsync (myMessage);
}
----------------------------------------

public Task SendAsync (IdentityMessage message) {
    var myMessage = new SendGridMessage () {From = new MailAddress (from)};
    var credentials = new NetworkCredential (username, pswd);
    var transportWeb = new Web (credentials);
    myMessage.AddTo (message.Destination);
    if (_recipients != null) {
        _recipients.ForEach (r = > myMessage.AddTo (string.Format ("{0} {1}", r.Key, r.Value)));
    }
    myMessage.Subject = message.Subject;
    myMessage.Html = message.Body;
    myMessage.Text = message.Body;
    if (_attachments != null) {
        foreach (var attachment in _attachments) {
            myMessage.AddAttachment (attachment.Value, attachment.Key);
        }
    }
    return transportWeb.DeliverAsync (myMessage);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25447165_25447630_1_29
25447165_25448925_1_17
Title: Mix several IEnumerable<T> feeds into one in C# 
----------------------------------------

public IEnumerable < TValue > Mix < TValue > (IEnumerable < TValue > a, IEnumerable < TValue > b) {
    var aEnumerator = a.GetEnumerator ();
    var bEnumerator = b.GetEnumerator ();
    while (true) {
        if (! aEnumerator.MoveNext ()) {
            yield break;
        }
        yield return aEnumerator.Current;
        if (! aEnumerator.MoveNext ()) {
            yield break;
        }
        yield return aEnumerator.Current;
        if (! bEnumerator.MoveNext ()) {
            yield break;
        }
        yield return bEnumerator.Current;
    }
}
----------------------------------------

public IEnumerable < T > Mix < T > (IEnumerable < T > sequenceA, IEnumerable < T > sequenceB, int ratioA, int ratioB) {
    var etorA = sequenceA.GetEnumerator ();
    var etorB = sequenceB.GetEnumerator ();
    bool flag = true;
    while (flag) {
        flag = false;
        for (int i = 0; i < ratioA && (flag |= etorA.MoveNext ()); i ++)
            yield return etorA.Current;

        for (int i = 0; i < ratioB && (flag |= etorB.MoveNext ()); i ++)
            yield return etorB.Current;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25450037_25450161_1_24
25450037_25450548_2_39
Title: C#/MySQL - get a date from database 
----------------------------------------

public string getAge (string Name) {
    connection con = new connection ();
    con.conopen ();
    string Age = "";
    MySqlCommand cmd_getAge = new MySqlCommand ("Select Age from profile where Name = '" + Name + "';", con.con);
    MySqlDataReader Reader = cmd_getAge.ExecuteReader ();
    if (Reader.HasRows) {
        try {
            while (Reader.Read ()) {
                Age = Reader.GetString (0);
            }
        }
        finally {
            Reader.Close ();
            con.conclose ();
        }
    }
    return Age;
}
----------------------------------------

public int getAge (string Name) {
    string sql = "Select Age from profile where Name = @Name ;";
    using (var cn = new MySqlConnection ("connection string here"))
    using (var cmd = new MySqlCommand (sql, cn))
    {
        cmd.Parameters.Add ("@Name", SqlDbType.NVarChar, 50).Value = Name;
        cn.Open ();
        using (var reader = cmd.ExecuteReader ())
        {
            if (reader.Read ()) {
                DateTime origin = Reader.GetDateTime (0);
                int Age = DateTime.Today.Year - origin.Year;
                if (origin > today.AddYears (- Age))
                    Age --;

                return Age;
            }
        }} return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25471521_25471728_5_32
25471521_25472847_3_41
Title: "Split string by commas ignoring any punctuation marks (including '') in quotation marks" 
----------------------------------------

static void Main (string [] args) {
    string [] sentence = new string [] {"apple", "orange", "baboons  cows", " rainbow", "unicorns  gummy bears"};
    Console.WriteLine ("option 1:");
    Console.WriteLine ("————-");
    IEnumerable < string [] > words1 = sentence.Select (w = > w.Split (' '));
    foreach (string [] segment in words1)
        foreach (string word in segment)
            Console.WriteLine (word);

    Console.WriteLine ();
    Console.WriteLine ("option 2:");
    Console.WriteLine ("————-");
    IEnumerable < string > words2 = sentence.SelectMany (segment = > segment.Split (','));
    foreach (var word in words2)
        Console.WriteLine (word);

    IEnumerable < string > words3 = from segment in sentence
        from word in segment.Split (' ')
        select word;
}
----------------------------------------

private static void Main (string [] args) {
    string searchString = @"apple, orange, ""baboons, cows. dogs- hounds"", rainbow, ""unicorns, gummy bears"", abc, defghj";
    char delimeter = ',';
    char excludeSplittingWithin = '"';
    string [] splittedByExcludeSplittingWithin = searchString.Split (excludeSplittingWithin);
    List < string > splittedSearchString = new List < string > ();
    for (int i = 0; i < splittedByExcludeSplittingWithin.Length; i ++) {
        if (i == 0 || splittedByExcludeSplittingWithin [i].StartsWith (delimeter.ToString ())) {
            string [] splitttedByDelimeter = splittedByExcludeSplittingWithin [i].Split (delimeter);
            for (int j = 0; j < splitttedByDelimeter.Length; j ++) {
                splittedSearchString.Add (splitttedByDelimeter [j].Trim ());
            }
        } else {
            splittedSearchString.Add (excludeSplittingWithin + splittedByExcludeSplittingWithin [i] + excludeSplittingWithin);
        }
    }
    foreach (string s in splittedSearchString) {
        if (s.Trim () != string.Empty) {
            Console.WriteLine (s);
        }
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25493091_25500287_1_24
25493091_25500287_26_36
Title: Need algorithm for creating all unique combinations 
----------------------------------------

private static void GetCombination (ref List < string [] > list, string [] t, int n, int m, int [] b, int M) {
    for (int i = n; i >= m; i --) {
        b [m - 1] = i - 1;
        if (m > 1) {
            GetCombination (ref list, t, i - 1, m - 1, b, M);
        } else {
            if (list == null) {
                list = new List < string [] > ();
            }
            string [] temp = new string [M];
            for (int j = 0; j < b.Length; j ++) {
                temp [j] = t [b [j]] + " ";
            }
            list.Add (temp);
        }
    }
}
----------------------------------------

public static List < string [] > GetCombination (string [] t, int n) {
    if (t.Length < n) {
        return null;
    }
    int [] temp = new int [n];
    List < string [] > list = new List < string [] > ();
    GetCombination (ref list, t, t.Length, n, temp, n);
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25498791_25511313_1_15
25498791_25522584_1_18
Title: Create concrete type for abstract property depending on context 
----------------------------------------

[Fact] public void Test () {
    var fixture = new Fixture ();
    fixture.Customize < Plane > (c = > c.With (x = > x.Id, fixture.Create < PlaneId > ()));
    fixture.Customize < Car > (c = > c.With (x = > x.Id, fixture.Create < CarId > ()));
    var plane = fixture.Create < Plane > ();
    var car = fixture.Create < Car > ();
    Assert.IsType < PlaneId > (plane.Id);
    Assert.IsType < CarId > (car.Id);
}
----------------------------------------

[Fact] public void Test () {
    var fixture = new Fixture ();
    fixture.Register < CarId, Car > (id = > {
        var resource = new Car {Id = id};
        return resource;
    });
    fixture.Register < PlaneId, Plane > (id = > {
        var resource = new Plane {Id = id};
        return resource;
    });
    Assert.NotSame (fixture.Create < Car > ().Id, fixture.Create < Car > ().Id);
    Assert.NotSame (fixture.Create < Plane > ().Id, fixture.Create < Plane > ().Id);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25508595_25511003_1_19
25508595_25511392_1_43
Title: Generic Linq to Entities filter method that accepts filter criteria and properties to be filtered 
----------------------------------------

public static IQueryable < T > Match < T > (string searchTerm, IQueryable < T > data, params Expression < Func < T, string > > [] filterProperties) where T : class {
    var predicates = new List < string > ();
    foreach (var prop in filterProperties) {
        var lambda = prop.ToString ();
        var columnName = lambda.Substring (lambda.IndexOf ('.') + 1);
        var predicate = string.Format ("({0} != null && {0}.ToUpper().Contains(@0))", columnName);
        predicates.Add (predicate);
    }
    var filter = string.Join ("||", predicates);
    var results = data.Where (filter, searchTerm);
    return results;
}
----------------------------------------

public static IQueryable < T > Match < T > (this IQueryable < T > data, string searchTerm, params Expression < Func < T, string > > [] filterProperties) {
    var parameter = Expression.Parameter (typeof (T), "source");
    Expression body = null;
    foreach (var prop in filterProperties) {
        var propValue = prop.Body.ReplaceParameters (new Dictionary < ParameterExpression, ParameterExpression > () {{prop.Parameters [0], parameter}});
        var isNull = Expression.NotEqual (propValue, Expression.Constant (null, typeof (string)));
        var searchTuple = Tuple.Create (searchTerm);
        var matchTerm = Expression.Property (Expression.Constant (searchTuple), "Item1");
        var toUpper = Expression.Call (propValue, "ToUpper", null);
        var contains = Expression.Call (toUpper, "Contains", null, matchTerm);
        var and = Expression.AndAlso (isNull, contains);
        body = body == null ? and : Expression.OrElse (body, and);
    }
    if (body != null) {
        var where = Expression.Call (typeof (Queryable), "Where", new [] {typeof (T)}, data.Expression, Expression.Lambda < Func < T, bool > > (body, parameter));
        return data.Provider.CreateQuery < T > (where);
    }
    return data;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25518753_25518849_8_29
25518753_25518898_9_21
Title: Assign List value to a class properties 
----------------------------------------

public static void Main () {
    var listValue = new List < string > () {"Hello", "Hello2", "Hello3",};
    var sampleClass = new SampleClass ();
    var sampleType = sampleClass.GetType ();
    var properties = sampleType.GetProperties ().OrderBy (prop = > prop.Name).ToList ();
    for (int i = 0; i < listValue.Count; i ++) {
        if (i < properties.Count) {
            properties [i].SetValue (sampleClass, listValue [i]);
            Console.WriteLine (properties [i].Name + " = " + listValue [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    List < string > testList = new List < string > ();
    testList.Add ("string1");
    testList.Add ("string2");
    testList.Add ("string3");
    test testObj = new test ();
    var members = testObj.GetType ().GetFields (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
    for (int i = 0; i < members.Length; i ++) {
        members [i].SetValue (testObj, testList [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25518847_25519283_1_13
25518847_25519396_1_12
Title: LINQ - Determine if ListA contains every element from ListB 
----------------------------------------

static bool IsSubsetWithDuplicates < T > (IEnumerable < T > superset, IEnumerable < T > subset) {
    var supersetLookup = superset.ToLookup (a = > a);
    foreach (var subsetGroup in subset.ToLookup (a = > a)) {
        if (subsetGroup.Count () > supersetLookup [subsetGroup.Key].Count ()) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public static IEnumerable < T > IntersectDuplicates < T > (this IEnumerable < T > source, IEnumerable < T > target) {
    List < T > list = target.ToList ();
    foreach (T item in source) {
        if (list.Contains (item)) {
            list.Remove (item);
            yield return item;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25523073_25523443_10_22
25523073_41316483_11_27
Title: Series problems forloop 
----------------------------------------

static void Main (string [] args) {
    var iterations = 50;
    var result = 0;
    for (int i = 0; i < iterations; i ++) {
        result += i;
    }
    Console.WriteLine (result);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    int i = 1;
    Console.WriteLine (i);
    while (i < 10) {
        for (int j = 1; j < 5; j ++) {
            i = i + j;
            Console.WriteLine (i);
        }
        i ++;
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
255341_22230811_7_26
255341_255638_66_75
Title: Getting key of value of a generic Dictionary? 
----------------------------------------

static void Main () {
    var dict = new Dictionary < int, string > ();
    dict.Add (4, "Four");
    dict.Add (5, "Five");
    dict.Add (1, "One");
    dict.Add (11, "One");
    dict.Add (3, "Three");
    dict.Add (2, "Two");
    dict.Add (44, "Four");
    Console.WriteLine ("\n== Enumerating Distinct Values ==");
    foreach (string value in dict.Values.Distinct ()) {
        string valueString = String.Join (", ", GetKeysFromValue (dict, value));
        Console.WriteLine ("{0} => [{1}]", value, valueString);
    }
}
----------------------------------------

static void Main () {
    BiDictionary < int, string > greek = new BiDictionary < int, string > ();
    greek.Add (1, "Alpha");
    greek.Add (2, "Beta");
    greek.Add (5, "Beta");
    ShowEntries (greek, "Alpha");
    ShowEntries (greek, "Beta");
    ShowEntries (greek, "Gamma");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25536312_51135154_14_35
25536312_51135154_1_12
Title: How to store user defined objects using StackExchange.Redis? 
----------------------------------------

public static T GetData < T > (string key) {
    using (var redis = ConnectionMultiplexer.Connect ("localhost:6379"))
    {
        try {
            IDatabase db = redis.GetDatabase ();
            var res = db.StringGet (key);
            redis.Close ();
            if (res.IsNull)
                return default (T);
            else
                return JsonConvert.DeserializeObject < T > (res);

        }
        catch {
            return default (T);
        }
    }}
----------------------------------------

public static void SetData < T > (string key, T data) {
    using (var redis = ConnectionMultiplexer.Connect ("localhost:6379"))
    {
        IDatabase db = redis.GetDatabase ();
        JavaScriptSerializer json_serializer = new JavaScriptSerializer ();
        json_serializer.MaxJsonLength = int.MaxValue;
        db.StringSet (key, json_serializer.Serialize (data));
        redis.Close ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2553663_2553790_1_26
2553663_2556489_1_23
Title: How to determine if birthday or anniversary occurred during date range 
----------------------------------------

public static bool IsBirthdayInRange (DateTime birthday, DateTime min, DateTime max) {
    var dates = new DateTime [] {birthday, min};
    for (int i = 0; i < dates.Length; i ++) {
        if (dates [i].Month == 2 && dates [i].Day == 29) {
            dates [i] = dates [i].AddDays (- 1);
        }
    }
    birthday = dates [0];
    min = dates [1];
    DateTime nLower = new DateTime (min.Year, birthday.Month, birthday.Day);
    DateTime nUpper = new DateTime (max.Year, birthday.Month, birthday.Day);
    if (birthday.Year <= max.Year && ((nLower >= min && nLower <= max) || (nUpper >= min && nUpper <= max))) {
        return true;
    }
    return false;
}
----------------------------------------

public static bool IsBirthdayInRange (DateTime birthday, DateTime from, DateTime to) {
    if (to < from) {
        throw new ArgumentException ("The specified range is not valid");
    }
    int year = from.Year;
    int month = birthday.Month;
    int day = birthday.Day;
    if (from.DayOfYear > to.DayOfYear && birthday.DayOfYear < from.DayOfYear) {
        year ++;
    }
    if (month == 2 && day == 29 && ! DateTime.IsLeapYear (year)) {
        day --;
    }
    DateTime bDate = new DateTime (year, month, day);
    return bDate >= from.Date && bDate <= to.Date;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2554413_2554480_1_14
2554413_2554569_5_18
Title: "C# searching for new Tool for the tool box how to template this code" 
----------------------------------------

public TResult DoCall < TResult, TProvider > (Func < TProvider, TResult > action) where TProvider : class, IProvider {
    TResult ret = default (TResult);
    try {
        var prov = (TProvider) ModelManagerProvider.GetProviderByType (typeof (TProvider));
        ret = action (prov);
    }
    catch (Exception ex) {
        ThrowErrorTool.ThrowError (ex);
    }
    return ret;
}
----------------------------------------

static Result < T > WrapMethod < T > (Func < T > func) {
    try {
        return new Result < T > (func ());
    }
    catch (SomeExceptionBase ex) {
        return new Result < T > (ex.ErrorList);
    }
    catch (Exception ex) {
        return new Result < T > ((List < Error >) null);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2554413_2554480_1_14
2554413_2555704_1_12
Title: "C# searching for new Tool for the tool box how to template this code" 
----------------------------------------

public TResult DoCall < TResult, TProvider > (Func < TProvider, TResult > action) where TProvider : class, IProvider {
    TResult ret = default (TResult);
    try {
        var prov = (TProvider) ModelManagerProvider.GetProviderByType (typeof (TProvider));
        ret = action (prov);
    }
    catch (Exception ex) {
        ThrowErrorTool.ThrowError (ex);
    }
    return ret;
}
----------------------------------------

static Result < T > WrapMethod < T > (Func < LocationDao, Result < T > > func) {
    try {
        var l = new LocationDao ();
        return func (l);
    }
    catch (UpdateException ue) {
        return new Result < T > (default (T), ue.Errors);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2554413_2554569_5_18
2554413_2555704_1_12
Title: "C# searching for new Tool for the tool box how to template this code" 
----------------------------------------

static Result < T > WrapMethod < T > (Func < T > func) {
    try {
        return new Result < T > (func ());
    }
    catch (SomeExceptionBase ex) {
        return new Result < T > (ex.ErrorList);
    }
    catch (Exception ex) {
        return new Result < T > ((List < Error >) null);
    }
}
----------------------------------------

static Result < T > WrapMethod < T > (Func < LocationDao, Result < T > > func) {
    try {
        var l = new LocationDao ();
        return func (l);
    }
    catch (UpdateException ue) {
        return new Result < T > (default (T), ue.Errors);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25580977_25581067_1_18
25580977_25581132_1_14
Title: Dice Simulator int c# 
----------------------------------------

static int RandomGenerator (int n) {
    Random rand1 = new Random ();
    int sum = rand1.Next (1, 7) + rand1.Next (1, 7);
    int count = 1;
    while (sum != n) {
        sum = rand1.Next (1, 7) + rand1.Next (1, 7);
        count ++;
    }
    return count;
}
----------------------------------------

public static int RandomGenerator (int n) {
    Random random = new Random ();
    int sum = 0;
    int count = 0;
    do
        {
            sum = random.Next (1, 7) + random.Next (1, 7);
            count ++;
        } while (sum != n);
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25589863_25589964_1_18
25589863_25590000_1_27
Title: How to pass objects properties into a generic function 
----------------------------------------

public static PropertyInfo GetPropertyInfo < TIn, TOut > (Expression < Func < TIn, TOut > > PropertyExpression) {
    MemberExpression memberExpr;
    switch (PropertyExpression.Body.NodeType) {
        case ExpressionType.MemberAccess :
            memberExpr = (MemberExpression) PropertyExpression.Body;
            break;
        case ExpressionType.Convert :
            memberExpr = (MemberExpression) ((UnaryExpression) PropertyExpression.Body).Operand;
            break;
        default :
            throw new NotSupportedException ();
    }
    var property = (PropertyInfo) memberExpr.Member;
    return property;
}
----------------------------------------

public static B GetProperty < T, B > (this Expression < Func < T, B > > propertySelector, T target) where T : class {
    if (target == null) {
        throw new ArgumentNullException ("target");
    }
    if (propertySelector == null) {
        throw new ArgumentNullException ("propertySelector");
    }
    var memberExpression = propertySelector.Body as MemberExpression;
    if (memberExpression == null) {
        throw new NotSupportedException ("Only member expression is supported.");
    }
    var propertyInfo = memberExpression.Member as PropertyInfo;
    if (propertyInfo == null) {
        throw new NotSupportedException ("You can select property only. Currently, selected member is: " + memberExpression.Member);
    }
    return (B) propertyInfo.GetValue (target);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25589863_25589964_1_18
25589863_25590000_34_59
Title: How to pass objects properties into a generic function 
----------------------------------------

public static PropertyInfo GetPropertyInfo < TIn, TOut > (Expression < Func < TIn, TOut > > PropertyExpression) {
    MemberExpression memberExpr;
    switch (PropertyExpression.Body.NodeType) {
        case ExpressionType.MemberAccess :
            memberExpr = (MemberExpression) PropertyExpression.Body;
            break;
        case ExpressionType.Convert :
            memberExpr = (MemberExpression) ((UnaryExpression) PropertyExpression.Body).Operand;
            break;
        default :
            throw new NotSupportedException ();
    }
    var property = (PropertyInfo) memberExpr.Member;
    return property;
}
----------------------------------------

public static void SetObjectProperty < T, B > (T target, Expression < Func < T, B > > propertySelector, object value) {
    if (target == null) {
        throw new ArgumentNullException ("target");
    }
    if (propertySelector == null) {
        throw new ArgumentNullException ("propertySelector");
    }
    var memberExpression = propertySelector.Body as MemberExpression;
    if (memberExpression == null) {
        throw new NotSupportedException ("Cannot recognize property.");
    }
    var propertyInfo = memberExpression.Member as PropertyInfo;
    if (propertyInfo == null) {
        throw new NotSupportedException ("You can select property only. Currently, selected member is: " + memberExpression.Member);
    }
    propertyInfo.SetValue (target, value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25636946_25644434_19_30
25636946_25644434_1_17
Title: All possible collections of present giving permutations 
----------------------------------------

public static void Shuffle < T > (this IList < T > list) {
    int n = list.Count;
    while (n > 1) {
        n --;
        int k = Rand.Next (n + 1);
        T value = list [k];
        list [k] = list [n];
        list [n] = value;
    }
}
----------------------------------------

public static T PopRandom < T > (this IList < T > list, Func < T, bool > predicate) {
    var predicatedList = list.Where (x = > predicate (x));
    int count = predicatedList.Count ();
    if (count == 0) {
        throw new Exception ();
    }
    T item = predicatedList.ElementAt (Rand.Next (count));
    while (item != null && ! predicate (item)) {
        item = predicatedList.ElementAt (Rand.Next (list.Count));
    }
    list.Remove (item);
    return item;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25674944_25675074_1_11
25674944_25675406_1_11
Title: Checking if a generic IEnumerable is empty 
----------------------------------------

public static bool IsNullOrEmpty (object obj) {
    var e = obj as System.Collections.IEnumerable;
    if (e == null || ! e.GetType ().GetInterfaces ().Any (i = > i.IsGenericType && i.GetGenericTypeDefinition () == typeof (IEnumerable < >)))
        return false;

    foreach (object _ in e) {
        return true;
    }
    return false;
}
----------------------------------------

public static bool IsNullOrEmpty (object obj) {
    ICollection c = obj as ICollection;
    if (c != null) {
        return c.Count == 0;
    }
    IEnumerable e = obj as IEnumerable;
    if (e != null) {
        return ! e.GetEnumerator ().MoveNext ();
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2571716_11080832_12_22
2571716_11080832_1_11
Title: Find Nth occurrence of a character in a string 
----------------------------------------

public static int NthIndexOf (string text, string searchText, int nthindex) {
    int index = - 1;
    try {
        Match m = Regex.Match (text, "((" + searchText + ").*?){" + nthindex + "}");
        if (m.Success)
            index = m.Groups [2].Captures [nthindex - 1].Index;

    }
    catch {
    }
    return index;
}
----------------------------------------

public static int NthIndexOf (string text, char searchChar, int nthindex) {
    int index = - 1;
    try {
        var takeCount = text.TakeWhile (x = > (nthindex -= (x == searchChar ? 1 : 0)) > 0).Count ();
        if (takeCount < text.Length)
            index = takeCount;

    }
    catch {
    }
    return index;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2571716_11080832_12_22
2571716_2572117_1_11
Title: Find Nth occurrence of a character in a string 
----------------------------------------

public static int NthIndexOf (string text, string searchText, int nthindex) {
    int index = - 1;
    try {
        Match m = Regex.Match (text, "((" + searchText + ").*?){" + nthindex + "}");
        if (m.Success)
            index = m.Groups [2].Captures [nthindex - 1].Index;

    }
    catch {
    }
    return index;
}
----------------------------------------

int NthIndexOf (string s, char t, int n) {
    if (n < 0) {
        throw new ArgumentException ();
    }
    if (n == 1) {
        return s.IndexOf (t);
    }
    if (t == "") {
        return 0;
    }
    string et = RegEx.Escape (t);
    string pat = "(?<=" + Microsoft.VisualBasic.StrDup (n - 1, et + @"[.\n]*") + ")" + et;
    Match m = RegEx.Match (s, pat);
    return m.Success ? m.Index : - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2571716_11080832_1_11
2571716_2572117_1_11
Title: Find Nth occurrence of a character in a string 
----------------------------------------

public static int NthIndexOf (string text, char searchChar, int nthindex) {
    int index = - 1;
    try {
        var takeCount = text.TakeWhile (x = > (nthindex -= (x == searchChar ? 1 : 0)) > 0).Count ();
        if (takeCount < text.Length)
            index = takeCount;

    }
    catch {
    }
    return index;
}
----------------------------------------

int NthIndexOf (string s, char t, int n) {
    if (n < 0) {
        throw new ArgumentException ();
    }
    if (n == 1) {
        return s.IndexOf (t);
    }
    if (t == "") {
        return 0;
    }
    string et = RegEx.Escape (t);
    string pat = "(?<=" + Microsoft.VisualBasic.StrDup (n - 1, et + @"[.\n]*") + ")" + et;
    Match m = RegEx.Match (s, pat);
    return m.Success ? m.Index : - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25758282_25758654_1_20
25758282_25865698_1_15
Title: Delete selected file from a folder using checkbox 
----------------------------------------

protected void Button2_Click (object sender, EventArgs e) {
    int nGridRowCount = GridView1.Rows.Count;
    string [] filenames = new string [nGridRowCount];
    int index = 0;
    for (int nSelect = 0; nSelect < nGridRowCount; nSelect ++) {
        GridViewRow row = GridView1.Rows [nSelect];
        if (((CheckBox) (row.Cells [0].Controls [1])).Checked) {
            filenames [index] = GridView1.DataKeys [nSelect] ["Text"].ToString ();
            index ++;
        }
    }
}
----------------------------------------

protected void Button2_Click (object sender, EventArgs e) {
    foreach (GridViewRow di in GridView1.Rows) {
        CheckBox chkId = (CheckBox) di.FindControl ("CheckBox1");
        if (chkId != null) {
            if (chkId.Checked) {
                string fileName = di.Cells [1].Text;
                File.Delete (Server.MapPath ("~/upload/" + TextBox1.Text + "/" + fileName));
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25803956_25930723_18_35
25803956_25945861_1_28
Title: How to prevent MemberInfo.IsDefined from throwing FileNotFoundException on irrelevant attributes? 
----------------------------------------

static void Main (string [] args) {
    var type = typeof (SomeType);
    AppDomain.CurrentDomain.AssemblyResolve += (sender, eventArgs) = > {
        if (eventArgs.Name == "OtherAssemblyY, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null")
            return typeof (Program).Assembly;

        return null;
    };
    Console.WriteLine (type.IsDefined (typeof (XAttribute), true));
    foreach (var attrObject in type.GetCustomAttributes (true)) {
        Console.WriteLine ("Attribute found: {0}, Assembly: {1}", attrObject, attrObject.GetType ().Assembly);
    }
}
----------------------------------------

static void Main (string [] args) {
    var assemblyPath = @"lib\TestC.exe";
    var typeFullname = "TestC.MyClass";
    var attributeFullName = "OptionX.MyXAttribute";
    var assembly = AssemblyDefinition.ReadAssembly (assemblyPath);
    var type = assembly.MainModule.Types.First (t = > t.FullName == typeFullname);
    var attributes = type.CustomAttributes.Where (a = > a.AttributeType.FullName == attributeFullName).ToList ();
    if (attributes.Count == 0) {
        return;
    }
    Console.WriteLine ("Args");
    foreach (var a in attributes)
        foreach (var arg in a.ConstructorArguments)
            Console.WriteLine ("{0}: {1}", arg.Type.Name, arg.Value);

    Console.WriteLine ("Properties");
    foreach (var a in attributes)
        foreach (var p in a.Properties)
            Console.WriteLine ("{0}: {1}", p.Name, p.Argument.Value);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2581059_2581212_1_24
2581059_2581213_1_37
Title: How to retrieve the Description property from SettingsProperty? 
----------------------------------------

public void MyMethod () {
    SettingsPropertyCollection MyAppProperties = Properties.Settings.Default.Properties;
    IEnumerator enumerator = MyAppProperties.GetEnumerator ();
    while (enumerator.MoveNext ()) {
        SettingsProperty property = (SettingsProperty) enumerator.Current;
        ICollection myKeys = property.Attributes.Keys;
        foreach (object theKey in myKeys) {
            if (property.Attributes [theKey].GetType ().Name == "SettingsDescriptionAttribute") {
                SettingsDescriptionAttribute sda = property.Attributes [theKey] as SettingsDescriptionAttribute;
                System.Diagnostics.Debug.Print (sda.Description);
            }
        }
    }
}
----------------------------------------

public void MyMethod () {
    SettingsPropertyCollection MyAppProperties = Properties.Settings.Default.Properties;
    IEnumerator enumerator = MyAppProperties.GetEnumerator ();
    object settingsDescriptionAttribute = null;
    while (enumerator.MoveNext ()) {
        SettingsProperty property = (SettingsProperty) enumerator.Current;
        ICollection myKeys = property.Attributes.Keys;
        foreach (object theKey in myKeys) {
            System.Diagnostics.Debug.Print (theKey.ToString ());
            if (theKey.ToString () == "System.Configuration.SettingsDescriptionAttribute")
                settingsDescriptionAttribute = theKey;

        }
    }
    enumerator.Reset ();
    while (enumerator.MoveNext ()) {
        SettingsProperty property = (SettingsProperty) enumerator.Current;
        string propertyValue = property.DefaultValue.ToString ();
        string propertyDescription = property.Attributes [settingsDescriptionAttribute].ToString ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25818648_25818671_5_27
25818648_25818905_12_36
Title: "Two types of array one is string and the other is int i want to display all the user input values but it print only the last input not all?" 
----------------------------------------

static void Main (string [] args) {
    string [] Namen = new string [5];
    int [] Lefftijd = new int [5];
    int index = 0;
    for (int i = 0; i < Namen.Length; i ++) {
        Console.Write ("Geef de naam : ");
        Namen [index ++] = Console.ReadLine ();
    }
    index = 0;
    for (int j = 0; j < Lefftijd.Length; j ++) {
        Console.Write ("Geef de leeftijd : ");
        Lefftijd [index ++] = Convert.ToInt32 (Console.ReadLine ());
    }
    Console.WriteLine ("De namen zijn  " + Namen.Length + " en aantal leftijden zijn : " + Lefftijd.Length);
    Console.WriteLine ();
    Console.WriteLine ("De naam is : " + Namen [index] + " De leftijd is : " + Lefftijd [index]);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    var data = new List < myData > ();
    for (int i = 0; i < 5; i ++) {
        Console.Write ("Geef de naam : ");
        var naam = Console.ReadLine ();
        Console.Write ("Geef de leeftijd : ");
        var leeftijd = Convert.ToInt32 (Console.ReadLine ());
        data.Add (new myData (naam, leeftijd));
    }
    Console.WriteLine ("De namen zijn  " + data.Count ().ToString ());
    Console.WriteLine ();
    data.ForEach (delegate (myData d) {
        Console.WriteLine ("De naam is : " + d.name + " De leftijd is : " + d.age);
        Console.WriteLine ("De naam is : {0}\tDe leftijd is : {1}", d.name, d.age);
    });
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25821037_30607549_106_129
25821037_30607549_131_154
Title: OpenTK/OpenGL Frustum Culling Clipping Too Soon 
----------------------------------------

public bool VolumeVsFrustum (BoundingVolume volume) {
    for (int i = 0; i < 6; i ++) {
        if (_frustum [i, A] * (volume.X - volume.Width) + _frustum [i, B] * (volume.Y - volume.Height) + _frustum [i, C] * (volume.Z - volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X + volume.Width) + _frustum [i, B] * (volume.Y - volume.Height) + _frustum [i, C] * (volume.Z - volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X - volume.Width) + _frustum [i, B] * (volume.Y + volume.Height) + _frustum [i, C] * (volume.Z - volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X + volume.Width) + _frustum [i, B] * (volume.Y + volume.Height) + _frustum [i, C] * (volume.Z - volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X - volume.Width) + _frustum [i, B] * (volume.Y - volume.Height) + _frustum [i, C] * (volume.Z + volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X + volume.Width) + _frustum [i, B] * (volume.Y - volume.Height) + _frustum [i, C] * (volume.Z + volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X - volume.Width) + _frustum [i, B] * (volume.Y + volume.Height) + _frustum [i, C] * (volume.Z + volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X + volume.Width) + _frustum [i, B] * (volume.Y + volume.Height) + _frustum [i, C] * (volume.Z + volume.Length) + _frustum [i, D] > 0)
            continue;

        return false;
    }
    return true;
}
----------------------------------------

public bool VolumeVsFrustum (Vector3 location, float width, float height, float length) {
    for (int i = 0; i < 6; i ++) {
        if (_frustum [i, A] * (location.X - width) + _frustum [i, B] * (location.Y - height) + _frustum [i, C] * (location.Z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X + width) + _frustum [i, B] * (location.Y - height) + _frustum [i, C] * (location.Z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X - width) + _frustum [i, B] * (location.Y + height) + _frustum [i, C] * (location.Z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X + width) + _frustum [i, B] * (location.Y + height) + _frustum [i, C] * (location.Z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X - width) + _frustum [i, B] * (location.Y - height) + _frustum [i, C] * (location.Z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X + width) + _frustum [i, B] * (location.Y - height) + _frustum [i, C] * (location.Z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X - width) + _frustum [i, B] * (location.Y + height) + _frustum [i, C] * (location.Z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X + width) + _frustum [i, B] * (location.Y + height) + _frustum [i, C] * (location.Z + length) + _frustum [i, D] > 0)
            continue;

        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25821037_30607549_106_129
25821037_30607549_81_104
Title: OpenTK/OpenGL Frustum Culling Clipping Too Soon 
----------------------------------------

public bool VolumeVsFrustum (BoundingVolume volume) {
    for (int i = 0; i < 6; i ++) {
        if (_frustum [i, A] * (volume.X - volume.Width) + _frustum [i, B] * (volume.Y - volume.Height) + _frustum [i, C] * (volume.Z - volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X + volume.Width) + _frustum [i, B] * (volume.Y - volume.Height) + _frustum [i, C] * (volume.Z - volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X - volume.Width) + _frustum [i, B] * (volume.Y + volume.Height) + _frustum [i, C] * (volume.Z - volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X + volume.Width) + _frustum [i, B] * (volume.Y + volume.Height) + _frustum [i, C] * (volume.Z - volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X - volume.Width) + _frustum [i, B] * (volume.Y - volume.Height) + _frustum [i, C] * (volume.Z + volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X + volume.Width) + _frustum [i, B] * (volume.Y - volume.Height) + _frustum [i, C] * (volume.Z + volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X - volume.Width) + _frustum [i, B] * (volume.Y + volume.Height) + _frustum [i, C] * (volume.Z + volume.Length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (volume.X + volume.Width) + _frustum [i, B] * (volume.Y + volume.Height) + _frustum [i, C] * (volume.Z + volume.Length) + _frustum [i, D] > 0)
            continue;

        return false;
    }
    return true;
}
----------------------------------------

public bool VolumeVsFrustum (float x, float y, float z, float width, float height, float length) {
    for (int i = 0; i < 6; i ++) {
        if (_frustum [i, A] * (x - width) + _frustum [i, B] * (y - height) + _frustum [i, C] * (z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x + width) + _frustum [i, B] * (y - height) + _frustum [i, C] * (z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x - width) + _frustum [i, B] * (y + height) + _frustum [i, C] * (z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x + width) + _frustum [i, B] * (y + height) + _frustum [i, C] * (z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x - width) + _frustum [i, B] * (y - height) + _frustum [i, C] * (z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x + width) + _frustum [i, B] * (y - height) + _frustum [i, C] * (z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x - width) + _frustum [i, B] * (y + height) + _frustum [i, C] * (z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x + width) + _frustum [i, B] * (y + height) + _frustum [i, C] * (z + length) + _frustum [i, D] > 0)
            continue;

        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25821037_30607549_131_154
25821037_30607549_81_104
Title: OpenTK/OpenGL Frustum Culling Clipping Too Soon 
----------------------------------------

public bool VolumeVsFrustum (Vector3 location, float width, float height, float length) {
    for (int i = 0; i < 6; i ++) {
        if (_frustum [i, A] * (location.X - width) + _frustum [i, B] * (location.Y - height) + _frustum [i, C] * (location.Z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X + width) + _frustum [i, B] * (location.Y - height) + _frustum [i, C] * (location.Z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X - width) + _frustum [i, B] * (location.Y + height) + _frustum [i, C] * (location.Z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X + width) + _frustum [i, B] * (location.Y + height) + _frustum [i, C] * (location.Z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X - width) + _frustum [i, B] * (location.Y - height) + _frustum [i, C] * (location.Z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X + width) + _frustum [i, B] * (location.Y - height) + _frustum [i, C] * (location.Z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X - width) + _frustum [i, B] * (location.Y + height) + _frustum [i, C] * (location.Z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (location.X + width) + _frustum [i, B] * (location.Y + height) + _frustum [i, C] * (location.Z + length) + _frustum [i, D] > 0)
            continue;

        return false;
    }
    return true;
}
----------------------------------------

public bool VolumeVsFrustum (float x, float y, float z, float width, float height, float length) {
    for (int i = 0; i < 6; i ++) {
        if (_frustum [i, A] * (x - width) + _frustum [i, B] * (y - height) + _frustum [i, C] * (z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x + width) + _frustum [i, B] * (y - height) + _frustum [i, C] * (z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x - width) + _frustum [i, B] * (y + height) + _frustum [i, C] * (z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x + width) + _frustum [i, B] * (y + height) + _frustum [i, C] * (z - length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x - width) + _frustum [i, B] * (y - height) + _frustum [i, C] * (z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x + width) + _frustum [i, B] * (y - height) + _frustum [i, C] * (z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x - width) + _frustum [i, B] * (y + height) + _frustum [i, C] * (z + length) + _frustum [i, D] > 0)
            continue;

        if (_frustum [i, A] * (x + width) + _frustum [i, B] * (y + height) + _frustum [i, C] * (z + length) + _frustum [i, D] > 0)
            continue;

        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25821037_30607549_55_66
25821037_30607549_68_79
Title: OpenTK/OpenGL Frustum Culling Clipping Too Soon 
----------------------------------------

public bool SphereVsFrustum (float x, float y, float z, float radius) {
    for (int p = 0; p < 6; p ++) {
        float d = _frustum [p, 0] * x + _frustum [p, 1] * y + _frustum [p, 2] * z + _frustum [p, 3];
        if (d <= - radius) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public bool SphereVsFrustum (Vector3 location, float radius) {
    for (int p = 0; p < 6; p ++) {
        float d = _frustum [p, 0] * location.X + _frustum [p, 1] * location.Y + _frustum [p, 2] * location.Z + _frustum [p, 3];
        if (d <= - radius) {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25826153_25826514_13_33
25826153_25826514_58_77
Title: WPF get control variables from ListView 
----------------------------------------

public static T FindVisualChild < T > (DependencyObject depObj) where T : Visual {
    if (depObj != null) {
        for (int i = 0; i < VisualTreeHelper.GetChildrenCount (depObj); i ++) {
            DependencyObject child = VisualTreeHelper.GetChild (depObj, i);
            if (child != null && child is T) {
                return (T) child;
            }
            foreach (T childOfChild in FindVisualChildren < T > (child)) {
                return childOfChild;
            }
        }
    }
    return null;
}
----------------------------------------

public static IEnumerable < T > FindVisualChildren < T > (DependencyObject depObj) where T : DependencyObject {
    if (depObj == null)
        yield break;

    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (depObj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (depObj, i);
        if (child != null && child is T) {
            yield return (T) child;
        }
        foreach (T childOfChild in FindVisualChildren < T > (child)) {
            yield return childOfChild;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25826153_25826514_35_56
25826153_25826514_58_77
Title: WPF get control variables from ListView 
----------------------------------------

public static T FindVisualChild < T > (DependencyObject depObj, string name) where T : FrameworkElement {
    if (depObj != null) {
        for (int i = 0; i < VisualTreeHelper.GetChildrenCount (depObj); i ++) {
            DependencyObject child = VisualTreeHelper.GetChild (depObj, i);
            if (child != null && child is T && (child as T).Name.Equals (name)) {
                return (T) child;
            }
            foreach (T childOfChild in FindVisualChildren < T > (child)) {
                if (childOfChild.Name.Equals (name))
                    return childOfChild;

            }
        }
    }
    return null;
}
----------------------------------------

public static IEnumerable < T > FindVisualChildren < T > (DependencyObject depObj) where T : DependencyObject {
    if (depObj == null)
        yield break;

    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (depObj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (depObj, i);
        if (child != null && child is T) {
            yield return (T) child;
        }
        foreach (T childOfChild in FindVisualChildren < T > (child)) {
            yield return childOfChild;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2583062_12476034_1_14
2583062_2583911_4_27
Title: C# Progressbar is not updated accurately in Vista or Windows7 
----------------------------------------

private void timer1_Tick (object sender, EventArgs e) {
    if (progressBar1.Maximum == 1)
        progressBar1.Maximum = 100;

    if (progressBar1.Value == 100) {
        progressBar1.Value = 0;
        return;
    }
    progressBar1.Increment (1);
    if (progressBar1.Value == 100) {
        progressBar1.Value = 1;
        progressBar1.Maximum = 1;
        progressBar1.Update ();
    }
}
----------------------------------------

private void timer1_Tick (object sender, EventArgs e) {
    if (this.progressBar1.Value >= 100) {
        this.timer1.Stop ();
        this.timer1.Enabled = false;
    } else {
        int tempValue = this.progressBar1.Value + 10;
        if (tempValue < 100 && tempValue >= 0) {
            this.progressBar1.Value = tempValue + 1;
            this.progressBar1.Value = tempValue;
        } else if (tempValue >= 100) {
            this.progressBar1.Value = 100;
            this.progressBar1.Value = 99;
            this.progressBar1.Value = 100;
        }
        this.label1.Text = Convert.ToString (this.progressBar1.Value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25833346_25833411_1_18
25833346_25833414_1_17
Title: How can I make that one button click event will actl ike a switch for 3 cases? 
----------------------------------------

public void Console (List < Keys > keys) {
    if (count == 0) {
        count ++;
    } else if (count == 1) {
        count ++;
    } else {
        count = 0;
    }
}
----------------------------------------

public void Console (List < Keys > keys) {
    start = DateTime.Now;
    progressBar1.Maximum = 1;
    progressBar1.Step = 1;
    progressBar1.Value = 0;
    if (command == 0)
        DoRequest (ScreenshotRequest.DannysCommands.NormalOperation);

    if (command == 1)
        DoRequest (ScreenshotRequest.DannysCommands.Displayoverlays);

    if (command == 2)
        DoRequest (ScreenshotRequest.DannysCommands.Dontdisplayoverlays);

    command ++;
    command = command % 3;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25852385_25852469_1_57
25852385_25852509_16_29
Title: "Exception Handiling in Independent functions without stoping the C# Console Application" 
----------------------------------------

static public void Main (string [] args) {
    try {
        for (int i = 0; i < 10; i ++) {
            ONE_IndependentProcess (i);
        }
    }
    catch (System.TimeoutException ex) {
        Console.WriteLine ("System.TimeoutException");
    }
    catch (System.Exception ex) {
        Console.WriteLine ("System.Exception");
    }
    finally {
        Console.WriteLine ("End.");
    }
    try {
        TWO_IndependentProcess ();
    }
    catch (System.TimeoutException ex) {
        Console.WriteLine ("System.TimeoutException");
    }
    catch (System.Exception ex) {
        Console.WriteLine ("System.Exception");
    }
    finally {
        Console.WriteLine ("End.");
    }
    try {
        THR_IndependentProcess ();
    }
    catch (System.TimeoutException ex) {
        Console.WriteLine ("System.TimeoutException");
    }
    catch (System.Exception ex) {
        Console.WriteLine ("System.Exception");
    }
    finally {
        Console.WriteLine ("End.");
    }
}
----------------------------------------

static public void Main (string [] args) {
    WithCatch (() = > {
        for (int i = 0; i < 10; i ++)
            ONE_IndependentProcess (i);

    });
    WithCatch (() = > {
        TWO_IndependentProcess ();
    });
    WithCatch (() = > {
        THR_IndependentProcess ();
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2586309_2586519_1_19
2586309_2586637_1_14
Title: unreachable code detected 
----------------------------------------

private bool ValidateSettings () {
    if (chkDownload.Checked && String.IsNullOrEmpty (txtAppName.Text)) {
        divAppDownloadError.Visible = true;
        return false;
    }
    if (chkpplaORfmp.Checked && String.IsNullOrEmpty (txtfmpORppla.Text)) {
        divXPAAPPDownloadError.Visible = true;
        return false;
    }
    return true;
}
----------------------------------------

private bool ValidateSettings () {
    if ((chkDownload.Checked && String.IsNullOrEmpty (txtAppName.Text)) || (chkpplaORfmp.Checked && String.IsNullOrEmpty (txtfmpORppla.Text))) {
        if (chkDownload.Checked)
            divAppDownloadError.Visible = true;
        else
            divXPAAPPDownloadError.Visible = true;

        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25863459_25946847_28_48
25863459_25946847_53_67
Title: Generic permission manager pattern 
----------------------------------------

public static bool CanI < TEntity > (Abilities ability, TEntity entity, params string [] authorizedRoles) where TEntity : IStoredEntity {
    var principal = Thread.CurrentPrincipal as MyCustomPrincipal;
    if (authorizedRoles.Any (r = > principal.IsInRole (r)))
        return true;

    var user = RepositoryProvider.Get < Account, AccountRepository > ().GetUser (principal.AccountId);
    if (user is Teacher) {
        return Can < Teacher, TEntity > (user as Teacher, ability, entity);
    } else if (user is TrainingCenter) {
        return Can < TrainingCenter, TEntity > (user as TrainingCenter, ability, entity);
    }
    return false;
}
----------------------------------------

public static bool Can < TAccount, TEntity > (TAccount user, Abilities ability, TEntity entity) where TAccount : IAccountOwner where TEntity : IStoredEntity {
    var key = typeof (TAccount).Name + typeof (TEntity).Name;
    if (_authorizations.ContainsKey (key)) {
        var query = (ICanAccessQuery < TAccount, TEntity >) _authorizations [key];
        string methodName = "Can" + ability.ToString ();
        var method = typeof (ICanAccessQuery < TAccount, TEntity >).GetMethod (methodName);
        return (bool) method.Invoke (query, new object [] {user, entity});
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25891373_25893212_8_33
25891373_27956066_8_34
Title: MongoDB C# driver type discriminators with generic class inheriting from non-generic base class 
----------------------------------------

public Type GetActualType (MongoDB.Bson.IO.BsonReader bsonReader, Type nominalType) {
    if (nominalType != typeof (MyAbstractClass))
        throw new Exception ("Cannot use FooDiscriminator for type " + nominalType);

    var ret = nominalType;
    var bookmark = bsonReader.GetBookmark ();
    bsonReader.ReadStartDocument ();
    if (bsonReader.FindElement (ElementName)) {
        var value = bsonReader.ReadString ();
        ret = Type.GetType (value);
        if (ret == null)
            throw new Exception ("Could not find type " + value);

        if (! ret.IsSubclassOf (typeof (MyAbstractClass)))
            throw new Exception ("Database type does not inherit from MyAbstractClass.");

    }
    bsonReader.ReturnToBookmark (bookmark);
    return ret;
}
----------------------------------------

public Type GetActualType (BsonReader bsonReader, Type nominalType) {
    if (nominalType != typeof (IRestriction) && nominalType != typeof (List < IRestriction >))
        throw new Exception ("Cannot use IRestrictionDiscriminatorConvention for type " + nominalType);

    var ret = nominalType;
    var bookmark = bsonReader.GetBookmark ();
    bsonReader.ReadStartDocument ();
    if (bsonReader.FindElement (ElementName)) {
        var value = bsonReader.ReadString ();
        ret = Type.GetType (value);
        if (ret == null)
            throw new Exception ("Could not find type from " + value);

        if (! typeof (IRestriction).IsAssignableFrom (ret) && ! ret.IsSubclassOf (typeof (IRestriction)))
            throw new Exception ("type is not an IRestriction");

    }
    bsonReader.ReturnToBookmark (bookmark);
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25905900_25905964_1_15
25905900_25906027_1_16
Title: Searching inside a subfolder in asp.net 
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    ListBox1.Items.Clear ();
    string [] files = Directory.GetFiles (Server.MapPath ("~/files"), "*.*", SearchOption.AllDirectories);
    foreach (string item in files) {
        string fileName = Path.GetFileName (item);
        if (fileName.ToLower ().Contains (TextBox1.Text.ToLower ())) {
            ListBox1.Items.Add (fileName);
        }
    }
}
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    ListBox1.Items.Clear ();
    DirectoryInfo di = new DirectoryInfo (Server.MapPath ("~/files"));
    FileInfo [] files = di.GetFiles ("*", SearchOption.AllDirectories);
    foreach (FileInfo item in files) {
        string fileName = item.Name;
        if (fileName.ToLower ().Contains (TextBox1.Text.ToLower ())) {
            ListBox1.Items.Add (fileName);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25910641_25929655_37_53
25910641_25929655_6_17
Title: Ouath 2.0 with Asp.net Web Api 2 with only external login like google etc 
----------------------------------------

[Route ("OAuthCallback")] public HttpResponseMessage GetOAuthCallback (string code, string scope) {
    string redirectUri = HttpUtility.UrlEncode ("http://YourWebsiteURL/api/Account/OAuthCallback");
    string postMessage = string.Format ("code={0}&client_id={1}&client_secret={2}&redirect_uri={3}&grant_type=authorization_code", code, _clientId, "YourGoogleSecretCode", redirectUri);
    string jsonMessage;
    using (WebClient client = new WebClient ())
    {
        client.Headers [HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded; charset=utf-8";
        jsonMessage = client.UploadString ("https://accounts.google.com/o/oauth2/token", "POST", postMessage);
    } Token token = JsonConvert.DeserializeObject < Token > (jsonMessage);
}
----------------------------------------

[Route ("Login")] public HttpResponseMessage GetLogin () {
    string scope = HttpUtility.UrlEncode ("Space Seperated list of scopes");
    string redirectUri = HttpUtility.UrlEncode ("http://YourWebsiteURL/api/Account/OAuthCallback");
    string accessType = "Either online or offline";
    string requestUri = string.Format ("https://accounts.google.com/o/oauth2/auth?response_type=code&client_id={0}&redirect_uri={1}&scope={2}&access_type={3}&approval_prompt=auto&include_granted_scopes=true", _clientId, redirectUri, scope, accessType);
    HttpResponseMessage response = Request.CreateResponse (HttpStatusCode.MovedPermanently);
    response.Headers.Location = new Uri (requestUri);
    return response;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25912662_25913554_1_20
25912662_25916454_1_14
Title: Is there a better way to keep a console app from returning besides using while? 
----------------------------------------

static void Main (string [] args) {
    int timeout = 10;
    int timeoutCount = 10;
    while (true) {
        if (timeout == timeoutCount) {
            timeoutCount = 0;
        }
        Thread.Sleep (1000);
        timeoutCount ++;
    }
}
----------------------------------------

static void Main (string [] args) {
    var procs = Process.GetProcessesByName ("LINQPad").ToList ();
    if (procs.Any ()) {
        procs.ForEach (p = > p.EnableRaisingEvents = true);
        procs.ForEach (p = > p.Exited += OnExited);
        procs.ForEach (p = > p.WaitForExit ());
    }
    Console.WriteLine ("All processes exited...");
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2593239_2594050_15_32
2593239_2594417_15_41
Title: Can someone help me with simple algo? 
----------------------------------------

public string Append (string s) {
    if (pos + ChunkSize * 2 > len)
        ChunkSize = len - pos;

    if (s.Length >= ChunkSize) {
        return s;
    } else {
        buff += s;
        if (buff.Length >= ChunkSize) {
            pos += buff.Length;
            string b = buff;
            buff = "";
            return b;
        }
    }
    return null;
}
----------------------------------------

public List < byte [] > Append (byte [] b) {
    if (pos + ChunkSize * 2 > len)
        ChunkSize = len - pos;

    if (b.Length >= ChunkSize) {
        List < byte [] > priv = new List < byte [] > ();
        priv.Add (b);
        return priv;
    } else {
        buff.Add (b);
        int total_size = 0;
        foreach (byte [] inner in buff) {
            total_size += inner.Length;
        }
        if (total_size >= ChunkSize) {
            pos += total_size;
            List < byte [] > temp = new List < byte [] > (buff);
            buff.Clear ();
            return temp;
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25941166_26102348_23_31
25941166_26102348_33_55
Title: Get all pixels of specified color from PictureBox 
----------------------------------------

public static IEnumerable < Point > CountOccurences (this Image @this, int r, int g, int b) {
    if (r < 0 || g < 0 || b < 0)
        throw new ArgumentException ("color values must not be negative");

    if (r > 255 || g > 255 || b > 255)
        throw new ArgumentException ("color values must be below 256");

    return CountOccurences (@this, (byte) r, (byte) g, (byte) b);
}
----------------------------------------

public static unsafe IEnumerable < Point > CountOccurences (this Image @this, byte r, byte g, byte b) {
    Bitmap bitmap = new Bitmap (@this);
    BitmapData bitmapData = bitmap.LockBits (new Rectangle (0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb);
    PixeldataRGB * pointer = (PixeldataRGB *) bitmapData.Scan0;
    List < Point > pointList = new List < Point > ();
    for (int y = 0; y < bitmap.Height; y ++) {
        for (int x = 0; x < bitmap.Width; x ++) {
            PixeldataRGB current = * pointer;
            if (current.r == r && current.g == g && current.b == b)
                pointList.Add (new Point (x, y));

            pointer ++;
        }
    }
    bitmap.Dispose ();
    return pointList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25941166_26102348_23_31
25941166_26102348_57_65
Title: Get all pixels of specified color from PictureBox 
----------------------------------------

public static IEnumerable < Point > CountOccurences (this Image @this, int r, int g, int b) {
    if (r < 0 || g < 0 || b < 0)
        throw new ArgumentException ("color values must not be negative");

    if (r > 255 || g > 255 || b > 255)
        throw new ArgumentException ("color values must be below 256");

    return CountOccurences (@this, (byte) r, (byte) g, (byte) b);
}
----------------------------------------

public static IEnumerable < Point > CountOccurences (this Image @this, int r, int g, int b, int a) {
    if (r < 0 || g < 0 || b < 0 || a < 0)
        throw new ArgumentException ("color and alpha values must not be negative");

    if (r > 255 || g > 255 || b > 255 || a > 255)
        throw new ArgumentException ("color and alpha values must be below 256");

    return CountOccurences (@this, (byte) r, (byte) g, (byte) b, (byte) a);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25941166_26102348_23_31
25941166_26102348_67_89
Title: Get all pixels of specified color from PictureBox 
----------------------------------------

public static IEnumerable < Point > CountOccurences (this Image @this, int r, int g, int b) {
    if (r < 0 || g < 0 || b < 0)
        throw new ArgumentException ("color values must not be negative");

    if (r > 255 || g > 255 || b > 255)
        throw new ArgumentException ("color values must be below 256");

    return CountOccurences (@this, (byte) r, (byte) g, (byte) b);
}
----------------------------------------

public static unsafe IEnumerable < Point > CountOccurences (this Image @this, byte r, byte g, byte b, byte a) {
    Bitmap bitmap = new Bitmap (@this);
    BitmapData bitmapData = bitmap.LockBits (new Rectangle (0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
    PixeldataARGB * pointer = (PixeldataARGB *) bitmapData.Scan0;
    List < Point > pointList = new List < Point > ();
    for (int y = 0; y < bitmap.Height; y ++) {
        for (int x = 0; x < bitmap.Width; x ++) {
            PixeldataARGB current = * pointer;
            if (current.r == r && current.g == g && current.b == b && current.a == a)
                pointList.Add (new Point (x, y));

            pointer ++;
        }
    }
    bitmap.Dispose ();
    return pointList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25941166_26102348_33_55
25941166_26102348_57_65
Title: Get all pixels of specified color from PictureBox 
----------------------------------------

public static unsafe IEnumerable < Point > CountOccurences (this Image @this, byte r, byte g, byte b) {
    Bitmap bitmap = new Bitmap (@this);
    BitmapData bitmapData = bitmap.LockBits (new Rectangle (0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb);
    PixeldataRGB * pointer = (PixeldataRGB *) bitmapData.Scan0;
    List < Point > pointList = new List < Point > ();
    for (int y = 0; y < bitmap.Height; y ++) {
        for (int x = 0; x < bitmap.Width; x ++) {
            PixeldataRGB current = * pointer;
            if (current.r == r && current.g == g && current.b == b)
                pointList.Add (new Point (x, y));

            pointer ++;
        }
    }
    bitmap.Dispose ();
    return pointList;
}
----------------------------------------

public static IEnumerable < Point > CountOccurences (this Image @this, int r, int g, int b, int a) {
    if (r < 0 || g < 0 || b < 0 || a < 0)
        throw new ArgumentException ("color and alpha values must not be negative");

    if (r > 255 || g > 255 || b > 255 || a > 255)
        throw new ArgumentException ("color and alpha values must be below 256");

    return CountOccurences (@this, (byte) r, (byte) g, (byte) b, (byte) a);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25941166_26102348_57_65
25941166_26102348_67_89
Title: Get all pixels of specified color from PictureBox 
----------------------------------------

public static IEnumerable < Point > CountOccurences (this Image @this, int r, int g, int b, int a) {
    if (r < 0 || g < 0 || b < 0 || a < 0)
        throw new ArgumentException ("color and alpha values must not be negative");

    if (r > 255 || g > 255 || b > 255 || a > 255)
        throw new ArgumentException ("color and alpha values must be below 256");

    return CountOccurences (@this, (byte) r, (byte) g, (byte) b, (byte) a);
}
----------------------------------------

public static unsafe IEnumerable < Point > CountOccurences (this Image @this, byte r, byte g, byte b, byte a) {
    Bitmap bitmap = new Bitmap (@this);
    BitmapData bitmapData = bitmap.LockBits (new Rectangle (0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
    PixeldataARGB * pointer = (PixeldataARGB *) bitmapData.Scan0;
    List < Point > pointList = new List < Point > ();
    for (int y = 0; y < bitmap.Height; y ++) {
        for (int x = 0; x < bitmap.Width; x ++) {
            PixeldataARGB current = * pointer;
            if (current.r == r && current.g == g && current.b == b && current.a == a)
                pointList.Add (new Point (x, y));

            pointer ++;
        }
    }
    bitmap.Dispose ();
    return pointList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2594125_13035070_35_59
2594125_22128127_32_83
Title: "Reading text files line by line with exact offset/position reporting" 
----------------------------------------

public string ReadLine () {
    if (_binReader.PeekChar () == - 1)
        return null;

    string line = "";
    int nextChar = _binReader.Read ();
    while (nextChar != - 1) {
        char current = (char) nextChar;
        if (current.Equals ('\n'))
            break;
        else if (current.Equals ('\r')) {
            int pickChar = _binReader.PeekChar ();
            if (pickChar != - 1 && ((char) pickChar).Equals ('\n'))
                nextChar = _binReader.Read ();

            break;
        } else
            line += current;

        nextChar = _binReader.Read ();
    }
    return line;
}
----------------------------------------

public string ReadLine () {
    if (! _stream.CanRead)
        return null;

    if (_processedInBuffer == _informationInBuffer) {
        if (_tail) {
            _processedInBuffer = _buffer.Length;
            _informationInBuffer = 0;
            ReadBuffer ();
        }
        return null;
    }
    var lineEnd = Search (_buffer, _end, _processedInBuffer);
    var haveEnd = true;
    if (lineEnd.HasValue == false && _informationInBuffer + _processedInBuffer < _buffer.Length) {
        if (_tail)
            return null;
        else {
            lineEnd = _informationInBuffer;
            haveEnd = false;
        }
    }
    if (! lineEnd.HasValue) {
        ReadBuffer ();
        if (_informationInBuffer != 0)
            return ReadLine ();

        return null;
    }
    var arr = new byte [lineEnd.Value - _processedInBuffer];
    Array.Copy (_buffer, _processedInBuffer, arr, 0, arr.Length);
    Offset = Offset + lineEnd.Value - _processedInBuffer + (haveEnd ? 1 : 0);
    _processedInBuffer = lineEnd.Value + (haveEnd ? 1 : 0);
    return _encoding.GetString (arr).TrimStart (_bom).TrimEnd ('\r', '\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26012825_26012987_1_16
26012825_26012991_1_13
Title: Is FileInfo a descendant of DirectoryInfo 
----------------------------------------

public bool IsFileDescendantOfDirectory (DirectoryInfo directoryInfo, FileInfo fileInfo) {
    DirectoryInfo d = fileInfo.Directory;
    do
        {
            if (d.FullName.Equals (directoryInfo.FullName, StringComparison.OrdinalIgnoreCase)) {
                return true;
            }
            d = d.Parent;
        } while (d != null);
    return false;
}
----------------------------------------

public static bool IsFileDescendantOfDirectory (FileInfo fileInfo, DirectoryInfo directoryInfo) {
    string path = directoryInfo.FullName.TrimEnd (Path.DirectorySeparatorChar);
    DirectoryInfo dir = fileInfo.Directory;
    while (dir != null) {
        if (dir.FullName.TrimEnd (Path.DirectorySeparatorChar).Equals (path, StringComparison.OrdinalIgnoreCase))
            return true;

        dir = dir.Parent;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2603024_2603070_12_22
2603024_2603072_13_24
Title: How to Automatically re-raise Exceptions 
----------------------------------------

static void Main (string [] args) {
    try {
        ReJoice x = new ReJoice ();
        x.End ();
    }
    catch (Exception e) {
        throw e;
    }
}
----------------------------------------

static void Main (string [] args) {
    try {
        ReJoice x = new ReJoice ();
        x.End ();
    }
    catch (Exception e) {
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2603436_2603485_1_42
2603436_2603490_1_16
Title: using Linq to partition data into arrays 
----------------------------------------

public static IEnumerable < IEnumerable < T > > Segment < T > (IEnumerable < T > sequence, Func < T, T, int, bool > newSegmentIdentifier) {
    var index = - 1;
    using (var iter = sequence.GetEnumerator ())
    {
        var segment = new List < T > ();
        var prevItem = default (T);
        if (iter.MoveNext ()) {
            ++ index;
            segment.Add (iter.Current);
            prevItem = iter.Current;
        }
        while (iter.MoveNext ()) {
            ++ index;
            var isNewSegment = newSegmentIdentifier (iter.Current, prevItem, index);
            prevItem = iter.Current;
            if (! isNewSegment) {
                segment.Add (iter.Current);
                continue;
            }
            yield return segment;
            segment = new List < T > {iter.Current};
        }
        if (segment.Count > 0)
            yield return segment;

    }}
----------------------------------------

public static List < List < T > > PartitionData < T > (T [] arr, Func < T, bool > flagSelector) {
    List < List < T > > output = new List < List < T > > ();
    List < T > partition = null;
    bool first = true;
    foreach (T obj in arr) {
        if (flagSelector (obj) || first) {
            partition = new List < T > ();
            output.Add (partition);
            first = false;
        }
        partition.Add (obj);
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26043373_26043418_1_18
26043373_26043934_1_11
Title: "Error message "" Unreachable code detected"" C-Sharp" 
----------------------------------------

public object Pop () {
    if (StackEmpty ()) {
        throw new Exception ("Error: No nodes to pop from stack");
    }
    object RemoveItem = headNode.Data;
    if (headNode == tailNode) {
        headNode = tailNode = null;
    } else {
        headNode = headNode.Next;
    }
    nbElements --;
    return RemoveItem;
}
----------------------------------------

public object Pop () {
    if (StackEmpty ())
        throw new Exception ("Error: No nodes to pop from stack");

    object RemoveItem = headNode.Data;
    if (headNode == tailNode)
        headNode = tailNode = null;
    else
        headNode = headNode.Next;

    nbElements --;
    return RemoveItem;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26102499_26119428_11_52
26102499_29646597_1_30
Title: Convert web service configuration to code 
----------------------------------------

protected override ServiceEndpoint CreateDescription () {
    ServiceEndpoint serviceEndpoint = base.CreateDescription ();
    ExeConfigurationFileMap executionFileMap = new ExeConfigurationFileMap ();
    executionFileMap.ExeConfigFilename = _configurationPath;
    System.Configuration.Configuration config = ConfigurationManager.OpenMappedExeConfiguration (executionFileMap, ConfigurationUserLevel.None);
    ServiceModelSectionGroup serviceModeGroup = ServiceModelSectionGroup.GetSectionGroup (config);
    ChannelEndpointElement selectedEndpoint = null;
    foreach (ChannelEndpointElement endpoint in serviceModeGroup.Client.Endpoints) {
        if (endpoint.Contract == serviceEndpoint.Contract.ConfigurationName) {
            selectedEndpoint = endpoint;
            break;
        }
    }
    if (selectedEndpoint != null) {
        if (serviceEndpoint.Binding == null) {
            serviceEndpoint.Binding = CreateBinding (selectedEndpoint.Binding, serviceModeGroup);
        }
        if (serviceEndpoint.Address == null) {
            serviceEndpoint.Address = new EndpointAddress (selectedEndpoint.Address, GetIdentity (selectedEndpoint.Identity), selectedEndpoint.Headers.Headers);
        }
        if (serviceEndpoint.Behaviors.Count == 0 && ! String.IsNullOrEmpty (selectedEndpoint.BehaviorConfiguration)) {
            AddBehaviors (selectedEndpoint.BehaviorConfiguration, serviceEndpoint, serviceModeGroup);
        }
        serviceEndpoint.Name = selectedEndpoint.Contract;
    }
    return serviceEndpoint;
}
----------------------------------------

protected override ServiceEndpoint CreateDescription () {
    ServiceEndpoint description = base.CreateDescription ();
    if (CustomisedChannelFactory < TChannel >.ConfigurationPath == null || ! System.IO.File.Exists (CustomisedChannelFactory < TChannel >.ConfigurationPath))
        return base.CreateDescription ();

    ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup (ConfigurationManager.OpenMappedExeConfiguration (new ExeConfigurationFileMap () {ExeConfigFilename = CustomisedChannelFactory < TChannel >.ConfigurationPath}, ConfigurationUserLevel.None));
    ChannelEndpointElement channelEndpointElement1 = (ChannelEndpointElement) null;
    foreach (ChannelEndpointElement channelEndpointElement2 in (ConfigurationElementCollection) sectionGroup.Client.Endpoints) {
        if (channelEndpointElement2.Contract == description.Contract.ConfigurationName) {
            channelEndpointElement1 = channelEndpointElement2;
            break;
        }
    }
    if (channelEndpointElement1 != null) {
        if (description.Binding == null)
            description.Binding = this.CreateBinding (channelEndpointElement1.Binding, channelEndpointElement1.BindingConfiguration, sectionGroup);

        if (description.Address == (EndpointAddress) null)
            description.Address = new EndpointAddress (channelEndpointElement1.Address, this.GetIdentity (channelEndpointElement1.Identity), channelEndpointElement1.Headers.Headers);

        if (description.Behaviors.Count == 0 && ! string.IsNullOrEmpty (channelEndpointElement1.BehaviorConfiguration))
            this.AddBehaviors (channelEndpointElement1.BehaviorConfiguration, description, sectionGroup);

        description.Name = channelEndpointElement1.Contract;
    }
    return description;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26102499_26119428_54_71
26102499_29646597_32_53
Title: Convert web service configuration to code 
----------------------------------------

private Binding CreateBinding (string bindingName, ServiceModelSectionGroup group) {
    BindingCollectionElement bindingElementCollection = group.Bindings [bindingName];
    if (bindingElementCollection.ConfiguredBindings.Count > 0) {
        IBindingConfigurationElement be = bindingElementCollection.ConfiguredBindings [0];
        Binding binding = GetBinding (be);
        if (be != null) {
            be.ApplyConfiguration (binding);
        }
        return binding;
    }
    return null;
}
----------------------------------------

private Binding CreateBinding (string bindingName, string bindingConfigurationName, ServiceModelSectionGroup group) {
    BindingCollectionElement collectionElement = group.Bindings [bindingName];
    if (collectionElement.ConfiguredBindings.Count <= 0)
        return (Binding) null;

    IBindingConfigurationElement configurationElement = null;
    foreach (IBindingConfigurationElement bce in collectionElement.ConfiguredBindings) {
        if (bce.Name.Equals (bindingConfigurationName)) {
            configurationElement = bce;
            break;
        }
    }
    if (configurationElement == null)
        throw new Exception ("BindingConfiguration " + bindingConfigurationName + " not found under binding " + bindingName);

    Binding binding = this.GetBinding (configurationElement);
    if (configurationElement != null)
        configurationElement.ApplyConfiguration (binding);

    return binding;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26143767_26143948_1_14
26143767_26143977_1_19
Title: Why is ExecuteScalar returning NullReferenceException error 
----------------------------------------

public int AddDataScalar (string strU) {
    string strQueryExistence = @"IF EXISTS(SELECT 1 FROM [OB].[h].[OP_PEONS] 
                                 WHERE Executive= @stru) SELECT 1 ELSE SELECT 0";
    int inNum = 0;
    using (SqlConnection con = new SqlConnection (strConn))
    using (SqlCommand cmd = new SqlCommand (strQueryExistence, con))
    {
        con.Open ();
        cmd.Parameters.AddWithValue ("@stru", strU);
        inNum = Convert.ToInt32 (cmd.ExecuteScalar ());
    } return inNum;
}
----------------------------------------

public int AddDataScalar (string strU) {
    using (SqlConnection con = new SqlConnection (strConn))
    {
        con.Open ();
        strQueryExistence = @"SELECT 1
          FROM [OB].[h].[OP_PEONS]
         WHERE Executive = @prm_Executive";
        using (SqlCommand cmd = new SqlCommand (strQueryExistence, con))
        {
            cmd.Parameters.AddWithValue ("@prm_Executive", strU);
            return cmd.ExecuteScalar () == null ? 0 : 1;
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2614837_5803184_14_19
2614837_5803184_6_12
Title: FluentNHibernate mapping of composite foreign keys 
----------------------------------------

public virtual bool Equals (Category other) {
    if (ReferenceEquals (null, other))
        return false;

    if (ReferenceEquals (this, other))
        return true;

    return other.ItemId == ItemId && other.CategoryId == CategoryId;
}
----------------------------------------

public override bool Equals (object obj) {
    if (ReferenceEquals (null, obj))
        return false;

    if (ReferenceEquals (this, obj))
        return true;

    if (obj.GetType () != typeof (Category))
        return false;

    return Equals ((Category) obj);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26151794_26152048_21_33
26151794_26152048_4_19
Title: Compare values in a dictionary of dictionaries 
----------------------------------------

public static SortedList < TKey, double > ComputeGrowth < TKey > (this SortedList < TKey, double > list) {
    var count = list.Count;
    SortedList < TKey, double > newList = new SortedList < TKey, double > (count, list.Comparer);
    for (int i = 0; i < count; i ++) {
        if (i == 0)
            newList.Add (list.Keys [i], 0.0);
        else
            newList.Add (list.Keys [i], (list.Values [i] - list.Values [i - 1]) / list.Values [i - 1]);

    }
    return newList;
}
----------------------------------------

public static IEnumerable < KeyValuePair < TKey, TValue > > Between < TKey, TValue > (this SortedList < TKey, TValue > list, TKey first, TKey last) {
    if (list == null)
        throw new ArgumentNullException ();

    var comparer = list.Comparer;
    var index = list.Keys.BinarySearch (first, comparer);
    if (index < 0)
        index = ~ index;

    for (int count = list.Count; index < count; index ++) {
        var key = list.Keys [index];
        if (comparer.Compare (key, last) > 0)
            break;

        yield return new KeyValuePair < TKey, TValue > (key, list.Values [index]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2617367_2617393_1_16
2617367_2617496_31_39
Title: Taking an element off the stack each method call 
----------------------------------------

public int Pop () {
    if (top < 0) {
        throw new Exception ("Stack underflow...");
    } else {
        table [top] = 0;
        top --;
    }
    return number;
}
----------------------------------------

public T Pop () {
    if (_CurrentPosition < 0)
        throw new Exception ("Stack underflow...");

    T item = _Values [_CurrentPosition];
    _Values [_CurrentPosition] = default (T);
    _CurrentPosition --;
    return item;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26183727_40060232_16_26
26183727_40060232_28_38
Title: "StackExchange.Redis casting RedisValue to byte[] via ""as byte[]"" returns null" 
----------------------------------------

public static byte [] ToByteArray < T > (T obj) {
    if (obj == null)
        return null;

    BinaryFormatter bf = new BinaryFormatter ();
    using (MemoryStream ms = new MemoryStream ())
    {
        bf.Serialize (ms, obj);
        return ms.ToArray ();
    }}
----------------------------------------

public static T FromByteArray < T > (byte [] data) {
    if (data == null)
        return default (T);

    BinaryFormatter bf = new BinaryFormatter ();
    using (MemoryStream ms = new MemoryStream (data))
    {
        object obj = bf.Deserialize (ms);
        return (T) obj;
    }}
----------------------------------------
